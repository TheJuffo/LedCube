
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cc2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00004cc2  00004d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e9  008000a4  008000a4  00004dba  2**0
                  ALLOC
  3 .eeprom       000001f9  00810000  00810000  00004dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002bb0  00000000  00000000  00004fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000096c  00000000  00000000  00007b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000002e0  00000000  00000000  000084d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003983  00000000  00000000  000087b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f85  00000000  00000000  0000c133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001841  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001908  00000000  00000000  0000e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a23  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006eb0  00000000  00000000  00010c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  00017ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__ctors_end>
       4:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
       8:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
       c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      10:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_4>
      14:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      18:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      1c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      20:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      24:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      28:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_10>
      2c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      30:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      34:	0c 94 25 21 	jmp	0x424a	; 0x424a <__vector_13>
      38:	0c 94 c5 20 	jmp	0x418a	; 0x418a <__vector_14>
      3c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      40:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      44:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      48:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      4c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      50:	0c 94 97 01 	jmp	0x32e	; 0x32e <__bad_interrupt>
      54:	b7 1b       	sub	r27, r23
      56:	c1 1b       	sub	r28, r17
      58:	cf 1b       	sub	r28, r31
      5a:	ed 1b       	sub	r30, r29
      5c:	f9 1b       	sub	r31, r25
      5e:	01 1c       	adc	r0, r1
      60:	09 1c       	adc	r0, r9
      62:	39 1c       	adc	r3, r9
      64:	63 1c       	adc	r6, r3
      66:	89 1c       	adc	r8, r9
      68:	d7 1c       	adc	r13, r7
      6a:	e1 1c       	adc	r14, r1
      6c:	ed 1c       	adc	r14, r13
      6e:	f5 1c       	adc	r15, r5
      70:	23 1d       	adc	r18, r3
      72:	77 1d       	adc	r23, r7
      74:	83 1d       	adc	r24, r3
      76:	8e 1d       	adc	r24, r14
      78:	9a 1d       	adc	r25, r10
      7a:	a7 1d       	adc	r26, r7
      7c:	b2 1d       	adc	r27, r2
      7e:	bf 1d       	adc	r27, r15
      80:	cb 1d       	adc	r28, r11
      82:	ce 1d       	adc	r28, r14
      84:	db 1d       	adc	r29, r11
      86:	e3 1d       	adc	r30, r3
      88:	f5 1d       	adc	r31, r5
      8a:	05 a8       	sts	0x85, r16
      8c:	4c cd       	rjmp	.-1384   	; 0xfffffb26 <__eeprom_end+0xff7ef92d>
      8e:	b2 d4       	rcall	.+2404   	; 0x9f4 <setplane+0x1c>
      90:	4e b9       	out	0x0e, r20	; 14
      92:	38 36       	cpi	r19, 0x68	; 104
      94:	a9 02       	muls	r26, r25
      96:	0c 50       	subi	r16, 0x0C	; 12
      98:	b9 91       	ld	r27, Y+
      9a:	86 88       	ldd	r8, Z+22	; 0x16
      9c:	08 3c       	cpi	r16, 0xC8	; 200
      9e:	a6 aa       	sts	0x96, r26
      a0:	aa 2a       	or	r10, r26
      a2:	be 00       	.word	0x00be	; ????
      a4:	00 00       	nop
      a6:	80 3f       	cpi	r24, 0xF0	; 240

000000a8 <paths>:
      a8:	07 06 05 04 03 02 01 00 10 20 30 40 50 60 70 71     ......... 0@P`pq
      b8:	72 73 74 75 76 77 67 57 47 37 27 17 04 03 12 21     rstuvwgWG7'....!
      c8:	30 40 51 62 73 74 65 56 47 37 26 15                 0@QbsteVG7&.

000000d4 <__c.1789>:
      d4:	30 3a 20 52 61 69 6e 0d 0a 00                       0: Rain...

000000de <__c.1793>:
      de:	31 3a 20 52 61 6e 64 6f 6d 20 76 6f 78 65 6c 73     1: Random voxels
      ee:	0d 0a 00                                            ...

000000f1 <__c.1796>:
      f1:	32 3a 20 52 61 6e 64 6f 6d 20 66 69 6c 6c 65 72     2: Random filler
     101:	0d 0a 00                                            ...

00000104 <__c.1799>:
     104:	33 3a 20 5a 20 61 78 69 73 20 75 70 2f 64 6f 77     3: Z axis up/dow
     114:	6e 0d 0a 00                                         n...

00000118 <__c.1802>:
     118:	34 3a 20 57 6f 72 6d 73 71 75 65 65 7a 65 0d 0a     4: Wormsqueeze..
	...

00000129 <__c.1805>:
     129:	35 3a 20 42 6c 69 6e 6b 79 0d 0a 00                 5: Blinky...

00000135 <__c.1808>:
     135:	36 3a 20 42 6f 78 65 73 0d 0a 00                    6: Boxes...

00000140 <__c.1814>:
     140:	37 3a 20 50 6c 61 6e 62 6f 69 6e 67 0d 0a 00        7: Planboing...

0000014f <__c.1817>:
     14f:	38 3a 20 54 65 6c 63 20 73 74 61 69 72 73 0d 0a     8: Telc stairs..
	...

00000160 <__c.1820>:
     160:	39 3a 20 53 75 73 70 65 6e 64 20 72 61 6e 64 6f     9: Suspend rando
     170:	6d 0d 0a 00                                         m...

00000174 <__c.1823>:
     174:	31 30 3a 20 4c 6f 61 64 20 62 61 72 0d 0a 00        10: Load bar...

00000183 <__c.1826>:
     183:	31 31 3a 20 57 6f 72 6d 20 73 71 75 65 65 7a 65     11: Worm squeeze
     193:	0d 0a 00                                            ...

00000196 <__c.1829>:
     196:	31 32 3a 20 53 74 72 69 6e 67 20 66 6c 79 0d 0a     12: String fly..
	...

000001a7 <__c.1831>:
     1a7:	49 4e 53 54 52 55 43 54 41 42 4c 45 53 00           INSTRUCTABLES.

000001b5 <__c.1834>:
     1b5:	31 33 3a 20 47 61 6d 65 20 6f 66 20 4c 69 66 65     13: Game of Life
     1c5:	0d 0a 00                                            ...

000001c8 <__c.1840>:
     1c8:	31 34 3a 20 46 6c 79 69 6e 67 20 62 6f 78 65 73     14: Flying boxes
     1d8:	3f 0d 0a 00                                         ?...

000001dc <__c.1843>:
     1dc:	31 35 3a 20 42 6f 69 6e 67 20 62 6f 69 6e 67 0d     15: Boing boing.
     1ec:	0a 00                                               ..

000001ee <__c.1846>:
     1ee:	31 36 3a 20 53 6d 69 6c 65 79 20 73 70 69 6e 0d     16: Smiley spin.
     1fe:	0a 00                                               ..

00000200 <__c.1849>:
     200:	31 37 3a 20 50 61 74 68 20 73 70 69 72 61 6c 0d     17: Path spiral.
     210:	0a 00                                               ..

00000212 <__c.1852>:
     212:	31 38 3a 20 50 61 74 68 20 62 69 74 6d 61 70 0d     18: Path bitmap.
     222:	0a 00                                               ..

00000224 <__c.1855>:
     224:	31 39 3a 20 53 6d 69 6c 65 79 20 73 70 69 6e 0d     19: Smiley spin.
     234:	0a 00                                               ..

00000236 <__c.1858>:
     236:	32 30 3a 20 50 61 74 68 20 74 65 78 74 0d 0a 00     20: Path text...

00000246 <__c.1861>:
     246:	32 31 3a 20 50 61 74 68 20 74 65 78 74 0d 0a 00     21: Path text...

00000256 <__c.1864>:
     256:	32 32 3a 20 57 6f 72 6d 20 73 71 75 65 65 7a 65     22: Worm squeeze
     266:	0d 0a 00                                            ...

00000269 <__c.1867>:
     269:	32 33 3a 20 53 6d 69 6c 65 79 20 73 70 69 6e 0d     23: Smiley spin.
     279:	0a 00                                               ..

0000027b <__c.1870>:
     27b:	32 34 3a 20 52 61 6e 64 6f 6d 20 73 70 61 72 6b     24: Random spark
     28b:	6c 65 0d 0a 00                                      le...

00000290 <__c.1873>:
     290:	32 35 3a 20 57 6f 72 6d 20 73 71 75 65 65 7a 65     25: Worm squeeze
     2a0:	0d 0a 00                                            ...

000002a3 <__c.1876>:
     2a3:	32 36 3a 20 42 6f 69 6e 67 20 62 6f 69 6e 67 0d     26: Boing boing.
     2b3:	0a 00                                               ..

000002b5 <__c.1879>:
     2b5:	46 61 69 6c 0d 0a 00                                Fail...

000002bc <__c.1881>:
     2bc:	46 41 49 4c 00                                      FAIL.

000002c1 <__c.1943>:
     2c1:	4d 75 73 69 63 20 62 61 72 73 0d 0a 00              Music bars...

000002ce <__c.1947>:
     2ce:	4d 75 73 69 63 20 62 61 6c 6c 0d 0a 00              Music ball...

000002db <__c.1950>:
     2db:	4d 75 73 69 63 20 66 61 69 6c 0d 0a 00              Music fail...

000002e8 <__c.1952>:
     2e8:	4d 55 53 49 43 20 46 41 49 4c 00 00                 MUSIC FAIL..

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf e5       	ldi	r28, 0x5F	; 95
     2fa:	d8 e0       	ldi	r29, 0x08	; 8
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	a0 e6       	ldi	r26, 0x60	; 96
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e2 ec       	ldi	r30, 0xC2	; 194
     308:	fc e4       	ldi	r31, 0x4C	; 76
     30a:	02 c0       	rjmp	.+4      	; 0x310 <__do_copy_data+0x10>
     30c:	05 90       	lpm	r0, Z+
     30e:	0d 92       	st	X+, r0
     310:	a4 3a       	cpi	r26, 0xA4	; 164
     312:	b1 07       	cpc	r27, r17
     314:	d9 f7       	brne	.-10     	; 0x30c <__do_copy_data+0xc>

00000316 <__do_clear_bss>:
     316:	12 e0       	ldi	r17, 0x02	; 2
     318:	a4 ea       	ldi	r26, 0xA4	; 164
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	01 c0       	rjmp	.+2      	; 0x320 <.do_clear_bss_start>

0000031e <.do_clear_bss_loop>:
     31e:	1d 92       	st	X+, r1

00000320 <.do_clear_bss_start>:
     320:	ad 38       	cpi	r26, 0x8D	; 141
     322:	b1 07       	cpc	r27, r17
     324:	e1 f7       	brne	.-8      	; 0x31e <.do_clear_bss_loop>
     326:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <main>
     32a:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <_exit>

0000032e <__bad_interrupt>:
     32e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000332 <__vector_4>:
 * Multiplexer/framebuffer routine
 * This function is called by an interrupt generated by timer 2.
*/

ISR(TIMER2_COMP_vect)
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	2f 93       	push	r18
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
	int i;
    
    // Increment the current_layer counter so that the next layer is
    // drawn the next time this function runs.
    current_layer = (current_layer + 1) % 8;
     346:	80 91 29 01 	lds	r24, 0x0129
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	87 70       	andi	r24, 0x07	; 7
     350:	90 70       	andi	r25, 0x00	; 0
     352:	80 93 29 01 	sts	0x0129, r24
    
    LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
     356:	18 ba       	out	0x18, r1	; 24
    
    // Loop through all 8 bytes of data in the current layer in reverse order
    // and shift it onto the layer.
    for (i = 7; i >= 0; i--)
     358:	87 e0       	ldi	r24, 0x07	; 7
     35a:	90 e0       	ldi	r25, 0x00	; 0
    {
        // Set the shift clock to 0
        SHIFTCLK_ADDR &= ~SHIFTCLK_MASK;
     35c:	97 98       	cbi	0x12, 7	; 18
        // Set the data on the data-bus of the latch array.
        DATA_BUS = cube[current_layer][i];
     35e:	e0 91 29 01 	lds	r30, 0x0129
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	23 e0       	ldi	r18, 0x03	; 3
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	2a 95       	dec	r18
     36c:	e1 f7       	brne	.-8      	; 0x366 <__vector_4+0x34>
     36e:	e8 0f       	add	r30, r24
     370:	f9 1f       	adc	r31, r25
     372:	e7 51       	subi	r30, 0x17	; 23
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	20 81       	ld	r18, Z
     378:	25 bb       	out	0x15, r18	; 21
        // Set the shift clock to 1 to create a rising edge and shift in the data on the data bus.
        SHIFTCLK_ADDR |= SHIFTCLK_MASK;
     37a:	97 9a       	sbi	0x12, 7	; 18
    
    LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
    
    // Loop through all 8 bytes of data in the current layer in reverse order
    // and shift it onto the layer.
    for (i = 7; i >= 0; i--)
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	2f ef       	ldi	r18, 0xFF	; 255
     380:	8f 3f       	cpi	r24, 0xFF	; 255
     382:	92 07       	cpc	r25, r18
     384:	59 f7       	brne	.-42     	; 0x35c <__vector_4+0x2a>
        DATA_BUS = cube[current_layer][i];
        // Set the shift clock to 1 to create a rising edge and shift in the data on the data bus.
        SHIFTCLK_ADDR |= SHIFTCLK_MASK;
    }
    
    LAYER_SELECT = (0x01 << current_layer); // Transistor ON for current layer}
     386:	20 91 29 01 	lds	r18, 0x0129
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <__vector_4+0x62>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	2a 95       	dec	r18
     396:	e2 f7       	brpl	.-8      	; 0x390 <__vector_4+0x5e>
     398:	88 bb       	out	0x18, r24	; 24
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	2f 91       	pop	r18
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <__vector_10>:
 * 2: Sends tick to the delay functions.
 * This function is called by an interrupt generated by timer 0.
 * 
*/
ISR(TIMER0_COMP_vect)
{
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <__vector_10+0x28>
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	bool keyPressed = false;
     3da:	1a 82       	std	Y+2, r1	; 0x02
    bool keyChanged = false;
     3dc:	19 82       	std	Y+1, r1	; 0x01
    
    delay_tick();
     3de:	0e 94 9d 21 	call	0x433a	; 0x433a <delay_tick>

	debug_tick();
     3e2:	0e 94 1e 03 	call	0x63c	; 0x63c <debug_tick>
    
    DebounceKey(&keyChanged, &keyPressed);
     3e6:	ce 01       	movw	r24, r28
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	be 01       	movw	r22, r28
     3ec:	6e 5f       	subi	r22, 0xFE	; 254
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	0e 94 55 22 	call	0x44aa	; 0x44aa <DebounceKey>
    if(keyChanged && keyPressed)
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 23       	and	r24, r24
     3f8:	b1 f0       	breq	.+44     	; 0x426 <__vector_10+0x78>
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	88 23       	and	r24, r24
     3fe:	99 f0       	breq	.+38     	; 0x426 <__vector_10+0x78>
    {
        current_mode++;
     400:	80 91 a8 00 	lds	r24, 0x00A8
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 a8 00 	sts	0x00A8, r24
        current_mode %= NO_OF_MODES;
     40a:	80 91 a8 00 	lds	r24, 0x00A8
     40e:	65 e0       	ldi	r22, 0x05	; 5
     410:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <__udivmodqi4>
     414:	90 93 a8 00 	sts	0x00A8, r25
        if(current_mode == MODE_BINARY)
     418:	80 91 a8 00 	lds	r24, 0x00A8
     41c:	85 30       	cpi	r24, 0x05	; 5
     41e:	19 f4       	brne	.+6      	; 0x426 <__vector_10+0x78>
        {
            override_delay(1);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <override_delay>
        }
    }
}
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <ioinit>:

void ioinit (void)
{
	DDRA = 0x0c;    // EQ AD input and output
     450:	8c e0       	ldi	r24, 0x0C	; 12
     452:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xff;    // Layer select and ISP
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	87 bb       	out	0x17, r24	; 23
    DDRC = 0xff;    // Data port
     458:	84 bb       	out	0x14, r24	; 20
    DDRD = 0xf3;    // RS232, buttons, LEDS and shift clock
     45a:	83 ef       	ldi	r24, 0xF3	; 243
     45c:	81 bb       	out	0x11, r24	; 17
    
    
    PORTA = 0x00;   // EQ AD input pullup off? EQ outputs off
     45e:	1b ba       	out	0x1b, r1	; 27
    PORTB = 0x00;   // Layer select off
     460:	18 ba       	out	0x18, r1	; 24
    PORTC = 0x00;   // Data port off
     462:	15 ba       	out	0x15, r1	; 21
    PORTD = 0x04;   // All outputs off, enable pullup on button
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	82 bb       	out	0x12, r24	; 18
    

	// Timer 0
	// General purpose timer interrupt
	// 14745600/64/230 = 1001 interrupts per second or 1 interrupt every 0,998ms
	OCR0 = 229;
     468:	85 ee       	ldi	r24, 0xE5	; 229
     46a:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= _BV(CS01) | _BV(CS02); // Prescaler = 64.
     46c:	83 b7       	in	r24, 0x33	; 51
     46e:	86 60       	ori	r24, 0x06	; 6
     470:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= _BV(WGM01);            // CTC mode. Reset counter when OCR0 is reached.
     472:	83 b7       	in	r24, 0x33	; 51
     474:	88 60       	ori	r24, 0x08	; 8
     476:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;                   // Initial counter value = 0;
     478:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(OCIE0);            // Enable CTC interrupt.
     47a:	89 b7       	in	r24, 0x39	; 57
     47c:	82 60       	ori	r24, 0x02	; 2
     47e:	89 bf       	out	0x39, r24	; 57

	// Timer 2
	// Frame buffer interrupt
	// 14745600/128/11 = 10472.72 interrupts per second
	// 10472.72/8 = 1309 frames per second
	OCR2 = 10;                      // interrupt at counter = 10
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	83 bd       	out	0x23, r24	; 35
    TCCR2 |= _BV(CS20) | _BV(CS22); // Prescaler = 128.
     484:	85 b5       	in	r24, 0x25	; 37
     486:	85 60       	ori	r24, 0x05	; 5
     488:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= _BV(WGM21);            // CTC mode. Reset counter when OCR2 is reached.
     48a:	85 b5       	in	r24, 0x25	; 37
     48c:	88 60       	ori	r24, 0x08	; 8
     48e:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;                   // initial counter value = 0;
     490:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(OCIE2);            // Enable CTC interrupt.
     492:	89 b7       	in	r24, 0x39	; 57
     494:	80 68       	ori	r24, 0x80	; 128
     496:	89 bf       	out	0x39, r24	; 57

}
     498:	08 95       	ret

0000049a <SelfTest>:

void SelfTest()
{
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
	int i, x, y;

	for(i = 0; i < 7; i++)
     4aa:	c0 e0       	ldi	r28, 0x00	; 0
     4ac:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setplane_z(i);
     4ae:	ce 01       	movw	r24, r28
     4b0:	0e 94 4f 04 	call	0x89e	; 0x89e <setplane_z>
		delay_ms(1000);	
     4b4:	88 ee       	ldi	r24, 0xE8	; 232
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		clrplane_z(i);
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <clrplane_z>

void SelfTest()
{
	int i, x, y;

	for(i = 0; i < 7; i++)
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	c7 30       	cpi	r28, 0x07	; 7
     4c6:	d1 05       	cpc	r29, r1
     4c8:	91 f7       	brne	.-28     	; 0x4ae <SelfTest+0x14>
     4ca:	cc 24       	eor	r12, r12
     4cc:	dd 24       	eor	r13, r13
     4ce:	1d c0       	rjmp	.+58     	; 0x50a <SelfTest+0x70>
	}
	for(x = 0; x <= 7; x++)
	{
		for(y = 0; y <= 7; y++)
		{
			line(x, y, 0, x, y, 7);
     4d0:	c6 01       	movw	r24, r12
     4d2:	be 01       	movw	r22, r28
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	96 01       	movw	r18, r12
     4da:	8e 01       	movw	r16, r28
     4dc:	e7 e0       	ldi	r30, 0x07	; 7
     4de:	ee 2e       	mov	r14, r30
     4e0:	f1 2c       	mov	r15, r1
     4e2:	0e 94 24 07 	call	0xe48	; 0xe48 <line>
			delay_ms(1000);
     4e6:	88 ee       	ldi	r24, 0xE8	; 232
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			fill(0);
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
		delay_ms(1000);	
		clrplane_z(i);
	}
	for(x = 0; x <= 7; x++)
	{
		for(y = 0; y <= 7; y++)
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	c8 30       	cpi	r28, 0x08	; 8
     4f8:	d1 05       	cpc	r29, r1
     4fa:	51 f7       	brne	.-44     	; 0x4d0 <SelfTest+0x36>
	{
		setplane_z(i);
		delay_ms(1000);	
		clrplane_z(i);
	}
	for(x = 0; x <= 7; x++)
     4fc:	08 94       	sec
     4fe:	c1 1c       	adc	r12, r1
     500:	d1 1c       	adc	r13, r1
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	c8 16       	cp	r12, r24
     506:	d1 04       	cpc	r13, r1
     508:	19 f0       	breq	.+6      	; 0x510 <SelfTest+0x76>

void SelfTest()
{
	int i, x, y;

	for(i = 0; i < 7; i++)
     50a:	c0 e0       	ldi	r28, 0x00	; 0
     50c:	d0 e0       	ldi	r29, 0x00	; 0
     50e:	e0 cf       	rjmp	.-64     	; 0x4d0 <SelfTest+0x36>
			line(x, y, 0, x, y, 7);
			delay_ms(1000);
			fill(0);
		}
	}
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	08 95       	ret

00000522 <rs232>:

// Take input from a computer and load it onto the cube buffer
void rs232()
{
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	0f 92       	push	r0
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	38 c0       	rjmp	.+112    	; 0x5a6 <rs232+0x84>
	while (current_mode == MODE_BINARY)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		debug_blink(LED_RED);
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	0e 94 44 03 	call	0x688	; 0x688 <debug_blink>

		// Wait until a byte has been received
		while(!HasChars());
     53c:	0e 94 a9 20 	call	0x4152	; 0x4152 <HasChars>
     540:	88 23       	and	r24, r24
     542:	e1 f3       	breq	.-8      	; 0x53c <rs232+0x1a>
        
		// Load the received byte from rs232 into a buffer.
		receive_char(&tempval);
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	0e 94 32 20 	call	0x4064	; 0x4064 <receive_char>
		// are reset to 0. This way the x and y counters are
		// always the same on the computer and in the cube.
		// To send an 0xff byte, you have to send it twice!

		// Go into sync escape mode
		if (tempval == 0xff)
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	8f 3f       	cpi	r24, 0xFF	; 255
     550:	59 f4       	brne	.+22     	; 0x568 <rs232+0x46>
		{
            // Wait for the next byte
            while(!HasChars());
     552:	0e 94 a9 20 	call	0x4152	; 0x4152 <HasChars>
     556:	88 23       	and	r24, r24
     558:	e1 f3       	breq	.-8      	; 0x552 <rs232+0x30>
            // Get the next byte
            receive_char(&tempval);
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	0e 94 32 20 	call	0x4064	; 0x4064 <receive_char>

            // Sync signal is received.
            // Reset x and y counters to 0.
            if (tempval == 0x00)
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	88 23       	and	r24, r24
     566:	f9 f0       	breq	.+62     	; 0x5a6 <rs232+0x84>
		}

        if (escape == 0)
        {
			// Load data into the current position in the buffer
			fb[x][y] = tempval;
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	f7 01       	movw	r30, r14
     56c:	a3 e0       	ldi	r26, 0x03	; 3
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	aa 95       	dec	r26
     574:	e1 f7       	brne	.-8      	; 0x56e <rs232+0x4c>
     576:	e0 0f       	add	r30, r16
     578:	f1 1f       	adc	r31, r17
     57a:	e7 55       	subi	r30, 0x57	; 87
     57c:	ff 4f       	sbci	r31, 0xFF	; 255
     57e:	80 83       	st	Z, r24

    		// Check if we have reached the limits of the buffer array.
    		if (y == 7)
     580:	07 30       	cpi	r16, 0x07	; 7
     582:	11 05       	cpc	r17, r1
     584:	69 f4       	brne	.+26     	; 0x5a0 <rs232+0x7e>
    		{
    			if (x == 7)
     586:	87 e0       	ldi	r24, 0x07	; 7
     588:	e8 16       	cp	r14, r24
     58a:	f1 04       	cpc	r15, r1
     58c:	19 f4       	brne	.+6      	; 0x594 <rs232+0x72>
    			{
    				// All data is loaded. Reset both counters
    				y = 0;
    				x = 0;
                    // Copy the data onto the cube.
    				tmp2cube();
     58e:	0e 94 34 08 	call	0x1068	; 0x1068 <tmp2cube>
     592:	09 c0       	rjmp	.+18     	; 0x5a6 <rs232+0x84>
    			} 
				else
    			{
    				// A layer is loaded, reset y and increment x.
    				x++;
     594:	08 94       	sec
     596:	e1 1c       	adc	r14, r1
     598:	f1 1c       	adc	r15, r1
    				y = 0;
     59a:	00 e0       	ldi	r16, 0x00	; 0
     59c:	10 e0       	ldi	r17, 0x00	; 0
     59e:	07 c0       	rjmp	.+14     	; 0x5ae <rs232+0x8c>
    			}
    		} 
			else
    		{
    			// We are in the middle of loading a layer. increment y.
    			y++;
     5a0:	0f 5f       	subi	r16, 0xFF	; 255
     5a2:	1f 4f       	sbci	r17, 0xFF	; 255
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <rs232+0x8c>
            // Sync signal is received.
            // Reset x and y counters to 0.
            if (tempval == 0x00)
            {
                x = 0;
				y = 0;
     5a6:	00 e0       	ldi	r16, 0x00	; 0
     5a8:	10 e0       	ldi	r17, 0x00	; 0

            // Sync signal is received.
            // Reset x and y counters to 0.
            if (tempval == 0x00)
            {
                x = 0;
     5aa:	ee 24       	eor	r14, r14
     5ac:	ff 24       	eor	r15, r15
	char tempval;
	int x = 0;
	int y = 0;
    int escape = 0;
	
	while (current_mode == MODE_BINARY)
     5ae:	80 91 a8 00 	lds	r24, 0x00A8
     5b2:	85 30       	cpi	r24, 0x05	; 5
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <rs232+0x96>
     5b6:	bf cf       	rjmp	.-130    	; 0x536 <rs232+0x14>
		else
        {
            escape = 0;
        }
    }
}
     5b8:	0f 90       	pop	r0
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <parse>:
void parse()
{
    char * command;
    int i;
    
    command = strtok(data, " ");
     5c8:	8b e2       	ldi	r24, 0x2B	; 43
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	60 e6       	ldi	r22, 0x60	; 96
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <strtok>
            
        }
    }
    
    
     5d4:	08 95       	ret

000005d6 <read_and_execute>:
    "launcheffect"
};


void read_and_execute()
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	0f 92       	push	r0
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
	char tempChar;
    
	while(HasChars())
     5e0:	14 c0       	rjmp	.+40     	; 0x60a <read_and_execute+0x34>
	{
        receive_char(&tempChar);
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 32 20 	call	0x4064	; 0x4064 <receive_char>
		data[current_pos] = tempChar;
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	e0 91 a4 00 	lds	r30, 0x00A4
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	e5 5d       	subi	r30, 0xD5	; 213
     5f4:	fe 4f       	sbci	r31, 0xFE	; 254
     5f6:	80 83       	st	Z, r24
        
		if(tempChar == '\r')
     5f8:	8d 30       	cpi	r24, 0x0D	; 13
     5fa:	11 f4       	brne	.+4      	; 0x600 <read_and_execute+0x2a>
		{
            parse();
     5fc:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <parse>
		}
        
        current_pos++;
     600:	80 91 a4 00 	lds	r24, 0x00A4
     604:	8f 5f       	subi	r24, 0xFF	; 255
     606:	80 93 a4 00 	sts	0x00A4, r24

void read_and_execute()
{
	char tempChar;
    
	while(HasChars())
     60a:	0e 94 a9 20 	call	0x4152	; 0x4152 <HasChars>
     60e:	88 23       	and	r24, r24
     610:	41 f7       	brne	.-48     	; 0x5e2 <read_and_execute+0xc>
            parse();
		}
        
        current_pos++;
	}
}
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <debug_init>:


void debug_init()
{
	// This variable specifies what the debug LEDs show, from the start they show nothing
	debug_mode = 0;
     61a:	10 92 6c 01 	sts	0x016C, r1

	// This variable specifies whether or not debug leds are active
	debug_active = 1;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 6d 01 	sts	0x016D, r24

	// This variable specifies what the last debug mode was, in order to show debug mode on
	// the debug leds
	last_debug_mode = 1;
     624:	80 93 6e 01 	sts	0x016E, r24
}
     628:	08 95       	ret

0000062a <change_debug_mode>:


void change_debug_mode()
{
	debug_mode = (debug_mode + 1) % NO_OF_DEBUG_MODES;
     62a:	80 91 6c 01 	lds	r24, 0x016C
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	83 70       	andi	r24, 0x03	; 3
     634:	90 70       	andi	r25, 0x00	; 0
     636:	80 93 6c 01 	sts	0x016C, r24
}
     63a:	08 95       	ret

0000063c <debug_tick>:

void debug_tick()
{
	// If debug mode changed
	if(debug_mode != last_debug_mode)
     63c:	90 91 6c 01 	lds	r25, 0x016C
     640:	80 91 6e 01 	lds	r24, 0x016E
     644:	98 17       	cp	r25, r24
     646:	49 f0       	breq	.+18     	; 0x65a <debug_tick+0x1e>
	{
		// disable showing debug info
		debug_active = 0;
     648:	10 92 6d 01 	sts	0x016D, r1

		last_debug_mode = debug_mode;
     64c:	80 91 6c 01 	lds	r24, 0x016C
     650:	80 93 6e 01 	sts	0x016E, r24

		// Restart debug_mode_counter
		debug_mode_counter = DEBUG_MODE_COUNTER_START;
     654:	80 ed       	ldi	r24, 0xD0	; 208
     656:	80 93 6b 01 	sts	0x016B, r24
		//Set the leds to show current debug mode
		//LED_PORT = (debug_mode + 1) << LED_START;
	}

	// If currently showing debug mode instead of debug info
	if(debug_active == 0)
     65a:	80 91 6d 01 	lds	r24, 0x016D
     65e:	88 23       	and	r24, r24
     660:	61 f4       	brne	.+24     	; 0x67a <debug_tick+0x3e>
	{
		debug_mode_counter--;
     662:	80 91 6b 01 	lds	r24, 0x016B
     666:	81 50       	subi	r24, 0x01	; 1
     668:	80 93 6b 01 	sts	0x016B, r24
		// If we're done showing debug mode
		if(debug_mode_counter == 0)
     66c:	80 91 6b 01 	lds	r24, 0x016B
     670:	88 23       	and	r24, r24
     672:	19 f4       	brne	.+6      	; 0x67a <debug_tick+0x3e>
		{
			// Show debug info instead of debug_mode
			debug_active = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 6d 01 	sts	0x016D, r24
     67a:	08 95       	ret

0000067c <send_debug_info>:
	}
}

void send_debug_info(const char * data, uint8_t prgMem)
{
	send_string(data);
     67c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <send_string>
}
     680:	08 95       	ret

00000682 <send_debug_info_p>:

void send_debug_info_p(const char * data)
{
    send_string_p(data);
     682:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <send_string_p>
}
     686:	08 95       	ret

00000688 <debug_blink>:

void debug_blink(uint8_t LEDS)
{

     688:	08 95       	ret

0000068a <inrange>:
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE && z >= 0 && z < CUBE_SIZE)
     68a:	88 30       	cpi	r24, 0x08	; 8
     68c:	91 05       	cpc	r25, r1
     68e:	58 f4       	brcc	.+22     	; 0x6a6 <inrange+0x1c>
     690:	77 fd       	sbrc	r23, 7
     692:	09 c0       	rjmp	.+18     	; 0x6a6 <inrange+0x1c>
     694:	68 30       	cpi	r22, 0x08	; 8
     696:	71 05       	cpc	r23, r1
     698:	34 f4       	brge	.+12     	; 0x6a6 <inrange+0x1c>
     69a:	57 fd       	sbrc	r21, 7
     69c:	06 c0       	rjmp	.+12     	; 0x6aa <inrange+0x20>
	if (inrange(x,y,z))
		fb[z][y] &= ~(1 << x);
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	48 30       	cpi	r20, 0x08	; 8
     6a2:	51 05       	cpc	r21, r1
     6a4:	1c f0       	brlt	.+6      	; 0x6ac <inrange+0x22>
	{
		return 1;
	} else
	{
		// One of the coordinates was outside the cube.
		return 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
     6aa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     6ac:	08 95       	ret

000006ae <tmpclrvoxel>:
		cube[z][y] &= ~(1 << x);
}

// Set a single voxel to OFF
void tmpclrvoxel(int x, int y, int z)
{
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	18 2f       	mov	r17, r24
     6ba:	7b 01       	movw	r14, r22
     6bc:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     6be:	0e 94 45 03 	call	0x68a	; 0x68a <inrange>
     6c2:	88 23       	and	r24, r24
     6c4:	a1 f0       	breq	.+40     	; 0x6ee <tmpclrvoxel+0x40>
		fb[z][y] &= ~(1 << x);
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	cc 0f       	add	r28, r28
     6ca:	dd 1f       	adc	r29, r29
     6cc:	8a 95       	dec	r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <tmpclrvoxel+0x1a>
     6d0:	ce 0d       	add	r28, r14
     6d2:	df 1d       	adc	r29, r15
     6d4:	c7 55       	subi	r28, 0x57	; 87
     6d6:	df 4f       	sbci	r29, 0xFF	; 255
     6d8:	28 81       	ld	r18, Y
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <tmpclrvoxel+0x36>
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	1a 95       	dec	r17
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <tmpclrvoxel+0x32>
     6e8:	80 95       	com	r24
     6ea:	82 23       	and	r24, r18
     6ec:	88 83       	st	Y, r24
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	08 95       	ret

000006fa <clrvoxel>:
		fb[z][y] |= (1 << x);
}

// Set a single voxel to OFF
void clrvoxel(int x, int y, int z)
{
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	18 2f       	mov	r17, r24
     706:	7b 01       	movw	r14, r22
     708:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     70a:	0e 94 45 03 	call	0x68a	; 0x68a <inrange>
     70e:	88 23       	and	r24, r24
     710:	a1 f0       	breq	.+40     	; 0x73a <clrvoxel+0x40>
		cube[z][y] &= ~(1 << x);
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	cc 0f       	add	r28, r28
     716:	dd 1f       	adc	r29, r29
     718:	9a 95       	dec	r25
     71a:	e1 f7       	brne	.-8      	; 0x714 <clrvoxel+0x1a>
     71c:	ce 0d       	add	r28, r14
     71e:	df 1d       	adc	r29, r15
     720:	c7 51       	subi	r28, 0x17	; 23
     722:	df 4f       	sbci	r29, 0xFF	; 255
     724:	28 81       	ld	r18, Y
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	02 c0       	rjmp	.+4      	; 0x730 <clrvoxel+0x36>
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	1a 95       	dec	r17
     732:	e2 f7       	brpl	.-8      	; 0x72c <clrvoxel+0x32>
     734:	80 95       	com	r24
     736:	82 23       	and	r24, r18
     738:	88 83       	st	Y, r24
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	08 95       	ret

00000746 <tmpsetvoxel>:
		cube[z][y] |= (1 << x);
}

// Set a single voxel in the temporary cube buffer to ON
void tmpsetvoxel(int x, int y, int z)
{
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	18 2f       	mov	r17, r24
     752:	7b 01       	movw	r14, r22
     754:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     756:	0e 94 45 03 	call	0x68a	; 0x68a <inrange>
     75a:	88 23       	and	r24, r24
     75c:	99 f0       	breq	.+38     	; 0x784 <tmpsetvoxel+0x3e>
		fb[z][y] |= (1 << x);
     75e:	23 e0       	ldi	r18, 0x03	; 3
     760:	cc 0f       	add	r28, r28
     762:	dd 1f       	adc	r29, r29
     764:	2a 95       	dec	r18
     766:	e1 f7       	brne	.-8      	; 0x760 <tmpsetvoxel+0x1a>
     768:	ce 0d       	add	r28, r14
     76a:	df 1d       	adc	r29, r15
     76c:	c7 55       	subi	r28, 0x57	; 87
     76e:	df 4f       	sbci	r29, 0xFF	; 255
     770:	28 81       	ld	r18, Y
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	02 c0       	rjmp	.+4      	; 0x77c <tmpsetvoxel+0x36>
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	1a 95       	dec	r17
     77e:	e2 f7       	brpl	.-8      	; 0x778 <tmpsetvoxel+0x32>
     780:	28 2b       	or	r18, r24
     782:	28 83       	st	Y, r18
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	08 95       	ret

00000790 <setvoxel>:
#include "draw.h"
#include "string.h"

// Set a single voxel to ON
void setvoxel(int x, int y, int z)
{
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	18 2f       	mov	r17, r24
     79c:	7b 01       	movw	r14, r22
     79e:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     7a0:	0e 94 45 03 	call	0x68a	; 0x68a <inrange>
     7a4:	88 23       	and	r24, r24
     7a6:	99 f0       	breq	.+38     	; 0x7ce <setvoxel+0x3e>
		cube[z][y] |= (1 << x);
     7a8:	33 e0       	ldi	r19, 0x03	; 3
     7aa:	cc 0f       	add	r28, r28
     7ac:	dd 1f       	adc	r29, r29
     7ae:	3a 95       	dec	r19
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <setvoxel+0x1a>
     7b2:	ce 0d       	add	r28, r14
     7b4:	df 1d       	adc	r29, r15
     7b6:	c7 51       	subi	r28, 0x17	; 23
     7b8:	df 4f       	sbci	r29, 0xFF	; 255
     7ba:	28 81       	ld	r18, Y
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <setvoxel+0x36>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	1a 95       	dec	r17
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <setvoxel+0x32>
     7ca:	28 2b       	or	r18, r24
     7cc:	28 83       	st	Y, r18
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	08 95       	ret

000007da <getvoxel>:
	}
}

// Get the current status of a voxel
unsigned char getvoxel(int x, int y, int z)
{
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	18 2f       	mov	r17, r24
     7e6:	7b 01       	movw	r14, r22
     7e8:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     7ea:	0e 94 45 03 	call	0x68a	; 0x68a <inrange>
     7ee:	88 23       	and	r24, r24
     7f0:	91 f0       	breq	.+36     	; 0x816 <getvoxel+0x3c>
	{
		if (cube[z][y] & (1 << x))
     7f2:	43 e0       	ldi	r20, 0x03	; 3
     7f4:	cc 0f       	add	r28, r28
     7f6:	dd 1f       	adc	r29, r29
     7f8:	4a 95       	dec	r20
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <getvoxel+0x1a>
     7fc:	ce 0d       	add	r28, r14
     7fe:	df 1d       	adc	r29, r15
     800:	c7 51       	subi	r28, 0x17	; 23
     802:	df 4f       	sbci	r29, 0xFF	; 255
     804:	88 81       	ld	r24, Y
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <getvoxel+0x34>
     80a:	95 95       	asr	r25
     80c:	87 95       	ror	r24
     80e:	1a 95       	dec	r17
     810:	e2 f7       	brpl	.-8      	; 0x80a <getvoxel+0x30>
		{
			return 1;
     812:	81 70       	andi	r24, 0x01	; 1
     814:	01 c0       	rjmp	.+2      	; 0x818 <getvoxel+0x3e>
		{
			return 0;
		}
	} else
	{
		return 0;
     816:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	08 95       	ret

00000824 <altervoxel>:

// In some effect we want to just take bool and write it to a voxel
// this function calls the apropriate voxel manipulation function.
void altervoxel(int x, int y, int z, int state)
{
	if (state == 1)
     824:	21 30       	cpi	r18, 0x01	; 1
     826:	31 05       	cpc	r19, r1
     828:	19 f4       	brne	.+6      	; 0x830 <altervoxel+0xc>
	{
		setvoxel(x,y,z);
     82a:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
     82e:	08 95       	ret
	} else
	{
		clrvoxel(x,y,z);
     830:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
     834:	08 95       	ret

00000836 <flpvoxel>:
}

// Flip the state of a voxel.
// If the voxel is 1, its turned into a 0, and vice versa.
void flpvoxel(int x, int y, int z)
{
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	18 2f       	mov	r17, r24
     842:	7b 01       	movw	r14, r22
     844:	ea 01       	movw	r28, r20
	if (inrange(x, y, z))
     846:	0e 94 45 03 	call	0x68a	; 0x68a <inrange>
     84a:	88 23       	and	r24, r24
     84c:	99 f0       	breq	.+38     	; 0x874 <__stack+0x15>
		cube[z][y] ^= (1 << x);
     84e:	53 e0       	ldi	r21, 0x03	; 3
     850:	cc 0f       	add	r28, r28
     852:	dd 1f       	adc	r29, r29
     854:	5a 95       	dec	r21
     856:	e1 f7       	brne	.-8      	; 0x850 <flpvoxel+0x1a>
     858:	ce 0d       	add	r28, r14
     85a:	df 1d       	adc	r29, r15
     85c:	c7 51       	subi	r28, 0x17	; 23
     85e:	df 4f       	sbci	r29, 0xFF	; 255
     860:	28 81       	ld	r18, Y
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	1a 95       	dec	r17
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	28 27       	eor	r18, r24
     872:	28 83       	st	Y, r18
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	08 95       	ret

00000880 <argorder>:
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     880:	68 17       	cp	r22, r24
     882:	79 07       	cpc	r23, r25
     884:	2c f4       	brge	.+10     	; 0x890 <argorder+0x10>
     886:	f8 2f       	mov	r31, r24
     888:	e9 2f       	mov	r30, r25
     88a:	cb 01       	movw	r24, r22
     88c:	6f 2f       	mov	r22, r31
     88e:	7e 2f       	mov	r23, r30
		int tmp;
		tmp = ix1;
		ix1= ix2;
		ix2 = tmp;
	}
	*ox1 = ix1;
     890:	fa 01       	movw	r30, r20
     892:	91 83       	std	Z+1, r25	; 0x01
     894:	80 83       	st	Z, r24
	*ox2 = ix2;
     896:	f9 01       	movw	r30, r18
     898:	71 83       	std	Z+1, r23	; 0x01
     89a:	60 83       	st	Z, r22
}
     89c:	08 95       	ret

0000089e <setplane_z>:
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z >= 0 && z < CUBE_SIZE)
     89e:	88 30       	cpi	r24, 0x08	; 8
     8a0:	91 05       	cpc	r25, r1
     8a2:	88 f4       	brcc	.+34     	; 0x8c6 <setplane_z+0x28>
	{
		for (i = 0; i < CUBE_SIZE; i++)
		{
			cube[z][i] = 0xff;
     8a4:	fc 01       	movw	r30, r24
     8a6:	63 e0       	ldi	r22, 0x03	; 3
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	6a 95       	dec	r22
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <setplane_z+0xa>
     8b0:	e7 51       	subi	r30, 0x17	; 23
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	80 83       	st	Z, r24
     8b8:	81 83       	std	Z+1, r24	; 0x01
     8ba:	82 83       	std	Z+2, r24	; 0x02
     8bc:	83 83       	std	Z+3, r24	; 0x03
     8be:	84 83       	std	Z+4, r24	; 0x04
     8c0:	85 83       	std	Z+5, r24	; 0x05
     8c2:	86 83       	std	Z+6, r24	; 0x06
     8c4:	87 83       	std	Z+7, r24	; 0x07
     8c6:	08 95       	ret

000008c8 <clrplane_z>:

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     8c8:	88 30       	cpi	r24, 0x08	; 8
     8ca:	91 05       	cpc	r25, r1
     8cc:	80 f4       	brcc	.+32     	; 0x8ee <clrplane_z+0x26>
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
     8ce:	fc 01       	movw	r30, r24
     8d0:	73 e0       	ldi	r23, 0x03	; 3
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	7a 95       	dec	r23
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <clrplane_z+0xa>
     8da:	e7 51       	subi	r30, 0x17	; 23
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	10 82       	st	Z, r1
     8e0:	11 82       	std	Z+1, r1	; 0x01
     8e2:	12 82       	std	Z+2, r1	; 0x02
     8e4:	13 82       	std	Z+3, r1	; 0x03
     8e6:	14 82       	std	Z+4, r1	; 0x04
     8e8:	15 82       	std	Z+5, r1	; 0x05
     8ea:	16 82       	std	Z+6, r1	; 0x06
     8ec:	17 82       	std	Z+7, r1	; 0x07
     8ee:	08 95       	ret

000008f0 <setplane_x>:

void setplane_x (int x)
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	91 05       	cpc	r25, r1
     8f4:	30 f5       	brcc	.+76     	; 0x942 <setplane_x+0x52>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <setplane_x+0x10>
     8fc:	22 0f       	add	r18, r18
     8fe:	33 1f       	adc	r19, r19
     900:	8a 95       	dec	r24
     902:	e2 f7       	brpl	.-8      	; 0x8fc <setplane_x+0xc>
     904:	72 2f       	mov	r23, r18
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	12 c0       	rjmp	.+36     	; 0x930 <setplane_x+0x40>
     90c:	fc 01       	movw	r30, r24
     90e:	e2 0f       	add	r30, r18
     910:	f3 1f       	adc	r31, r19
     912:	e7 51       	subi	r30, 0x17	; 23
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	60 81       	ld	r22, Z
     918:	67 2b       	or	r22, r23
     91a:	60 83       	st	Z, r22
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	28 30       	cpi	r18, 0x08	; 8
     922:	31 05       	cpc	r19, r1
     924:	99 f7       	brne	.-26     	; 0x90c <setplane_x+0x1c>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     926:	4f 5f       	subi	r20, 0xFF	; 255
     928:	5f 4f       	sbci	r21, 0xFF	; 255
     92a:	48 30       	cpi	r20, 0x08	; 8
     92c:	51 05       	cpc	r21, r1
     92e:	49 f0       	breq	.+18     	; 0x942 <setplane_x+0x52>
			cube[z][i] = 0x00;
	}
}

void setplane_x (int x)
{
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     934:	ca 01       	movw	r24, r20
     936:	e3 e0       	ldi	r30, 0x03	; 3
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	ea 95       	dec	r30
     93e:	e1 f7       	brne	.-8      	; 0x938 <setplane_x+0x48>
     940:	e5 cf       	rjmp	.-54     	; 0x90c <setplane_x+0x1c>
     942:	08 95       	ret

00000944 <clrplane_x>:

void clrplane_x (int x)
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     944:	88 30       	cpi	r24, 0x08	; 8
     946:	91 05       	cpc	r25, r1
     948:	38 f5       	brcc	.+78     	; 0x998 <clrplane_x+0x54>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <clrplane_x+0x10>
     950:	22 0f       	add	r18, r18
     952:	33 1f       	adc	r19, r19
     954:	8a 95       	dec	r24
     956:	e2 f7       	brpl	.-8      	; 0x950 <clrplane_x+0xc>
     958:	72 2f       	mov	r23, r18
     95a:	70 95       	com	r23
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	12 c0       	rjmp	.+36     	; 0x986 <clrplane_x+0x42>
     962:	fc 01       	movw	r30, r24
     964:	e2 0f       	add	r30, r18
     966:	f3 1f       	adc	r31, r19
     968:	e7 51       	subi	r30, 0x17	; 23
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	60 81       	ld	r22, Z
     96e:	67 23       	and	r22, r23
     970:	60 83       	st	Z, r22
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     972:	2f 5f       	subi	r18, 0xFF	; 255
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	28 30       	cpi	r18, 0x08	; 8
     978:	31 05       	cpc	r19, r1
     97a:	99 f7       	brne	.-26     	; 0x962 <clrplane_x+0x1e>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	48 30       	cpi	r20, 0x08	; 8
     982:	51 05       	cpc	r21, r1
     984:	49 f0       	breq	.+18     	; 0x998 <clrplane_x+0x54>
		}
	}
}

void clrplane_x (int x)
{
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
     98a:	ca 01       	movw	r24, r20
     98c:	f3 e0       	ldi	r31, 0x03	; 3
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	fa 95       	dec	r31
     994:	e1 f7       	brne	.-8      	; 0x98e <clrplane_x+0x4a>
     996:	e5 cf       	rjmp	.-54     	; 0x962 <clrplane_x+0x1e>
     998:	08 95       	ret

0000099a <setplane_y>:
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     99a:	88 30       	cpi	r24, 0x08	; 8
     99c:	91 05       	cpc	r25, r1
     99e:	60 f4       	brcc	.+24     	; 0x9b8 <setplane_y+0x1e>
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
     9a0:	fc 01       	movw	r30, r24
     9a2:	e7 51       	subi	r30, 0x17	; 23
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	80 83       	st	Z, r24
     9aa:	80 87       	std	Z+8, r24	; 0x08
     9ac:	80 8b       	std	Z+16, r24	; 0x10
     9ae:	80 8f       	std	Z+24, r24	; 0x18
     9b0:	80 a3       	lds	r24, 0x50
     9b2:	80 a7       	lds	r24, 0x70
     9b4:	80 ab       	sts	0x50, r24
     9b6:	80 af       	sts	0x70, r24
     9b8:	08 95       	ret

000009ba <clrplane_y>:
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     9ba:	88 30       	cpi	r24, 0x08	; 8
     9bc:	91 05       	cpc	r25, r1
     9be:	58 f4       	brcc	.+22     	; 0x9d6 <clrplane_y+0x1c>
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
     9c0:	fc 01       	movw	r30, r24
     9c2:	e7 51       	subi	r30, 0x17	; 23
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	10 82       	st	Z, r1
     9c8:	10 86       	std	Z+8, r1	; 0x08
     9ca:	10 8a       	std	Z+16, r1	; 0x10
     9cc:	10 8e       	std	Z+24, r1	; 0x18
     9ce:	10 a2       	lds	r17, 0x90
     9d0:	10 a6       	lds	r17, 0xb0
     9d2:	10 aa       	sts	0x90, r17
     9d4:	10 ae       	sts	0xb0, r17
     9d6:	08 95       	ret

000009d8 <setplane>:
	}
}

void setplane (char axis, unsigned char i)
{
     9d8:	98 2f       	mov	r25, r24
     9da:	86 2f       	mov	r24, r22
    switch (axis)
     9dc:	99 37       	cpi	r25, 0x79	; 121
     9de:	41 f0       	breq	.+16     	; 0x9f0 <setplane+0x18>
     9e0:	9a 37       	cpi	r25, 0x7A	; 122
     9e2:	51 f0       	breq	.+20     	; 0x9f8 <setplane+0x20>
     9e4:	98 37       	cpi	r25, 0x78	; 120
     9e6:	59 f4       	brne	.+22     	; 0x9fe <setplane+0x26>
    {
        case AXIS_X:
            setplane_x(i);
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 78 04 	call	0x8f0	; 0x8f0 <setplane_x>
            break;
     9ee:	08 95       	ret
        
       case AXIS_Y:
            setplane_y(i);
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 cd 04 	call	0x99a	; 0x99a <setplane_y>
            break;
     9f6:	08 95       	ret

       case AXIS_Z:
            setplane_z(i);
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 4f 04 	call	0x89e	; 0x89e <setplane_z>
     9fe:	08 95       	ret

00000a00 <clrplane>:
            break;
    }
}

void clrplane (char axis, unsigned char i)
{
     a00:	98 2f       	mov	r25, r24
     a02:	86 2f       	mov	r24, r22
    switch (axis)
     a04:	99 37       	cpi	r25, 0x79	; 121
     a06:	41 f0       	breq	.+16     	; 0xa18 <clrplane+0x18>
     a08:	9a 37       	cpi	r25, 0x7A	; 122
     a0a:	51 f0       	breq	.+20     	; 0xa20 <clrplane+0x20>
     a0c:	98 37       	cpi	r25, 0x78	; 120
     a0e:	59 f4       	brne	.+22     	; 0xa26 <clrplane+0x26>
    {
        case AXIS_X:
            clrplane_x(i);
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 a2 04 	call	0x944	; 0x944 <clrplane_x>
            break;
     a16:	08 95       	ret
        
       case AXIS_Y:
            clrplane_y(i);
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <clrplane_y>
            break;
     a1e:	08 95       	ret

       case AXIS_Z:
            clrplane_z(i);
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 64 04 	call	0x8c8	; 0x8c8 <clrplane_z>
     a26:	08 95       	ret

00000a28 <fill>:
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     a2c:	f9 01       	movw	r30, r18
     a2e:	a3 e0       	ldi	r26, 0x03	; 3
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	aa 95       	dec	r26
     a36:	e1 f7       	brne	.-8      	; 0xa30 <fill+0x8>
     a38:	e7 51       	subi	r30, 0x17	; 23
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	80 83       	st	Z, r24
     a3e:	81 83       	std	Z+1, r24	; 0x01
     a40:	82 83       	std	Z+2, r24	; 0x02
     a42:	83 83       	std	Z+3, r24	; 0x03
     a44:	84 83       	std	Z+4, r24	; 0x04
     a46:	85 83       	std	Z+5, r24	; 0x05
     a48:	86 83       	std	Z+6, r24	; 0x06
     a4a:	87 83       	std	Z+7, r24	; 0x07
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     a4c:	2f 5f       	subi	r18, 0xFF	; 255
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	28 30       	cpi	r18, 0x08	; 8
     a52:	31 05       	cpc	r19, r1
     a54:	59 f7       	brne	.-42     	; 0xa2c <fill+0x4>
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
		}
	}
}
     a56:	08 95       	ret

00000a58 <tmpfill>:

void tmpfill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
     a5c:	f9 01       	movw	r30, r18
     a5e:	b3 e0       	ldi	r27, 0x03	; 3
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	ba 95       	dec	r27
     a66:	e1 f7       	brne	.-8      	; 0xa60 <tmpfill+0x8>
     a68:	e7 55       	subi	r30, 0x57	; 87
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 83       	st	Z, r24
     a6e:	81 83       	std	Z+1, r24	; 0x01
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	83 83       	std	Z+3, r24	; 0x03
     a74:	84 83       	std	Z+4, r24	; 0x04
     a76:	85 83       	std	Z+5, r24	; 0x05
     a78:	86 83       	std	Z+6, r24	; 0x06
     a7a:	87 83       	std	Z+7, r24	; 0x07

void tmpfill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     a7c:	2f 5f       	subi	r18, 0xFF	; 255
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	28 30       	cpi	r18, 0x08	; 8
     a82:	31 05       	cpc	r19, r1
     a84:	59 f7       	brne	.-42     	; 0xa5c <tmpfill+0x4>
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
		}
	}
}
     a86:	08 95       	ret

00000a88 <byteline>:

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     a88:	6f 5f       	subi	r22, 0xFF	; 255
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	a9 01       	movw	r20, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <byteline+0x10>
     a94:	44 0f       	add	r20, r20
     a96:	55 1f       	adc	r21, r21
     a98:	6a 95       	dec	r22
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <byteline+0xc>
     a9c:	ba 01       	movw	r22, r20
     a9e:	60 95       	com	r22
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <byteline+0x1e>
     aa2:	22 0f       	add	r18, r18
     aa4:	33 1f       	adc	r19, r19
     aa6:	8a 95       	dec	r24
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <byteline+0x1a>
}
     aaa:	86 2f       	mov	r24, r22
     aac:	82 23       	and	r24, r18
     aae:	08 95       	ret

00000ab0 <box_wireframe>:
}

// Draw a wireframe box. This only draws the corners and edges,
// no walls.
void box_wireframe(int x1, int y1, int z1, int x2, int y2, int z2)
{
     ab0:	6f 92       	push	r6
     ab2:	7f 92       	push	r7
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	4c 01       	movw	r8, r24
     ace:	5b 01       	movw	r10, r22
     ad0:	3a 01       	movw	r6, r20
     ad2:	69 01       	movw	r12, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     ad4:	28 17       	cp	r18, r24
     ad6:	39 07       	cpc	r19, r25
     ad8:	2c f4       	brge	.+10     	; 0xae4 <box_wireframe+0x34>
     ada:	98 2f       	mov	r25, r24
     adc:	89 2d       	mov	r24, r9
     ade:	49 01       	movw	r8, r18
     ae0:	c9 2e       	mov	r12, r25
     ae2:	d8 2e       	mov	r13, r24
     ae4:	0a 15       	cp	r16, r10
     ae6:	1b 05       	cpc	r17, r11
     ae8:	2c f4       	brge	.+10     	; 0xaf4 <box_wireframe+0x44>
     aea:	9a 2d       	mov	r25, r10
     aec:	8b 2d       	mov	r24, r11
     aee:	58 01       	movw	r10, r16
     af0:	09 2f       	mov	r16, r25
     af2:	18 2f       	mov	r17, r24
     af4:	e6 14       	cp	r14, r6
     af6:	f7 04       	cpc	r15, r7
     af8:	2c f4       	brge	.+10     	; 0xb04 <box_wireframe+0x54>
     afa:	96 2d       	mov	r25, r6
     afc:	87 2d       	mov	r24, r7
     afe:	37 01       	movw	r6, r14
     b00:	e9 2e       	mov	r14, r25
     b02:	f8 2e       	mov	r15, r24
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	// Lines along X axis
	cube[z1][y1] = byteline(x1,x2);
     b04:	c4 01       	movw	r24, r8
     b06:	b6 01       	movw	r22, r12
     b08:	0e 94 44 05 	call	0xa88	; 0xa88 <byteline>
     b0c:	28 2f       	mov	r18, r24
     b0e:	c3 01       	movw	r24, r6
     b10:	c3 e0       	ldi	r28, 0x03	; 3
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	ca 95       	dec	r28
     b18:	e1 f7       	brne	.-8      	; 0xb12 <box_wireframe+0x62>
     b1a:	fc 01       	movw	r30, r24
     b1c:	ea 0d       	add	r30, r10
     b1e:	fb 1d       	adc	r31, r11
     b20:	e7 51       	subi	r30, 0x17	; 23
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	20 83       	st	Z, r18
	cube[z1][y2] = byteline(x1,x2);
     b26:	fc 01       	movw	r30, r24
     b28:	e0 0f       	add	r30, r16
     b2a:	f1 1f       	adc	r31, r17
     b2c:	e7 51       	subi	r30, 0x17	; 23
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	20 83       	st	Z, r18
	cube[z2][y1] = byteline(x1,x2);
     b32:	c7 01       	movw	r24, r14
     b34:	d3 e0       	ldi	r29, 0x03	; 3
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	da 95       	dec	r29
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <box_wireframe+0x86>
     b3e:	fc 01       	movw	r30, r24
     b40:	ea 0d       	add	r30, r10
     b42:	fb 1d       	adc	r31, r11
     b44:	e7 51       	subi	r30, 0x17	; 23
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	20 83       	st	Z, r18
	cube[z2][y2] = byteline(x1,x2);
     b4a:	fc 01       	movw	r30, r24
     b4c:	e0 0f       	add	r30, r16
     b4e:	f1 1f       	adc	r31, r17
     b50:	e7 51       	subi	r30, 0x17	; 23
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	20 83       	st	Z, r18

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
     b56:	e5 01       	movw	r28, r10
     b58:	15 c0       	rjmp	.+42     	; 0xb84 <box_wireframe+0xd4>
	{
		setvoxel(x1,iy,z1);
     b5a:	c4 01       	movw	r24, r8
     b5c:	be 01       	movw	r22, r28
     b5e:	a3 01       	movw	r20, r6
     b60:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x1,iy,z2);
     b64:	c4 01       	movw	r24, r8
     b66:	be 01       	movw	r22, r28
     b68:	a7 01       	movw	r20, r14
     b6a:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x2,iy,z1);
     b6e:	c6 01       	movw	r24, r12
     b70:	be 01       	movw	r22, r28
     b72:	a3 01       	movw	r20, r6
     b74:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x2,iy,z2);
     b78:	c6 01       	movw	r24, r12
     b7a:	be 01       	movw	r22, r28
     b7c:	a7 01       	movw	r20, r14
     b7e:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
	cube[z1][y2] = byteline(x1,x2);
	cube[z2][y1] = byteline(x1,x2);
	cube[z2][y2] = byteline(x1,x2);

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
     b82:	21 96       	adiw	r28, 0x01	; 1
     b84:	0c 17       	cp	r16, r28
     b86:	1d 07       	cpc	r17, r29
     b88:	44 f7       	brge	.-48     	; 0xb5a <box_wireframe+0xaa>
     b8a:	e3 01       	movw	r28, r6
     b8c:	15 c0       	rjmp	.+42     	; 0xbb8 <box_wireframe+0x108>
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
	{
		setvoxel(x1,y1,iz);
     b8e:	c4 01       	movw	r24, r8
     b90:	b5 01       	movw	r22, r10
     b92:	ae 01       	movw	r20, r28
     b94:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x1,y2,iz);
     b98:	c4 01       	movw	r24, r8
     b9a:	b8 01       	movw	r22, r16
     b9c:	ae 01       	movw	r20, r28
     b9e:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x2,y1,iz);
     ba2:	c6 01       	movw	r24, r12
     ba4:	b5 01       	movw	r22, r10
     ba6:	ae 01       	movw	r20, r28
     ba8:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x2,y2,iz);
     bac:	c6 01       	movw	r24, r12
     bae:	b8 01       	movw	r22, r16
     bb0:	ae 01       	movw	r20, r28
     bb2:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x2,iy,z1);
		setvoxel(x2,iy,z2);
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
     bb6:	21 96       	adiw	r28, 0x01	; 1
     bb8:	ec 16       	cp	r14, r28
     bba:	fd 06       	cpc	r15, r29
     bbc:	44 f7       	brge	.-48     	; 0xb8e <box_wireframe+0xde>
		setvoxel(x1,y2,iz);
		setvoxel(x2,y1,iz);
		setvoxel(x2,y2,iz);
	}

}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	bf 90       	pop	r11
     bd0:	af 90       	pop	r10
     bd2:	9f 90       	pop	r9
     bd4:	8f 90       	pop	r8
     bd6:	7f 90       	pop	r7
     bd8:	6f 90       	pop	r6
     bda:	08 95       	ret

00000bdc <box_walls>:

}

// Darw a hollow box with side walls.
void box_walls(int x1, int y1, int z1, int x2, int y2, int z2)
{
     bdc:	2f 92       	push	r2
     bde:	3f 92       	push	r3
     be0:	4f 92       	push	r4
     be2:	5f 92       	push	r5
     be4:	6f 92       	push	r6
     be6:	7f 92       	push	r7
     be8:	8f 92       	push	r8
     bea:	9f 92       	push	r9
     bec:	af 92       	push	r10
     bee:	bf 92       	push	r11
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <box_walls+0x26>
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	2c 01       	movw	r4, r24
     c0a:	4b 01       	movw	r8, r22
     c0c:	5a 01       	movw	r10, r20
     c0e:	39 01       	movw	r6, r18
     c10:	68 01       	movw	r12, r16
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     c12:	28 17       	cp	r18, r24
     c14:	39 07       	cpc	r19, r25
     c16:	2c f4       	brge	.+10     	; 0xc22 <box_walls+0x46>
     c18:	98 2f       	mov	r25, r24
     c1a:	85 2d       	mov	r24, r5
     c1c:	29 01       	movw	r4, r18
     c1e:	69 2e       	mov	r6, r25
     c20:	78 2e       	mov	r7, r24
     c22:	c8 14       	cp	r12, r8
     c24:	d9 04       	cpc	r13, r9
     c26:	2c f4       	brge	.+10     	; 0xc32 <box_walls+0x56>
     c28:	98 2d       	mov	r25, r8
     c2a:	89 2d       	mov	r24, r9
     c2c:	46 01       	movw	r8, r12
     c2e:	c9 2e       	mov	r12, r25
     c30:	d8 2e       	mov	r13, r24
     c32:	ea 14       	cp	r14, r10
     c34:	fb 04       	cpc	r15, r11
     c36:	2c f4       	brge	.+10     	; 0xc42 <box_walls+0x66>
     c38:	9a 2d       	mov	r25, r10
     c3a:	8b 2d       	mov	r24, r11
     c3c:	57 01       	movw	r10, r14
     c3e:	e9 2e       	mov	r14, r25
     c40:	f8 2e       	mov	r15, r24
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9c 01       	movw	r18, r24
     c48:	06 2c       	mov	r0, r6
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <box_walls+0x74>
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <box_walls+0x70>
     c54:	04 2c       	mov	r0, r4
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <box_walls+0x80>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <box_walls+0x7c>
     c60:	28 2b       	or	r18, r24
	
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     c62:	85 01       	movw	r16, r10
     c64:	2c c0       	rjmp	.+88     	; 0xcbe <box_walls+0xe2>
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
     c66:	48 15       	cp	r20, r8
     c68:	59 05       	cpc	r21, r9
     c6a:	49 f0       	breq	.+18     	; 0xc7e <box_walls+0xa2>
     c6c:	4c 15       	cp	r20, r12
     c6e:	5d 05       	cpc	r21, r13
     c70:	31 f0       	breq	.+12     	; 0xc7e <box_walls+0xa2>
     c72:	0a 15       	cp	r16, r10
     c74:	1b 05       	cpc	r17, r11
     c76:	19 f0       	breq	.+6      	; 0xc7e <box_walls+0xa2>
     c78:	0e 15       	cp	r16, r14
     c7a:	1f 05       	cpc	r17, r15
     c7c:	89 f4       	brne	.+34     	; 0xca0 <box_walls+0xc4>
			{
				cube[iz][iy] = byteline(x1,x2);
     c7e:	c2 01       	movw	r24, r4
     c80:	b3 01       	movw	r22, r6
     c82:	2b 83       	std	Y+3, r18	; 0x03
     c84:	49 83       	std	Y+1, r20	; 0x01
     c86:	5a 83       	std	Y+2, r21	; 0x02
     c88:	0e 94 44 05 	call	0xa88	; 0xa88 <byteline>
     c8c:	49 81       	ldd	r20, Y+1	; 0x01
     c8e:	5a 81       	ldd	r21, Y+2	; 0x02
     c90:	f1 01       	movw	r30, r2
     c92:	e4 0f       	add	r30, r20
     c94:	f5 1f       	adc	r31, r21
     c96:	e7 51       	subi	r30, 0x17	; 23
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 83       	st	Z, r24
     c9c:	2b 81       	ldd	r18, Y+3	; 0x03
     c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <box_walls+0xd4>
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     ca0:	f1 01       	movw	r30, r2
     ca2:	e4 0f       	add	r30, r20
     ca4:	f5 1f       	adc	r31, r21
     ca6:	e7 51       	subi	r30, 0x17	; 23
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	80 81       	ld	r24, Z
     cac:	82 2b       	or	r24, r18
     cae:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
     cb0:	4f 5f       	subi	r20, 0xFF	; 255
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	c4 16       	cp	r12, r20
     cb6:	d5 06       	cpc	r13, r21
     cb8:	b4 f6       	brge	.-84     	; 0xc66 <box_walls+0x8a>
	
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     cba:	0f 5f       	subi	r16, 0xFF	; 255
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	e0 16       	cp	r14, r16
     cc0:	f1 06       	cpc	r15, r17
     cc2:	44 f0       	brlt	.+16     	; 0xcd4 <box_walls+0xf8>
     cc4:	a4 01       	movw	r20, r8
     cc6:	18 01       	movw	r2, r16
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	22 0c       	add	r2, r2
     ccc:	33 1c       	adc	r3, r3
     cce:	8a 95       	dec	r24
     cd0:	e1 f7       	brne	.-8      	; 0xcca <box_walls+0xee>
     cd2:	f0 cf       	rjmp	.-32     	; 0xcb4 <box_walls+0xd8>
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
			}
		}
	}

}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	7f 90       	pop	r7
     cf4:	6f 90       	pop	r6
     cf6:	5f 90       	pop	r5
     cf8:	4f 90       	pop	r4
     cfa:	3f 90       	pop	r3
     cfc:	2f 90       	pop	r2
     cfe:	08 95       	ret

00000d00 <box_filled>:
	}
}

// Draw a box with all walls drawn and all voxels inside set
void box_filled(int x1, int y1, int z1, int x2, int y2, int z2)
{
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 d0       	rcall	.+0      	; 0xd26 <box_filled+0x26>
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	1c 01       	movw	r2, r24
     d2e:	2b 01       	movw	r4, r22
     d30:	39 01       	movw	r6, r18
     d32:	48 01       	movw	r8, r16
     d34:	57 01       	movw	r10, r14
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     d36:	28 17       	cp	r18, r24
     d38:	39 07       	cpc	r19, r25
     d3a:	2c f4       	brge	.+10     	; 0xd46 <box_filled+0x46>
     d3c:	98 2f       	mov	r25, r24
     d3e:	83 2d       	mov	r24, r3
     d40:	19 01       	movw	r2, r18
     d42:	69 2e       	mov	r6, r25
     d44:	78 2e       	mov	r7, r24
     d46:	84 14       	cp	r8, r4
     d48:	95 04       	cpc	r9, r5
     d4a:	2c f4       	brge	.+10     	; 0xd56 <box_filled+0x56>
     d4c:	94 2d       	mov	r25, r4
     d4e:	85 2d       	mov	r24, r5
     d50:	24 01       	movw	r4, r8
     d52:	89 2e       	mov	r8, r25
     d54:	98 2e       	mov	r9, r24
     d56:	a4 16       	cp	r10, r20
     d58:	b5 06       	cpc	r11, r21
     d5a:	2c f4       	brge	.+10     	; 0xd66 <box_filled+0x66>
     d5c:	94 2f       	mov	r25, r20
     d5e:	85 2f       	mov	r24, r21
     d60:	a5 01       	movw	r20, r10
     d62:	a9 2e       	mov	r10, r25
     d64:	b8 2e       	mov	r11, r24

	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     d66:	6a 01       	movw	r12, r20
     d68:	1d c0       	rjmp	.+58     	; 0xda4 <box_filled+0xa4>
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
     d6a:	89 01       	movw	r16, r18
     d6c:	0e 0d       	add	r16, r14
     d6e:	1f 1d       	adc	r17, r15
     d70:	07 51       	subi	r16, 0x17	; 23
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	f8 01       	movw	r30, r16
     d76:	40 81       	ld	r20, Z
     d78:	c1 01       	movw	r24, r2
     d7a:	b3 01       	movw	r22, r6
     d7c:	2a 83       	std	Y+2, r18	; 0x02
     d7e:	3b 83       	std	Y+3, r19	; 0x03
     d80:	49 83       	std	Y+1, r20	; 0x01
     d82:	0e 94 44 05 	call	0xa88	; 0xa88 <byteline>
     d86:	49 81       	ldd	r20, Y+1	; 0x01
     d88:	84 2b       	or	r24, r20
     d8a:	f8 01       	movw	r30, r16
     d8c:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
     d8e:	08 94       	sec
     d90:	e1 1c       	adc	r14, r1
     d92:	f1 1c       	adc	r15, r1
     d94:	3b 81       	ldd	r19, Y+3	; 0x03
     d96:	2a 81       	ldd	r18, Y+2	; 0x02
     d98:	8e 14       	cp	r8, r14
     d9a:	9f 04       	cpc	r9, r15
     d9c:	34 f7       	brge	.-52     	; 0xd6a <box_filled+0x6a>

	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     d9e:	08 94       	sec
     da0:	c1 1c       	adc	r12, r1
     da2:	d1 1c       	adc	r13, r1
     da4:	ac 14       	cp	r10, r12
     da6:	bd 04       	cpc	r11, r13
     da8:	44 f0       	brlt	.+16     	; 0xdba <box_filled+0xba>
     daa:	72 01       	movw	r14, r4
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
     dac:	96 01       	movw	r18, r12
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	9a 95       	dec	r25
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <box_filled+0xb0>
     db8:	ef cf       	rjmp	.-34     	; 0xd98 <box_filled+0x98>
		}
	}

}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	5f 90       	pop	r5
     dde:	4f 90       	pop	r4
     de0:	3f 90       	pop	r3
     de2:	2f 90       	pop	r2
     de4:	08 95       	ret

00000de6 <flipbyte>:

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
char flipbyte (char byte)
{
	char flop = 0x00;

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
     dea:	98 2f       	mov	r25, r24
     dec:	92 95       	swap	r25
     dee:	96 95       	lsr	r25
     df0:	92 70       	andi	r25, 0x02	; 2
     df2:	48 2f       	mov	r20, r24
     df4:	44 1f       	adc	r20, r20
     df6:	44 27       	eor	r20, r20
     df8:	44 1f       	adc	r20, r20
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
     dfa:	94 2b       	or	r25, r20
     dfc:	48 2f       	mov	r20, r24
     dfe:	46 95       	lsr	r20
     e00:	46 95       	lsr	r20
     e02:	46 95       	lsr	r20
     e04:	44 70       	andi	r20, 0x04	; 4
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
     e06:	94 2b       	or	r25, r20
     e08:	86 95       	lsr	r24
     e0a:	88 70       	andi	r24, 0x08	; 8
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
     e0c:	98 2b       	or	r25, r24
     e0e:	a9 01       	movw	r20, r18
     e10:	44 0f       	add	r20, r20
     e12:	55 1f       	adc	r21, r21
     e14:	40 71       	andi	r20, 0x10	; 16
	flop = (flop & 0b11011111) | (0b00100000 & (byte << 3));
     e16:	94 2b       	or	r25, r20
     e18:	a9 01       	movw	r20, r18
     e1a:	73 e0       	ldi	r23, 0x03	; 3
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	7a 95       	dec	r23
     e22:	e1 f7       	brne	.-8      	; 0xe1c <flipbyte+0x36>
     e24:	40 72       	andi	r20, 0x20	; 32
	flop = (flop & 0b10111111) | (0b01000000 & (byte << 5));
     e26:	94 2b       	or	r25, r20
     e28:	a9 01       	movw	r20, r18
     e2a:	e5 e0       	ldi	r30, 0x05	; 5
     e2c:	44 0f       	add	r20, r20
     e2e:	55 1f       	adc	r21, r21
     e30:	ea 95       	dec	r30
     e32:	e1 f7       	brne	.-8      	; 0xe2c <flipbyte+0x46>
     e34:	40 74       	andi	r20, 0x40	; 64
	flop = (flop & 0b01111111) | (0b10000000 & (byte << 7));
     e36:	94 2b       	or	r25, r20
     e38:	36 95       	lsr	r19
     e3a:	32 2f       	mov	r19, r18
     e3c:	22 27       	eor	r18, r18
     e3e:	37 95       	ror	r19
     e40:	27 95       	ror	r18
	return flop;
}
     e42:	89 2f       	mov	r24, r25
     e44:	82 2b       	or	r24, r18
     e46:	08 95       	ret

00000e48 <line>:

// Draw a line between any coordinates in 3d space.
// Uses integer values for input, so dont expect smooth animations.
void line(int x1, int y1, int z1, int x2, int y2, int z2)
{
     e48:	2f 92       	push	r2
     e4a:	3f 92       	push	r3
     e4c:	4f 92       	push	r4
     e4e:	5f 92       	push	r5
     e50:	6f 92       	push	r6
     e52:	7f 92       	push	r7
     e54:	8f 92       	push	r8
     e56:	9f 92       	push	r9
     e58:	af 92       	push	r10
     e5a:	bf 92       	push	r11
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	62 97       	sbiw	r28, 0x12	; 18
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	2b 01       	movw	r4, r22
     e82:	5a 01       	movw	r10, r20
     e84:	3c 83       	std	Y+4, r19	; 0x04
     e86:	2b 83       	std	Y+3, r18	; 0x03
     e88:	b8 01       	movw	r22, r16
     e8a:	17 01       	movw	r2, r14
	unsigned char x,y,z;
	unsigned char lasty,lastz;

	// We always want to draw the line from x=0 to x=7.
	// If x1 is bigget than x2, we need to flip all the values.
	if (x1>x2)
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	7c f4       	brge	.+30     	; 0xeb0 <line+0x68>
     e92:	8b 2d       	mov	r24, r11
	{
		int tmp;
		tmp = x2; x2 = x1; x1 = tmp;
		tmp = y2; y2 = y1; y1 = tmp;
		tmp = z2; z2 = z1; z1 = tmp;
     e94:	57 01       	movw	r10, r14
     e96:	24 2e       	mov	r2, r20
     e98:	38 2e       	mov	r3, r24
	unsigned char x,y,z;
	unsigned char lasty,lastz;

	// We always want to draw the line from x=0 to x=7.
	// If x1 is bigget than x2, we need to flip all the values.
	if (x1>x2)
     e9a:	94 2d       	mov	r25, r4
     e9c:	85 2d       	mov	r24, r5
	{
		int tmp;
		tmp = x2; x2 = x1; x1 = tmp;
		tmp = y2; y2 = y1; y1 = tmp;
     e9e:	28 01       	movw	r4, r16
     ea0:	69 2f       	mov	r22, r25
     ea2:	78 2f       	mov	r23, r24
	unsigned char x,y,z;
	unsigned char lasty,lastz;

	// We always want to draw the line from x=0 to x=7.
	// If x1 is bigget than x2, we need to flip all the values.
	if (x1>x2)
     ea4:	99 81       	ldd	r25, Y+1	; 0x01
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	3a 83       	std	Y+2, r19	; 0x02
     eaa:	29 83       	std	Y+1, r18	; 0x01
     eac:	9b 83       	std	Y+3, r25	; 0x03
     eae:	8c 83       	std	Y+4, r24	; 0x04
     eb0:	0b 81       	ldd	r16, Y+3	; 0x03
     eb2:	1c 81       	ldd	r17, Y+4	; 0x04
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	08 1b       	sub	r16, r24
     eba:	19 0b       	sbc	r17, r25
		tmp = y2; y2 = y1; y1 = tmp;
		tmp = z2; z2 = z1; z1 = tmp;
	}

	
	if (y1>y2)
     ebc:	64 15       	cp	r22, r4
     ebe:	75 05       	cpc	r23, r5
     ec0:	2c f4       	brge	.+10     	; 0xecc <line+0x84>
	{
		xy = (float)(y1-y2)/(float)(x2-x1);
     ec2:	d2 01       	movw	r26, r4
     ec4:	a6 1b       	sub	r26, r22
     ec6:	b7 0b       	sbc	r27, r23
     ec8:	bd 01       	movw	r22, r26
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <line+0x88>
		lasty = y2;
	} else
	{
		xy = (float)(y2-y1)/(float)(x2-x1);
     ecc:	64 19       	sub	r22, r4
     ece:	75 09       	sbc	r23, r5
     ed0:	88 27       	eor	r24, r24
     ed2:	77 fd       	sbrc	r23, 7
     ed4:	80 95       	com	r24
     ed6:	98 2f       	mov	r25, r24
     ed8:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
     edc:	6b 01       	movw	r12, r22
     ede:	7c 01       	movw	r14, r24
     ee0:	b8 01       	movw	r22, r16
     ee2:	88 27       	eor	r24, r24
     ee4:	77 fd       	sbrc	r23, 7
     ee6:	80 95       	com	r24
     ee8:	98 2f       	mov	r25, r24
     eea:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divsf3>
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	69 2e       	mov	r6, r25
     f02:	8b 80       	ldd	r8, Y+3	; 0x03
     f04:	9c 80       	ldd	r9, Y+4	; 0x04
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	8e 1a       	sub	r8, r30
     f0c:	9f 0a       	sbc	r9, r31
		lasty = y1;
	}

	if (z1>z2)
     f0e:	2a 14       	cp	r2, r10
     f10:	3b 04       	cpc	r3, r11
     f12:	24 f4       	brge	.+8      	; 0xf1c <line+0xd4>
	{
		xz = (float)(z1-z2)/(float)(x2-x1);
     f14:	b5 01       	movw	r22, r10
     f16:	62 19       	sub	r22, r2
     f18:	73 09       	sbc	r23, r3
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <line+0xda>
		lastz = z2;
	} else
	{
		xz = (float)(z2-z1)/(float)(x2-x1);
     f1c:	b1 01       	movw	r22, r2
     f1e:	6a 19       	sub	r22, r10
     f20:	7b 09       	sbc	r23, r11
     f22:	88 27       	eor	r24, r24
     f24:	77 fd       	sbrc	r23, 7
     f26:	80 95       	com	r24
     f28:	98 2f       	mov	r25, r24
     f2a:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
     f2e:	6b 01       	movw	r12, r22
     f30:	7c 01       	movw	r14, r24
     f32:	b4 01       	movw	r22, r8
     f34:	88 27       	eor	r24, r24
     f36:	77 fd       	sbrc	r23, 7
     f38:	80 95       	com	r24
     f3a:	98 2f       	mov	r25, r24
     f3c:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
     f44:	c7 01       	movw	r24, r14
     f46:	b6 01       	movw	r22, r12
     f48:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divsf3>
     f4c:	76 2e       	mov	r7, r22
     f4e:	07 2f       	mov	r16, r23
     f50:	18 2f       	mov	r17, r24
     f52:	29 2f       	mov	r18, r25
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
     f54:	f9 81       	ldd	r31, Y+1	; 0x01
     f56:	f8 87       	std	Y+8, r31	; 0x08
     f58:	22 24       	eor	r2, r2
     f5a:	33 24       	eor	r3, r3
	{
		y = (xy*(x-x1))+y1;
     f5c:	c2 01       	movw	r24, r4
     f5e:	aa 27       	eor	r26, r26
     f60:	97 fd       	sbrc	r25, 7
     f62:	a0 95       	com	r26
     f64:	ba 2f       	mov	r27, r26
     f66:	89 87       	std	Y+9, r24	; 0x09
     f68:	9a 87       	std	Y+10, r25	; 0x0a
     f6a:	ab 87       	std	Y+11, r26	; 0x0b
     f6c:	bc 87       	std	Y+12, r27	; 0x0c
		z = (xz*(x-x1))+z1;
     f6e:	c5 01       	movw	r24, r10
     f70:	aa 27       	eor	r26, r26
     f72:	97 fd       	sbrc	r25, 7
     f74:	a0 95       	com	r26
     f76:	ba 2f       	mov	r27, r26
     f78:	8d 87       	std	Y+13, r24	; 0x0d
     f7a:	9e 87       	std	Y+14, r25	; 0x0e
     f7c:	af 87       	std	Y+15, r26	; 0x0f
     f7e:	b8 8b       	std	Y+16, r27	; 0x10
     f80:	2a 8b       	std	Y+18, r18	; 0x12
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
     f82:	4d c0       	rjmp	.+154    	; 0x101e <line+0x1d6>
	{
		y = (xy*(x-x1))+y1;
     f84:	b2 01       	movw	r22, r4
     f86:	a9 81       	ldd	r26, Y+1	; 0x01
     f88:	ba 81       	ldd	r27, Y+2	; 0x02
     f8a:	6a 1b       	sub	r22, r26
     f8c:	7b 0b       	sbc	r23, r27
     f8e:	88 27       	eor	r24, r24
     f90:	77 fd       	sbrc	r23, 7
     f92:	80 95       	com	r24
     f94:	98 2f       	mov	r25, r24
     f96:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
     f9a:	4b 01       	movw	r8, r22
     f9c:	5c 01       	movw	r10, r24
     f9e:	5d 81       	ldd	r21, Y+5	; 0x05
     fa0:	4e 81       	ldd	r20, Y+6	; 0x06
     fa2:	3f 81       	ldd	r19, Y+7	; 0x07
     fa4:	85 2f       	mov	r24, r21
     fa6:	94 2f       	mov	r25, r20
     fa8:	a3 2f       	mov	r26, r19
     faa:	b6 2d       	mov	r27, r6
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	a5 01       	movw	r20, r10
     fb2:	94 01       	movw	r18, r8
     fb4:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
     fb8:	6b 01       	movw	r12, r22
     fba:	7c 01       	movw	r14, r24
     fbc:	69 85       	ldd	r22, Y+9	; 0x09
     fbe:	7a 85       	ldd	r23, Y+10	; 0x0a
     fc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc4:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c7 01       	movw	r24, r14
     fce:	b6 01       	movw	r22, r12
     fd0:	0e 94 c3 22 	call	0x4586	; 0x4586 <__addsf3>
     fd4:	0e 94 97 23 	call	0x472e	; 0x472e <__fixunssfsi>
     fd8:	69 8b       	std	Y+17, r22	; 0x11
		z = (xz*(x-x1))+z1;
     fda:	2a 89       	ldd	r18, Y+18	; 0x12
     fdc:	87 2d       	mov	r24, r7
     fde:	90 2f       	mov	r25, r16
     fe0:	a1 2f       	mov	r26, r17
     fe2:	b2 2f       	mov	r27, r18
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	a5 01       	movw	r20, r10
     fea:	94 01       	movw	r18, r8
     fec:	0e 94 8a 24 	call	0x4914	; 0x4914 <__mulsf3>
     ff0:	6b 01       	movw	r12, r22
     ff2:	7c 01       	movw	r14, r24
     ff4:	6d 85       	ldd	r22, Y+13	; 0x0d
     ff6:	7e 85       	ldd	r23, Y+14	; 0x0e
     ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffa:	98 89       	ldd	r25, Y+16	; 0x10
     ffc:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	c7 01       	movw	r24, r14
    1006:	b6 01       	movw	r22, r12
    1008:	0e 94 c3 22 	call	0x4586	; 0x4586 <__addsf3>
    100c:	0e 94 97 23 	call	0x472e	; 0x472e <__fixunssfsi>
    1010:	46 2f       	mov	r20, r22
		setvoxel(x,y,z);
    1012:	c2 01       	movw	r24, r4
    1014:	69 89       	ldd	r22, Y+17	; 0x11
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
	return flop;
}

// Draw a line between any coordinates in 3d space.
// Uses integer values for input, so dont expect smooth animations.
void line(int x1, int y1, int z1, int x2, int y2, int z2)
    101e:	48 84       	ldd	r4, Y+8	; 0x08
    1020:	42 0c       	add	r4, r2
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
    1022:	55 24       	eor	r5, r5
    1024:	08 94       	sec
    1026:	21 1c       	adc	r2, r1
    1028:	31 1c       	adc	r3, r1
    102a:	eb 81       	ldd	r30, Y+3	; 0x03
    102c:	fc 81       	ldd	r31, Y+4	; 0x04
    102e:	e4 15       	cp	r30, r4
    1030:	f5 05       	cpc	r31, r5
    1032:	0c f0       	brlt	.+2      	; 0x1036 <line+0x1ee>
    1034:	a7 cf       	rjmp	.-178    	; 0xf84 <line+0x13c>
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
	}
	
}
    1036:	62 96       	adiw	r28, 0x12	; 18
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	7f 90       	pop	r7
    105c:	6f 90       	pop	r6
    105e:	5f 90       	pop	r5
    1060:	4f 90       	pop	r4
    1062:	3f 90       	pop	r3
    1064:	2f 90       	pop	r2
    1066:	08 95       	ret

00001068 <tmp2cube>:

// Copies the contents of fb (temp cube buffer) into the rendering buffer
void tmp2cube (void)
{	
    memcpy(cube, fb, 64); // copy the current cube into a buffer.
    1068:	a9 ee       	ldi	r26, 0xE9	; 233
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e9 ea       	ldi	r30, 0xA9	; 169
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	01 90       	ld	r0, Z+
    1074:	0d 92       	st	X+, r0
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	e1 f7       	brne	.-8      	; 0x1072 <tmp2cube+0xa>
}
    107a:	08 95       	ret

0000107c <shift>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
    107c:	4f 92       	push	r4
    107e:	5f 92       	push	r5
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	c8 2e       	mov	r12, r24
    109c:	3b 01       	movw	r6, r22
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
    109e:	88 24       	eor	r8, r8
    10a0:	99 24       	eor	r9, r9

// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
    10a2:	b7 e0       	ldi	r27, 0x07	; 7
    10a4:	4b 2e       	mov	r4, r27
    10a6:	51 2c       	mov	r5, r1
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
    10a8:	4f ef       	ldi	r20, 0xFF	; 255
    10aa:	64 16       	cp	r6, r20
    10ac:	4f ef       	ldi	r20, 0xFF	; 255
    10ae:	74 06       	cpc	r7, r20
    10b0:	21 f0       	breq	.+8      	; 0x10ba <shift+0x3e>

// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
    10b2:	72 01       	movw	r14, r4
    10b4:	e8 18       	sub	r14, r8
    10b6:	f9 08       	sbc	r15, r9
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <shift+0x40>
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
    10ba:	74 01       	movw	r14, r8
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
    10bc:	c7 01       	movw	r24, r14
    10be:	01 96       	adiw	r24, 0x01	; 1
				} else
				{
					iii = ii-1;
    10c0:	97 01       	movw	r18, r14
    10c2:	21 50       	subi	r18, 0x01	; 1
    10c4:	30 40       	sbci	r19, 0x00	; 0
    10c6:	4f ef       	ldi	r20, 0xFF	; 255
    10c8:	64 16       	cp	r6, r20
    10ca:	4f ef       	ldi	r20, 0xFF	; 255
    10cc:	74 06       	cpc	r7, r20
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <shift+0x5a>
    10d0:	b8 2e       	mov	r11, r24
    10d2:	d9 2e       	mov	r13, r25
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <shift+0x5e>
    10d6:	b2 2e       	mov	r11, r18
    10d8:	d3 2e       	mov	r13, r19
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
    10da:	00 e0       	ldi	r16, 0x00	; 0
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	35 c0       	rjmp	.+106    	; 0x114a <shift+0xce>
				} else
				{
					iii = ii-1;
				}
				
				if (axis == AXIS_Z)
    10e0:	8a e7       	ldi	r24, 0x7A	; 122
    10e2:	c8 16       	cp	r12, r24
    10e4:	59 f4       	brne	.+22     	; 0x10fc <shift+0x80>
				{
					state = getvoxel(x,y,iii);
    10e6:	c8 01       	movw	r24, r16
    10e8:	be 01       	movw	r22, r28
    10ea:	4b 2d       	mov	r20, r11
    10ec:	5d 2d       	mov	r21, r13
    10ee:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    10f2:	28 2f       	mov	r18, r24
					altervoxel(x,y,ii,state);
    10f4:	c8 01       	movw	r24, r16
    10f6:	be 01       	movw	r22, r28
    10f8:	a7 01       	movw	r20, r14
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <shift+0xb6>
				}
				
				if (axis == AXIS_Y)
    10fc:	49 e7       	ldi	r20, 0x79	; 121
    10fe:	c4 16       	cp	r12, r20
    1100:	59 f4       	brne	.+22     	; 0x1118 <shift+0x9c>
				{
					state = getvoxel(x,iii,y);
    1102:	c8 01       	movw	r24, r16
    1104:	6b 2d       	mov	r22, r11
    1106:	7d 2d       	mov	r23, r13
    1108:	ae 01       	movw	r20, r28
    110a:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    110e:	28 2f       	mov	r18, r24
					altervoxel(x,ii,y,state);
    1110:	c8 01       	movw	r24, r16
    1112:	b7 01       	movw	r22, r14
    1114:	ae 01       	movw	r20, r28
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <shift+0xb6>
				}
				
				if (axis == AXIS_X)
    1118:	88 e7       	ldi	r24, 0x78	; 120
    111a:	c8 16       	cp	r12, r24
    111c:	69 f4       	brne	.+26     	; 0x1138 <shift+0xbc>
				{
					state = getvoxel(iii,y,x);
    111e:	8b 2d       	mov	r24, r11
    1120:	9d 2d       	mov	r25, r13
    1122:	be 01       	movw	r22, r28
    1124:	a8 01       	movw	r20, r16
    1126:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    112a:	28 2f       	mov	r18, r24
					altervoxel(ii,y,x,state);
    112c:	c7 01       	movw	r24, r14
    112e:	be 01       	movw	r22, r28
    1130:	a8 01       	movw	r20, r16
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	0e 94 12 04 	call	0x824	; 0x824 <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
    1138:	21 96       	adiw	r28, 0x01	; 1
    113a:	c8 30       	cpi	r28, 0x08	; 8
    113c:	d1 05       	cpc	r29, r1
    113e:	81 f6       	brne	.-96     	; 0x10e0 <shift+0x64>
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
    1140:	0f 5f       	subi	r16, 0xFF	; 255
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
    1144:	08 30       	cpi	r16, 0x08	; 8
    1146:	11 05       	cpc	r17, r1
    1148:	19 f0       	breq	.+6      	; 0x1150 <shift+0xd4>
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	d0 e0       	ldi	r29, 0x00	; 0
    114e:	c8 cf       	rjmp	.-112    	; 0x10e0 <shift+0x64>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
    1150:	08 94       	sec
    1152:	81 1c       	adc	r8, r1
    1154:	91 1c       	adc	r9, r1
    1156:	48 e0       	ldi	r20, 0x08	; 8
    1158:	84 16       	cp	r8, r20
    115a:	91 04       	cpc	r9, r1
    115c:	09 f0       	breq	.+2      	; 0x1160 <shift+0xe4>
    115e:	a4 cf       	rjmp	.-184    	; 0x10a8 <shift+0x2c>
				}
			}
		}
	}
	
	if (direction == -1)
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	68 16       	cp	r6, r24
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	78 06       	cpc	r7, r24
    1168:	21 f4       	brne	.+8      	; 0x1172 <shift+0xf6>
	{
		i = 7;
    116a:	a7 e0       	ldi	r26, 0x07	; 7
    116c:	ea 2e       	mov	r14, r26
    116e:	f1 2c       	mov	r15, r1
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <shift+0xfa>
	} else
	{
		i = 0;
    1172:	ee 24       	eor	r14, r14
    1174:	ff 24       	eor	r15, r15
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	1f c0       	rjmp	.+62     	; 0x11ba <shift+0x13e>
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
    117c:	4a e7       	ldi	r20, 0x7A	; 122
    117e:	c4 16       	cp	r12, r20
    1180:	21 f4       	brne	.+8      	; 0x118a <shift+0x10e>
				clrvoxel(x,y,i);
    1182:	c8 01       	movw	r24, r16
    1184:	be 01       	movw	r22, r28
    1186:	a7 01       	movw	r20, r14
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <shift+0x128>
				
			if (axis == AXIS_Y)
    118a:	89 e7       	ldi	r24, 0x79	; 121
    118c:	c8 16       	cp	r12, r24
    118e:	21 f4       	brne	.+8      	; 0x1198 <shift+0x11c>
				clrvoxel(x,i,y);
    1190:	c8 01       	movw	r24, r16
    1192:	b7 01       	movw	r22, r14
    1194:	ae 01       	movw	r20, r28
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <shift+0x128>
			
			if (axis == AXIS_X)
    1198:	48 e7       	ldi	r20, 0x78	; 120
    119a:	c4 16       	cp	r12, r20
    119c:	29 f4       	brne	.+10     	; 0x11a8 <shift+0x12c>
				clrvoxel(i,y,x);
    119e:	c7 01       	movw	r24, r14
    11a0:	be 01       	movw	r22, r28
    11a2:	a8 01       	movw	r20, r16
    11a4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
    11a8:	21 96       	adiw	r28, 0x01	; 1
    11aa:	c8 30       	cpi	r28, 0x08	; 8
    11ac:	d1 05       	cpc	r29, r1
    11ae:	31 f7       	brne	.-52     	; 0x117c <shift+0x100>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	08 30       	cpi	r16, 0x08	; 8
    11b6:	11 05       	cpc	r17, r1
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <shift+0x144>
	if (direction == -1)
	{
		i = 7;
	} else
	{
		i = 0;
    11ba:	c0 e0       	ldi	r28, 0x00	; 0
    11bc:	d0 e0       	ldi	r29, 0x00	; 0
    11be:	de cf       	rjmp	.-68     	; 0x117c <shift+0x100>
			
			if (axis == AXIS_X)
				clrvoxel(i,y,x);
		}
	}
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	9f 90       	pop	r9
    11d4:	8f 90       	pop	r8
    11d6:	7f 90       	pop	r7
    11d8:	6f 90       	pop	r6
    11da:	5f 90       	pop	r5
    11dc:	4f 90       	pop	r4
    11de:	08 95       	ret

000011e0 <mirror_y>:

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
    11e0:	4f 92       	push	r4
    11e2:	5f 92       	push	r5
    11e4:	6f 92       	push	r6
    11e6:	7f 92       	push	r7
    11e8:	8f 92       	push	r8
    11ea:	9f 92       	push	r9
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	c0 54       	subi	r28, 0x40	; 64
    1206:	d0 40       	sbci	r29, 0x00	; 0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1212:	de 01       	movw	r26, r28
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	e9 ee       	ldi	r30, 0xE9	; 233
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 e4       	ldi	r24, 0x40	; 64
    121c:	01 90       	ld	r0, Z+
    121e:	0d 92       	st	X+, r0
    1220:	81 50       	subi	r24, 0x01	; 1
    1222:	e1 f7       	brne	.-8      	; 0x121c <mirror_y+0x3c>

    fill(0x00);
    1224:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    1228:	5e 01       	movw	r10, r28
    122a:	08 94       	sec
    122c:	a1 1c       	adc	r10, r1
    122e:	b1 1c       	adc	r11, r1
    1230:	cc 24       	eor	r12, r12
    1232:	dd 24       	eor	r13, r13
		}
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
    1234:	17 e0       	ldi	r17, 0x07	; 7
    1236:	61 2e       	mov	r6, r17
    1238:	71 2c       	mov	r7, r1
    123a:	30 c0       	rjmp	.+96     	; 0x129c <mirror_y+0xbc>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
            {
                if (buffer[z][y] & (0x01 << x))
    123c:	f2 01       	movw	r30, r4
    123e:	80 81       	ld	r24, Z
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 2c       	mov	r0, r14
    1244:	02 c0       	rjmp	.+4      	; 0x124a <mirror_y+0x6a>
    1246:	95 95       	asr	r25
    1248:	87 95       	ror	r24
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <mirror_y+0x66>
    124e:	80 ff       	sbrs	r24, 0
    1250:	05 c0       	rjmp	.+10     	; 0x125c <mirror_y+0x7c>
                    setvoxel(x,CUBE_SIZE-1-y,z);
    1252:	c7 01       	movw	r24, r14
    1254:	b4 01       	movw	r22, r8
    1256:	a6 01       	movw	r20, r12
    1258:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    125c:	08 94       	sec
    125e:	e1 1c       	adc	r14, r1
    1260:	f1 1c       	adc	r15, r1
    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
    1262:	f8 e0       	ldi	r31, 0x08	; 8
    1264:	ef 16       	cp	r14, r31
    1266:	f1 04       	cpc	r15, r1
    1268:	49 f7       	brne	.-46     	; 0x123c <mirror_y+0x5c>
    126a:	0f 5f       	subi	r16, 0xFF	; 255
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    126e:	08 30       	cpi	r16, 0x08	; 8
    1270:	11 05       	cpc	r17, r1
    1272:	49 f0       	breq	.+18     	; 0x1286 <mirror_y+0xa6>
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
    1274:	ee 24       	eor	r14, r14
    1276:	ff 24       	eor	r15, r15
		}
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
    1278:	25 01       	movw	r4, r10
    127a:	40 0e       	add	r4, r16
    127c:	51 1e       	adc	r5, r17
    127e:	43 01       	movw	r8, r6
    1280:	80 1a       	sub	r8, r16
    1282:	91 0a       	sbc	r9, r17
    1284:	db cf       	rjmp	.-74     	; 0x123c <mirror_y+0x5c>
    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1286:	08 94       	sec
    1288:	c1 1c       	adc	r12, r1
    128a:	d1 1c       	adc	r13, r1
    128c:	88 e0       	ldi	r24, 0x08	; 8
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a8 0e       	add	r10, r24
    1292:	b9 1e       	adc	r11, r25
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    1294:	98 e0       	ldi	r25, 0x08	; 8
    1296:	c9 16       	cp	r12, r25
    1298:	d1 04       	cpc	r13, r1
    129a:	19 f0       	breq	.+6      	; 0x12a2 <mirror_y+0xc2>
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
    129c:	00 e0       	ldi	r16, 0x00	; 0
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	e9 cf       	rjmp	.-46     	; 0x1274 <mirror_y+0x94>
                    setvoxel(x,CUBE_SIZE-1-y,z);
            }
        }
    }

}
    12a2:	c0 5c       	subi	r28, 0xC0	; 192
    12a4:	df 4f       	sbci	r29, 0xFF	; 255
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	5f 90       	pop	r5
    12ce:	4f 90       	pop	r4
    12d0:	08 95       	ret

000012d2 <mirror_x>:

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	c0 54       	subi	r28, 0x40	; 64
    12ec:	d0 40       	sbci	r29, 0x00	; 0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    12f8:	de 01       	movw	r26, r28
    12fa:	11 96       	adiw	r26, 0x01	; 1
    12fc:	e9 ee       	ldi	r30, 0xE9	; 233
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 e4       	ldi	r24, 0x40	; 64
    1302:	01 90       	ld	r0, Z+
    1304:	0d 92       	st	X+, r0
    1306:	81 50       	subi	r24, 0x01	; 1
    1308:	e1 f7       	brne	.-8      	; 0x1302 <mirror_x+0x30>

    fill(0x00);
    130a:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    130e:	6e 01       	movw	r12, r28
    1310:	08 94       	sec
    1312:	c1 1c       	adc	r12, r1
    1314:	d1 1c       	adc	r13, r1
    1316:	ee 24       	eor	r14, r14
    1318:	ff 24       	eor	r15, r15
    131a:	1c c0       	rjmp	.+56     	; 0x1354 <mirror_x+0x82>
    }

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
    131c:	f6 01       	movw	r30, r12
    131e:	e0 0f       	add	r30, r16
    1320:	f1 1f       	adc	r31, r17
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    1322:	80 81       	ld	r24, Z
    1324:	0e 94 f3 06 	call	0xde6	; 0xde6 <flipbyte>
    1328:	f5 01       	movw	r30, r10
    132a:	e0 0f       	add	r30, r16
    132c:	f1 1f       	adc	r31, r17
    132e:	e7 51       	subi	r30, 0x17	; 23
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 83       	st	Z, r24
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1338:	08 30       	cpi	r16, 0x08	; 8
    133a:	11 05       	cpc	r17, r1
    133c:	79 f7       	brne	.-34     	; 0x131c <mirror_x+0x4a>
    133e:	08 94       	sec
    1340:	e1 1c       	adc	r14, r1
    1342:	f1 1c       	adc	r15, r1
    1344:	88 e0       	ldi	r24, 0x08	; 8
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	c8 0e       	add	r12, r24
    134a:	d9 1e       	adc	r13, r25

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    134c:	98 e0       	ldi	r25, 0x08	; 8
    134e:	e9 16       	cp	r14, r25
    1350:	f1 04       	cpc	r15, r1
    1352:	49 f0       	breq	.+18     	; 0x1366 <mirror_x+0x94>

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
    1354:	00 e0       	ldi	r16, 0x00	; 0
    1356:	10 e0       	ldi	r17, 0x00	; 0
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    1358:	57 01       	movw	r10, r14
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	aa 0c       	add	r10, r10
    135e:	bb 1c       	adc	r11, r11
    1360:	8a 95       	dec	r24
    1362:	e1 f7       	brne	.-8      	; 0x135c <mirror_x+0x8a>
    1364:	db cf       	rjmp	.-74     	; 0x131c <mirror_x+0x4a>
        }
    }
}
    1366:	c0 5c       	subi	r28, 0xC0	; 192
    1368:	df 4f       	sbci	r29, 0xFF	; 255
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	08 95       	ret

0000138a <mirror_z>:

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	c0 54       	subi	r28, 0x40	; 64
    1394:	d0 40       	sbci	r29, 0x00	; 0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    13a0:	de 01       	movw	r26, r28
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	e9 ee       	ldi	r30, 0xE9	; 233
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 e4       	ldi	r24, 0x40	; 64
    13aa:	01 90       	ld	r0, Z+
    13ac:	0d 92       	st	X+, r0
    13ae:	81 50       	subi	r24, 0x01	; 1
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <mirror_z+0x20>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	1a c0       	rjmp	.+52     	; 0x13ec <mirror_z+0x62>
        }
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
    13b8:	fb 01       	movw	r30, r22
    13ba:	e2 0f       	add	r30, r18
    13bc:	f3 1f       	adc	r31, r19

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
    13be:	a0 81       	ld	r26, Z
    13c0:	fa 01       	movw	r30, r20
    13c2:	b3 e0       	ldi	r27, 0x03	; 3
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ba 95       	dec	r27
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <mirror_z+0x3a>
    13cc:	e8 0f       	add	r30, r24
    13ce:	f9 1f       	adc	r31, r25
    13d0:	e7 51       	subi	r30, 0x17	; 23
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	a0 83       	st	Z, r26
    13d6:	28 5f       	subi	r18, 0xF8	; 248
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	41 50       	subi	r20, 0x01	; 1
    13dc:	50 40       	sbci	r21, 0x00	; 0

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
    13de:	20 34       	cpi	r18, 0x40	; 64
    13e0:	31 05       	cpc	r19, r1
    13e2:	51 f7       	brne	.-44     	; 0x13b8 <mirror_z+0x2e>
    13e4:	01 96       	adiw	r24, 0x01	; 1
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	91 05       	cpc	r25, r1
    13ea:	59 f0       	breq	.+22     	; 0x1402 <mirror_z+0x78>
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
    13ec:	47 e0       	ldi	r20, 0x07	; 7
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	6c 0f       	add	r22, r28
    13fa:	7d 1f       	adc	r23, r29
    13fc:	68 0f       	add	r22, r24
    13fe:	79 1f       	adc	r23, r25
    1400:	db cf       	rjmp	.-74     	; 0x13b8 <mirror_z+0x2e>
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
        }
    }
}
    1402:	c0 5c       	subi	r28, 0xC0	; 192
    1404:	df 4f       	sbci	r29, 0xFF	; 255
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <effect_test>:

#include <math.h>
#include <avr/interrupt.h>

void effect_test (void)
{
    1416:	8f 92       	push	r8
    1418:	9f 92       	push	r9
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29

	int x,y,i;

	for (i=0;i<1000;i++)
    142a:	c0 e0       	ldi	r28, 0x00	; 0
    142c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = sin(i/8)*2+3.5;
    142e:	be 01       	movw	r22, r28
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	75 95       	asr	r23
    1434:	67 95       	ror	r22
    1436:	8a 95       	dec	r24
    1438:	e1 f7       	brne	.-8      	; 0x1432 <effect_test+0x1c>
    143a:	88 27       	eor	r24, r24
    143c:	77 fd       	sbrc	r23, 7
    143e:	80 95       	com	r24
    1440:	98 2f       	mov	r25, r24
    1442:	0e 94 c5 23 	call	0x478a	; 0x478a <__floatsisf>
    1446:	6b 01       	movw	r12, r22
    1448:	7c 01       	movw	r14, r24
    144a:	0e 94 ed 24 	call	0x49da	; 0x49da <sin>
    144e:	9b 01       	movw	r18, r22
    1450:	ac 01       	movw	r20, r24
    1452:	0e 94 c3 22 	call	0x4586	; 0x4586 <__addsf3>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e6       	ldi	r20, 0x60	; 96
    145c:	50 e4       	ldi	r21, 0x40	; 64
    145e:	0e 94 c3 22 	call	0x4586	; 0x4586 <__addsf3>
    1462:	0e 94 92 23 	call	0x4724	; 0x4724 <__fixsfsi>
    1466:	4b 01       	movw	r8, r22
    1468:	5c 01       	movw	r10, r24
		y = cos(i/8)*2+3.5;
    146a:	c7 01       	movw	r24, r14
    146c:	b6 01       	movw	r22, r12
    146e:	0e 94 27 23 	call	0x464e	; 0x464e <cos>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	0e 94 c3 22 	call	0x4586	; 0x4586 <__addsf3>
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e6       	ldi	r20, 0x60	; 96
    1480:	50 e4       	ldi	r21, 0x40	; 64
    1482:	0e 94 c3 22 	call	0x4586	; 0x4586 <__addsf3>
    1486:	0e 94 92 23 	call	0x4724	; 0x4724 <__fixsfsi>
    148a:	6b 01       	movw	r12, r22
    148c:	7c 01       	movw	r14, r24

		setvoxel(x,y,1);
    148e:	c4 01       	movw	r24, r8
    1490:	b6 01       	movw	r22, r12
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		setvoxel(x,y,1);
    149a:	c4 01       	movw	r24, r8
    149c:	b6 01       	movw	r22, r12
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		delay_ms(1000);
    14a6:	88 ee       	ldi	r24, 0xE8	; 232
    14a8:	93 e0       	ldi	r25, 0x03	; 3
    14aa:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		fill(0x00);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
void effect_test (void)
{

	int x,y,i;

	for (i=0;i<1000;i++)
    14b4:	21 96       	adiw	r28, 0x01	; 1
    14b6:	83 e0       	ldi	r24, 0x03	; 3
    14b8:	c8 3e       	cpi	r28, 0xE8	; 232
    14ba:	d8 07       	cpc	r29, r24
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <effect_test+0xaa>
    14be:	b7 cf       	rjmp	.-146    	; 0x142e <effect_test+0x18>
		setvoxel(x,y,1);
		delay_ms(1000);
		fill(0x00);
	}

}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	08 95       	ret

000014d6 <effect_stringfly2>:


void effect_stringfly2(const char * str, unsigned char prgMem)
{
    14d6:	2f 92       	push	r2
    14d8:	3f 92       	push	r3
    14da:	4f 92       	push	r4
    14dc:	5f 92       	push	r5
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	bf 92       	push	r11
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <effect_stringfly2+0x24>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <effect_stringfly2+0x26>
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	4c 01       	movw	r8, r24
    1504:	b6 2e       	mov	r11, r22
	int x, y, i;
	unsigned char chr[5];
    uint16_t pos = 0;
	
	unsigned char tempChar = GetChar(str, 0, prgMem);
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	4b 2d       	mov	r20, r11
    150c:	0e 94 fd 21 	call	0x43fa	; 0x43fa <GetChar>

void effect_stringfly2(const char * str, unsigned char prgMem)
{
	int x, y, i;
	unsigned char chr[5];
    uint16_t pos = 0;
    1510:	cc 24       	eor	r12, r12
    1512:	dd 24       	eor	r13, r13
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80 >> y)))
    1514:	30 e8       	ldi	r19, 0x80	; 128
    1516:	63 2e       	mov	r6, r19
    1518:	71 2c       	mov	r7, r1
	unsigned char chr[5];
    uint16_t pos = 0;
	
	unsigned char tempChar = GetChar(str, 0, prgMem);

	while (tempChar != 0)
    151a:	4e c0       	rjmp	.+156    	; 0x15b8 <effect_stringfly2+0xe2>
	{
		font_getchar(tempChar, chr);
    151c:	be 01       	movw	r22, r28
    151e:	6f 5f       	subi	r22, 0xFF	; 255
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	0e 94 14 1a 	call	0x3428	; 0x3428 <font_getchar>
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    1526:	00 e0       	ldi	r16, 0x00	; 0
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	21 c0       	rjmp	.+66     	; 0x156e <effect_stringfly2+0x98>
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80 >> y)))
    152c:	93 01       	movw	r18, r6
    152e:	0e 2c       	mov	r0, r14
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <effect_stringfly2+0x60>
    1532:	35 95       	asr	r19
    1534:	27 95       	ror	r18
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <effect_stringfly2+0x5c>
    153a:	f2 01       	movw	r30, r4
    153c:	80 81       	ld	r24, Z
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	28 23       	and	r18, r24
    1542:	39 23       	and	r19, r25
    1544:	21 15       	cp	r18, r1
    1546:	31 05       	cpc	r19, r1
    1548:	31 f0       	breq	.+12     	; 0x1556 <effect_stringfly2+0x80>
				{
					setvoxel(7, x + 2,y);
    154a:	87 e0       	ldi	r24, 0x07	; 7
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	b1 01       	movw	r22, r2
    1550:	a7 01       	movw	r20, r14
    1552:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		font_getchar(tempChar, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
    1556:	08 94       	sec
    1558:	e1 1c       	adc	r14, r1
    155a:	f1 1c       	adc	r15, r1
    155c:	f8 e0       	ldi	r31, 0x08	; 8
    155e:	ef 16       	cp	r14, r31
    1560:	f1 04       	cpc	r15, r1
    1562:	21 f7       	brne	.-56     	; 0x152c <effect_stringfly2+0x56>
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    1564:	0f 5f       	subi	r16, 0xFF	; 255
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	05 30       	cpi	r16, 0x05	; 5
    156a:	11 05       	cpc	r17, r1
    156c:	79 f0       	breq	.+30     	; 0x158c <effect_stringfly2+0xb6>

}


void effect_stringfly2(const char * str, unsigned char prgMem)
{
    156e:	ee 24       	eor	r14, r14
    1570:	ff 24       	eor	r15, r15
	}

}


void effect_stringfly2(const char * str, unsigned char prgMem)
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	49 2e       	mov	r4, r25
    1576:	51 2c       	mov	r5, r1
    1578:	4c 0e       	add	r4, r28
    157a:	5d 1e       	adc	r5, r29
    157c:	40 0e       	add	r4, r16
    157e:	51 1e       	adc	r5, r17
    1580:	22 e0       	ldi	r18, 0x02	; 2
    1582:	22 2e       	mov	r2, r18
    1584:	31 2c       	mov	r3, r1
    1586:	20 0e       	add	r2, r16
    1588:	31 1e       	adc	r3, r17
    158a:	d0 cf       	rjmp	.-96     	; 0x152c <effect_stringfly2+0x56>
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    158c:	06 e0       	ldi	r16, 0x06	; 6
    158e:	10 e0       	ldi	r17, 0x00	; 0
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i < 6; i++)
		{
			delay_ms(1000);
    1590:	88 ee       	ldi	r24, 0xE8	; 232
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
            shift(AXIS_X,-1);
    1598:	88 e7       	ldi	r24, 0x78	; 120
    159a:	6f ef       	ldi	r22, 0xFF	; 255
    159c:	7f ef       	ldi	r23, 0xFF	; 255
    159e:	0e 94 3e 08 	call	0x107c	; 0x107c <shift>
    15a2:	01 50       	subi	r16, 0x01	; 1
    15a4:	10 40       	sbci	r17, 0x00	; 0
			}
		}
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i < 6; i++)
    15a6:	a1 f7       	brne	.-24     	; 0x1590 <effect_stringfly2+0xba>
		{
			delay_ms(1000);
            shift(AXIS_X,-1);
		}

        pos++;
    15a8:	08 94       	sec
    15aa:	c1 1c       	adc	r12, r1
    15ac:	d1 1c       	adc	r13, r1
        tempChar = GetChar(str, pos, prgMem);
    15ae:	c4 01       	movw	r24, r8
    15b0:	b6 01       	movw	r22, r12
    15b2:	4b 2d       	mov	r20, r11
    15b4:	0e 94 fd 21 	call	0x43fa	; 0x43fa <GetChar>
	unsigned char chr[5];
    uint16_t pos = 0;
	
	unsigned char tempChar = GetChar(str, 0, prgMem);

	while (tempChar != 0)
    15b8:	88 23       	and	r24, r24
    15ba:	09 f0       	breq	.+2      	; 0x15be <effect_stringfly2+0xe8>
    15bc:	af cf       	rjmp	.-162    	; 0x151c <effect_stringfly2+0x46>
    15be:	08 e0       	ldi	r16, 0x08	; 8
    15c0:	10 e0       	ldi	r17, 0x00	; 0
        tempChar = GetChar(str, pos, prgMem);
	}
    // Shift the last character out of the cube.
	for (i = 0; i < 8; i++)
	{
		delay_ms(1000);
    15c2:	88 ee       	ldi	r24, 0xE8	; 232
    15c4:	93 e0       	ldi	r25, 0x03	; 3
    15c6:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
        shift(AXIS_X,-1);
    15ca:	88 e7       	ldi	r24, 0x78	; 120
    15cc:	6f ef       	ldi	r22, 0xFF	; 255
    15ce:	7f ef       	ldi	r23, 0xFF	; 255
    15d0:	0e 94 3e 08 	call	0x107c	; 0x107c <shift>
    15d4:	01 50       	subi	r16, 0x01	; 1
    15d6:	10 40       	sbci	r17, 0x00	; 0

        pos++;
        tempChar = GetChar(str, pos, prgMem);
	}
    // Shift the last character out of the cube.
	for (i = 0; i < 8; i++)
    15d8:	a1 f7       	brne	.-24     	; 0x15c2 <effect_stringfly2+0xec>
	{
		delay_ms(1000);
        shift(AXIS_X,-1);
	}
	
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	9f 90       	pop	r9
    15f8:	8f 90       	pop	r8
    15fa:	7f 90       	pop	r7
    15fc:	6f 90       	pop	r6
    15fe:	5f 90       	pop	r5
    1600:	4f 90       	pop	r4
    1602:	3f 90       	pop	r3
    1604:	2f 90       	pop	r2
    1606:	08 95       	ret

00001608 <effect_planboing>:

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	c8 2f       	mov	r28, r24
    1612:	d6 2f       	mov	r29, r22
    1614:	07 2f       	mov	r16, r23
    1616:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	for (i=0;i<8;i++)
	{
		fill(0x00);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
        setplane(plane, i);
    161e:	8c 2f       	mov	r24, r28
    1620:	61 2f       	mov	r22, r17
    1622:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <setplane>
		delay_ms(speed);
    1626:	8d 2f       	mov	r24, r29
    1628:	90 2f       	mov	r25, r16
    162a:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    162e:	1f 5f       	subi	r17, 0xFF	; 255

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
	int i;
	for (i=0;i<8;i++)
    1630:	18 30       	cpi	r17, 0x08	; 8
    1632:	91 f7       	brne	.-28     	; 0x1618 <effect_planboing+0x10>
    1634:	17 e0       	ldi	r17, 0x07	; 7
		delay_ms(speed);
	}
	
	for (i=7;i>=0;i--)
	{
		fill(0x00);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
        setplane(plane,i);
    163c:	8c 2f       	mov	r24, r28
    163e:	61 2f       	mov	r22, r17
    1640:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <setplane>
		delay_ms(speed);
    1644:	8d 2f       	mov	r24, r29
    1646:	90 2f       	mov	r25, r16
    1648:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    164c:	11 50       	subi	r17, 0x01	; 1
    164e:	98 f7       	brcc	.-26     	; 0x1636 <effect_planboing+0x2e>
	}
}
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	08 95       	ret

0000165a <effect_blinky2>:

void effect_blinky2()
{
    165a:	af 92       	push	r10
    165c:	bf 92       	push	r11
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
	int i,r;
	fill(0x00);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    1674:	02 e0       	ldi	r16, 0x02	; 2
    1676:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(i);
			
			fill(0xff);
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
    1678:	46 ef       	ldi	r20, 0xF6	; 246
    167a:	e4 2e       	mov	r14, r20
    167c:	4f ef       	ldi	r20, 0xFF	; 255
    167e:	f4 2e       	mov	r15, r20
    1680:	58 ee       	ldi	r21, 0xE8	; 232
    1682:	c5 2e       	mov	r12, r21
    1684:	53 e0       	ldi	r21, 0x03	; 3
    1686:	d5 2e       	mov	r13, r21
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
			delay_ms(751-i);
    1688:	6f ee       	ldi	r22, 0xEF	; 239
    168a:	a6 2e       	mov	r10, r22
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	b6 2e       	mov	r11, r22
    1690:	41 c0       	rjmp	.+130    	; 0x1714 <effect_blinky2+0xba>
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
		{
			fill(0x00);
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
			delay_ms(i);
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			
			fill(0xff);
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
			delay_ms(100);
    16a4:	84 e6       	ldi	r24, 0x64	; 100
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    16ac:	ce 01       	movw	r24, r28
    16ae:	b7 01       	movw	r22, r14
    16b0:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    16b4:	c6 01       	movw	r24, r12
    16b6:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    16ba:	6f 50       	subi	r22, 0x0F	; 15
    16bc:	70 40       	sbci	r23, 0x00	; 0
    16be:	c6 0f       	add	r28, r22
    16c0:	d7 1f       	adc	r29, r23
	fill(0x00);
	
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
    16c2:	1c 16       	cp	r1, r28
    16c4:	1d 06       	cpc	r1, r29
    16c6:	2c f3       	brlt	.-54     	; 0x1692 <effect_blinky2+0x38>
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
		}
		
		delay_ms(1000);
    16c8:	88 ee       	ldi	r24, 0xE8	; 232
    16ca:	93 e0       	ldi	r25, 0x03	; 3
    16cc:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		
		i = 750;
    16d0:	ce ee       	ldi	r28, 0xEE	; 238
    16d2:	d2 e0       	ldi	r29, 0x02	; 2
		while (i>0)
		{
			fill(0x00);
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
			delay_ms(751-i);
    16da:	c5 01       	movw	r24, r10
    16dc:	8c 1b       	sub	r24, r28
    16de:	9d 0b       	sbc	r25, r29
    16e0:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			
			fill(0xff);
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
			delay_ms(100);
    16ea:	84 e6       	ldi	r24, 0x64	; 100
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    16f2:	ce 01       	movw	r24, r28
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    16fa:	c6 01       	movw	r24, r12
    16fc:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1700:	6f 50       	subi	r22, 0x0F	; 15
    1702:	70 40       	sbci	r23, 0x00	; 0
    1704:	c6 0f       	add	r28, r22
    1706:	d7 1f       	adc	r29, r23
		}
		
		delay_ms(1000);
		
		i = 750;
		while (i>0)
    1708:	1c 16       	cp	r1, r28
    170a:	1d 06       	cpc	r1, r29
    170c:	1c f3       	brlt	.-58     	; 0x16d4 <effect_blinky2+0x7a>
    170e:	01 50       	subi	r16, 0x01	; 1
    1710:	10 40       	sbci	r17, 0x00	; 0
void effect_blinky2()
{
	int i,r;
	fill(0x00);
	
	for (r=0;r<2;r++)
    1712:	19 f0       	breq	.+6      	; 0x171a <effect_blinky2+0xc0>
		delay_ms(speed);
	}
}

void effect_blinky2()
{
    1714:	ce ee       	ldi	r28, 0xEE	; 238
    1716:	d2 e0       	ldi	r29, 0x02	; 2
    1718:	bc cf       	rjmp	.-136    	; 0x1692 <effect_blinky2+0x38>
			
			i = i - (15+(1000/(i/10)));
		}
	}

}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	bf 90       	pop	r11
    172c:	af 90       	pop	r10
    172e:	08 95       	ret

00001730 <effect_box_shrink_grow>:

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
    1730:	2f 92       	push	r2
    1732:	3f 92       	push	r3
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	00 d0       	rcall	.+0      	; 0x1756 <effect_box_shrink_grow+0x26>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <effect_box_shrink_grow+0x28>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	3c 01       	movw	r6, r24
    175e:	5b 01       	movw	r10, r22
    1760:	2a 01       	movw	r4, r20
    1762:	19 01       	movw	r2, r18
	int x, i, xyz;
	for (x=0;x<iterations;x++)
    1764:	cc 24       	eor	r12, r12
    1766:	dd 24       	eor	r13, r13
		}
	}

}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
    1768:	e7 e0       	ldi	r30, 0x07	; 7
    176a:	8e 2e       	mov	r8, r30
    176c:	91 2c       	mov	r9, r1
                mirror_z();

            if (rot == 1 || rot == 3)
                mirror_y();

            if (rot == 2 || rot == 3)
    176e:	cb 01       	movw	r24, r22
    1770:	02 97       	sbiw	r24, 0x02	; 2
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
    1776:	4e c0       	rjmp	.+156    	; 0x1814 <effect_box_shrink_grow+0xe4>
    1778:	1c 82       	std	Y+4, r1	; 0x04
    177a:	1b 82       	std	Y+3, r1	; 0x03
	{
		for (i=0;i<16;i++)
		{
            xyz = 7-i; // This reverses counter i between 0 and 7.
            if (i > 7) 
    177c:	eb 81       	ldd	r30, Y+3	; 0x03
    177e:	fc 81       	ldd	r31, Y+4	; 0x04
    1780:	e8 30       	cpi	r30, 0x08	; 8
    1782:	f1 05       	cpc	r31, r1
    1784:	24 f4       	brge	.+8      	; 0x178e <effect_box_shrink_grow+0x5e>
		}
	}

}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
    1786:	74 01       	movw	r14, r8
    1788:	ee 1a       	sub	r14, r30
    178a:	ff 0a       	sbc	r15, r31
    178c:	08 c0       	rjmp	.+16     	; 0x179e <effect_box_shrink_grow+0x6e>
    178e:	78 ef       	ldi	r23, 0xF8	; 248
    1790:	e7 2e       	mov	r14, r23
    1792:	7f ef       	ldi	r23, 0xFF	; 255
    1794:	f7 2e       	mov	r15, r23
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	e8 0e       	add	r14, r24
    179c:	f9 1e       	adc	r15, r25
		{
            xyz = 7-i; // This reverses counter i between 0 and 7.
            if (i > 7) 
                xyz = i-8; // at i > 7, i 8-15 becomes xyz 0-7.
            
            fill(0x00); delay_ms(1);
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
            cli(); // disable interrupts while the cube is being rotated
    17ac:	f8 94       	cli
			box_wireframe(0,0,0,xyz,xyz,xyz);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	97 01       	movw	r18, r14
    17bc:	87 01       	movw	r16, r14
    17be:	0e 94 58 05 	call	0xab0	; 0xab0 <box_wireframe>

            if (flip > 0) // upside-down
    17c2:	14 14       	cp	r1, r4
    17c4:	15 04       	cpc	r1, r5
    17c6:	14 f4       	brge	.+4      	; 0x17cc <effect_box_shrink_grow+0x9c>
                mirror_z();
    17c8:	0e 94 c5 09 	call	0x138a	; 0x138a <mirror_z>

            if (rot == 1 || rot == 3)
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	a9 16       	cp	r10, r25
    17d0:	b1 04       	cpc	r11, r1
    17d2:	21 f0       	breq	.+8      	; 0x17dc <effect_box_shrink_grow+0xac>
    17d4:	e3 e0       	ldi	r30, 0x03	; 3
    17d6:	ae 16       	cp	r10, r30
    17d8:	b1 04       	cpc	r11, r1
    17da:	11 f4       	brne	.+4      	; 0x17e0 <effect_box_shrink_grow+0xb0>
                mirror_y();
    17dc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <mirror_y>

            if (rot == 2 || rot == 3)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	91 05       	cpc	r25, r1
    17e8:	10 f4       	brcc	.+4      	; 0x17ee <effect_box_shrink_grow+0xbe>
                mirror_x();
    17ea:	0e 94 69 09 	call	0x12d2	; 0x12d2 <mirror_x>
            
            sei(); // enable interrupts
    17ee:	78 94       	sei
			delay_ms(delay);
    17f0:	c1 01       	movw	r24, r2
    17f2:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
	        fill(0x00);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
		for (i=0;i<16;i++)
    17fc:	eb 81       	ldd	r30, Y+3	; 0x03
    17fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1800:	31 96       	adiw	r30, 0x01	; 1
    1802:	fc 83       	std	Y+4, r31	; 0x04
    1804:	eb 83       	std	Y+3, r30	; 0x03
    1806:	e0 31       	cpi	r30, 0x10	; 16
    1808:	f1 05       	cpc	r31, r1
    180a:	09 f0       	breq	.+2      	; 0x180e <effect_box_shrink_grow+0xde>
    180c:	b7 cf       	rjmp	.-146    	; 0x177c <effect_box_shrink_grow+0x4c>
}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
    180e:	08 94       	sec
    1810:	c1 1c       	adc	r12, r1
    1812:	d1 1c       	adc	r13, r1
    1814:	c6 14       	cp	r12, r6
    1816:	d7 04       	cpc	r13, r7
    1818:	0c f4       	brge	.+2      	; 0x181c <effect_box_shrink_grow+0xec>
    181a:	ae cf       	rjmp	.-164    	; 0x1778 <effect_box_shrink_grow+0x48>
            sei(); // enable interrupts
			delay_ms(delay);
	        fill(0x00);
        }
    }
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	8f 90       	pop	r8
    183c:	7f 90       	pop	r7
    183e:	6f 90       	pop	r6
    1840:	5f 90       	pop	r5
    1842:	4f 90       	pop	r4
    1844:	3f 90       	pop	r3
    1846:	2f 90       	pop	r2
    1848:	08 95       	ret

0000184a <effect_box_woopwoop>:

// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow)
{
    184a:	8f 92       	push	r8
    184c:	9f 92       	push	r9
    184e:	af 92       	push	r10
    1850:	bf 92       	push	r11
    1852:	cf 92       	push	r12
    1854:	df 92       	push	r13
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	5c 01       	movw	r10, r24
    1864:	4b 01       	movw	r8, r22
	int i,ii;
	
	fill(0x00);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
	for (i=0;i<4;i++)
    186c:	c0 e0       	ldi	r28, 0x00	; 0
    186e:	d0 e0       	ldi	r29, 0x00	; 0
        }
    }
}

// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow)
    1870:	f3 e0       	ldi	r31, 0x03	; 3
    1872:	cf 2e       	mov	r12, r31
    1874:	d1 2c       	mov	r13, r1
	
	fill(0x00);
	for (i=0;i<4;i++)
	{
        ii = i;
        if (grow > 0)
    1876:	18 14       	cp	r1, r8
    1878:	19 04       	cpc	r1, r9
    187a:	24 f4       	brge	.+8      	; 0x1884 <effect_box_woopwoop+0x3a>
        }
    }
}

// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow)
    187c:	c6 01       	movw	r24, r12
    187e:	8c 1b       	sub	r24, r28
    1880:	9d 0b       	sbc	r25, r29
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <effect_box_woopwoop+0x3c>
	
	fill(0x00);
	for (i=0;i<4;i++)
	{
        ii = i;
        if (grow > 0)
    1884:	ce 01       	movw	r24, r28
            ii = 3-i;

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
    1886:	ac 01       	movw	r20, r24
    1888:	4c 5f       	subi	r20, 0xFC	; 252
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	76 01       	movw	r14, r12
    188e:	e8 1a       	sub	r14, r24
    1890:	f9 0a       	sbc	r15, r25
    1892:	ca 01       	movw	r24, r20
    1894:	ba 01       	movw	r22, r20
    1896:	97 01       	movw	r18, r14
    1898:	87 01       	movw	r16, r14
    189a:	0e 94 58 05 	call	0xab0	; 0xab0 <box_wireframe>
		delay_ms(delay);
    189e:	c5 01       	movw	r24, r10
    18a0:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		fill(0x00);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
void effect_box_woopwoop (int delay, int grow)
{
	int i,ii;
	
	fill(0x00);
	for (i=0;i<4;i++)
    18aa:	21 96       	adiw	r28, 0x01	; 1
    18ac:	c4 30       	cpi	r28, 0x04	; 4
    18ae:	d1 05       	cpc	r29, r1
    18b0:	11 f7       	brne	.-60     	; 0x1876 <effect_box_woopwoop+0x2c>

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
		delay_ms(delay);
		fill(0x00);
	}
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	df 90       	pop	r13
    18c0:	cf 90       	pop	r12
    18c2:	bf 90       	pop	r11
    18c4:	af 90       	pop	r10
    18c6:	9f 90       	pop	r9
    18c8:	8f 90       	pop	r8
    18ca:	08 95       	ret

000018cc <sendvoxel_z>:


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
    18cc:	6f 92       	push	r6
    18ce:	7f 92       	push	r7
    18d0:	9f 92       	push	r9
    18d2:	af 92       	push	r10
    18d4:	bf 92       	push	r11
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	f8 2e       	mov	r15, r24
    18e8:	e6 2e       	mov	r14, r22
    18ea:	94 2e       	mov	r9, r20
    18ec:	39 01       	movw	r6, r18
	int i, ii;
	for (i=0; i<8; i++)
    18ee:	00 e0       	ldi	r16, 0x00	; 0
    18f0:	10 e0       	ldi	r17, 0x00	; 0
}


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
    18f2:	a7 e0       	ldi	r26, 0x07	; 7
    18f4:	ca 2e       	mov	r12, r26
    18f6:	d1 2c       	mov	r13, r1
    18f8:	b8 e0       	ldi	r27, 0x08	; 8
    18fa:	ab 2e       	mov	r10, r27
    18fc:	b1 2c       	mov	r11, r1
{
	int i, ii;
	for (i=0; i<8; i++)
	{
		if (z == 7)
    18fe:	87 e0       	ldi	r24, 0x07	; 7
    1900:	98 16       	cp	r9, r24
    1902:	69 f4       	brne	.+26     	; 0x191e <sendvoxel_z+0x52>
}


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
    1904:	e6 01       	movw	r28, r12
    1906:	c0 1b       	sub	r28, r16
    1908:	d1 0b       	sbc	r29, r17
    190a:	a5 01       	movw	r20, r10
    190c:	40 1b       	sub	r20, r16
    190e:	51 0b       	sbc	r21, r17
	for (i=0; i<8; i++)
	{
		if (z == 7)
		{
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    1910:	8f 2d       	mov	r24, r15
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	6e 2d       	mov	r22, r14
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
    191c:	0a c0       	rjmp	.+20     	; 0x1932 <sendvoxel_z+0x66>
}


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
    191e:	a8 01       	movw	r20, r16
    1920:	41 50       	subi	r20, 0x01	; 1
    1922:	50 40       	sbci	r21, 0x00	; 0
			ii = 7-i;
			clrvoxel(x,y,ii+1);
		} else
		{
			ii = i;
			clrvoxel(x,y,ii-1);
    1924:	8f 2d       	mov	r24, r15
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	6e 2d       	mov	r22, r14
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
    1930:	e8 01       	movw	r28, r16
		}
		setvoxel(x,y,ii);
    1932:	8f 2d       	mov	r24, r15
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	6e 2d       	mov	r22, r14
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	ae 01       	movw	r20, r28
    193c:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		delay_ms(delay);
    1940:	c3 01       	movw	r24, r6
    1942:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
    1946:	0f 5f       	subi	r16, 0xFF	; 255
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	08 30       	cpi	r16, 0x08	; 8
    194c:	11 05       	cpc	r17, r1
    194e:	b9 f6       	brne	.-82     	; 0x18fe <sendvoxel_z+0x32>
			clrvoxel(x,y,ii-1);
		}
		setvoxel(x,y,ii);
		delay_ms(delay);
	}
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	bf 90       	pop	r11
    1962:	af 90       	pop	r10
    1964:	9f 90       	pop	r9
    1966:	7f 90       	pop	r7
    1968:	6f 90       	pop	r6
    196a:	08 95       	ret

0000196c <sendplane_rand_z>:

// Send all the voxels from one side of the cube to the other
// Start at z and send to the opposite side.
// Sends in random order.
void sendplane_rand_z (unsigned char z, int delay, int wait)
{
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	c8 2f       	mov	r28, r24
    1982:	6b 01       	movw	r12, r22
    1984:	5a 01       	movw	r10, r20
	unsigned char loop = 16;
	unsigned char x, y;

	fill(0x00);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>

	setplane_z(z);
    198c:	8c 2f       	mov	r24, r28
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 4f 04 	call	0x89e	; 0x89e <setplane_z>
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
    1994:	11 e1       	ldi	r17, 0x11	; 17
	{
		x = rand()%4;
    1996:	d4 e0       	ldi	r29, 0x04	; 4
    1998:	ed 2e       	mov	r14, r29
    199a:	f1 2c       	mov	r15, r1
	fill(0x00);

	setplane_z(z);
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
    199c:	1f c0       	rjmp	.+62     	; 0x19dc <sendplane_rand_z+0x70>
	{
		x = rand()%4;
    199e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    19a2:	b7 01       	movw	r22, r14
    19a4:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    19a8:	d8 2f       	mov	r29, r24
		y = rand()%4;
    19aa:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    19ae:	b7 01       	movw	r22, r14
    19b0:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    19b4:	08 2f       	mov	r16, r24
		if (getvoxel(x,y,z))
    19b6:	8d 2f       	mov	r24, r29
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	60 2f       	mov	r22, r16
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	4c 2f       	mov	r20, r28
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    19c6:	88 23       	and	r24, r24
    19c8:	51 f3       	breq	.-44     	; 0x199e <sendplane_rand_z+0x32>
		{
			// Send the voxel flying
			sendvoxel_z(x,y,z,delay);
    19ca:	8d 2f       	mov	r24, r29
    19cc:	60 2f       	mov	r22, r16
    19ce:	4c 2f       	mov	r20, r28
    19d0:	96 01       	movw	r18, r12
    19d2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <sendvoxel_z>
			delay_ms(wait);
    19d6:	c5 01       	movw	r24, r10
    19d8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    19dc:	11 50       	subi	r17, 0x01	; 1
	fill(0x00);

	setplane_z(z);
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
    19de:	f9 f6       	brne	.-66     	; 0x199e <sendplane_rand_z+0x32>
			sendvoxel_z(x,y,z,delay);
			delay_ms(wait);
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
		}
	}
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	08 95       	ret

000019f6 <sendvoxels_rand_z>:

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    19f6:	2f 92       	push	r2
    19f8:	3f 92       	push	r3
    19fa:	4f 92       	push	r4
    19fc:	5f 92       	push	r5
    19fe:	6f 92       	push	r6
    1a00:	7f 92       	push	r7
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	1c 01       	movw	r2, r24
    1a1a:	3b 01       	movw	r6, r22
    1a1c:	2a 01       	movw	r4, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    1a24:	00 e0       	ldi	r16, 0x00	; 0
    1a26:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (y=0;y<8;y++)
		{
			// Then set a voxel either at the top or at the bottom
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
    1a28:	32 e0       	ldi	r19, 0x02	; 2
    1a2a:	e3 2e       	mov	r14, r19
    1a2c:	f1 2c       	mov	r15, r1
    1a2e:	1a c0       	rjmp	.+52     	; 0x1a64 <sendvoxels_rand_z+0x6e>
    1a30:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1a34:	b7 01       	movw	r22, r14
    1a36:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	23 e0       	ldi	r18, 0x03	; 3
    1a3e:	44 0f       	add	r20, r20
    1a40:	55 1f       	adc	r21, r21
    1a42:	2a 95       	dec	r18
    1a44:	e1 f7       	brne	.-8      	; 0x1a3e <sendvoxels_rand_z+0x48>
    1a46:	48 1b       	sub	r20, r24
    1a48:	59 0b       	sbc	r21, r25
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	be 01       	movw	r22, r28
    1a4e:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    1a52:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
	{
		for (y=0;y<8;y++)
    1a54:	c8 30       	cpi	r28, 0x08	; 8
    1a56:	d1 05       	cpc	r29, r1
    1a58:	59 f7       	brne	.-42     	; 0x1a30 <sendvoxels_rand_z+0x3a>
    1a5a:	0f 5f       	subi	r16, 0xFF	; 255
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
    1a5e:	08 30       	cpi	r16, 0x08	; 8
    1a60:	11 05       	cpc	r17, r1
    1a62:	89 f1       	breq	.+98     	; 0x1ac6 <sendvoxels_rand_z+0xd0>
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    1a64:	c0 e0       	ldi	r28, 0x00	; 0
    1a66:	d0 e0       	ldi	r29, 0x00	; 0
    1a68:	e3 cf       	rjmp	.-58     	; 0x1a30 <sendvoxels_rand_z+0x3a>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    1a6a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1a6e:	4c 01       	movw	r8, r24
		y = rand()%8;
    1a70:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1a74:	b5 01       	movw	r22, r10
    1a76:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1a7a:	c8 2f       	mov	r28, r24
    1a7c:	f8 2e       	mov	r15, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    1a7e:	8e 15       	cp	r24, r14
    1a80:	01 f1       	breq	.+64     	; 0x1ac2 <sendvoxels_rand_z+0xcc>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    1a82:	c4 01       	movw	r24, r8
    1a84:	b5 01       	movw	r22, r10
    1a86:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1a8a:	d8 2f       	mov	r29, r24
    1a8c:	18 2f       	mov	r17, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    1a8e:	8d 15       	cp	r24, r13
    1a90:	c1 f0       	breq	.+48     	; 0x1ac2 <sendvoxels_rand_z+0xcc>
		{
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0))
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	6c 2f       	mov	r22, r28
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    1aa0:	88 23       	and	r24, r24
    1aa2:	21 f0       	breq	.+8      	; 0x1aac <sendvoxels_rand_z+0xb6>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    1aa4:	8d 2f       	mov	r24, r29
    1aa6:	6c 2f       	mov	r22, r28
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <sendvoxels_rand_z+0xbc>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
    1aac:	8d 2f       	mov	r24, r29
    1aae:	6c 2f       	mov	r22, r28
    1ab0:	47 e0       	ldi	r20, 0x07	; 7
    1ab2:	93 01       	movw	r18, r6
    1ab4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <sendvoxel_z>
			}
			delay_ms(wait);
    1ab8:	c2 01       	movw	r24, r4
    1aba:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    1abe:	ef 2c       	mov	r14, r15
    1ac0:	d1 2e       	mov	r13, r17
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    1ac2:	0f 5f       	subi	r16, 0xFF	; 255
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <sendvoxels_rand_z+0xdc>
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
    1ac6:	00 e0       	ldi	r16, 0x00	; 0
    1ac8:	ee 24       	eor	r14, r14
    1aca:	dd 24       	eor	r13, r13

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
		y = rand()%8;
    1acc:	18 e0       	ldi	r17, 0x08	; 8
    1ace:	a1 2e       	mov	r10, r17
    1ad0:	b1 2c       	mov	r11, r1
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    1ad2:	80 2f       	mov	r24, r16
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	82 15       	cp	r24, r2
    1ad8:	93 05       	cpc	r25, r3
    1ada:	3c f2       	brlt	.-114    	; 0x1a6a <sendvoxels_rand_z+0x74>
			last_y = y;
			last_x = x;
		}
	}

}
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	df 90       	pop	r13
    1aea:	bf 90       	pop	r11
    1aec:	af 90       	pop	r10
    1aee:	9f 90       	pop	r9
    1af0:	8f 90       	pop	r8
    1af2:	7f 90       	pop	r7
    1af4:	6f 90       	pop	r6
    1af6:	5f 90       	pop	r5
    1af8:	4f 90       	pop	r4
    1afa:	3f 90       	pop	r3
    1afc:	2f 90       	pop	r2
    1afe:	08 95       	ret

00001b00 <boingboing>:


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    1b00:	2f 92       	push	r2
    1b02:	3f 92       	push	r3
    1b04:	4f 92       	push	r4
    1b06:	5f 92       	push	r5
    1b08:	6f 92       	push	r6
    1b0a:	7f 92       	push	r7
    1b0c:	8f 92       	push	r8
    1b0e:	9f 92       	push	r9
    1b10:	af 92       	push	r10
    1b12:	bf 92       	push	r11
    1b14:	cf 92       	push	r12
    1b16:	df 92       	push	r13
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	e8 97       	sbiw	r28, 0x38	; 56
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	9c ab       	sts	0x5c, r25
    1b36:	8b ab       	sts	0x5b, r24
    1b38:	7e ab       	sts	0x5e, r23
    1b3a:	6d ab       	sts	0x5d, r22
    1b3c:	62 2e       	mov	r6, r18
	fill(0x00);		// Blank the cube
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
	int x, y, z;		// Current coordinates for the point
	int dx, dy, dz;	// Direction of movement
	int lol, i;		// lol?
	unsigned char crash_x, crash_y, crash_z;

	y = rand()%8;
    1b44:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1b48:	08 e0       	ldi	r16, 0x08	; 8
    1b4a:	10 e0       	ldi	r17, 0x00	; 0
    1b4c:	b8 01       	movw	r22, r16
    1b4e:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1b52:	b8 2e       	mov	r11, r24
    1b54:	a9 2e       	mov	r10, r25
    1b56:	48 2e       	mov	r4, r24
    1b58:	59 2e       	mov	r5, r25
	x = rand()%8;
    1b5a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1b5e:	b8 01       	movw	r22, r16
    1b60:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1b64:	e8 2e       	mov	r14, r24
    1b66:	c9 2e       	mov	r12, r25
    1b68:	28 2e       	mov	r2, r24
    1b6a:	39 2e       	mov	r3, r25
	z = rand()%8;
    1b6c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1b70:	b8 01       	movw	r22, r16
    1b72:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1b76:	4c 01       	movw	r8, r24

}


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
    1b78:	9e 01       	movw	r18, r28
    1b7a:	2f 5c       	subi	r18, 0xCF	; 207
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	3a ab       	sts	0x5a, r19
    1b80:	29 ab       	sts	0x59, r18
    1b82:	fe 01       	movw	r30, r28
    1b84:	31 96       	adiw	r30, 0x01	; 1

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
	{
		snake[i][0] = x;
    1b86:	e0 82       	st	Z, r14
    1b88:	c1 82       	std	Z+1, r12	; 0x01
		snake[i][1] = y;
    1b8a:	b2 82       	std	Z+2, r11	; 0x02
    1b8c:	a3 82       	std	Z+3, r10	; 0x03
		snake[i][2] = z;
    1b8e:	84 83       	std	Z+4, r24	; 0x04
    1b90:	95 83       	std	Z+5, r25	; 0x05
    1b92:	36 96       	adiw	r30, 0x06	; 6
	x = rand()%8;
	z = rand()%8;

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
    1b94:	29 a9       	sts	0x49, r18
    1b96:	3a a9       	sts	0x4a, r19
    1b98:	e2 17       	cp	r30, r18
    1b9a:	f3 07       	cpc	r31, r19
    1b9c:	a1 f7       	brne	.-24     	; 0x1b86 <boingboing+0x86>
    1b9e:	01 e0       	ldi	r16, 0x01	; 1
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	e8 2e       	mov	r14, r24
    1ba6:	f1 2c       	mov	r15, r1
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	c9 2e       	mov	r12, r25
    1bac:	d1 2c       	mov	r13, r1

}


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
    1bae:	21 e0       	ldi	r18, 0x01	; 1
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	2c 0f       	add	r18, r28
    1bb4:	3d 1f       	adc	r19, r29
    1bb6:	2c 50       	subi	r18, 0x0C	; 12
    1bb8:	30 40       	sbci	r19, 0x00	; 0
    1bba:	38 af       	sts	0x78, r19
    1bbc:	2f ab       	sts	0x5f, r18
    1bbe:	5a c2       	rjmp	.+1204   	; 0x2074 <boingboing+0x574>
		crash_y = 0;
		crash_z = 0;
	

		// Let's mix things up a little:
		if (rand()%3 == 0)
    1bc0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1bc4:	63 e0       	ldi	r22, 0x03	; 3
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f5       	brne	.+90     	; 0x1c2a <boingboing+0x12a>
		{
			// Pick a random axis, and set the speed to a random number.
			lol = rand()%3;
    1bd0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1bd4:	63 e0       	ldi	r22, 0x03	; 3
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
			if (lol == 0)
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	59 f4       	brne	.+22     	; 0x1bf6 <boingboing+0xf6>
				dx = rand()%3 - 1;
    1be0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1be4:	63 e0       	ldi	r22, 0x03	; 3
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1bec:	6c 01       	movw	r12, r24
    1bee:	08 94       	sec
    1bf0:	c1 08       	sbc	r12, r1
    1bf2:	d1 08       	sbc	r13, r1
    1bf4:	1a c0       	rjmp	.+52     	; 0x1c2a <boingboing+0x12a>
			
			if (lol == 1)
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	59 f4       	brne	.+22     	; 0x1c12 <boingboing+0x112>
				dy = rand()%3 - 1;
    1bfc:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1c00:	63 e0       	ldi	r22, 0x03	; 3
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1c08:	7c 01       	movw	r14, r24
    1c0a:	08 94       	sec
    1c0c:	e1 08       	sbc	r14, r1
    1c0e:	f1 08       	sbc	r15, r1
    1c10:	0c c0       	rjmp	.+24     	; 0x1c2a <boingboing+0x12a>
				
			if (lol == 2)
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	91 05       	cpc	r25, r1
    1c16:	49 f4       	brne	.+18     	; 0x1c2a <boingboing+0x12a>
				dz = rand()%3 - 1;
    1c18:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1c1c:	63 e0       	ldi	r22, 0x03	; 3
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    1c24:	8c 01       	movw	r16, r24
    1c26:	01 50       	subi	r16, 0x01	; 1
    1c28:	10 40       	sbci	r17, 0x00	; 0
		}

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	c3 16       	cp	r12, r19
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	d3 06       	cpc	r13, r19
    1c32:	91 f4       	brne	.+36     	; 0x1c58 <boingboing+0x158>
    1c34:	21 14       	cp	r2, r1
    1c36:	31 04       	cpc	r3, r1
    1c38:	79 f4       	brne	.+30     	; 0x1c58 <boingboing+0x158>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1c3a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1c3e:	63 e0       	ldi	r22, 0x03	; 3
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
		{
			crash_x = 0x01;
    1c46:	77 24       	eor	r7, r7
    1c48:	73 94       	inc	r7
			if (rand()%3 == 1)
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <boingboing+0x15c>
			{
				dx = 1;
    1c50:	b1 e0       	ldi	r27, 0x01	; 1
    1c52:	cb 2e       	mov	r12, r27
    1c54:	d1 2c       	mov	r13, r1
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <boingboing+0x160>
	dy = 1;
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
    1c58:	77 24       	eor	r7, r7
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <boingboing+0x160>
			if (rand()%3 == 1)
			{
				dx = 1;
			} else
			{
				dx = 0;
    1c5c:	cc 24       	eor	r12, r12
    1c5e:	dd 24       	eor	r13, r13
			}
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	e8 16       	cp	r14, r24
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	f8 06       	cpc	r15, r24
    1c68:	91 f4       	brne	.+36     	; 0x1c8e <boingboing+0x18e>
    1c6a:	41 14       	cp	r4, r1
    1c6c:	51 04       	cpc	r5, r1
    1c6e:	79 f4       	brne	.+30     	; 0x1c8e <boingboing+0x18e>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    1c70:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
		{
			crash_y = 0x01;
    1c7c:	aa 24       	eor	r10, r10
    1c7e:	a3 94       	inc	r10
			if (rand()%3 == 1)
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	31 f4       	brne	.+12     	; 0x1c92 <boingboing+0x192>
			{
				dy = 1;
    1c86:	a1 e0       	ldi	r26, 0x01	; 1
    1c88:	ea 2e       	mov	r14, r26
    1c8a:	f1 2c       	mov	r15, r1
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <boingboing+0x196>
	dz = 1;
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
    1c8e:	aa 24       	eor	r10, r10
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <boingboing+0x196>
			if (rand()%3 == 1)
			{
				dy = 1;
			} else
			{
				dy = 0;
    1c92:	ee 24       	eor	r14, r14
    1c94:	ff 24       	eor	r15, r15
			}
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
    1c96:	9f ef       	ldi	r25, 0xFF	; 255
    1c98:	0f 3f       	cpi	r16, 0xFF	; 255
    1c9a:	19 07       	cpc	r17, r25
    1c9c:	89 f4       	brne	.+34     	; 0x1cc0 <boingboing+0x1c0>
    1c9e:	81 14       	cp	r8, r1
    1ca0:	91 04       	cpc	r9, r1
    1ca2:	71 f4       	brne	.+28     	; 0x1cc0 <boingboing+0x1c0>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    1ca4:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1ca8:	63 e0       	ldi	r22, 0x03	; 3
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
		{
			crash_z = 0x01;
    1cb0:	bb 24       	eor	r11, r11
    1cb2:	b3 94       	inc	r11
			if (rand()%3 == 1)
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <boingboing+0x1c4>
			{
				dz = 1;
    1cba:	01 e0       	ldi	r16, 0x01	; 1
    1cbc:	10 e0       	ldi	r17, 0x00	; 0
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <boingboing+0x1c8>
	
	while(iterations)
	{
		crash_x = 0;
		crash_y = 0;
		crash_z = 0;
    1cc0:	bb 24       	eor	r11, r11
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <boingboing+0x1c8>
			if (rand()%3 == 1)
			{
				dz = 1;
			} else
			{
				dz = 0;
    1cc4:	00 e0       	ldi	r16, 0x00	; 0
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
    1cc8:	e1 e0       	ldi	r30, 0x01	; 1
    1cca:	ce 16       	cp	r12, r30
    1ccc:	d1 04       	cpc	r13, r1
    1cce:	a9 f4       	brne	.+42     	; 0x1cfa <boingboing+0x1fa>
    1cd0:	f7 e0       	ldi	r31, 0x07	; 7
    1cd2:	2f 16       	cp	r2, r31
    1cd4:	31 04       	cpc	r3, r1
    1cd6:	89 f4       	brne	.+34     	; 0x1cfa <boingboing+0x1fa>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    1cd8:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
		{
			crash_x = 0x01;
    1ce4:	77 24       	eor	r7, r7
    1ce6:	73 94       	inc	r7
			if (rand()%3 == 1)
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <boingboing+0x1f6>
			{
				dx = -1;
    1cee:	cc 24       	eor	r12, r12
    1cf0:	ca 94       	dec	r12
    1cf2:	dc 2c       	mov	r13, r12
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <boingboing+0x1fa>
			} else
			{
				dx = 0;
    1cf6:	cc 24       	eor	r12, r12
    1cf8:	dd 24       	eor	r13, r13
			}
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
    1cfa:	21 e0       	ldi	r18, 0x01	; 1
    1cfc:	e2 16       	cp	r14, r18
    1cfe:	f1 04       	cpc	r15, r1
    1d00:	a9 f4       	brne	.+42     	; 0x1d2c <boingboing+0x22c>
    1d02:	37 e0       	ldi	r19, 0x07	; 7
    1d04:	43 16       	cp	r4, r19
    1d06:	51 04       	cpc	r5, r1
    1d08:	89 f4       	brne	.+34     	; 0x1d2c <boingboing+0x22c>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    1d0a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1d0e:	63 e0       	ldi	r22, 0x03	; 3
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
		{
			crash_y = 0x01;
    1d16:	aa 24       	eor	r10, r10
    1d18:	a3 94       	inc	r10
			if (rand()%3 == 1)
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <boingboing+0x228>
			{
				dy = -1;
    1d20:	ee 24       	eor	r14, r14
    1d22:	ea 94       	dec	r14
    1d24:	fe 2c       	mov	r15, r14
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <boingboing+0x22c>
			} else
			{
				dy = 0;
    1d28:	ee 24       	eor	r14, r14
    1d2a:	ff 24       	eor	r15, r15
			}
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
    1d2c:	01 30       	cpi	r16, 0x01	; 1
    1d2e:	11 05       	cpc	r17, r1
    1d30:	a1 f4       	brne	.+40     	; 0x1d5a <boingboing+0x25a>
    1d32:	87 e0       	ldi	r24, 0x07	; 7
    1d34:	88 16       	cp	r8, r24
    1d36:	91 04       	cpc	r9, r1
    1d38:	81 f4       	brne	.+32     	; 0x1d5a <boingboing+0x25a>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    1d3a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1d3e:	63 e0       	ldi	r22, 0x03	; 3
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
		{
			crash_z = 0x01;
    1d46:	bb 24       	eor	r11, r11
    1d48:	b3 94       	inc	r11
			if (rand()%3 == 1)
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <boingboing+0x256>
			{
				dz = -1;
    1d50:	0f ef       	ldi	r16, 0xFF	; 255
    1d52:	1f ef       	ldi	r17, 0xFF	; 255
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <boingboing+0x25a>
			} else
			{
				dz = 0;
    1d56:	00 e0       	ldi	r16, 0x00	; 0
    1d58:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		// mode bit 0 sets crash action enable
		if (mode | 0x01)
		{
			if (crash_x)
    1d5a:	77 20       	and	r7, r7
    1d5c:	41 f1       	breq	.+80     	; 0x1dae <boingboing+0x2ae>
			{
				if (dy == 0)
    1d5e:	e1 14       	cp	r14, r1
    1d60:	f1 04       	cpc	r15, r1
    1d62:	91 f4       	brne	.+36     	; 0x1d88 <boingboing+0x288>
				{
					if (y == 7)
    1d64:	97 e0       	ldi	r25, 0x07	; 7
    1d66:	49 16       	cp	r4, r25
    1d68:	51 04       	cpc	r5, r1
    1d6a:	39 f0       	breq	.+14     	; 0x1d7a <boingboing+0x27a>
					{
						dy = -1;
					} else if (y == 0)
    1d6c:	41 14       	cp	r4, r1
    1d6e:	51 04       	cpc	r5, r1
    1d70:	41 f0       	breq	.+16     	; 0x1d82 <boingboing+0x282>
					{
						dy = +1;
					} else
					{
						if (rand()%2 == 0)
    1d72:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1d76:	80 fd       	sbrc	r24, 0
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <boingboing+0x282>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    1d7a:	ee 24       	eor	r14, r14
    1d7c:	ea 94       	dec	r14
    1d7e:	fe 2c       	mov	r15, r14
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <boingboing+0x288>
						if (rand()%2 == 0)
						{
							dy = -1;
						} else
						{
							dy = 1;
    1d82:	f1 e0       	ldi	r31, 0x01	; 1
    1d84:	ef 2e       	mov	r14, r31
    1d86:	f1 2c       	mov	r15, r1
						}
					}
				}
				if (dz == 0)
    1d88:	01 15       	cp	r16, r1
    1d8a:	11 05       	cpc	r17, r1
    1d8c:	81 f4       	brne	.+32     	; 0x1dae <boingboing+0x2ae>
				{
					if (z == 7)
    1d8e:	e7 e0       	ldi	r30, 0x07	; 7
    1d90:	8e 16       	cp	r8, r30
    1d92:	91 04       	cpc	r9, r1
    1d94:	39 f0       	breq	.+14     	; 0x1da4 <boingboing+0x2a4>
					{
						dz = -1;
					} else if (z == 0)
    1d96:	81 14       	cp	r8, r1
    1d98:	91 04       	cpc	r9, r1
    1d9a:	39 f0       	breq	.+14     	; 0x1daa <boingboing+0x2aa>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    1d9c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1da0:	80 fd       	sbrc	r24, 0
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <boingboing+0x2aa>
				}
				if (dz == 0)
				{
					if (z == 7)
					{
						dz = -1;
    1da4:	0f ef       	ldi	r16, 0xFF	; 255
    1da6:	1f ef       	ldi	r17, 0xFF	; 255
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <boingboing+0x2ae>
						if (rand()%2 == 0)
						{
							dz = -1;
						} else
						{
							dz = 1;
    1daa:	01 e0       	ldi	r16, 0x01	; 1
    1dac:	10 e0       	ldi	r17, 0x00	; 0
						}
					}	
				}
			}
			
			if (crash_y)
    1dae:	aa 20       	and	r10, r10
    1db0:	41 f1       	breq	.+80     	; 0x1e02 <boingboing+0x302>
			{
				if (dx == 0)
    1db2:	c1 14       	cp	r12, r1
    1db4:	d1 04       	cpc	r13, r1
    1db6:	91 f4       	brne	.+36     	; 0x1ddc <boingboing+0x2dc>
				{
					if (x == 7)
    1db8:	f7 e0       	ldi	r31, 0x07	; 7
    1dba:	2f 16       	cp	r2, r31
    1dbc:	31 04       	cpc	r3, r1
    1dbe:	39 f0       	breq	.+14     	; 0x1dce <boingboing+0x2ce>
					{
						dx = -1;
					} else if (x == 0)
    1dc0:	21 14       	cp	r2, r1
    1dc2:	31 04       	cpc	r3, r1
    1dc4:	41 f0       	breq	.+16     	; 0x1dd6 <boingboing+0x2d6>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    1dc6:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1dca:	80 fd       	sbrc	r24, 0
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <boingboing+0x2d6>
			{
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    1dce:	cc 24       	eor	r12, r12
    1dd0:	ca 94       	dec	r12
    1dd2:	dc 2c       	mov	r13, r12
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <boingboing+0x2dc>
						if (rand()%2 == 0)
						{
							dx = -1;
						} else
						{
							dx = 1;
    1dd6:	e1 e0       	ldi	r30, 0x01	; 1
    1dd8:	ce 2e       	mov	r12, r30
    1dda:	d1 2c       	mov	r13, r1
						}
					}
				}
				if (dz == 0)
    1ddc:	01 15       	cp	r16, r1
    1dde:	11 05       	cpc	r17, r1
    1de0:	81 f4       	brne	.+32     	; 0x1e02 <boingboing+0x302>
				{
					if (z == 3)
    1de2:	23 e0       	ldi	r18, 0x03	; 3
    1de4:	82 16       	cp	r8, r18
    1de6:	91 04       	cpc	r9, r1
    1de8:	39 f0       	breq	.+14     	; 0x1df8 <boingboing+0x2f8>
					{
						dz = -1;
					} else if (z == 0)
    1dea:	81 14       	cp	r8, r1
    1dec:	91 04       	cpc	r9, r1
    1dee:	39 f0       	breq	.+14     	; 0x1dfe <boingboing+0x2fe>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    1df0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1df4:	80 fd       	sbrc	r24, 0
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <boingboing+0x2fe>
				}
				if (dz == 0)
				{
					if (z == 3)
					{
						dz = -1;
    1df8:	0f ef       	ldi	r16, 0xFF	; 255
    1dfa:	1f ef       	ldi	r17, 0xFF	; 255
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <boingboing+0x302>
						if (rand()%2 == 0)
						{
							dz = -1;
						} else
						{
							dz = 1;
    1dfe:	01 e0       	ldi	r16, 0x01	; 1
    1e00:	10 e0       	ldi	r17, 0x00	; 0
						}
					}	
				}
			}
			
			if (crash_z)
    1e02:	bb 20       	and	r11, r11
    1e04:	21 f1       	breq	.+72     	; 0x1e4e <boingboing+0x34e>
			{
				if (dy == 0)
    1e06:	e1 14       	cp	r14, r1
    1e08:	f1 04       	cpc	r15, r1
    1e0a:	91 f4       	brne	.+36     	; 0x1e30 <boingboing+0x330>
				{
					if (y == 7)
    1e0c:	37 e0       	ldi	r19, 0x07	; 7
    1e0e:	43 16       	cp	r4, r19
    1e10:	51 04       	cpc	r5, r1
    1e12:	39 f0       	breq	.+14     	; 0x1e22 <boingboing+0x322>
					{
						dy = -1;
					} else if (y == 0)
    1e14:	41 14       	cp	r4, r1
    1e16:	51 04       	cpc	r5, r1
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <boingboing+0x32a>
					{
						dy = 1;
					} else
					{
						if (rand()%2 == 0)
    1e1a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1e1e:	80 fd       	sbrc	r24, 0
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <boingboing+0x32a>
			{
				if (dy == 0)
				{
					if (y == 7)
					{
						dy = -1;
    1e22:	ee 24       	eor	r14, r14
    1e24:	ea 94       	dec	r14
    1e26:	fe 2c       	mov	r15, r14
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <boingboing+0x330>
						if (rand()%2 == 0)
						{
							dy = -1;
						} else
						{
							dy = 1;
    1e2a:	71 e0       	ldi	r23, 0x01	; 1
    1e2c:	e7 2e       	mov	r14, r23
    1e2e:	f1 2c       	mov	r15, r1
						}
					}	
				}
				if (dx == 0)
    1e30:	c1 14       	cp	r12, r1
    1e32:	d1 04       	cpc	r13, r1
    1e34:	61 f4       	brne	.+24     	; 0x1e4e <boingboing+0x34e>
				{
					if (x == 7)
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	28 16       	cp	r2, r24
    1e3a:	31 04       	cpc	r3, r1
    1e3c:	69 f1       	breq	.+90     	; 0x1e98 <boingboing+0x398>
					{
						dx = -1;
					} else if (x == 0)
    1e3e:	21 14       	cp	r2, r1
    1e40:	31 04       	cpc	r3, r1
    1e42:	49 f0       	breq	.+18     	; 0x1e56 <boingboing+0x356>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    1e44:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1e48:	80 ff       	sbrs	r24, 0
    1e4a:	1a c1       	rjmp	.+564    	; 0x2080 <boingboing+0x580>
    1e4c:	5d c0       	rjmp	.+186    	; 0x1f08 <boingboing+0x408>
		}
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
    1e4e:	21 14       	cp	r2, r1
    1e50:	31 04       	cpc	r3, r1
    1e52:	e9 f4       	brne	.+58     	; 0x1e8e <boingboing+0x38e>
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <boingboing+0x35c>
					if (x == 7)
					{
						dx = -1;
					} else if (x == 0)
					{
						dx = 1;
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	c6 2e       	mov	r12, r22
    1e5a:	d1 2c       	mov	r13, r1
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
				(x == 0 && y == 0 && z == 0) ||
    1e5c:	41 14       	cp	r4, r1
    1e5e:	51 04       	cpc	r5, r1
    1e60:	49 f4       	brne	.+18     	; 0x1e74 <boingboing+0x374>
    1e62:	81 14       	cp	r8, r1
    1e64:	91 04       	cpc	r9, r1
    1e66:	89 f1       	breq	.+98     	; 0x1eca <boingboing+0x3ca>
    1e68:	97 e0       	ldi	r25, 0x07	; 7
    1e6a:	89 16       	cp	r8, r25
    1e6c:	91 04       	cpc	r9, r1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <boingboing+0x372>
    1e70:	46 c0       	rjmp	.+140    	; 0x1efe <boingboing+0x3fe>
    1e72:	2b c0       	rjmp	.+86     	; 0x1eca <boingboing+0x3ca>
				(x == 0 && y == 0 && z == 7) ||
				(x == 0 && y == 7 && z == 0) ||
    1e74:	e7 e0       	ldi	r30, 0x07	; 7
    1e76:	4e 16       	cp	r4, r30
    1e78:	51 04       	cpc	r5, r1
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <boingboing+0x37e>
    1e7c:	40 c0       	rjmp	.+128    	; 0x1efe <boingboing+0x3fe>
    1e7e:	81 14       	cp	r8, r1
    1e80:	91 04       	cpc	r9, r1
    1e82:	19 f1       	breq	.+70     	; 0x1eca <boingboing+0x3ca>
				(x == 0 && y == 7 && z == 7) ||
    1e84:	f7 e0       	ldi	r31, 0x07	; 7
    1e86:	8f 16       	cp	r8, r31
    1e88:	91 04       	cpc	r9, r1
    1e8a:	c9 f5       	brne	.+114    	; 0x1efe <boingboing+0x3fe>
    1e8c:	1e c0       	rjmp	.+60     	; 0x1eca <boingboing+0x3ca>
    1e8e:	27 e0       	ldi	r18, 0x07	; 7
    1e90:	22 16       	cp	r2, r18
    1e92:	31 04       	cpc	r3, r1
    1e94:	21 f0       	breq	.+8      	; 0x1e9e <boingboing+0x39e>
    1e96:	3b c0       	rjmp	.+118    	; 0x1f0e <boingboing+0x40e>
				}
				if (dx == 0)
				{
					if (x == 7)
					{
						dx = -1;
    1e98:	cc 24       	eor	r12, r12
    1e9a:	ca 94       	dec	r12
    1e9c:	dc 2c       	mov	r13, r12
			if (	// We are in one of 8 corner positions
				(x == 0 && y == 0 && z == 0) ||
				(x == 0 && y == 0 && z == 7) ||
				(x == 0 && y == 7 && z == 0) ||
				(x == 0 && y == 7 && z == 7) ||
				(x == 7 && y == 0 && z == 0) ||
    1e9e:	41 14       	cp	r4, r1
    1ea0:	51 04       	cpc	r5, r1
    1ea2:	41 f4       	brne	.+16     	; 0x1eb4 <boingboing+0x3b4>
    1ea4:	81 14       	cp	r8, r1
    1ea6:	91 04       	cpc	r9, r1
    1ea8:	81 f0       	breq	.+32     	; 0x1eca <boingboing+0x3ca>
				(x == 7 && y == 0 && z == 7) ||
    1eaa:	37 e0       	ldi	r19, 0x07	; 7
    1eac:	83 16       	cp	r8, r19
    1eae:	91 04       	cpc	r9, r1
    1eb0:	89 f5       	brne	.+98     	; 0x1f14 <boingboing+0x414>
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <boingboing+0x3ca>
				(x == 7 && y == 7 && z == 0) ||
    1eb4:	87 e0       	ldi	r24, 0x07	; 7
    1eb6:	48 16       	cp	r4, r24
    1eb8:	51 04       	cpc	r5, r1
    1eba:	a1 f5       	brne	.+104    	; 0x1f24 <boingboing+0x424>
    1ebc:	81 14       	cp	r8, r1
    1ebe:	91 04       	cpc	r9, r1
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <boingboing+0x3ca>
				(x == 7 && y == 7 && z == 7)
    1ec2:	97 e0       	ldi	r25, 0x07	; 7
    1ec4:	89 16       	cp	r8, r25
    1ec6:	91 04       	cpc	r9, r1
    1ec8:	69 f5       	brne	.+90     	; 0x1f24 <boingboing+0x424>
				// and the exact opposite corner
				// We don't want that!
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
    1eca:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    1ece:	63 e0       	ldi	r22, 0x03	; 3
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
				if (lol == 0)
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	39 f0       	breq	.+14     	; 0x1ee8 <boingboing+0x3e8>
					dx = 0;
				
				if (lol == 1)
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	91 05       	cpc	r25, r1
    1ede:	39 f0       	breq	.+14     	; 0x1eee <boingboing+0x3ee>
					dy = 0;
					
				if (lol == 2)
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	39 f0       	breq	.+14     	; 0x1ef4 <boingboing+0x3f4>
    1ee6:	08 c0       	rjmp	.+16     	; 0x1ef8 <boingboing+0x3f8>
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
				if (lol == 0)
					dx = 0;
    1ee8:	cc 24       	eor	r12, r12
    1eea:	dd 24       	eor	r13, r13
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <boingboing+0x3f8>
				
				if (lol == 1)
					dy = 0;
    1eee:	ee 24       	eor	r14, r14
    1ef0:	ff 24       	eor	r15, r15
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <boingboing+0x3f8>
					
				if (lol == 2)
					dz = 0;
    1ef4:	00 e0       	ldi	r16, 0x00	; 0
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

        // one last sanity check
        if (x == 0 && dx == -1)
    1ef8:	21 14       	cp	r2, r1
    1efa:	31 04       	cpc	r3, r1
    1efc:	41 f4       	brne	.+16     	; 0x1f0e <boingboing+0x40e>
    1efe:	ef ef       	ldi	r30, 0xFF	; 255
    1f00:	ce 16       	cp	r12, r30
    1f02:	ef ef       	ldi	r30, 0xFF	; 255
    1f04:	de 06       	cpc	r13, r30
    1f06:	19 f4       	brne	.+6      	; 0x1f0e <boingboing+0x40e>
            dx = 1;
    1f08:	51 e0       	ldi	r21, 0x01	; 1
    1f0a:	c5 2e       	mov	r12, r21
    1f0c:	d1 2c       	mov	r13, r1
	
        if (y == 0 && dy == -1)
    1f0e:	41 14       	cp	r4, r1
    1f10:	51 04       	cpc	r5, r1
    1f12:	41 f4       	brne	.+16     	; 0x1f24 <boingboing+0x424>
    1f14:	ff ef       	ldi	r31, 0xFF	; 255
    1f16:	ef 16       	cp	r14, r31
    1f18:	ff ef       	ldi	r31, 0xFF	; 255
    1f1a:	ff 06       	cpc	r15, r31
    1f1c:	19 f4       	brne	.+6      	; 0x1f24 <boingboing+0x424>
            dy = 1;
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	e4 2e       	mov	r14, r20
    1f22:	f1 2c       	mov	r15, r1
	
        if (z == 0 && dz == -1)
    1f24:	81 14       	cp	r8, r1
    1f26:	91 04       	cpc	r9, r1
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <boingboing+0x436>
    1f2a:	2f ef       	ldi	r18, 0xFF	; 255
    1f2c:	0f 3f       	cpi	r16, 0xFF	; 255
    1f2e:	12 07       	cpc	r17, r18
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <boingboing+0x436>
            dz = 1;
    1f32:	01 e0       	ldi	r16, 0x01	; 1
    1f34:	10 e0       	ldi	r17, 0x00	; 0
	
        if (x == 7 && dx == 1)
    1f36:	37 e0       	ldi	r19, 0x07	; 7
    1f38:	23 16       	cp	r2, r19
    1f3a:	31 04       	cpc	r3, r1
    1f3c:	39 f4       	brne	.+14     	; 0x1f4c <boingboing+0x44c>
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	c8 16       	cp	r12, r24
    1f42:	d1 04       	cpc	r13, r1
    1f44:	19 f4       	brne	.+6      	; 0x1f4c <boingboing+0x44c>
            dx = -1;
    1f46:	cc 24       	eor	r12, r12
    1f48:	ca 94       	dec	r12
    1f4a:	dc 2c       	mov	r13, r12
	
        if (y == 7 && dy == 1)
    1f4c:	97 e0       	ldi	r25, 0x07	; 7
    1f4e:	49 16       	cp	r4, r25
    1f50:	51 04       	cpc	r5, r1
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <boingboing+0x462>
    1f54:	e1 e0       	ldi	r30, 0x01	; 1
    1f56:	ee 16       	cp	r14, r30
    1f58:	f1 04       	cpc	r15, r1
    1f5a:	19 f4       	brne	.+6      	; 0x1f62 <boingboing+0x462>
            dy = -1;
    1f5c:	ee 24       	eor	r14, r14
    1f5e:	ea 94       	dec	r14
    1f60:	fe 2c       	mov	r15, r14
	
        if (z == 7 && dz == 1)
    1f62:	f7 e0       	ldi	r31, 0x07	; 7
    1f64:	8f 16       	cp	r8, r31
    1f66:	91 04       	cpc	r9, r1
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <boingboing+0x474>
    1f6a:	01 30       	cpi	r16, 0x01	; 1
    1f6c:	11 05       	cpc	r17, r1
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <boingboing+0x474>
            dz = -1;
    1f70:	0f ef       	ldi	r16, 0xFF	; 255
    1f72:	1f ef       	ldi	r17, 0xFF	; 255
	
	
		// Finally, move the voxel.
		x = x + dx;
    1f74:	2c 0c       	add	r2, r12
    1f76:	3d 1c       	adc	r3, r13
		y = y + dy;
    1f78:	4e 0c       	add	r4, r14
    1f7a:	5f 1c       	adc	r5, r15
		z = z + dz;
    1f7c:	80 0e       	add	r8, r16
    1f7e:	91 1e       	adc	r9, r17
		
		if (drawmode == 0x01) // show one voxel at time
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	62 16       	cp	r6, r18
    1f84:	79 f4       	brne	.+30     	; 0x1fa4 <boingboing+0x4a4>
		{
			setvoxel(x,y,z);
    1f86:	c1 01       	movw	r24, r2
    1f88:	b2 01       	movw	r22, r4
    1f8a:	a4 01       	movw	r20, r8
    1f8c:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
			delay_ms(delay);
    1f90:	8d a9       	sts	0x4d, r24
    1f92:	9e a9       	sts	0x4e, r25
    1f94:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			clrvoxel(x,y,z);	
    1f98:	c1 01       	movw	r24, r2
    1f9a:	b2 01       	movw	r22, r4
    1f9c:	a4 01       	movw	r20, r8
    1f9e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
    1fa2:	63 c0       	rjmp	.+198    	; 0x206a <boingboing+0x56a>
		} else if (drawmode == 0x02) // flip the voxel in question
    1fa4:	32 e0       	ldi	r19, 0x02	; 2
    1fa6:	63 16       	cp	r6, r19
    1fa8:	51 f4       	brne	.+20     	; 0x1fbe <boingboing+0x4be>
		{
			flpvoxel(x,y,z);
    1faa:	c1 01       	movw	r24, r2
    1fac:	b2 01       	movw	r22, r4
    1fae:	a4 01       	movw	r20, r8
    1fb0:	0e 94 1b 04 	call	0x836	; 0x836 <flpvoxel>
			delay_ms(delay);
    1fb4:	8d a9       	sts	0x4d, r24
    1fb6:	9e a9       	sts	0x4e, r25
    1fb8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    1fbc:	56 c0       	rjmp	.+172    	; 0x206a <boingboing+0x56a>
		} if (drawmode == 0x03) // draw a snake
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	68 16       	cp	r6, r24
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <boingboing+0x4c6>
    1fc4:	52 c0       	rjmp	.+164    	; 0x206a <boingboing+0x56a>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	b5 96       	adiw	r30, 0x25	; 37
		{
			for (i=7;i>=0;i--)
			{
				snake[i][0] = snake[i-1][0];
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	97 83       	std	Z+7, r25	; 0x07
    1fd0:	86 83       	std	Z+6, r24	; 0x06
				snake[i][1] = snake[i-1][1];
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	91 87       	std	Z+9, r25	; 0x09
    1fd8:	80 87       	std	Z+8, r24	; 0x08
				snake[i][2] = snake[i-1][2];
    1fda:	84 81       	ldd	r24, Z+4	; 0x04
    1fdc:	95 81       	ldd	r25, Z+5	; 0x05
    1fde:	93 87       	std	Z+11, r25	; 0x0b
    1fe0:	82 87       	std	Z+10, r24	; 0x0a
    1fe2:	36 97       	sbiw	r30, 0x06	; 6
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    1fe4:	2f a9       	sts	0x4f, r18
    1fe6:	38 ad       	sts	0x68, r19
    1fe8:	e2 17       	cp	r30, r18
    1fea:	f3 07       	cpc	r31, r19
    1fec:	71 f7       	brne	.-36     	; 0x1fca <boingboing+0x4ca>
			{
				snake[i][0] = snake[i-1][0];
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
    1fee:	3a 82       	std	Y+2, r3	; 0x02
    1ff0:	29 82       	std	Y+1, r2	; 0x01
			snake[0][1] = y;
    1ff2:	5c 82       	std	Y+4, r5	; 0x04
    1ff4:	4b 82       	std	Y+3, r4	; 0x03
			snake[0][2] = z;
    1ff6:	9e 82       	std	Y+6, r9	; 0x06
    1ff8:	8d 82       	std	Y+5, r8	; 0x05
    1ffa:	5e 01       	movw	r10, r28
    1ffc:	08 94       	sec
    1ffe:	a1 1c       	adc	r10, r1
    2000:	b1 1c       	adc	r11, r1
    2002:	c5 01       	movw	r24, r10
    2004:	57 01       	movw	r10, r14
    2006:	78 01       	movw	r14, r16
    2008:	8c 01       	movw	r16, r24
				
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
    200a:	f8 01       	movw	r30, r16
    200c:	62 81       	ldd	r22, Z+2	; 0x02
    200e:	73 81       	ldd	r23, Z+3	; 0x03
    2010:	44 81       	ldd	r20, Z+4	; 0x04
    2012:	55 81       	ldd	r21, Z+5	; 0x05
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    201c:	0a 5f       	subi	r16, 0xFA	; 250
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
				
			for (i=0;i<8;i++)
    2020:	29 a9       	sts	0x49, r18
    2022:	3a a9       	sts	0x4a, r19
    2024:	02 17       	cp	r16, r18
    2026:	13 07       	cpc	r17, r19
    2028:	81 f7       	brne	.-32     	; 0x200a <boingboing+0x50a>
    202a:	87 01       	movw	r16, r14
    202c:	75 01       	movw	r14, r10
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
    202e:	8d a9       	sts	0x4d, r24
    2030:	9e a9       	sts	0x4e, r25
    2032:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    2036:	5e 01       	movw	r10, r28
    2038:	08 94       	sec
    203a:	a1 1c       	adc	r10, r1
    203c:	b1 1c       	adc	r11, r1
    203e:	c5 01       	movw	r24, r10
    2040:	57 01       	movw	r10, r14
    2042:	78 01       	movw	r14, r16
    2044:	8c 01       	movw	r16, r24
			for (i=0;i<8;i++)
			{
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
    2046:	f8 01       	movw	r30, r16
    2048:	62 81       	ldd	r22, Z+2	; 0x02
    204a:	73 81       	ldd	r23, Z+3	; 0x03
    204c:	44 81       	ldd	r20, Z+4	; 0x04
    204e:	55 81       	ldd	r21, Z+5	; 0x05
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
    2058:	0a 5f       	subi	r16, 0xFA	; 250
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
			for (i=0;i<8;i++)
    205c:	29 a9       	sts	0x49, r18
    205e:	3a a9       	sts	0x4a, r19
    2060:	02 17       	cp	r16, r18
    2062:	13 07       	cpc	r17, r19
    2064:	81 f7       	brne	.-32     	; 0x2046 <boingboing+0x546>
    2066:	87 01       	movw	r16, r14
    2068:	75 01       	movw	r14, r10
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
		}
		
	
		iterations--;
    206a:	8b a9       	sts	0x4b, r24
    206c:	9c a9       	sts	0x4c, r25
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9c ab       	sts	0x5c, r25
    2072:	8b ab       	sts	0x5b, r24
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    2074:	eb a9       	sts	0x4b, r30
    2076:	fc a9       	sts	0x4c, r31
    2078:	30 97       	sbiw	r30, 0x00	; 0
    207a:	09 f0       	breq	.+2      	; 0x207e <boingboing+0x57e>
    207c:	a1 cd       	rjmp	.-1214   	; 0x1bc0 <boingboing+0xc0>
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <boingboing+0x588>
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
						{
							dx = -1;
    2080:	cc 24       	eor	r12, r12
    2082:	ca 94       	dec	r12
    2084:	dc 2c       	mov	r13, r12
    2086:	43 cf       	rjmp	.-378    	; 0x1f0e <boingboing+0x40e>
		}
		
	
		iterations--;
	}
}
    2088:	e8 96       	adiw	r28, 0x38	; 56
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	3f 90       	pop	r3
    20b6:	2f 90       	pop	r2
    20b8:	08 95       	ret

000020ba <effect_random_filler>:

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	1c 01       	movw	r2, r24
    20e0:	7b 01       	movw	r14, r22
	int x,y,z;
	int loop = 0;
	
	
	if (state == 1)
    20e2:	61 30       	cpi	r22, 0x01	; 1
    20e4:	71 05       	cpc	r23, r1
    20e6:	49 f4       	brne	.+18     	; 0x20fa <effect_random_filler+0x40>
	{
		fill(0x00);
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
	}
}

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    20ee:	cc 24       	eor	r12, r12
    20f0:	dd 24       	eor	r13, r13
		fill(0xff);
	}
	
	while (loop<511)
	{
		x = rand()%8;
    20f2:	28 e0       	ldi	r18, 0x08	; 8
    20f4:	a2 2e       	mov	r10, r18
    20f6:	b1 2c       	mov	r11, r1
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <effect_random_filler+0x44>
	if (state == 1)
	{
		fill(0x00);
	} else
	{
		fill(0xff);
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	f6 cf       	rjmp	.-20     	; 0x20ea <effect_random_filler+0x30>
	}
	
	while (loop<511)
	{
		x = rand()%8;
    20fe:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2102:	b5 01       	movw	r22, r10
    2104:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2108:	ec 01       	movw	r28, r24
    210a:	58 2e       	mov	r5, r24
    210c:	4d 2e       	mov	r4, r29
		y = rand()%8;
    210e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2112:	b5 01       	movw	r22, r10
    2114:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2118:	18 2f       	mov	r17, r24
    211a:	09 2f       	mov	r16, r25
    211c:	38 01       	movw	r6, r16
		z = rand()%8;
    211e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2122:	b5 01       	movw	r22, r10
    2124:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2128:	ac 01       	movw	r20, r24
    212a:	98 2e       	mov	r9, r24
    212c:	85 2e       	mov	r8, r21

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
    212e:	e1 14       	cp	r14, r1
    2130:	f1 04       	cpc	r15, r1
    2132:	41 f4       	brne	.+16     	; 0x2144 <effect_random_filler+0x8a>
    2134:	ce 01       	movw	r24, r28
    2136:	61 2f       	mov	r22, r17
    2138:	70 2f       	mov	r23, r16
    213a:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	d9 f4       	brne	.+54     	; 0x2178 <effect_random_filler+0xbe>
    2142:	0b c0       	rjmp	.+22     	; 0x215a <effect_random_filler+0xa0>
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	e8 16       	cp	r14, r24
    2148:	f1 04       	cpc	r15, r1
    214a:	b1 f4       	brne	.+44     	; 0x2178 <effect_random_filler+0xbe>
    214c:	ce 01       	movw	r24, r28
    214e:	61 2f       	mov	r22, r17
    2150:	70 2f       	mov	r23, r16
    2152:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    2156:	88 23       	and	r24, r24
    2158:	79 f4       	brne	.+30     	; 0x2178 <effect_random_filler+0xbe>
		{
			altervoxel(x,y,z,state);
    215a:	85 2d       	mov	r24, r5
    215c:	94 2d       	mov	r25, r4
    215e:	67 2d       	mov	r22, r7
    2160:	76 2d       	mov	r23, r6
    2162:	49 2d       	mov	r20, r9
    2164:	58 2d       	mov	r21, r8
    2166:	97 01       	movw	r18, r14
    2168:	0e 94 12 04 	call	0x824	; 0x824 <altervoxel>
			delay_ms(delay);
    216c:	c1 01       	movw	r24, r2
    216e:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			loop++;
    2172:	08 94       	sec
    2174:	c1 1c       	adc	r12, r1
    2176:	d1 1c       	adc	r13, r1
	} else
	{
		fill(0xff);
	}
	
	while (loop<511)
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	c8 16       	cp	r12, r24
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	d8 06       	cpc	r13, r24
    2180:	0c f4       	brge	.+2      	; 0x2184 <effect_random_filler+0xca>
    2182:	bd cf       	rjmp	.-134    	; 0x20fe <effect_random_filler+0x44>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	ef 90       	pop	r14
    2190:	df 90       	pop	r13
    2192:	cf 90       	pop	r12
    2194:	bf 90       	pop	r11
    2196:	af 90       	pop	r10
    2198:	9f 90       	pop	r9
    219a:	8f 90       	pop	r8
    219c:	7f 90       	pop	r7
    219e:	6f 90       	pop	r6
    21a0:	5f 90       	pop	r5
    21a2:	4f 90       	pop	r4
    21a4:	3f 90       	pop	r3
    21a6:	2f 90       	pop	r2
    21a8:	08 95       	ret

000021aa <effect_rain>:


void effect_rain (int iterations)
{
    21aa:	6f 92       	push	r6
    21ac:	7f 92       	push	r7
    21ae:	8f 92       	push	r8
    21b0:	9f 92       	push	r9
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	4c 01       	movw	r8, r24
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    21c8:	00 e0       	ldi	r16, 0x00	; 0
    21ca:	10 e0       	ldi	r17, 0x00	; 0
	{
		rnd_num = rand()%4;
    21cc:	34 e0       	ldi	r19, 0x04	; 4
    21ce:	63 2e       	mov	r6, r19
    21d0:	71 2c       	mov	r7, r1
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
    21d2:	48 e0       	ldi	r20, 0x08	; 8
    21d4:	c4 2e       	mov	r12, r20
    21d6:	d1 2c       	mov	r13, r1
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    21d8:	2d c0       	rjmp	.+90     	; 0x2234 <effect_rain+0x8a>
	{
		rnd_num = rand()%4;
    21da:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    21de:	b3 01       	movw	r22, r6
    21e0:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    21e4:	5c 01       	movw	r10, r24
		
		for (i=0; i < rnd_num;i++)
    21e6:	c0 e0       	ldi	r28, 0x00	; 0
    21e8:	d0 e0       	ldi	r29, 0x00	; 0
    21ea:	16 c0       	rjmp	.+44     	; 0x2218 <effect_rain+0x6e>
		{
			rnd_x = rand()%8;
    21ec:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    21f0:	7c 01       	movw	r14, r24
			rnd_y = rand()%8;
    21f2:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    21f6:	9c 01       	movw	r18, r24
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
    21f8:	c7 01       	movw	r24, r14
    21fa:	b6 01       	movw	r22, r12
    21fc:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2200:	fc 01       	movw	r30, r24
			rnd_y = rand()%8;
    2202:	c9 01       	movw	r24, r18
    2204:	b6 01       	movw	r22, r12
    2206:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    220a:	bc 01       	movw	r22, r24
			setvoxel(rnd_x,rnd_y,7);
    220c:	cf 01       	movw	r24, r30
    220e:	47 e0       	ldi	r20, 0x07	; 7
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    2216:	21 96       	adiw	r28, 0x01	; 1
    2218:	ca 15       	cp	r28, r10
    221a:	db 05       	cpc	r29, r11
    221c:	3c f3       	brlt	.-50     	; 0x21ec <effect_rain+0x42>
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(1000);
    221e:	88 ee       	ldi	r24, 0xE8	; 232
    2220:	93 e0       	ldi	r25, 0x03	; 3
    2222:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		shift(AXIS_Z,-1);
    2226:	8a e7       	ldi	r24, 0x7A	; 122
    2228:	6f ef       	ldi	r22, 0xFF	; 255
    222a:	7f ef       	ldi	r23, 0xFF	; 255
    222c:	0e 94 3e 08 	call	0x107c	; 0x107c <shift>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    2230:	0f 5f       	subi	r16, 0xFF	; 255
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    2234:	08 15       	cp	r16, r8
    2236:	19 05       	cpc	r17, r9
    2238:	84 f2       	brlt	.-96     	; 0x21da <effect_rain+0x30>
		}
		
		delay_ms(1000);
		shift(AXIS_Z,-1);
	}
}
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	bf 90       	pop	r11
    224c:	af 90       	pop	r10
    224e:	9f 90       	pop	r9
    2250:	8f 90       	pop	r8
    2252:	7f 90       	pop	r7
    2254:	6f 90       	pop	r6
    2256:	08 95       	ret

00002258 <draw_positions_axis>:
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, const unsigned char positions[64], int invert)
{
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	8f 92       	push	r8
    225e:	9f 92       	push	r9
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	00 d0       	rcall	.+0      	; 0x2274 <draw_positions_axis+0x1c>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	f8 2e       	mov	r15, r24
    227a:	4a 01       	movw	r8, r20
	int x, y, p;
	
	fill(0x00);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	69 83       	std	Y+1, r22	; 0x01
    2280:	7a 83       	std	Y+2, r23	; 0x02
    2282:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    2286:	69 81       	ldd	r22, Y+1	; 0x01
    2288:	c6 2e       	mov	r12, r22
    228a:	7a 81       	ldd	r23, Y+2	; 0x02
    228c:	d7 2e       	mov	r13, r23
	
	for (x=0; x<8; x++)
    228e:	00 e0       	ldi	r16, 0x00	; 0
    2290:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (y=0; y<8; y++)
		{
			if (invert)
			{
				p = (7 - positions[(x * 8) + y]);
    2292:	67 e0       	ldi	r22, 0x07	; 7
    2294:	a6 2e       	mov	r10, r22
    2296:	b1 2c       	mov	r11, r1
    2298:	32 c0       	rjmp	.+100    	; 0x22fe <draw_positions_axis+0xa6>
    229a:	f6 01       	movw	r30, r12
    229c:	e6 0d       	add	r30, r6
    229e:	f7 1d       	adc	r31, r7
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
		{
			if (invert)
    22a0:	81 14       	cp	r8, r1
    22a2:	91 04       	cpc	r9, r1
    22a4:	29 f0       	breq	.+10     	; 0x22b0 <draw_positions_axis+0x58>
			{
				p = (7 - positions[(x * 8) + y]);
    22a6:	80 81       	ld	r24, Z
    22a8:	a5 01       	movw	r20, r10
    22aa:	48 1b       	sub	r20, r24
    22ac:	51 09       	sbc	r21, r1
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <draw_positions_axis+0x5c>
			}
			else
			{
				p = positions[(x * 8) + y];
    22b0:	40 81       	ld	r20, Z
    22b2:	50 e0       	ldi	r21, 0x00	; 0
			}
		
			if (axis == AXIS_Z)
    22b4:	8a e7       	ldi	r24, 0x7A	; 122
    22b6:	f8 16       	cp	r15, r24
    22b8:	19 f4       	brne	.+6      	; 0x22c0 <draw_positions_axis+0x68>
			{
				setvoxel(x, y, p);
    22ba:	c8 01       	movw	r24, r16
    22bc:	b3 01       	movw	r22, r6
    22be:	0d c0       	rjmp	.+26     	; 0x22da <draw_positions_axis+0x82>
			}
			else if (axis == AXIS_Y)
    22c0:	99 e7       	ldi	r25, 0x79	; 121
    22c2:	f9 16       	cp	r15, r25
    22c4:	21 f4       	brne	.+8      	; 0x22ce <draw_positions_axis+0x76>
			{
				setvoxel(x, p, y);
    22c6:	c8 01       	movw	r24, r16
    22c8:	ba 01       	movw	r22, r20
    22ca:	a3 01       	movw	r20, r6
    22cc:	06 c0       	rjmp	.+12     	; 0x22da <draw_positions_axis+0x82>
			}
			else if (axis == AXIS_X)
    22ce:	e8 e7       	ldi	r30, 0x78	; 120
    22d0:	fe 16       	cp	r15, r30
    22d2:	29 f4       	brne	.+10     	; 0x22de <draw_positions_axis+0x86>
			{
				setvoxel(p, y, x);
    22d4:	ca 01       	movw	r24, r20
    22d6:	b3 01       	movw	r22, r6
    22d8:	a8 01       	movw	r20, r16
    22da:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
	
	fill(0x00);
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
    22de:	08 94       	sec
    22e0:	61 1c       	adc	r6, r1
    22e2:	71 1c       	adc	r7, r1
    22e4:	f8 e0       	ldi	r31, 0x08	; 8
    22e6:	6f 16       	cp	r6, r31
    22e8:	71 04       	cpc	r7, r1
    22ea:	b9 f6       	brne	.-82     	; 0x229a <draw_positions_axis+0x42>
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    22ec:	0f 5f       	subi	r16, 0xFF	; 255
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	88 e0       	ldi	r24, 0x08	; 8
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	c8 0e       	add	r12, r24
    22f6:	d9 1e       	adc	r13, r25
    22f8:	08 30       	cpi	r16, 0x08	; 8
    22fa:	11 05       	cpc	r17, r1
    22fc:	19 f0       	breq	.+6      	; 0x2304 <draw_positions_axis+0xac>
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, const unsigned char positions[64], int invert)
{
    22fe:	66 24       	eor	r6, r6
    2300:	77 24       	eor	r7, r7
    2302:	cb cf       	rjmp	.-106    	; 0x229a <draw_positions_axis+0x42>
				setvoxel(p, y, x);
			}
		}
	}
	
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	df 90       	pop	r13
    2314:	cf 90       	pop	r12
    2316:	bf 90       	pop	r11
    2318:	af 90       	pop	r10
    231a:	9f 90       	pop	r9
    231c:	8f 90       	pop	r8
    231e:	7f 90       	pop	r7
    2320:	6f 90       	pop	r6
    2322:	08 95       	ret

00002324 <effect_axis_updown_randsuspend>:
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    2324:	2f 92       	push	r2
    2326:	3f 92       	push	r3
    2328:	4f 92       	push	r4
    232a:	5f 92       	push	r5
    232c:	7f 92       	push	r7
    232e:	8f 92       	push	r8
    2330:	9f 92       	push	r9
    2332:	af 92       	push	r10
    2334:	bf 92       	push	r11
    2336:	cf 92       	push	r12
    2338:	df 92       	push	r13
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	c0 58       	subi	r28, 0x80	; 128
    234c:	d0 40       	sbci	r29, 0x00	; 0
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	78 2e       	mov	r7, r24
    235a:	4b 01       	movw	r8, r22
    235c:	1a 01       	movw	r2, r20
    235e:	29 01       	movw	r4, r18
    2360:	7e 01       	movw	r14, r28
    2362:	08 94       	sec
    2364:	e1 1c       	adc	r14, r1
    2366:	f1 1c       	adc	r15, r1
    2368:	71 e4       	ldi	r23, 0x41	; 65
    236a:	c7 2e       	mov	r12, r23
    236c:	d1 2c       	mov	r13, r1
    236e:	cc 0e       	add	r12, r28
    2370:	dd 1e       	adc	r13, r29
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    2372:	00 e0       	ldi	r16, 0x00	; 0
    2374:	10 e0       	ldi	r17, 0x00	; 0
	{
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
    2376:	e8 e0       	ldi	r30, 0x08	; 8
    2378:	ae 2e       	mov	r10, r30
    237a:	b1 2c       	mov	r11, r1
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    237c:	f6 01       	movw	r30, r12
    237e:	11 92       	st	Z+, r1
    2380:	6f 01       	movw	r12, r30
		destinations[i] = rand()%8;
    2382:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2386:	b5 01       	movw	r22, r10
    2388:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    238c:	f7 01       	movw	r30, r14
    238e:	81 93       	st	Z+, r24
    2390:	7f 01       	movw	r14, r30
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    2392:	0f 5f       	subi	r16, 0xFF	; 255
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	00 34       	cpi	r16, 0x40	; 64
    2398:	11 05       	cpc	r17, r1
    239a:	81 f7       	brne	.-32     	; 0x237c <effect_axis_updown_randsuspend+0x58>
    239c:	08 e0       	ldi	r16, 0x08	; 8
    239e:	10 e0       	ldi	r17, 0x00	; 0
    23a0:	18 c0       	rjmp	.+48     	; 0x23d2 <effect_axis_updown_randsuspend+0xae>
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    23a2:	20 81       	ld	r18, Z
    23a4:	3d 91       	ld	r19, X+
    23a6:	23 17       	cp	r18, r19
    23a8:	10 f4       	brcc	.+4      	; 0x23ae <effect_axis_updown_randsuspend+0x8a>
			{
				positions[px]++;
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	20 83       	st	Z, r18

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	31 96       	adiw	r30, 0x01	; 1
    23b2:	80 34       	cpi	r24, 0x40	; 64
    23b4:	91 05       	cpc	r25, r1
    23b6:	a9 f7       	brne	.-22     	; 0x23a2 <effect_axis_updown_randsuspend+0x7e>
			{
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    23b8:	87 2d       	mov	r24, r7
    23ba:	be 01       	movw	r22, r28
    23bc:	6f 5b       	subi	r22, 0xBF	; 191
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	a2 01       	movw	r20, r4
    23c2:	0e 94 2c 11 	call	0x2258	; 0x2258 <draw_positions_axis>
		delay_ms(delay);
    23c6:	c4 01       	movw	r24, r8
    23c8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    23cc:	01 50       	subi	r16, 0x01	; 1
    23ce:	10 40       	sbci	r17, 0x00	; 0
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    23d0:	41 f0       	breq	.+16     	; 0x23e2 <effect_axis_updown_randsuspend+0xbe>
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    23d2:	de 01       	movw	r26, r28
    23d4:	11 96       	adiw	r26, 0x01	; 1
    23d6:	fe 01       	movw	r30, r28
    23d8:	ef 5b       	subi	r30, 0xBF	; 191
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	e0 cf       	rjmp	.-64     	; 0x23a2 <effect_axis_updown_randsuspend+0x7e>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    23e2:	fe 01       	movw	r30, r28
    23e4:	31 96       	adiw	r30, 0x01	; 1
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
    23ea:	27 e0       	ldi	r18, 0x07	; 7
    23ec:	21 93       	st	Z+, r18
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	80 34       	cpi	r24, 0x40	; 64
    23f2:	91 05       	cpc	r25, r1
    23f4:	d9 f7       	brne	.-10     	; 0x23ec <effect_axis_updown_randsuspend+0xc8>
	{
		destinations[i] = 7;
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    23f6:	c1 01       	movw	r24, r2
    23f8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    23fc:	08 e0       	ldi	r16, 0x08	; 8
    23fe:	10 e0       	ldi	r17, 0x00	; 0
    2400:	1d c0       	rjmp	.+58     	; 0x243c <effect_axis_updown_randsuspend+0x118>
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    2402:	20 81       	ld	r18, Z
    2404:	3d 91       	ld	r19, X+
    2406:	23 17       	cp	r18, r19
    2408:	10 f4       	brcc	.+4      	; 0x240e <effect_axis_updown_randsuspend+0xea>
			{
				positions[px]++;
    240a:	2f 5f       	subi	r18, 0xFF	; 255
    240c:	20 83       	st	Z, r18
			}
			if (positions[px]>destinations[px])
    240e:	20 81       	ld	r18, Z
    2410:	32 17       	cp	r19, r18
    2412:	10 f4       	brcc	.+4      	; 0x2418 <effect_axis_updown_randsuspend+0xf4>
			{
				positions[px]--;
    2414:	21 50       	subi	r18, 0x01	; 1
    2416:	20 83       	st	Z, r18
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	31 96       	adiw	r30, 0x01	; 1
    241c:	80 34       	cpi	r24, 0x40	; 64
    241e:	91 05       	cpc	r25, r1
    2420:	81 f7       	brne	.-32     	; 0x2402 <effect_axis_updown_randsuspend+0xde>
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    2422:	87 2d       	mov	r24, r7
    2424:	be 01       	movw	r22, r28
    2426:	6f 5b       	subi	r22, 0xBF	; 191
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	a2 01       	movw	r20, r4
    242c:	0e 94 2c 11 	call	0x2258	; 0x2258 <draw_positions_axis>
		delay_ms(delay);
    2430:	c4 01       	movw	r24, r8
    2432:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    2436:	01 50       	subi	r16, 0x01	; 1
    2438:	10 40       	sbci	r17, 0x00	; 0
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
    243a:	41 f0       	breq	.+16     	; 0x244c <effect_axis_updown_randsuspend+0x128>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    243c:	de 01       	movw	r26, r28
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	fe 01       	movw	r30, r28
    2442:	ef 5b       	subi	r30, 0xBF	; 191
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	db cf       	rjmp	.-74     	; 0x2402 <effect_axis_updown_randsuspend+0xde>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    244c:	c0 58       	subi	r28, 0x80	; 128
    244e:	df 4f       	sbci	r29, 0xFF	; 255
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    2464:	ef 90       	pop	r14
    2466:	df 90       	pop	r13
    2468:	cf 90       	pop	r12
    246a:	bf 90       	pop	r11
    246c:	af 90       	pop	r10
    246e:	9f 90       	pop	r9
    2470:	8f 90       	pop	r8
    2472:	7f 90       	pop	r7
    2474:	5f 90       	pop	r5
    2476:	4f 90       	pop	r4
    2478:	3f 90       	pop	r3
    247a:	2f 90       	pop	r2
    247c:	08 95       	ret

0000247e <effect_z_updown_move>:
	}

}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	48 2f       	mov	r20, r24
	int px;
	for (px=0; px<64; px++)
    2484:	e8 2f       	mov	r30, r24
    2486:	f9 2f       	mov	r31, r25
    2488:	db 01       	movw	r26, r22
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (positions[px]<destinations[px])
    248e:	80 81       	ld	r24, Z
		
	}

}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
    2490:	ed 01       	movw	r28, r26
{
	int px;
	for (px=0; px<64; px++)
	{
		if (positions[px]<destinations[px])
    2492:	5c 91       	ld	r21, X
    2494:	85 17       	cp	r24, r21
    2496:	10 f4       	brcc	.+4      	; 0x249c <effect_z_updown_move+0x1e>
		{
			positions[px]++;
    2498:	8f 5f       	subi	r24, 0xFF	; 255
    249a:	80 83       	st	Z, r24
		}
		if (positions[px]>destinations[px])
    249c:	80 81       	ld	r24, Z
    249e:	11 96       	adiw	r26, 0x01	; 1
    24a0:	58 81       	ld	r21, Y
    24a2:	58 17       	cp	r21, r24
    24a4:	10 f4       	brcc	.+4      	; 0x24aa <effect_z_updown_move+0x2c>
		{
			positions[px]--;
    24a6:	81 50       	subi	r24, 0x01	; 1
    24a8:	80 83       	st	Z, r24
}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
	int px;
	for (px=0; px<64; px++)
    24aa:	2f 5f       	subi	r18, 0xFF	; 255
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	31 96       	adiw	r30, 0x01	; 1
    24b0:	20 34       	cpi	r18, 0x40	; 64
    24b2:	31 05       	cpc	r19, r1
    24b4:	61 f7       	brne	.-40     	; 0x248e <effect_z_updown_move+0x10>
		{
			positions[px]--;
		}
	}
		
	draw_positions_axis (AXIS_Z, positions,0);
    24b6:	8a e7       	ldi	r24, 0x7A	; 122
    24b8:	64 2f       	mov	r22, r20
    24ba:	79 2f       	mov	r23, r25
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	0e 94 2c 11 	call	0x2258	; 0x2258 <draw_positions_axis>
}
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	08 95       	ret

000024ca <effect_z_updown>:
		shift(AXIS_Z,-1);
	}
}

void effect_z_updown (int iterations, int delay)
{
    24ca:	2f 92       	push	r2
    24cc:	3f 92       	push	r3
    24ce:	4f 92       	push	r4
    24d0:	5f 92       	push	r5
    24d2:	6f 92       	push	r6
    24d4:	7f 92       	push	r7
    24d6:	8f 92       	push	r8
    24d8:	9f 92       	push	r9
    24da:	af 92       	push	r10
    24dc:	bf 92       	push	r11
    24de:	cf 92       	push	r12
    24e0:	df 92       	push	r13
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	c0 58       	subi	r28, 0x80	; 128
    24f4:	d0 40       	sbci	r29, 0x00	; 0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	1c 01       	movw	r2, r24
    2502:	4b 01       	movw	r8, r22
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    2504:	11 e4       	ldi	r17, 0x41	; 65
    2506:	e1 2e       	mov	r14, r17
    2508:	f1 2c       	mov	r15, r1
    250a:	ec 0e       	add	r14, r28
    250c:	fd 1e       	adc	r15, r29
    250e:	6e 01       	movw	r12, r28
    2510:	08 94       	sec
    2512:	c1 1c       	adc	r12, r1
    2514:	d1 1c       	adc	r13, r1
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
    2516:	00 e0       	ldi	r16, 0x00	; 0
    2518:	10 e0       	ldi	r17, 0x00	; 0
	{
		positions[i] = 4;
    251a:	24 e0       	ldi	r18, 0x04	; 4
    251c:	b2 2e       	mov	r11, r18
		destinations[i] = rand()%8;
    251e:	38 e0       	ldi	r19, 0x08	; 8
    2520:	63 2e       	mov	r6, r19
    2522:	71 2c       	mov	r7, r1

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    2524:	f7 01       	movw	r30, r14
    2526:	b1 92       	st	Z+, r11
    2528:	7f 01       	movw	r14, r30
		destinations[i] = rand()%8;
    252a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    252e:	b3 01       	movw	r22, r6
    2530:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2534:	f6 01       	movw	r30, r12
    2536:	81 93       	st	Z+, r24
    2538:	6f 01       	movw	r12, r30
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
    253a:	0f 5f       	subi	r16, 0xFF	; 255
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	00 34       	cpi	r16, 0x40	; 64
    2540:	11 05       	cpc	r17, r1
    2542:	81 f7       	brne	.-32     	; 0x2524 <effect_z_updown+0x5a>
    2544:	08 e0       	ldi	r16, 0x08	; 8
    2546:	10 e0       	ldi	r17, 0x00	; 0
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
    2548:	d8 2c       	mov	r13, r8
    254a:	c9 2c       	mov	r12, r9
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    254c:	ce 01       	movw	r24, r28
    254e:	8f 5b       	subi	r24, 0xBF	; 191
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	be 01       	movw	r22, r28
    2554:	6f 5f       	subi	r22, 0xFF	; 255
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	4a e7       	ldi	r20, 0x7A	; 122
    255a:	0e 94 3f 12 	call	0x247e	; 0x247e <effect_z_updown_move>
		delay_ms(delay);
    255e:	8d 2d       	mov	r24, r13
    2560:	9c 2d       	mov	r25, r12
    2562:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    2566:	01 50       	subi	r16, 0x01	; 1
    2568:	10 40       	sbci	r17, 0x00	; 0
	{
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
    256a:	81 f7       	brne	.-32     	; 0x254c <effect_z_updown+0x82>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    256c:	34 01       	movw	r6, r8
    256e:	66 0c       	add	r6, r6
    2570:	77 1c       	adc	r7, r7
    2572:	66 0c       	add	r6, r6
    2574:	77 1c       	adc	r7, r7
    2576:	ee 24       	eor	r14, r14
    2578:	ff 24       	eor	r15, r15
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    257a:	a8 e0       	ldi	r26, 0x08	; 8
    257c:	aa 2e       	mov	r10, r26
    257e:	b1 2c       	mov	r11, r1
		delay_ms(delay*4);


		for (y=0;y<32;y++)
		{
				destinations[rand()%64] = rand()%8;
    2580:	b0 e4       	ldi	r27, 0x40	; 64
    2582:	4b 2e       	mov	r4, r27
    2584:	51 2c       	mov	r5, r1
    2586:	33 c0       	rjmp	.+102    	; 0x25ee <effect_z_updown+0x124>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    2588:	08 e0       	ldi	r16, 0x08	; 8
    258a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    258c:	ce 01       	movw	r24, r28
    258e:	8f 5b       	subi	r24, 0xBF	; 191
    2590:	9f 4f       	sbci	r25, 0xFF	; 255
    2592:	be 01       	movw	r22, r28
    2594:	6f 5f       	subi	r22, 0xFF	; 255
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	4a e7       	ldi	r20, 0x7A	; 122
    259a:	0e 94 3f 12 	call	0x247e	; 0x247e <effect_z_updown_move>
			delay_ms(delay);
    259e:	8d 2d       	mov	r24, r13
    25a0:	9c 2d       	mov	r25, r12
    25a2:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    25a6:	01 50       	subi	r16, 0x01	; 1
    25a8:	10 40       	sbci	r17, 0x00	; 0
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
    25aa:	81 f7       	brne	.-32     	; 0x258c <effect_z_updown+0xc2>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    25ac:	c3 01       	movw	r24, r6
    25ae:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    25b2:	00 e2       	ldi	r16, 0x20	; 32
    25b4:	10 e0       	ldi	r17, 0x00	; 0


		for (y=0;y<32;y++)
		{
				destinations[rand()%64] = rand()%8;
    25b6:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    25ba:	4c 01       	movw	r8, r24
    25bc:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    25c0:	9c 01       	movw	r18, r24
    25c2:	c4 01       	movw	r24, r8
    25c4:	b2 01       	movw	r22, r4
    25c6:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    25ca:	fc 01       	movw	r30, r24
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	8c 0f       	add	r24, r28
    25d2:	9d 1f       	adc	r25, r29
    25d4:	e8 0f       	add	r30, r24
    25d6:	f9 1f       	adc	r31, r25
    25d8:	c9 01       	movw	r24, r18
    25da:	b5 01       	movw	r22, r10
    25dc:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    25e0:	80 83       	st	Z, r24
    25e2:	01 50       	subi	r16, 0x01	; 1
    25e4:	10 40       	sbci	r17, 0x00	; 0
		}

		delay_ms(delay*4);


		for (y=0;y<32;y++)
    25e6:	39 f7       	brne	.-50     	; 0x25b6 <effect_z_updown+0xec>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    25e8:	08 94       	sec
    25ea:	e1 1c       	adc	r14, r1
    25ec:	f1 1c       	adc	r15, r1
    25ee:	e2 14       	cp	r14, r2
    25f0:	f3 04       	cpc	r15, r3
    25f2:	54 f2       	brlt	.-108    	; 0x2588 <effect_z_updown+0xbe>
				destinations[rand()%64] = rand()%8;
		}
		
	}

}
    25f4:	c0 58       	subi	r28, 0x80	; 128
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	df 90       	pop	r13
    2610:	cf 90       	pop	r12
    2612:	bf 90       	pop	r11
    2614:	af 90       	pop	r10
    2616:	9f 90       	pop	r9
    2618:	8f 90       	pop	r8
    261a:	7f 90       	pop	r7
    261c:	6f 90       	pop	r6
    261e:	5f 90       	pop	r5
    2620:	4f 90       	pop	r4
    2622:	3f 90       	pop	r3
    2624:	2f 90       	pop	r2
    2626:	08 95       	ret

00002628 <effect_boxside_randsend_parallel>:
	
}


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    2628:	2f 92       	push	r2
    262a:	3f 92       	push	r3
    262c:	4f 92       	push	r4
    262e:	5f 92       	push	r5
    2630:	6f 92       	push	r6
    2632:	7f 92       	push	r7
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	c0 58       	subi	r28, 0x80	; 128
    2650:	d0 40       	sbci	r29, 0x00	; 0
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	98 2e       	mov	r9, r24
    265e:	1b 01       	movw	r2, r22
    2660:	2a 01       	movw	r4, r20
    2662:	59 01       	movw	r10, r18
    2664:	fe 01       	movw	r30, r28
    2666:	31 96       	adiw	r30, 0x01	; 1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
	{
		pos[i] = 0;
    266c:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	80 34       	cpi	r24, 0x40	; 64
    2672:	91 05       	cpc	r25, r1
    2674:	d9 f7       	brne	.-10     	; 0x266c <effect_boxside_randsend_parallel+0x44>
    2676:	00 e0       	ldi	r16, 0x00	; 0
    2678:	10 e0       	ldi	r17, 0x00	; 0
		if (mode == 1)
		{
			notdone2 = 1;
			while (notdone2 && sent < 64)
			{
				i = rand() % 64;
    267a:	40 e4       	ldi	r20, 0x40	; 64
    267c:	64 2e       	mov	r6, r20
    267e:	71 2c       	mov	r7, r1
				if (pos[i] == 0)
				{
					sent++;
					pos[i] += 1;
    2680:	cc 24       	eor	r12, r12
    2682:	c3 94       	inc	r12
			{
				cubepos[i] = pos[i];
			}
			else
			{
				cubepos[i] = (7-pos[i]);
    2684:	57 e0       	ldi	r21, 0x07	; 7
    2686:	d5 2e       	mov	r13, r21
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    2688:	31 e0       	ldi	r19, 0x01	; 1
    268a:	a3 16       	cp	r10, r19
    268c:	b1 04       	cpc	r11, r1
    268e:	b1 f4       	brne	.+44     	; 0x26bc <effect_boxside_randsend_parallel+0x94>
		{
			notdone2 = 1;
			while (notdone2 && sent < 64)
    2690:	00 34       	cpi	r16, 0x40	; 64
    2692:	11 05       	cpc	r17, r1
    2694:	2c f5       	brge	.+74     	; 0x26e0 <effect_boxside_randsend_parallel+0xb8>
			{
				i = rand() % 64;
    2696:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    269a:	b3 01       	movw	r22, r6
    269c:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    26a0:	fc 01       	movw	r30, r24
				if (pos[i] == 0)
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	8c 0f       	add	r24, r28
    26a8:	9d 1f       	adc	r25, r29
    26aa:	e8 0f       	add	r30, r24
    26ac:	f9 1f       	adc	r31, r25
    26ae:	80 81       	ld	r24, Z
    26b0:	88 23       	and	r24, r24
    26b2:	89 f7       	brne	.-30     	; 0x2696 <effect_boxside_randsend_parallel+0x6e>
				{
					sent++;
    26b4:	0f 5f       	subi	r16, 0xFF	; 255
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
					pos[i] += 1;
    26b8:	c0 82       	st	Z, r12
    26ba:	12 c0       	rjmp	.+36     	; 0x26e0 <effect_boxside_randsend_parallel+0xb8>
					notdone2 = 0;
				}
			}
		} 
		else if (mode == 2)
    26bc:	92 e0       	ldi	r25, 0x02	; 2
    26be:	a9 16       	cp	r10, r25
    26c0:	b1 04       	cpc	r11, r1
    26c2:	71 f4       	brne	.+28     	; 0x26e0 <effect_boxside_randsend_parallel+0xb8>
		{
			if (sent < 64)
    26c4:	00 34       	cpi	r16, 0x40	; 64
    26c6:	11 05       	cpc	r17, r1
    26c8:	5c f4       	brge	.+22     	; 0x26e0 <effect_boxside_randsend_parallel+0xb8>
			{
				pos[sent] += 1;
    26ca:	e1 e0       	ldi	r30, 0x01	; 1
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	ec 0f       	add	r30, r28
    26d0:	fd 1f       	adc	r31, r29
    26d2:	e0 0f       	add	r30, r16
    26d4:	f1 1f       	adc	r31, r17
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 83       	st	Z, r24
				sent++;
    26dc:	0f 5f       	subi	r16, 0xFF	; 255
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    26e0:	fe 01       	movw	r30, r28
    26e2:	31 96       	adiw	r30, 0x01	; 1
				pos[sent] += 1;
				sent++;
			}
		}
		
		done = 0;
    26e4:	ee 24       	eor	r14, r14
    26e6:	ff 24       	eor	r15, r15
		for (i = 0; i < 64; i++)
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
	}
	
}


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
    26ec:	df 01       	movw	r26, r30
		}
		
		done = 0;
		for (i = 0; i < 64; i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    26ee:	20 81       	ld	r18, Z
    26f0:	32 2f       	mov	r19, r18
    26f2:	31 50       	subi	r19, 0x01	; 1
    26f4:	36 30       	cpi	r19, 0x06	; 6
    26f6:	10 f4       	brcc	.+4      	; 0x26fc <effect_boxside_randsend_parallel+0xd4>
			{
				pos[i] += 1;
    26f8:	2f 5f       	subi	r18, 0xFF	; 255
    26fa:	20 83       	st	Z, r18
    26fc:	31 96       	adiw	r30, 0x01	; 1
			}
				
			if (pos[i] == 7)
    26fe:	2c 91       	ld	r18, X
    2700:	27 30       	cpi	r18, 0x07	; 7
    2702:	19 f4       	brne	.+6      	; 0x270a <effect_boxside_randsend_parallel+0xe2>
			{
				done++;
    2704:	08 94       	sec
    2706:	e1 1c       	adc	r14, r1
    2708:	f1 1c       	adc	r15, r1
				sent++;
			}
		}
		
		done = 0;
		for (i = 0; i < 64; i++)
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	80 34       	cpi	r24, 0x40	; 64
    270e:	91 05       	cpc	r25, r1
    2710:	69 f7       	brne	.-38     	; 0x26ec <effect_boxside_randsend_parallel+0xc4>
    2712:	fe 01       	movw	r30, r28
    2714:	ef 5b       	subi	r30, 0xBF	; 191
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	de 01       	movw	r26, r28
    271a:	11 96       	adiw	r26, 0x01	; 1
		if (done == 64)
		{
			notdone = 0;
		}
		
		for (i=0;i<64;i++)
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
		{
			if (origin == 0)
			{
				cubepos[i] = pos[i];
    2720:	2c 91       	ld	r18, X
			notdone = 0;
		}
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    2722:	21 14       	cp	r2, r1
    2724:	31 04       	cpc	r3, r1
    2726:	19 f0       	breq	.+6      	; 0x272e <effect_boxside_randsend_parallel+0x106>
			{
				cubepos[i] = pos[i];
			}
			else
			{
				cubepos[i] = (7-pos[i]);
    2728:	3d 2d       	mov	r19, r13
    272a:	32 1b       	sub	r19, r18
    272c:	23 2f       	mov	r18, r19
    272e:	20 83       	st	Z, r18
		if (done == 64)
		{
			notdone = 0;
		}
		
		for (i=0;i<64;i++)
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	31 96       	adiw	r30, 0x01	; 1
    2736:	80 34       	cpi	r24, 0x40	; 64
    2738:	91 05       	cpc	r25, r1
    273a:	91 f7       	brne	.-28     	; 0x2720 <effect_boxside_randsend_parallel+0xf8>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    273c:	c2 01       	movw	r24, r4
    273e:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		draw_positions_axis(axis, cubepos, 0);
    2742:	89 2d       	mov	r24, r9
    2744:	be 01       	movw	r22, r28
    2746:	6f 5b       	subi	r22, 0xBF	; 191
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	0e 94 2c 11 	call	0x2258	; 0x2258 <draw_positions_axis>
		debug_blink(LED_RED);
    2752:	80 e1       	ldi	r24, 0x10	; 16
    2754:	0e 94 44 03 	call	0x688	; 0x688 <debug_blink>
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    2758:	80 e4       	ldi	r24, 0x40	; 64
    275a:	e8 16       	cp	r14, r24
    275c:	f1 04       	cpc	r15, r1
    275e:	09 f0       	breq	.+2      	; 0x2762 <effect_boxside_randsend_parallel+0x13a>
    2760:	93 cf       	rjmp	.-218    	; 0x2688 <effect_boxside_randsend_parallel+0x60>
		delay_ms(delay);
		draw_positions_axis(axis, cubepos, 0);
		debug_blink(LED_RED);
	}
	
}
    2762:	c0 58       	subi	r28, 0x80	; 128
    2764:	df 4f       	sbci	r29, 0xFF	; 255
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	df 90       	pop	r13
    277e:	cf 90       	pop	r12
    2780:	bf 90       	pop	r11
    2782:	af 90       	pop	r10
    2784:	9f 90       	pop	r9
    2786:	7f 90       	pop	r7
    2788:	6f 90       	pop	r6
    278a:	5f 90       	pop	r5
    278c:	4f 90       	pop	r4
    278e:	3f 90       	pop	r3
    2790:	2f 90       	pop	r2
    2792:	08 95       	ret

00002794 <effect_loadbar>:


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	8c 01       	movw	r16, r24
	fill(0x00);
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
	
	int z,y;
	
	for (z=0;z<8;z++)
    27aa:	c0 e0       	ldi	r28, 0x00	; 0
    27ac:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    27ae:	dd 24       	eor	r13, r13
    27b0:	da 94       	dec	r13
			
		delay_ms(delay);
    27b2:	78 01       	movw	r14, r16
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    27b4:	fe 01       	movw	r30, r28
    27b6:	a3 e0       	ldi	r26, 0x03	; 3
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	aa 95       	dec	r26
    27be:	e1 f7       	brne	.-8      	; 0x27b8 <effect_loadbar+0x24>
    27c0:	e7 51       	subi	r30, 0x17	; 23
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	d0 82       	st	Z, r13
    27c6:	d1 82       	std	Z+1, r13	; 0x01
    27c8:	d2 82       	std	Z+2, r13	; 0x02
    27ca:	d3 82       	std	Z+3, r13	; 0x03
    27cc:	d4 82       	std	Z+4, r13	; 0x04
    27ce:	d5 82       	std	Z+5, r13	; 0x05
    27d0:	d6 82       	std	Z+6, r13	; 0x06
    27d2:	d7 82       	std	Z+7, r13	; 0x07
			
		delay_ms(delay);
    27d4:	c7 01       	movw	r24, r14
    27d6:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    27da:	21 96       	adiw	r28, 0x01	; 1
    27dc:	c8 30       	cpi	r28, 0x08	; 8
    27de:	d1 05       	cpc	r29, r1
    27e0:	49 f7       	brne	.-46     	; 0x27b4 <effect_loadbar+0x20>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    27e2:	c8 01       	movw	r24, r16
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	80 0f       	add	r24, r16
    27ea:	91 1f       	adc	r25, r17
    27ec:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
	
	for (z=0;z<8;z++)
    27f0:	c0 e0       	ldi	r28, 0x00	; 0
    27f2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    27f4:	fe 01       	movw	r30, r28
    27f6:	63 e0       	ldi	r22, 0x03	; 3
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	6a 95       	dec	r22
    27fe:	e1 f7       	brne	.-8      	; 0x27f8 <effect_loadbar+0x64>
    2800:	e7 51       	subi	r30, 0x17	; 23
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	10 82       	st	Z, r1
    2806:	11 82       	std	Z+1, r1	; 0x01
    2808:	12 82       	std	Z+2, r1	; 0x02
    280a:	13 82       	std	Z+3, r1	; 0x03
    280c:	14 82       	std	Z+4, r1	; 0x04
    280e:	15 82       	std	Z+5, r1	; 0x05
    2810:	16 82       	std	Z+6, r1	; 0x06
    2812:	17 82       	std	Z+7, r1	; 0x07
			
		delay_ms(delay);
    2814:	c7 01       	movw	r24, r14
    2816:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
    281a:	21 96       	adiw	r28, 0x01	; 1
    281c:	c8 30       	cpi	r28, 0x08	; 8
    281e:	d1 05       	cpc	r29, r1
    2820:	49 f7       	brne	.-46     	; 0x27f4 <effect_loadbar+0x60>
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
			
		delay_ms(delay);
	}
}
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	df 90       	pop	r13
    2830:	08 95       	ret

00002832 <effect_random_sparkle_flash>:


// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
    2832:	4f 92       	push	r4
    2834:	5f 92       	push	r5
    2836:	6f 92       	push	r6
    2838:	7f 92       	push	r7
    283a:	8f 92       	push	r8
    283c:	9f 92       	push	r9
    283e:	af 92       	push	r10
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	4c 01       	movw	r8, r24
    2854:	3b 01       	movw	r6, r22
    2856:	2a 01       	movw	r4, r20
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    2858:	00 e0       	ldi	r16, 0x00	; 0
    285a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (v = 0; v <= voxels; v++)
		{
			setvoxel(rand() % 8, rand() % 8, rand() % 8);
    285c:	b8 e0       	ldi	r27, 0x08	; 8
    285e:	eb 2e       	mov	r14, r27
    2860:	f1 2c       	mov	r15, r1
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    2862:	2b c0       	rjmp	.+86     	; 0x28ba <effect_random_sparkle_flash+0x88>
	{
		for (v = 0; v <= voxels; v++)
		{
			setvoxel(rand() % 8, rand() % 8, rand() % 8);
    2864:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2868:	6c 01       	movw	r12, r24
    286a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    286e:	5c 01       	movw	r10, r24
    2870:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2874:	9c 01       	movw	r18, r24
    2876:	c6 01       	movw	r24, r12
    2878:	b7 01       	movw	r22, r14
    287a:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    287e:	fc 01       	movw	r30, r24
    2880:	c5 01       	movw	r24, r10
    2882:	b7 01       	movw	r22, r14
    2884:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2888:	6c 01       	movw	r12, r24
    288a:	c9 01       	movw	r24, r18
    288c:	b7 01       	movw	r22, r14
    288e:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2892:	ac 01       	movw	r20, r24
    2894:	cf 01       	movw	r24, r30
    2896:	b6 01       	movw	r22, r12
    2898:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v = 0; v <= voxels; v++)
    289c:	21 96       	adiw	r28, 0x01	; 1
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <effect_random_sparkle_flash+0x72>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    28a0:	c0 e0       	ldi	r28, 0x00	; 0
    28a2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (v = 0; v <= voxels; v++)
    28a4:	6c 16       	cp	r6, r28
    28a6:	7d 06       	cpc	r7, r29
    28a8:	ec f6       	brge	.-70     	; 0x2864 <effect_random_sparkle_flash+0x32>
		{
			setvoxel(rand() % 8, rand() % 8, rand() % 8);
		}
			
		delay_ms(delay);
    28aa:	c2 01       	movw	r24, r4
    28ac:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		fill(0x00);
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    28b6:	0f 5f       	subi	r16, 0xFF	; 255
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	08 15       	cp	r16, r8
    28bc:	19 05       	cpc	r17, r9
    28be:	84 f3       	brlt	.-32     	; 0x28a0 <effect_random_sparkle_flash+0x6e>
		}
			
		delay_ms(delay);
		fill(0x00);
	}
}
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	bf 90       	pop	r11
    28d2:	af 90       	pop	r10
    28d4:	9f 90       	pop	r9
    28d6:	8f 90       	pop	r8
    28d8:	7f 90       	pop	r7
    28da:	6f 90       	pop	r6
    28dc:	5f 90       	pop	r5
    28de:	4f 90       	pop	r4
    28e0:	08 95       	ret

000028e2 <effect_random_sparkle>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void effect_random_sparkle (void)
{
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
	int i;
	
	for (i = 1; i < 20; i++)
    28e6:	c1 e0       	ldi	r28, 0x01	; 1
    28e8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		effect_random_sparkle_flash(5, i, 200);
    28ea:	85 e0       	ldi	r24, 0x05	; 5
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	be 01       	movw	r22, r28
    28f0:	48 ec       	ldi	r20, 0xC8	; 200
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	0e 94 19 14 	call	0x2832	; 0x2832 <effect_random_sparkle_flash>
// and back to 1 again.
void effect_random_sparkle (void)
{
	int i;
	
	for (i = 1; i < 20; i++)
    28f8:	21 96       	adiw	r28, 0x01	; 1
    28fa:	c4 31       	cpi	r28, 0x14	; 20
    28fc:	d1 05       	cpc	r29, r1
    28fe:	a9 f7       	brne	.-22     	; 0x28ea <effect_random_sparkle+0x8>
		effect_random_sparkle_flash(5, i, 200);
	}
	
	for (i = 20; i >= 1; i--)
	{
		effect_random_sparkle_flash(5, i, 200);
    2900:	85 e0       	ldi	r24, 0x05	; 5
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	be 01       	movw	r22, r28
    2906:	48 ec       	ldi	r20, 0xC8	; 200
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	0e 94 19 14 	call	0x2832	; 0x2832 <effect_random_sparkle_flash>
	for (i = 1; i < 20; i++)
	{
		effect_random_sparkle_flash(5, i, 200);
	}
	
	for (i = 20; i >= 1; i--)
    290e:	21 97       	sbiw	r28, 0x01	; 1
    2910:	b9 f7       	brne	.-18     	; 0x2900 <effect_random_sparkle+0x1e>
	{
		effect_random_sparkle_flash(5, i, 200);
	}
	
}
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	08 95       	ret

00002918 <effect_telcstairs_do>:

int effect_telcstairs_do(int x, int val, int delay)
{
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	ec 01       	movw	r28, r24
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    291e:	9c 01       	movw	r18, r24
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	14 c0       	rjmp	.+40     	; 0x294e <effect_telcstairs_do+0x36>
	{
		if(x < CUBE_SIZE && y < CUBE_SIZE)
    2926:	28 30       	cpi	r18, 0x08	; 8
    2928:	31 05       	cpc	r19, r1
    292a:	74 f4       	brge	.+28     	; 0x2948 <effect_telcstairs_do+0x30>
    292c:	88 30       	cpi	r24, 0x08	; 8
    292e:	91 05       	cpc	r25, r1
    2930:	5c f4       	brge	.+22     	; 0x2948 <effect_telcstairs_do+0x30>
		{
			cube[x][y] = val;
    2932:	f9 01       	movw	r30, r18
    2934:	73 e0       	ldi	r23, 0x03	; 3
    2936:	ee 0f       	add	r30, r30
    2938:	ff 1f       	adc	r31, r31
    293a:	7a 95       	dec	r23
    293c:	e1 f7       	brne	.-8      	; 0x2936 <effect_telcstairs_do+0x1e>
    293e:	e8 0f       	add	r30, r24
    2940:	f9 1f       	adc	r31, r25
    2942:	e7 51       	subi	r30, 0x17	; 23
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 83       	st	Z, r22

int effect_telcstairs_do(int x, int val, int delay)
{
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	21 50       	subi	r18, 0x01	; 1
    294c:	30 40       	sbci	r19, 0x00	; 0
    294e:	c8 17       	cp	r28, r24
    2950:	d9 07       	cpc	r29, r25
    2952:	4c f7       	brge	.-46     	; 0x2926 <effect_telcstairs_do+0xe>
		if(x < CUBE_SIZE && y < CUBE_SIZE)
		{
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    2954:	ca 01       	movw	r24, r20
    2956:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
	return z;
}
    295a:	ce 01       	movw	r24, r28
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	08 95       	ret

00002962 <effect_telcstairs>:

void effect_telcstairs (int invert, int delay, int val)
{
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	8b 01       	movw	r16, r22
    296c:	ea 01       	movw	r28, r20
	int x;

	if(invert)
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	51 f0       	breq	.+20     	; 0x2986 <effect_telcstairs+0x24>
    2972:	80 e1       	ldi	r24, 0x10	; 16
    2974:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
		{
			x = effect_telcstairs_do(x,val,delay);
    2976:	be 01       	movw	r22, r28
    2978:	a8 01       	movw	r20, r16
    297a:	0e 94 8c 14 	call	0x2918	; 0x2918 <effect_telcstairs_do>
{
	int x;

	if(invert)
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	97 ff       	sbrs	r25, 7
    2982:	f9 cf       	rjmp	.-14     	; 0x2976 <effect_telcstairs+0x14>
    2984:	0a c0       	rjmp	.+20     	; 0x299a <effect_telcstairs+0x38>

void effect_telcstairs (int invert, int delay, int val)
{
	int x;

	if(invert)
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
		{
			x = effect_telcstairs_do(x,val,delay);
    298a:	be 01       	movw	r22, r28
    298c:	a8 01       	movw	r20, r16
    298e:	0e 94 8c 14 	call	0x2918	; 0x2918 <effect_telcstairs_do>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	80 31       	cpi	r24, 0x10	; 16
    2996:	91 05       	cpc	r25, r1
    2998:	c4 f3       	brlt	.-16     	; 0x298a <effect_telcstairs+0x28>
		{
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	08 95       	ret

000029a4 <effect_wormsqueeze>:

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
    29a4:	2f 92       	push	r2
    29a6:	3f 92       	push	r3
    29a8:	4f 92       	push	r4
    29aa:	5f 92       	push	r5
    29ac:	6f 92       	push	r6
    29ae:	7f 92       	push	r7
    29b0:	8f 92       	push	r8
    29b2:	9f 92       	push	r9
    29b4:	af 92       	push	r10
    29b6:	bf 92       	push	r11
    29b8:	cf 92       	push	r12
    29ba:	df 92       	push	r13
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	60 97       	sbiw	r28, 0x10	; 16
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	9a 83       	std	Y+2, r25	; 0x02
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	7c 83       	std	Y+4, r23	; 0x04
    29de:	6b 83       	std	Y+3, r22	; 0x03
    29e0:	5e 83       	std	Y+6, r21	; 0x06
    29e2:	4d 83       	std	Y+5, r20	; 0x05
    29e4:	38 87       	std	Y+8, r19	; 0x08
    29e6:	2f 83       	std	Y+7, r18	; 0x07
    29e8:	1a 87       	std	Y+10, r17	; 0x0a
    29ea:	09 87       	std	Y+9, r16	; 0x09
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
	
	if (direction == -1)
    29ec:	2f ef       	ldi	r18, 0xFF	; 255
    29ee:	4f 3f       	cpi	r20, 0xFF	; 255
    29f0:	52 07       	cpc	r21, r18
    29f2:	19 f0       	breq	.+6      	; 0x29fa <effect_wormsqueeze+0x56>

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
    29f4:	44 24       	eor	r4, r4
    29f6:	55 24       	eor	r5, r5
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <effect_wormsqueeze+0x5c>
	
	if (direction == -1)
		origin = 7;
    29fa:	f7 e0       	ldi	r31, 0x07	; 7
    29fc:	4f 2e       	mov	r4, r31
    29fe:	51 2c       	mov	r5, r1
	
	cube_size = 8-(size-1);
    2a00:	e9 e0       	ldi	r30, 0x09	; 9
    2a02:	ae 2e       	mov	r10, r30
    2a04:	b1 2c       	mov	r11, r1
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	a8 1a       	sub	r10, r24
    2a0c:	b9 0a       	sbc	r11, r25
	
	x = rand()%cube_size;
    2a0e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2a12:	b5 01       	movw	r22, r10
    2a14:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2a18:	3c 01       	movw	r6, r24
	y = rand()%cube_size;
    2a1a:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2a1e:	b5 01       	movw	r22, r10
    2a20:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2a24:	4c 01       	movw	r8, r24
	
	for (i=0; i<iterations; i++)
    2a26:	22 24       	eor	r2, r2
    2a28:	33 24       	eor	r3, r3
    2a2a:	7d c0       	rjmp	.+250    	; 0x2b26 <effect_wormsqueeze+0x182>
	{
		dx = ((rand()%3)-1);
    2a2c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2a30:	8c 01       	movw	r16, r24
		dy = ((rand()%3)-1);
    2a32:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    2a36:	63 e0       	ldi	r22, 0x03	; 3
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2a3e:	9c 01       	movw	r18, r24
    2a40:	21 50       	subi	r18, 0x01	; 1
    2a42:	30 40       	sbci	r19, 0x00	; 0
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
    2a44:	c8 01       	movw	r24, r16
    2a46:	63 e0       	ldi	r22, 0x03	; 3
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
		dy = ((rand()%3)-1);
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
    2a50:	86 0d       	add	r24, r6
    2a52:	97 1d       	adc	r25, r7
    2a54:	18 16       	cp	r1, r24
    2a56:	19 06       	cpc	r1, r25
    2a58:	24 f4       	brge	.+8      	; 0x2a62 <effect_wormsqueeze+0xbe>
    2a5a:	8a 15       	cp	r24, r10
    2a5c:	9b 05       	cpc	r25, r11
    2a5e:	0c f4       	brge	.+2      	; 0x2a62 <effect_wormsqueeze+0xbe>
    2a60:	3c 01       	movw	r6, r24
			x += dx;
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
    2a62:	c4 01       	movw	r24, r8
    2a64:	82 0f       	add	r24, r18
    2a66:	93 1f       	adc	r25, r19
    2a68:	18 16       	cp	r1, r24
    2a6a:	19 06       	cpc	r1, r25
    2a6c:	24 f4       	brge	.+8      	; 0x2a76 <effect_wormsqueeze+0xd2>
    2a6e:	8a 15       	cp	r24, r10
    2a70:	9b 05       	cpc	r25, r11
    2a72:	0c f4       	brge	.+2      	; 0x2a76 <effect_wormsqueeze+0xd2>
    2a74:	4c 01       	movw	r8, r24
			y += dy;
	
		shift(axis, direction);
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	6d 81       	ldd	r22, Y+5	; 0x05
    2a7a:	7e 81       	ldd	r23, Y+6	; 0x06
    2a7c:	0e 94 3e 08 	call	0x107c	; 0x107c <shift>
		

		for (j=0; j<size;j++)
    2a80:	63 01       	movw	r12, r6
    2a82:	00 e0       	ldi	r16, 0x00	; 0
    2a84:	10 e0       	ldi	r17, 0x00	; 0
    2a86:	3e 86       	std	Y+14, r3	; 0x0e
    2a88:	2d 86       	std	Y+13, r2	; 0x0d
    2a8a:	15 01       	movw	r2, r10
    2a8c:	29 81       	ldd	r18, Y+1	; 0x01
    2a8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2a90:	2d c0       	rjmp	.+90     	; 0x2aec <effect_wormsqueeze+0x148>
		{
			for (k=0; k<size;k++)
			{
				if (axis == AXIS_Z)
    2a92:	0a 37       	cpi	r16, 0x7A	; 122
    2a94:	11 05       	cpc	r17, r1
    2a96:	21 f4       	brne	.+8      	; 0x2aa0 <effect_wormsqueeze+0xfc>
					setvoxel(x+j,y+k,origin);
    2a98:	c6 01       	movw	r24, r12
    2a9a:	b5 01       	movw	r22, r10
    2a9c:	a2 01       	movw	r20, r4
    2a9e:	10 c0       	rjmp	.+32     	; 0x2ac0 <effect_wormsqueeze+0x11c>
					
				if (axis == AXIS_Y)
    2aa0:	09 37       	cpi	r16, 0x79	; 121
    2aa2:	11 05       	cpc	r17, r1
    2aa4:	21 f4       	brne	.+8      	; 0x2aae <effect_wormsqueeze+0x10a>
					setvoxel(x+j,origin,y+k);
    2aa6:	c6 01       	movw	r24, r12
    2aa8:	b2 01       	movw	r22, r4
    2aaa:	a5 01       	movw	r20, r10
    2aac:	09 c0       	rjmp	.+18     	; 0x2ac0 <effect_wormsqueeze+0x11c>
					
				if (axis == AXIS_X)
    2aae:	08 37       	cpi	r16, 0x78	; 120
    2ab0:	11 05       	cpc	r17, r1
    2ab2:	41 f4       	brne	.+16     	; 0x2ac4 <effect_wormsqueeze+0x120>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
    2ab4:	a7 01       	movw	r20, r14
    2ab6:	46 0d       	add	r20, r6
    2ab8:	57 1d       	adc	r21, r7
					
				if (axis == AXIS_Y)
					setvoxel(x+j,origin,y+k);
					
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
    2aba:	c2 01       	movw	r24, r4
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		shift(axis, direction);
		

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
    2ac4:	08 94       	sec
    2ac6:	e1 1c       	adc	r14, r1
    2ac8:	f1 1c       	adc	r15, r1
    2aca:	08 94       	sec
    2acc:	a1 1c       	adc	r10, r1
    2ace:	b1 1c       	adc	r11, r1
    2ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad4:	ee 16       	cp	r14, r30
    2ad6:	ff 06       	cpc	r15, r31
    2ad8:	e4 f2       	brlt	.-72     	; 0x2a92 <effect_wormsqueeze+0xee>
    2ada:	84 01       	movw	r16, r8
    2adc:	8f 84       	ldd	r8, Y+15	; 0x0f
    2ade:	98 88       	ldd	r9, Y+16	; 0x10
    2ae0:	9f 01       	movw	r18, r30
			y += dy;
	
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    2ae2:	0f 5f       	subi	r16, 0xFF	; 255
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	08 94       	sec
    2ae8:	c1 1c       	adc	r12, r1
    2aea:	d1 1c       	adc	r13, r1
    2aec:	02 17       	cp	r16, r18
    2aee:	13 07       	cpc	r17, r19
    2af0:	84 f4       	brge	.+32     	; 0x2b12 <effect_wormsqueeze+0x16e>
    2af2:	54 01       	movw	r10, r8
    2af4:	ee 24       	eor	r14, r14
    2af6:	ff 24       	eor	r15, r15
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
    2af8:	c8 01       	movw	r24, r16
    2afa:	88 0d       	add	r24, r8
    2afc:	99 1d       	adc	r25, r9
    2afe:	9c 87       	std	Y+12, r25	; 0x0c
    2b00:	8b 87       	std	Y+11, r24	; 0x0b
    2b02:	98 8a       	std	Y+16, r9	; 0x10
    2b04:	8f 86       	std	Y+15, r8	; 0x0f
    2b06:	48 01       	movw	r8, r16
    2b08:	3a 83       	std	Y+2, r19	; 0x02
    2b0a:	29 83       	std	Y+1, r18	; 0x01
    2b0c:	0b 81       	ldd	r16, Y+3	; 0x03
    2b0e:	1c 81       	ldd	r17, Y+4	; 0x04
    2b10:	df cf       	rjmp	.-66     	; 0x2ad0 <effect_wormsqueeze+0x12c>
    2b12:	51 01       	movw	r10, r2
    2b14:	2d 84       	ldd	r2, Y+13	; 0x0d
    2b16:	3e 84       	ldd	r3, Y+14	; 0x0e
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
			}
		}
		
		delay_ms(delay);
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
	cube_size = 8-(size-1);
	
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
    2b20:	08 94       	sec
    2b22:	21 1c       	adc	r2, r1
    2b24:	31 1c       	adc	r3, r1
    2b26:	ef 81       	ldd	r30, Y+7	; 0x07
    2b28:	f8 85       	ldd	r31, Y+8	; 0x08
    2b2a:	2e 16       	cp	r2, r30
    2b2c:	3f 06       	cpc	r3, r31
    2b2e:	0c f4       	brge	.+2      	; 0x2b32 <effect_wormsqueeze+0x18e>
    2b30:	7d cf       	rjmp	.-262    	; 0x2a2c <effect_wormsqueeze+0x88>
			}
		}
		
		delay_ms(delay);
	}
}
    2b32:	60 96       	adiw	r28, 0x10	; 16
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	bf 90       	pop	r11
    2b50:	af 90       	pop	r10
    2b52:	9f 90       	pop	r9
    2b54:	8f 90       	pop	r8
    2b56:	7f 90       	pop	r7
    2b58:	6f 90       	pop	r6
    2b5a:	5f 90       	pop	r5
    2b5c:	4f 90       	pop	r4
    2b5e:	3f 90       	pop	r3
    2b60:	2f 90       	pop	r2
    2b62:	08 95       	ret

00002b64 <effect_smileyspin>:

void effect_smileyspin (int count, int delay, char bitmap)
{
    2b64:	2f 92       	push	r2
    2b66:	3f 92       	push	r3
    2b68:	4f 92       	push	r4
    2b6a:	5f 92       	push	r5
    2b6c:	6f 92       	push	r6
    2b6e:	7f 92       	push	r7
    2b70:	8f 92       	push	r8
    2b72:	9f 92       	push	r9
    2b74:	af 92       	push	r10
    2b76:	bf 92       	push	r11
    2b78:	cf 92       	push	r12
    2b7a:	df 92       	push	r13
    2b7c:	ef 92       	push	r14
    2b7e:	ff 92       	push	r15
    2b80:	0f 93       	push	r16
    2b82:	1f 93       	push	r17
    2b84:	cf 93       	push	r28
    2b86:	df 93       	push	r29
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	ab 97       	sbiw	r28, 0x2b	; 43
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	9b a7       	lds	r25, 0x7b
    2b9a:	8a a7       	lds	r24, 0x7a
    2b9c:	6e a3       	lds	r22, 0x5e
    2b9e:	7f a3       	lds	r23, 0x5f
    2ba0:	4d a3       	lds	r20, 0x5d
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
    2ba2:	de 01       	movw	r26, r28
    2ba4:	11 96       	adiw	r26, 0x01	; 1
    2ba6:	eb e7       	ldi	r30, 0x7B	; 123
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 e2       	ldi	r24, 0x20	; 32
    2bac:	01 90       	ld	r0, Z+
    2bae:	0d 92       	st	X+, r0
    2bb0:	81 50       	subi	r24, 0x01	; 1
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <effect_smileyspin+0x48>
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    2bb4:	19 a6       	lds	r17, 0xb9
    2bb6:	18 a6       	lds	r17, 0xb8
    2bb8:	9e 01       	movw	r18, r28
    2bba:	2f 5f       	subi	r18, 0xFF	; 255
    2bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbe:	3a a3       	lds	r19, 0x5a
    2bc0:	29 a3       	lds	r18, 0x59
    2bc2:	ae c1       	rjmp	.+860    	; 0x2f20 <effect_smileyspin+0x3bc>
    2bc4:	47 e0       	ldi	r20, 0x07	; 7
    2bc6:	44 2e       	mov	r4, r20
    2bc8:	51 2c       	mov	r5, r1
    2bca:	00 e0       	ldi	r16, 0x00	; 0
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	22 24       	eor	r2, r2
    2bd0:	33 24       	eor	r3, r3
    2bd2:	0f 5f       	subi	r16, 0xFF	; 255
    2bd4:	1f 4f       	sbci	r17, 0xFF	; 255
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
    2bd6:	21 14       	cp	r2, r1
    2bd8:	31 04       	cpc	r3, r1
    2bda:	41 f4       	brne	.+16     	; 0x2bec <effect_smileyspin+0x88>
				off++;
				if (off == 4){
    2bdc:	04 30       	cpi	r16, 0x04	; 4
    2bde:	11 05       	cpc	r17, r1
    2be0:	29 f4       	brne	.+10     	; 0x2bec <effect_smileyspin+0x88>
					flip = 1;
					off = 0;
    2be2:	00 e0       	ldi	r16, 0x00	; 0
    2be4:	10 e0       	ldi	r17, 0x00	; 0
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2be6:	31 e0       	ldi	r19, 0x01	; 1
    2be8:	23 2e       	mov	r2, r19
    2bea:	31 2c       	mov	r3, r1
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2bec:	38 01       	movw	r6, r16
    2bee:	b3 e0       	ldi	r27, 0x03	; 3
    2bf0:	66 0c       	add	r6, r6
    2bf2:	77 1c       	adc	r7, r7
    2bf4:	ba 95       	dec	r27
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <effect_smileyspin+0x8c>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2bf8:	27 e0       	ldi	r18, 0x07	; 7
    2bfa:	c2 2e       	mov	r12, r18
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2bfc:	88 24       	eor	r8, r8
    2bfe:	99 24       	eor	r9, r9
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2c00:	29 a1       	lds	r18, 0x49
    2c02:	3a a1       	lds	r19, 0x4a
    2c04:	26 19       	sub	r18, r6
    2c06:	37 09       	sbc	r19, r7
    2c08:	3c a3       	lds	r19, 0x5c
    2c0a:	2b a3       	lds	r18, 0x5b
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	8c 0f       	add	r24, r28
    2c12:	9d 1f       	adc	r25, r29
    2c14:	68 0e       	add	r6, r24
    2c16:	79 1e       	adc	r7, r25
    2c18:	58 01       	movw	r10, r16
    2c1a:	28 c0       	rjmp	.+80     	; 0x2c6c <effect_smileyspin+0x108>
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2c1c:	8d a1       	lds	r24, 0x4d
    2c1e:	6c 2d       	mov	r22, r12
    2c20:	40 2f       	mov	r20, r16
    2c22:	0e 94 66 1a 	call	0x34cc	; 0x34cc <font_getbitmappixel>
    2c26:	88 23       	and	r24, r24
    2c28:	91 f0       	breq	.+36     	; 0x2c4e <effect_smileyspin+0xea>
						if (!flip)
    2c2a:	21 14       	cp	r2, r1
    2c2c:	31 04       	cpc	r3, r1
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <effect_smileyspin+0xd6>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2c30:	f3 01       	movw	r30, r6
    2c32:	e0 0f       	add	r30, r16
    2c34:	f1 1f       	adc	r31, r17
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2c36:	60 81       	ld	r22, Z
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <effect_smileyspin+0xe0>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2c3a:	eb a1       	lds	r30, 0x4b
    2c3c:	fc a1       	lds	r31, 0x4c
    2c3e:	ee 0d       	add	r30, r14
    2c40:	ff 1d       	adc	r31, r15
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2c42:	67 89       	ldd	r22, Z+23	; 0x17
    2c44:	c8 01       	movw	r24, r16
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	a4 01       	movw	r20, r8
    2c4a:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2c4e:	0f 5f       	subi	r16, 0xFF	; 255
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	08 94       	sec
    2c54:	e1 08       	sbc	r14, r1
    2c56:	f1 08       	sbc	r15, r1
    2c58:	e1 14       	cp	r14, r1
    2c5a:	f1 04       	cpc	r15, r1
    2c5c:	f9 f6       	brne	.-66     	; 0x2c1c <effect_smileyspin+0xb8>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2c5e:	08 94       	sec
    2c60:	81 1c       	adc	r8, r1
    2c62:	91 1c       	adc	r9, r1
    2c64:	ca 94       	dec	r12
    2c66:	9f ef       	ldi	r25, 0xFF	; 255
    2c68:	c9 16       	cp	r12, r25
    2c6a:	31 f0       	breq	.+12     	; 0x2c78 <effect_smileyspin+0x114>
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2c6c:	a8 e0       	ldi	r26, 0x08	; 8
    2c6e:	ea 2e       	mov	r14, r26
    2c70:	f1 2c       	mov	r15, r1
    2c72:	00 e0       	ldi	r16, 0x00	; 0
    2c74:	10 e0       	ldi	r17, 0x00	; 0
    2c76:	d2 cf       	rjmp	.-92     	; 0x2c1c <effect_smileyspin+0xb8>
    2c78:	85 01       	movw	r16, r10
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    2c7a:	8e a1       	lds	r24, 0x4e
    2c7c:	9f a1       	lds	r25, 0x4f
    2c7e:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			fill(0x00);
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    2c88:	08 94       	sec
    2c8a:	41 08       	sbc	r4, r1
    2c8c:	51 08       	sbc	r5, r1
	{
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
    2c8e:	41 14       	cp	r4, r1
    2c90:	51 04       	cpc	r5, r1
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <effect_smileyspin+0x132>
    2c94:	9e cf       	rjmp	.-196    	; 0x2bd2 <effect_smileyspin+0x6e>
    2c96:	f7 e0       	ldi	r31, 0x07	; 7
    2c98:	4f 2e       	mov	r4, r31
    2c9a:	51 2c       	mov	r5, r1
    2c9c:	00 e0       	ldi	r16, 0x00	; 0
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	22 24       	eor	r2, r2
    2ca2:	33 24       	eor	r3, r3
    2ca4:	0f 5f       	subi	r16, 0xFF	; 255
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    2ca8:	21 14       	cp	r2, r1
    2caa:	31 04       	cpc	r3, r1
    2cac:	41 f4       	brne	.+16     	; 0x2cbe <effect_smileyspin+0x15a>
				off++;
				if (off == 4){
    2cae:	04 30       	cpi	r16, 0x04	; 4
    2cb0:	11 05       	cpc	r17, r1
    2cb2:	29 f4       	brne	.+10     	; 0x2cbe <effect_smileyspin+0x15a>
					flip = 1;
					off = 0;
    2cb4:	00 e0       	ldi	r16, 0x00	; 0
    2cb6:	10 e0       	ldi	r17, 0x00	; 0
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2cb8:	e1 e0       	ldi	r30, 0x01	; 1
    2cba:	2e 2e       	mov	r2, r30
    2cbc:	31 2c       	mov	r3, r1
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2cbe:	38 01       	movw	r6, r16
    2cc0:	63 e0       	ldi	r22, 0x03	; 3
    2cc2:	66 0c       	add	r6, r6
    2cc4:	77 1c       	adc	r7, r7
    2cc6:	6a 95       	dec	r22
    2cc8:	e1 f7       	brne	.-8      	; 0x2cc2 <effect_smileyspin+0x15e>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2cca:	77 e0       	ldi	r23, 0x07	; 7
    2ccc:	b7 2e       	mov	r11, r23
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2cce:	88 24       	eor	r8, r8
    2cd0:	99 24       	eor	r9, r9
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2cd2:	29 a1       	lds	r18, 0x49
    2cd4:	3a a1       	lds	r19, 0x4a
    2cd6:	26 19       	sub	r18, r6
    2cd8:	37 09       	sbc	r19, r7
    2cda:	3c a3       	lds	r19, 0x5c
    2cdc:	2b a3       	lds	r18, 0x5b
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	8c 0f       	add	r24, r28
    2ce4:	9d 1f       	adc	r25, r29
    2ce6:	68 0e       	add	r6, r24
    2ce8:	79 1e       	adc	r7, r25
    2cea:	68 01       	movw	r12, r16
    2cec:	29 c0       	rjmp	.+82     	; 0x2d40 <effect_smileyspin+0x1dc>
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    2cee:	8d a1       	lds	r24, 0x4d
    2cf0:	6b 2d       	mov	r22, r11
    2cf2:	4e 2d       	mov	r20, r14
    2cf4:	0e 94 66 1a 	call	0x34cc	; 0x34cc <font_getbitmappixel>
    2cf8:	88 23       	and	r24, r24
    2cfa:	91 f0       	breq	.+36     	; 0x2d20 <effect_smileyspin+0x1bc>
						if (!flip)
    2cfc:	21 14       	cp	r2, r1
    2cfe:	31 04       	cpc	r3, r1
    2d00:	29 f4       	brne	.+10     	; 0x2d0c <effect_smileyspin+0x1a8>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2d02:	f3 01       	movw	r30, r6
    2d04:	ee 0d       	add	r30, r14
    2d06:	ff 1d       	adc	r31, r15
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2d08:	80 81       	ld	r24, Z
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <effect_smileyspin+0x1b2>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2d0c:	eb a1       	lds	r30, 0x4b
    2d0e:	fc a1       	lds	r31, 0x4c
    2d10:	e0 0f       	add	r30, r16
    2d12:	f1 1f       	adc	r31, r17
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2d14:	80 8d       	ldd	r24, Z+24	; 0x18
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	b8 01       	movw	r22, r16
    2d1a:	a4 01       	movw	r20, r8
    2d1c:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2d20:	08 94       	sec
    2d22:	e1 1c       	adc	r14, r1
    2d24:	f1 1c       	adc	r15, r1
    2d26:	01 50       	subi	r16, 0x01	; 1
    2d28:	10 40       	sbci	r17, 0x00	; 0
    2d2a:	98 e0       	ldi	r25, 0x08	; 8
    2d2c:	e9 16       	cp	r14, r25
    2d2e:	f1 04       	cpc	r15, r1
    2d30:	f1 f6       	brne	.-68     	; 0x2cee <effect_smileyspin+0x18a>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2d32:	08 94       	sec
    2d34:	81 1c       	adc	r8, r1
    2d36:	91 1c       	adc	r9, r1
    2d38:	ba 94       	dec	r11
    2d3a:	2f ef       	ldi	r18, 0xFF	; 255
    2d3c:	b2 16       	cp	r11, r18
    2d3e:	29 f0       	breq	.+10     	; 0x2d4a <effect_smileyspin+0x1e6>
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2d40:	07 e0       	ldi	r16, 0x07	; 7
    2d42:	10 e0       	ldi	r17, 0x00	; 0
    2d44:	ee 24       	eor	r14, r14
    2d46:	ff 24       	eor	r15, r15
    2d48:	d2 cf       	rjmp	.-92     	; 0x2cee <effect_smileyspin+0x18a>
    2d4a:	86 01       	movw	r16, r12
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    2d4c:	8e a1       	lds	r24, 0x4e
    2d4e:	9f a1       	lds	r25, 0x4f
    2d50:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			fill(0x00);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    2d5a:	08 94       	sec
    2d5c:	41 08       	sbc	r4, r1
    2d5e:	51 08       	sbc	r5, r1

		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    2d60:	41 14       	cp	r4, r1
    2d62:	51 04       	cpc	r5, r1
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <effect_smileyspin+0x204>
    2d66:	9e cf       	rjmp	.-196    	; 0x2ca4 <effect_smileyspin+0x140>
    2d68:	57 e0       	ldi	r21, 0x07	; 7
    2d6a:	45 2e       	mov	r4, r21
    2d6c:	51 2c       	mov	r5, r1
    2d6e:	00 e0       	ldi	r16, 0x00	; 0
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	22 24       	eor	r2, r2
    2d74:	33 24       	eor	r3, r3
    2d76:	0f 5f       	subi	r16, 0xFF	; 255
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
    2d7a:	21 14       	cp	r2, r1
    2d7c:	31 04       	cpc	r3, r1
    2d7e:	41 f4       	brne	.+16     	; 0x2d90 <effect_smileyspin+0x22c>
				off++;
				if (off == 4){
    2d80:	04 30       	cpi	r16, 0x04	; 4
    2d82:	11 05       	cpc	r17, r1
    2d84:	29 f4       	brne	.+10     	; 0x2d90 <effect_smileyspin+0x22c>
					flip = 1;
					off = 0;
    2d86:	00 e0       	ldi	r16, 0x00	; 0
    2d88:	10 e0       	ldi	r17, 0x00	; 0
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	24 2e       	mov	r2, r20
    2d8e:	31 2c       	mov	r3, r1
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2d90:	38 01       	movw	r6, r16
    2d92:	23 e0       	ldi	r18, 0x03	; 3
    2d94:	66 0c       	add	r6, r6
    2d96:	77 1c       	adc	r7, r7
    2d98:	2a 95       	dec	r18
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <effect_smileyspin+0x230>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2d9c:	37 e0       	ldi	r19, 0x07	; 7
    2d9e:	c3 2e       	mov	r12, r19
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2da0:	88 24       	eor	r8, r8
    2da2:	99 24       	eor	r9, r9
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2da4:	29 a1       	lds	r18, 0x49
    2da6:	3a a1       	lds	r19, 0x4a
    2da8:	26 19       	sub	r18, r6
    2daa:	37 09       	sbc	r19, r7
    2dac:	3c a3       	lds	r19, 0x5c
    2dae:	2b a3       	lds	r18, 0x5b
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	8c 0f       	add	r24, r28
    2db6:	9d 1f       	adc	r25, r29
    2db8:	68 0e       	add	r6, r24
    2dba:	79 1e       	adc	r7, r25
    2dbc:	58 01       	movw	r10, r16
    2dbe:	28 c0       	rjmp	.+80     	; 0x2e10 <effect_smileyspin+0x2ac>
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    2dc0:	8d a1       	lds	r24, 0x4d
    2dc2:	6c 2d       	mov	r22, r12
    2dc4:	4e 2d       	mov	r20, r14
    2dc6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <font_getbitmappixel>
    2dca:	88 23       	and	r24, r24
    2dcc:	91 f0       	breq	.+36     	; 0x2df2 <effect_smileyspin+0x28e>
						if (!flip)
    2dce:	21 14       	cp	r2, r1
    2dd0:	31 04       	cpc	r3, r1
    2dd2:	29 f4       	brne	.+10     	; 0x2dde <effect_smileyspin+0x27a>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2dd4:	f3 01       	movw	r30, r6
    2dd6:	e0 0f       	add	r30, r16
    2dd8:	f1 1f       	adc	r31, r17
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    2dda:	60 81       	ld	r22, Z
    2ddc:	05 c0       	rjmp	.+10     	; 0x2de8 <effect_smileyspin+0x284>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2dde:	eb a1       	lds	r30, 0x4b
    2de0:	fc a1       	lds	r31, 0x4c
    2de2:	ee 0d       	add	r30, r14
    2de4:	ff 1d       	adc	r31, r15
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    2de6:	60 8d       	ldd	r22, Z+24	; 0x18
    2de8:	c8 01       	movw	r24, r16
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	a4 01       	movw	r20, r8
    2dee:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2df2:	0f 5f       	subi	r16, 0xFF	; 255
    2df4:	1f 4f       	sbci	r17, 0xFF	; 255
    2df6:	08 94       	sec
    2df8:	e1 08       	sbc	r14, r1
    2dfa:	f1 08       	sbc	r15, r1
    2dfc:	08 30       	cpi	r16, 0x08	; 8
    2dfe:	11 05       	cpc	r17, r1
    2e00:	f9 f6       	brne	.-66     	; 0x2dc0 <effect_smileyspin+0x25c>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2e02:	08 94       	sec
    2e04:	81 1c       	adc	r8, r1
    2e06:	91 1c       	adc	r9, r1
    2e08:	ca 94       	dec	r12
    2e0a:	9f ef       	ldi	r25, 0xFF	; 255
    2e0c:	c9 16       	cp	r12, r25
    2e0e:	31 f0       	breq	.+12     	; 0x2e1c <effect_smileyspin+0x2b8>
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2e10:	97 e0       	ldi	r25, 0x07	; 7
    2e12:	e9 2e       	mov	r14, r25
    2e14:	f1 2c       	mov	r15, r1
    2e16:	00 e0       	ldi	r16, 0x00	; 0
    2e18:	10 e0       	ldi	r17, 0x00	; 0
    2e1a:	d2 cf       	rjmp	.-92     	; 0x2dc0 <effect_smileyspin+0x25c>
    2e1c:	85 01       	movw	r16, r10
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    2e1e:	8e a1       	lds	r24, 0x4e
    2e20:	9f a1       	lds	r25, 0x4f
    2e22:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			fill(0x00);
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    2e2c:	08 94       	sec
    2e2e:	41 08       	sbc	r4, r1
    2e30:	51 08       	sbc	r5, r1

		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
    2e32:	41 14       	cp	r4, r1
    2e34:	51 04       	cpc	r5, r1
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <effect_smileyspin+0x2d6>
    2e38:	9e cf       	rjmp	.-196    	; 0x2d76 <effect_smileyspin+0x212>
    2e3a:	87 e0       	ldi	r24, 0x07	; 7
    2e3c:	48 2e       	mov	r4, r24
    2e3e:	51 2c       	mov	r5, r1
    2e40:	ee 24       	eor	r14, r14
    2e42:	ff 24       	eor	r15, r15
    2e44:	22 24       	eor	r2, r2
    2e46:	33 24       	eor	r3, r3
    2e48:	08 94       	sec
    2e4a:	e1 1c       	adc	r14, r1
    2e4c:	f1 1c       	adc	r15, r1
		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    2e4e:	21 14       	cp	r2, r1
    2e50:	31 04       	cpc	r3, r1
    2e52:	49 f4       	brne	.+18     	; 0x2e66 <effect_smileyspin+0x302>
				off++;
				if (off == 4){
    2e54:	24 e0       	ldi	r18, 0x04	; 4
    2e56:	e2 16       	cp	r14, r18
    2e58:	f1 04       	cpc	r15, r1
    2e5a:	29 f4       	brne	.+10     	; 0x2e66 <effect_smileyspin+0x302>
					flip = 1;
					off = 0;
    2e5c:	ee 24       	eor	r14, r14
    2e5e:	ff 24       	eor	r15, r15
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2e60:	01 e0       	ldi	r16, 0x01	; 1
    2e62:	20 2e       	mov	r2, r16
    2e64:	31 2c       	mov	r3, r1
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2e66:	37 01       	movw	r6, r14
    2e68:	b3 e0       	ldi	r27, 0x03	; 3
    2e6a:	66 0c       	add	r6, r6
    2e6c:	77 1c       	adc	r7, r7
    2e6e:	ba 95       	dec	r27
    2e70:	e1 f7       	brne	.-8      	; 0x2e6a <effect_smileyspin+0x306>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2e72:	17 e0       	ldi	r17, 0x07	; 7
    2e74:	c1 2e       	mov	r12, r17
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2e76:	aa 24       	eor	r10, r10
    2e78:	bb 24       	eor	r11, r11
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2e7a:	29 a1       	lds	r18, 0x49
    2e7c:	3a a1       	lds	r19, 0x4a
    2e7e:	26 19       	sub	r18, r6
    2e80:	37 09       	sbc	r19, r7
    2e82:	3c a3       	lds	r19, 0x5c
    2e84:	2b a3       	lds	r18, 0x5b
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	8c 0f       	add	r24, r28
    2e8c:	9d 1f       	adc	r25, r29
    2e8e:	68 0e       	add	r6, r24
    2e90:	79 1e       	adc	r7, r25
    2e92:	47 01       	movw	r8, r14
    2e94:	2a c0       	rjmp	.+84     	; 0x2eea <effect_smileyspin+0x386>
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    2e96:	8d a1       	lds	r24, 0x4d
    2e98:	6c 2d       	mov	r22, r12
    2e9a:	40 2f       	mov	r20, r16
    2e9c:	0e 94 66 1a 	call	0x34cc	; 0x34cc <font_getbitmappixel>
    2ea0:	88 23       	and	r24, r24
    2ea2:	99 f0       	breq	.+38     	; 0x2eca <effect_smileyspin+0x366>
						if (!flip)
    2ea4:	21 14       	cp	r2, r1
    2ea6:	31 04       	cpc	r3, r1
    2ea8:	31 f4       	brne	.+12     	; 0x2eb6 <effect_smileyspin+0x352>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2eaa:	f3 01       	movw	r30, r6
    2eac:	ee 0d       	add	r30, r14
    2eae:	ff 1d       	adc	r31, r15
    2eb0:	31 97       	sbiw	r30, 0x01	; 1
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    2eb2:	80 81       	ld	r24, Z
    2eb4:	05 c0       	rjmp	.+10     	; 0x2ec0 <effect_smileyspin+0x35c>
		
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
    2eb6:	eb a1       	lds	r30, 0x4b
    2eb8:	fc a1       	lds	r31, 0x4c
    2eba:	e0 0f       	add	r30, r16
    2ebc:	f1 1f       	adc	r31, r17
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    2ebe:	80 8d       	ldd	r24, Z+24	; 0x18
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	b8 01       	movw	r22, r16
    2ec4:	a5 01       	movw	r20, r10
    2ec6:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    2eca:	08 94       	sec
    2ecc:	e1 1c       	adc	r14, r1
    2ece:	f1 1c       	adc	r15, r1
    2ed0:	01 50       	subi	r16, 0x01	; 1
    2ed2:	10 40       	sbci	r17, 0x00	; 0
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	0f 3f       	cpi	r16, 0xFF	; 255
    2ed8:	19 07       	cpc	r17, r25
    2eda:	e9 f6       	brne	.-70     	; 0x2e96 <effect_smileyspin+0x332>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    2edc:	08 94       	sec
    2ede:	a1 1c       	adc	r10, r1
    2ee0:	b1 1c       	adc	r11, r1
    2ee2:	ca 94       	dec	r12
    2ee4:	2f ef       	ldi	r18, 0xFF	; 255
    2ee6:	c2 16       	cp	r12, r18
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <effect_smileyspin+0x392>
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
				off++;
				if (off == 4){
					flip = 1;
    2eea:	07 e0       	ldi	r16, 0x07	; 7
    2eec:	10 e0       	ldi	r17, 0x00	; 0
    2eee:	a1 e0       	ldi	r26, 0x01	; 1
    2ef0:	ea 2e       	mov	r14, r26
    2ef2:	f1 2c       	mov	r15, r1
    2ef4:	d0 cf       	rjmp	.-96     	; 0x2e96 <effect_smileyspin+0x332>
    2ef6:	74 01       	movw	r14, r8
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    2ef8:	8e a1       	lds	r24, 0x4e
    2efa:	9f a1       	lds	r25, 0x4f
    2efc:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			fill(0x00);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    2f06:	08 94       	sec
    2f08:	41 08       	sbc	r4, r1
    2f0a:	51 08       	sbc	r5, r1

		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    2f0c:	41 14       	cp	r4, r1
    2f0e:	51 04       	cpc	r5, r1
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <effect_smileyspin+0x3b0>
    2f12:	9a cf       	rjmp	.-204    	; 0x2e48 <effect_smileyspin+0x2e4>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    2f14:	28 a5       	lds	r18, 0x68
    2f16:	39 a5       	lds	r19, 0x69
    2f18:	2f 5f       	subi	r18, 0xFF	; 255
    2f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1c:	39 a7       	lds	r19, 0x79
    2f1e:	28 a7       	lds	r18, 0x78
    2f20:	28 a5       	lds	r18, 0x68
    2f22:	39 a5       	lds	r19, 0x69
    2f24:	8a a5       	lds	r24, 0x6a
    2f26:	9b a5       	lds	r25, 0x6b
    2f28:	28 17       	cp	r18, r24
    2f2a:	39 07       	cpc	r19, r25
    2f2c:	0c f4       	brge	.+2      	; 0x2f30 <effect_smileyspin+0x3cc>
    2f2e:	4a ce       	rjmp	.-876    	; 0x2bc4 <effect_smileyspin+0x60>
			delay_ms(delay);
			fill(0x00);
		}

	}
}
    2f30:	ab 96       	adiw	r28, 0x2b	; 43
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	bf 90       	pop	r11
    2f4e:	af 90       	pop	r10
    2f50:	9f 90       	pop	r9
    2f52:	8f 90       	pop	r8
    2f54:	7f 90       	pop	r7
    2f56:	6f 90       	pop	r6
    2f58:	5f 90       	pop	r5
    2f5a:	4f 90       	pop	r4
    2f5c:	3f 90       	pop	r3
    2f5e:	2f 90       	pop	r2
    2f60:	08 95       	ret

00002f62 <effect_pathmove>:


void effect_pathmove (const unsigned char *path, int length)
{
    2f62:	af 92       	push	r10
    2f64:	bf 92       	push	r11
    2f66:	cf 92       	push	r12
    2f68:	df 92       	push	r13
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	6c 01       	movw	r12, r24
    2f78:	eb 01       	movw	r28, r22
    2f7a:	28 c0       	rjmp	.+80     	; 0x2fcc <effect_pathmove+0x6a>
	int i,z;
	unsigned char state;
	
	for (i= (length - 1); i >= 1; i--)
    2f7c:	00 e0       	ldi	r16, 0x00	; 0
    2f7e:	10 e0       	ldi	r17, 0x00	; 0

	}
}


void effect_pathmove (const unsigned char *path, int length)
    2f80:	76 01       	movw	r14, r12
    2f82:	ec 0e       	add	r14, r28
    2f84:	fd 1e       	adc	r15, r29
    2f86:	57 01       	movw	r10, r14
    2f88:	08 94       	sec
    2f8a:	a1 08       	sbc	r10, r1
    2f8c:	b1 08       	sbc	r11, r1
	
	for (i= (length - 1); i >= 1; i--)
	{
		for (z = 0; z < 8; z++)
		{
			state = getvoxel(((path[(i - 1)] >> 4) & 0x0f), (path[(i - 1)] & 0x0f), z);
    2f8e:	f5 01       	movw	r30, r10
    2f90:	60 81       	ld	r22, Z
    2f92:	86 2f       	mov	r24, r22
    2f94:	82 95       	swap	r24
    2f96:	8f 70       	andi	r24, 0x0F	; 15
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	6f 70       	andi	r22, 0x0F	; 15
    2f9c:	70 70       	andi	r23, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a8 01       	movw	r20, r16
    2fa2:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    2fa6:	28 2f       	mov	r18, r24
			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
    2fa8:	f7 01       	movw	r30, r14
    2faa:	60 81       	ld	r22, Z
    2fac:	86 2f       	mov	r24, r22
    2fae:	82 95       	swap	r24
    2fb0:	8f 70       	andi	r24, 0x0F	; 15
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	6f 70       	andi	r22, 0x0F	; 15
    2fb6:	70 70       	andi	r23, 0x00	; 0
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	a8 01       	movw	r20, r16
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	0e 94 12 04 	call	0x824	; 0x824 <altervoxel>
	int i,z;
	unsigned char state;
	
	for (i= (length - 1); i >= 1; i--)
	{
		for (z = 0; z < 8; z++)
    2fc2:	0f 5f       	subi	r16, 0xFF	; 255
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	08 30       	cpi	r16, 0x08	; 8
    2fc8:	11 05       	cpc	r17, r1
    2fca:	09 f7       	brne	.-62     	; 0x2f8e <effect_pathmove+0x2c>
void effect_pathmove (const unsigned char *path, int length)
{
	int i,z;
	unsigned char state;
	
	for (i= (length - 1); i >= 1; i--)
    2fcc:	21 97       	sbiw	r28, 0x01	; 1
    2fce:	1c 16       	cp	r1, r28
    2fd0:	1d 06       	cpc	r1, r29
    2fd2:	a4 f2       	brlt	.-88     	; 0x2f7c <effect_pathmove+0x1a>
    2fd4:	c0 e0       	ldi	r28, 0x00	; 0
    2fd6:	d0 e0       	ldi	r29, 0x00	; 0
			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i = 0;i < 8; i++)
	{
		clrvoxel(((path[0] >> 4) & 0x0f), (path[0] & 0x0f), i);
    2fd8:	f6 01       	movw	r30, r12
    2fda:	60 81       	ld	r22, Z
    2fdc:	86 2f       	mov	r24, r22
    2fde:	82 95       	swap	r24
    2fe0:	8f 70       	andi	r24, 0x0F	; 15
    2fe2:	70 e0       	ldi	r23, 0x00	; 0
    2fe4:	6f 70       	andi	r22, 0x0F	; 15
    2fe6:	70 70       	andi	r23, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	ae 01       	movw	r20, r28
    2fec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
		{
			state = getvoxel(((path[(i - 1)] >> 4) & 0x0f), (path[(i - 1)] & 0x0f), z);
			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i = 0;i < 8; i++)
    2ff0:	21 96       	adiw	r28, 0x01	; 1
    2ff2:	c8 30       	cpi	r28, 0x08	; 8
    2ff4:	d1 05       	cpc	r29, r1
    2ff6:	81 f7       	brne	.-32     	; 0x2fd8 <effect_pathmove+0x76>
	{
		clrvoxel(((path[0] >> 4) & 0x0f), (path[0] & 0x0f), i);
	}
}
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	df 90       	pop	r13
    3006:	cf 90       	pop	r12
    3008:	bf 90       	pop	r11
    300a:	af 90       	pop	r10
    300c:	08 95       	ret

0000300e <effect_rand_patharound>:

void effect_rand_patharound (int iterations, int delay)
{
    300e:	4f 92       	push	r4
    3010:	5f 92       	push	r5
    3012:	6f 92       	push	r6
    3014:	7f 92       	push	r7
    3016:	8f 92       	push	r8
    3018:	9f 92       	push	r9
    301a:	bf 92       	push	r11
    301c:	cf 92       	push	r12
    301e:	df 92       	push	r13
    3020:	ef 92       	push	r14
    3022:	ff 92       	push	r15
    3024:	0f 93       	push	r16
    3026:	1f 93       	push	r17
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	6c 97       	sbiw	r28, 0x1c	; 28
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	4c 01       	movw	r8, r24
    303e:	3b 01       	movw	r6, r22
	int z, dz, i;
	z = 4;
	unsigned char path[28];
	
	font_getpath(0, path, 28);
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	7e 01       	movw	r14, r28
    3044:	08 94       	sec
    3046:	e1 1c       	adc	r14, r1
    3048:	f1 1c       	adc	r15, r1
    304a:	b7 01       	movw	r22, r14
    304c:	4c e1       	ldi	r20, 0x1C	; 28
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	0e 94 fd 19 	call	0x33fa	; 0x33fa <font_getpath>
	
	for (i = 0; i < iterations; i++)
    3054:	cc 24       	eor	r12, r12
    3056:	dd 24       	eor	r13, r13
}

void effect_rand_patharound (int iterations, int delay)
{
	int z, dz, i;
	z = 4;
    3058:	04 e0       	ldi	r16, 0x04	; 4
    305a:	10 e0       	ldi	r17, 0x00	; 0
	
	font_getpath(0, path, 28);
	
	for (i = 0; i < iterations; i++)
	{
		dz = ((rand() % 3) - 1);
    305c:	e3 e0       	ldi	r30, 0x03	; 3
    305e:	4e 2e       	mov	r4, r30
    3060:	51 2c       	mov	r5, r1
		if (z < 0)
		{
			z = 0;
		}
		
		effect_pathmove(path, 28);
    3062:	be 2c       	mov	r11, r14
    3064:	ef 2c       	mov	r14, r15
	z = 4;
	unsigned char path[28];
	
	font_getpath(0, path, 28);
	
	for (i = 0; i < iterations; i++)
    3066:	26 c0       	rjmp	.+76     	; 0x30b4 <effect_rand_patharound+0xa6>
	{
		dz = ((rand() % 3) - 1);
    3068:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    306c:	b2 01       	movw	r22, r4
    306e:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    3072:	01 97       	sbiw	r24, 0x01	; 1
		z += dz;
    3074:	08 0f       	add	r16, r24
    3076:	19 1f       	adc	r17, r25
		
		if (z > 7)
    3078:	08 30       	cpi	r16, 0x08	; 8
    307a:	11 05       	cpc	r17, r1
    307c:	1c f4       	brge	.+6      	; 0x3084 <effect_rand_patharound+0x76>
		{
			z = 7;
		}
			
		if (z < 0)
    307e:	17 fd       	sbrc	r17, 7
    3080:	04 c0       	rjmp	.+8      	; 0x308a <effect_rand_patharound+0x7c>
    3082:	05 c0       	rjmp	.+10     	; 0x308e <effect_rand_patharound+0x80>
		dz = ((rand() % 3) - 1);
		z += dz;
		
		if (z > 7)
		{
			z = 7;
    3084:	07 e0       	ldi	r16, 0x07	; 7
    3086:	10 e0       	ldi	r17, 0x00	; 0
    3088:	02 c0       	rjmp	.+4      	; 0x308e <effect_rand_patharound+0x80>
		}
			
		if (z < 0)
		{
			z = 0;
    308a:	00 e0       	ldi	r16, 0x00	; 0
    308c:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		effect_pathmove(path, 28);
    308e:	8b 2d       	mov	r24, r11
    3090:	9e 2d       	mov	r25, r14
    3092:	6c e1       	ldi	r22, 0x1C	; 28
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
		setvoxel(0, 7, z);
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	67 e0       	ldi	r22, 0x07	; 7
    30a0:	70 e0       	ldi	r23, 0x00	; 0
    30a2:	a8 01       	movw	r20, r16
    30a4:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		delay_ms(delay);
    30a8:	c3 01       	movw	r24, r6
    30aa:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
	z = 4;
	unsigned char path[28];
	
	font_getpath(0, path, 28);
	
	for (i = 0; i < iterations; i++)
    30ae:	08 94       	sec
    30b0:	c1 1c       	adc	r12, r1
    30b2:	d1 1c       	adc	r13, r1
    30b4:	c8 14       	cp	r12, r8
    30b6:	d9 04       	cpc	r13, r9
    30b8:	bc f2       	brlt	.-82     	; 0x3068 <effect_rand_patharound+0x5a>
		
		effect_pathmove(path, 28);
		setvoxel(0, 7, z);
		delay_ms(delay);
	}
}
    30ba:	6c 96       	adiw	r28, 0x1c	; 28
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	ff 90       	pop	r15
    30d0:	ef 90       	pop	r14
    30d2:	df 90       	pop	r13
    30d4:	cf 90       	pop	r12
    30d6:	bf 90       	pop	r11
    30d8:	9f 90       	pop	r9
    30da:	8f 90       	pop	r8
    30dc:	7f 90       	pop	r7
    30de:	6f 90       	pop	r6
    30e0:	5f 90       	pop	r5
    30e2:	4f 90       	pop	r4
    30e4:	08 95       	ret

000030e6 <effect_pathspiral>:

void effect_pathspiral (int iterations, int delay)
{
    30e6:	6f 92       	push	r6
    30e8:	7f 92       	push	r7
    30ea:	8f 92       	push	r8
    30ec:	9f 92       	push	r9
    30ee:	af 92       	push	r10
    30f0:	bf 92       	push	r11
    30f2:	df 92       	push	r13
    30f4:	ef 92       	push	r14
    30f6:	ff 92       	push	r15
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	60 97       	sbiw	r28, 0x10	; 16
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	5c 01       	movw	r10, r24
    3112:	4b 01       	movw	r8, r22
	int i;
	unsigned char path[16];
	
	font_getpath(1, path, 16);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	7e 01       	movw	r14, r28
    3118:	08 94       	sec
    311a:	e1 1c       	adc	r14, r1
    311c:	f1 1c       	adc	r15, r1
    311e:	b7 01       	movw	r22, r14
    3120:	40 e1       	ldi	r20, 0x10	; 16
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	0e 94 fd 19 	call	0x33fa	; 0x33fa <font_getpath>
	
	for (i = 0; i < iterations; i++)
    3128:	00 e0       	ldi	r16, 0x00	; 0
    312a:	10 e0       	ldi	r17, 0x00	; 0
	{
		setvoxel(4, 0, i % 8);
    312c:	f8 e0       	ldi	r31, 0x08	; 8
    312e:	6f 2e       	mov	r6, r31
    3130:	71 2c       	mov	r7, r1
		delay_ms(delay);
		effect_pathmove(path, 28);
    3132:	de 2c       	mov	r13, r14
    3134:	ef 2c       	mov	r14, r15
	int i;
	unsigned char path[16];
	
	font_getpath(1, path, 16);
	
	for (i = 0; i < iterations; i++)
    3136:	16 c0       	rjmp	.+44     	; 0x3164 <effect_pathspiral+0x7e>
	{
		setvoxel(4, 0, i % 8);
    3138:	c8 01       	movw	r24, r16
    313a:	b3 01       	movw	r22, r6
    313c:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    3140:	ac 01       	movw	r20, r24
    3142:	84 e0       	ldi	r24, 0x04	; 4
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
		delay_ms(delay);
    314e:	c4 01       	movw	r24, r8
    3150:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		effect_pathmove(path, 28);
    3154:	8d 2d       	mov	r24, r13
    3156:	9e 2d       	mov	r25, r14
    3158:	6c e1       	ldi	r22, 0x1C	; 28
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
	int i;
	unsigned char path[16];
	
	font_getpath(1, path, 16);
	
	for (i = 0; i < iterations; i++)
    3160:	0f 5f       	subi	r16, 0xFF	; 255
    3162:	1f 4f       	sbci	r17, 0xFF	; 255
    3164:	0a 15       	cp	r16, r10
    3166:	1b 05       	cpc	r17, r11
    3168:	3c f3       	brlt	.-50     	; 0x3138 <effect_pathspiral+0x52>
		setvoxel(4, 0, i % 8);
		delay_ms(delay);
		effect_pathmove(path, 28);
		
	}
}
    316a:	60 96       	adiw	r28, 0x10	; 16
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	ff 90       	pop	r15
    3180:	ef 90       	pop	r14
    3182:	df 90       	pop	r13
    3184:	bf 90       	pop	r11
    3186:	af 90       	pop	r10
    3188:	9f 90       	pop	r9
    318a:	8f 90       	pop	r8
    318c:	7f 90       	pop	r7
    318e:	6f 90       	pop	r6
    3190:	08 95       	ret

00003192 <effect_path_text>:

void effect_path_text (int delay, const char *str, unsigned char prgMem)
{
    3192:	2f 92       	push	r2
    3194:	3f 92       	push	r3
    3196:	4f 92       	push	r4
    3198:	5f 92       	push	r5
    319a:	6f 92       	push	r6
    319c:	7f 92       	push	r7
    319e:	8f 92       	push	r8
    31a0:	9f 92       	push	r9
    31a2:	af 92       	push	r10
    31a4:	bf 92       	push	r11
    31a6:	cf 92       	push	r12
    31a8:	df 92       	push	r13
    31aa:	ef 92       	push	r14
    31ac:	ff 92       	push	r15
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	a1 97       	sbiw	r28, 0x21	; 33
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	d8 2e       	mov	r13, r24
    31c8:	e9 2e       	mov	r14, r25
    31ca:	3b 01       	movw	r6, r22
    31cc:	c4 2e       	mov	r12, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0, path, 28);
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	be 01       	movw	r22, r28
    31d2:	6a 5f       	subi	r22, 0xFA	; 250
    31d4:	7f 4f       	sbci	r23, 0xFF	; 255
    31d6:	4c e1       	ldi	r20, 0x1C	; 28
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	0e 94 fd 19 	call	0x33fa	; 0x33fa <font_getpath>
	
	unsigned char chr[5];
	unsigned char stripe;

	unsigned char tempChar = GetChar(str, 0, prgMem);
    31de:	c3 01       	movw	r24, r6
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	4c 2d       	mov	r20, r12
    31e6:	0e 94 fd 21 	call	0x43fa	; 0x43fa <GetChar>
	uint8_t pos = 0;
    31ea:	ff 24       	eor	r15, r15
		effect_pathmove(path, 28);
		
	}
}

void effect_path_text (int delay, const char *str, unsigned char prgMem)
    31ec:	a7 e0       	ldi	r26, 0x07	; 7
    31ee:	4a 2e       	mov	r4, r26
    31f0:	51 2c       	mov	r5, r1
	unsigned char stripe;

	unsigned char tempChar = GetChar(str, 0, prgMem);
	uint8_t pos = 0;
	
	while (tempChar != 0)
    31f2:	52 c0       	rjmp	.+164    	; 0x3298 <effect_path_text+0x106>
	{
		font_getchar(tempChar, chr);
    31f4:	be 01       	movw	r22, r28
    31f6:	6f 5f       	subi	r22, 0xFF	; 255
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	0e 94 14 1a 	call	0x3428	; 0x3428 <font_getchar>
    31fe:	4e 01       	movw	r8, r28
    3200:	08 94       	sec
    3202:	81 1c       	adc	r8, r1
    3204:	91 1c       	adc	r9, r1
		
		for (ii = 0; ii < 5; ii++)
    3206:	aa 24       	eor	r10, r10
    3208:	bb 24       	eor	r11, r11
		{
			stripe = chr[ii];
    320a:	f4 01       	movw	r30, r8
    320c:	21 90       	ld	r2, Z+
    320e:	4f 01       	movw	r8, r30
			
			for (z = 0; z < 8; z++)
    3210:	00 e0       	ldi	r16, 0x00	; 0
    3212:	10 e0       	ldi	r17, 0x00	; 0
			{
				if ((stripe >> (7 - z)) & 0x01)
    3214:	33 24       	eor	r3, r3
		effect_pathmove(path, 28);
		
	}
}

void effect_path_text (int delay, const char *str, unsigned char prgMem)
    3216:	c2 01       	movw	r24, r4
    3218:	80 1b       	sub	r24, r16
    321a:	91 0b       	sbc	r25, r17
		{
			stripe = chr[ii];
			
			for (z = 0; z < 8; z++)
			{
				if ((stripe >> (7 - z)) & 0x01)
    321c:	91 01       	movw	r18, r2
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <effect_path_text+0x92>
    3220:	35 95       	asr	r19
    3222:	27 95       	ror	r18
    3224:	8a 95       	dec	r24
    3226:	e2 f7       	brpl	.-8      	; 0x3220 <effect_path_text+0x8e>
    3228:	20 ff       	sbrs	r18, 0
    322a:	08 c0       	rjmp	.+16     	; 0x323c <effect_path_text+0xaa>
				{
					setvoxel(0, 7, z);
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	67 e0       	ldi	r22, 0x07	; 7
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	a8 01       	movw	r20, r16
    3236:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    323a:	07 c0       	rjmp	.+14     	; 0x324a <effect_path_text+0xb8>
				} 
				else
				{
					clrvoxel(0, 7, z);
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	67 e0       	ldi	r22, 0x07	; 7
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	a8 01       	movw	r20, r16
    3246:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
		
		for (ii = 0; ii < 5; ii++)
		{
			stripe = chr[ii];
			
			for (z = 0; z < 8; z++)
    324a:	0f 5f       	subi	r16, 0xFF	; 255
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	08 30       	cpi	r16, 0x08	; 8
    3250:	11 05       	cpc	r17, r1
    3252:	09 f7       	brne	.-62     	; 0x3216 <effect_path_text+0x84>
				{
					clrvoxel(0, 7, z);
				}
				
			}
			effect_pathmove(path, 28);
    3254:	ce 01       	movw	r24, r28
    3256:	06 96       	adiw	r24, 0x06	; 6
    3258:	6c e1       	ldi	r22, 0x1C	; 28
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
			delay_ms(delay);
    3260:	8d 2d       	mov	r24, r13
    3262:	9e 2d       	mov	r25, r14
    3264:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
	
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
		
		for (ii = 0; ii < 5; ii++)
    3268:	08 94       	sec
    326a:	a1 1c       	adc	r10, r1
    326c:	b1 1c       	adc	r11, r1
    326e:	35 e0       	ldi	r19, 0x05	; 5
    3270:	a3 16       	cp	r10, r19
    3272:	b1 04       	cpc	r11, r1
    3274:	51 f6       	brne	.-108    	; 0x320a <effect_path_text+0x78>
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
		}
	
		effect_pathmove(path, 28);
    3276:	ce 01       	movw	r24, r28
    3278:	06 96       	adiw	r24, 0x06	; 6
    327a:	6c e1       	ldi	r22, 0x1C	; 28
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
		delay_ms(delay);
    3282:	8d 2d       	mov	r24, r13
    3284:	9e 2d       	mov	r25, r14
    3286:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>

		pos++;
    328a:	f3 94       	inc	r15
		tempChar = GetChar(str, pos, prgMem);
    328c:	c3 01       	movw	r24, r6
    328e:	6f 2d       	mov	r22, r15
    3290:	70 e0       	ldi	r23, 0x00	; 0
    3292:	4c 2d       	mov	r20, r12
    3294:	0e 94 fd 21 	call	0x43fa	; 0x43fa <GetChar>
	unsigned char stripe;

	unsigned char tempChar = GetChar(str, 0, prgMem);
	uint8_t pos = 0;
	
	while (tempChar != 0)
    3298:	88 23       	and	r24, r24
    329a:	09 f0       	breq	.+2      	; 0x329e <effect_path_text+0x10c>
    329c:	ab cf       	rjmp	.-170    	; 0x31f4 <effect_path_text+0x62>
    329e:	0c e1       	ldi	r16, 0x1C	; 28
    32a0:	10 e0       	ldi	r17, 0x00	; 0
		tempChar = GetChar(str, pos, prgMem);
	}

	for (i = 0; i < 28; i++)
	{
		effect_pathmove(path, 28);
    32a2:	ce 01       	movw	r24, r28
    32a4:	06 96       	adiw	r24, 0x06	; 6
    32a6:	6c e1       	ldi	r22, 0x1C	; 28
    32a8:	70 e0       	ldi	r23, 0x00	; 0
    32aa:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
		delay_ms(delay);
    32ae:	8d 2d       	mov	r24, r13
    32b0:	9e 2d       	mov	r25, r14
    32b2:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
    32b6:	01 50       	subi	r16, 0x01	; 1
    32b8:	10 40       	sbci	r17, 0x00	; 0

		pos++;
		tempChar = GetChar(str, pos, prgMem);
	}

	for (i = 0; i < 28; i++)
    32ba:	99 f7       	brne	.-26     	; 0x32a2 <effect_path_text+0x110>
	{
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
}
    32bc:	a1 96       	adiw	r28, 0x21	; 33
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	1f 91       	pop	r17
    32ce:	0f 91       	pop	r16
    32d0:	ff 90       	pop	r15
    32d2:	ef 90       	pop	r14
    32d4:	df 90       	pop	r13
    32d6:	cf 90       	pop	r12
    32d8:	bf 90       	pop	r11
    32da:	af 90       	pop	r10
    32dc:	9f 90       	pop	r9
    32de:	8f 90       	pop	r8
    32e0:	7f 90       	pop	r7
    32e2:	6f 90       	pop	r6
    32e4:	5f 90       	pop	r5
    32e6:	4f 90       	pop	r4
    32e8:	3f 90       	pop	r3
    32ea:	2f 90       	pop	r2
    32ec:	08 95       	ret

000032ee <effect_path_bitmap>:

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    32ee:	6f 92       	push	r6
    32f0:	7f 92       	push	r7
    32f2:	9f 92       	push	r9
    32f4:	af 92       	push	r10
    32f6:	bf 92       	push	r11
    32f8:	cf 92       	push	r12
    32fa:	df 92       	push	r13
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	6c 97       	sbiw	r28, 0x1c	; 28
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	6c 01       	movw	r12, r24
    331a:	96 2e       	mov	r9, r22
    331c:	3a 01       	movw	r6, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	be 01       	movw	r22, r28
    3322:	6f 5f       	subi	r22, 0xFF	; 255
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	4c e1       	ldi	r20, 0x1C	; 28
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	0e 94 fd 19 	call	0x33fa	; 0x33fa <font_getpath>
	
	for (i=0; i < iterations; i++)
    332e:	aa 24       	eor	r10, r10
    3330:	bb 24       	eor	r11, r11
    3332:	3e c0       	rjmp	.+124    	; 0x33b0 <effect_path_bitmap+0xc2>
	{	
		for (ii = 0; ii < 8; ii++)
		{		
			for (z = 0; z < 8; z++)
			{
				if (font_getbitmappixel(bitmap, (7 - z), ii))
    3334:	89 2d       	mov	r24, r9
    3336:	61 2f       	mov	r22, r17
    3338:	40 2f       	mov	r20, r16
    333a:	0e 94 66 1a 	call	0x34cc	; 0x34cc <font_getbitmappixel>
    333e:	88 23       	and	r24, r24
    3340:	41 f0       	breq	.+16     	; 0x3352 <effect_path_bitmap+0x64>
				{
					setvoxel(0, 7, z);
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	67 e0       	ldi	r22, 0x07	; 7
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	a7 01       	movw	r20, r14
    334c:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    3350:	07 c0       	rjmp	.+14     	; 0x3360 <effect_path_bitmap+0x72>
				}
				else
				{
					clrvoxel(0, 7, z);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	67 e0       	ldi	r22, 0x07	; 7
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	a7 01       	movw	r20, r14
    335c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <clrvoxel>
	
	for (i=0; i < iterations; i++)
	{	
		for (ii = 0; ii < 8; ii++)
		{		
			for (z = 0; z < 8; z++)
    3360:	08 94       	sec
    3362:	e1 1c       	adc	r14, r1
    3364:	f1 1c       	adc	r15, r1
    3366:	11 50       	subi	r17, 0x01	; 1
    3368:	28 f7       	brcc	.-54     	; 0x3334 <effect_path_bitmap+0x46>
				{
					clrvoxel(0, 7, z);
				}
				
			}
			delay_ms(delay);
    336a:	c6 01       	movw	r24, r12
    336c:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			effect_pathmove(path, 28);
    3370:	ce 01       	movw	r24, r28
    3372:	01 96       	adiw	r24, 0x01	; 1
    3374:	6c e1       	ldi	r22, 0x1C	; 28
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
    337c:	0f 5f       	subi	r16, 0xFF	; 255
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii = 0; ii < 8; ii++)
    337e:	08 30       	cpi	r16, 0x08	; 8
    3380:	11 f4       	brne	.+4      	; 0x3386 <effect_path_bitmap+0x98>
    3382:	05 c0       	rjmp	.+10     	; 0x338e <effect_path_bitmap+0xa0>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    3384:	00 e0       	ldi	r16, 0x00	; 0
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    3386:	17 e0       	ldi	r17, 0x07	; 7
    3388:	ee 24       	eor	r14, r14
    338a:	ff 24       	eor	r15, r15
    338c:	d3 cf       	rjmp	.-90     	; 0x3334 <effect_path_bitmap+0x46>
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii = 0; ii < 8; ii++)
    338e:	04 e1       	ldi	r16, 0x14	; 20
    3390:	10 e0       	ldi	r17, 0x00	; 0
			effect_pathmove(path, 28);
		}
	
		for (ii = 0; ii < 20; ii++)
		{
			delay_ms(delay);
    3392:	c6 01       	movw	r24, r12
    3394:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			effect_pathmove(path, 28);
    3398:	ce 01       	movw	r24, r28
    339a:	01 96       	adiw	r24, 0x01	; 1
    339c:	6c e1       	ldi	r22, 0x1C	; 28
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
    33a4:	01 50       	subi	r16, 0x01	; 1
    33a6:	10 40       	sbci	r17, 0x00	; 0
			}
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	
		for (ii = 0; ii < 20; ii++)
    33a8:	a1 f7       	brne	.-24     	; 0x3392 <effect_path_bitmap+0xa4>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    33aa:	08 94       	sec
    33ac:	a1 1c       	adc	r10, r1
    33ae:	b1 1c       	adc	r11, r1
    33b0:	a6 14       	cp	r10, r6
    33b2:	b7 04       	cpc	r11, r7
    33b4:	3c f3       	brlt	.-50     	; 0x3384 <effect_path_bitmap+0x96>
    33b6:	0a e0       	ldi	r16, 0x0A	; 10
    33b8:	10 e0       	ldi	r17, 0x00	; 0
			effect_pathmove(path, 28);
		}
	}
	for (ii = 0; ii < 10; ii++)
	{
		delay_ms(delay);
    33ba:	c6 01       	movw	r24, r12
    33bc:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
		effect_pathmove(path, 28);
    33c0:	ce 01       	movw	r24, r28
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	6c e1       	ldi	r22, 0x1C	; 28
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <effect_pathmove>
    33cc:	01 50       	subi	r16, 0x01	; 1
    33ce:	10 40       	sbci	r17, 0x00	; 0
		{
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	}
	for (ii = 0; ii < 10; ii++)
    33d0:	a1 f7       	brne	.-24     	; 0x33ba <effect_path_bitmap+0xcc>
	{
		delay_ms(delay);
		effect_pathmove(path, 28);
	}
    33d2:	6c 96       	adiw	r28, 0x1c	; 28
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	bf 90       	pop	r11
    33f0:	af 90       	pop	r10
    33f2:	9f 90       	pop	r9
    33f4:	7f 90       	pop	r7
    33f6:	6f 90       	pop	r6
    33f8:	08 95       	ret

000033fa <font_getpath>:
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    33fa:	81 30       	cpi	r24, 0x01	; 1
    33fc:	19 f0       	breq	.+6      	; 0x3404 <font_getpath+0xa>
0x04,0x03,0x12,0x21,0x30,0x40,0x51,0x62,0x73,0x74,0x65,0x56,0x47,0x37,0x26,0x15}; // circle, len 16, offset 28

void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <font_getpath+0xe>
	
	if (path == 1)
		offset=28;
    3404:	2c e1       	ldi	r18, 0x1C	; 28
    3406:	30 e0       	ldi	r19, 0x00	; 0
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    3408:	db 01       	movw	r26, r22
		offset=28;
	
	for (i = 0; i < length; i++)
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	08 c0       	rjmp	.+16     	; 0x3420 <font_getpath+0x26>
};

const unsigned char paths[44] PROGMEM = {0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x67,0x57,0x47,0x37,0x27,0x17,
0x04,0x03,0x12,0x21,0x30,0x40,0x51,0x62,0x73,0x74,0x65,0x56,0x47,0x37,0x26,0x15}; // circle, len 16, offset 28

void font_getpath (unsigned char path, unsigned char *destination, int length)
    3410:	fc 01       	movw	r30, r24
    3412:	e2 0f       	add	r30, r18
    3414:	f3 1f       	adc	r31, r19
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
    3416:	e8 55       	subi	r30, 0x58	; 88
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	e4 91       	lpm	r30, Z
    341c:	ed 93       	st	X+, r30
	int offset = 0;
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	84 17       	cp	r24, r20
    3422:	95 07       	cpc	r25, r21
    3424:	ac f3       	brlt	.-22     	; 0x3410 <font_getpath+0x16>
		destination[i] = pgm_read_byte(&paths[i+offset]);
}
    3426:	08 95       	ret

00003428 <font_getchar>:

void font_getchar (char chr, unsigned char dst[5])
{
    3428:	ef 92       	push	r14
    342a:	ff 92       	push	r15
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
    3434:	0f 92       	push	r0
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
    343a:	80 52       	subi	r24, 0x20	; 32
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	7c 01       	movw	r14, r24
    3440:	ee 0c       	add	r14, r14
    3442:	ff 1c       	adc	r15, r15
    3444:	ee 0c       	add	r14, r14
    3446:	ff 1c       	adc	r15, r15
    3448:	e8 0e       	add	r14, r24
    344a:	f9 1e       	adc	r15, r25
    344c:	8b 01       	movw	r16, r22
void font_getchar (char chr, unsigned char dst[5])
{
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    344e:	20 e0       	ldi	r18, 0x00	; 0
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    3450:	c7 01       	movw	r24, r14
    3452:	8e 5c       	subi	r24, 0xCE	; 206
    3454:	9f 4f       	sbci	r25, 0xFF	; 255
    3456:	29 83       	std	Y+1, r18	; 0x01
    3458:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__eerd_byte_m32>
    345c:	f8 01       	movw	r30, r16
    345e:	81 93       	st	Z+, r24
    3460:	8f 01       	movw	r16, r30
void font_getchar (char chr, unsigned char dst[5])
{
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    3462:	29 81       	ldd	r18, Y+1	; 0x01
    3464:	2f 5f       	subi	r18, 0xFF	; 255
    3466:	08 94       	sec
    3468:	e1 1c       	adc	r14, r1
    346a:	f1 1c       	adc	r15, r1
    346c:	25 30       	cpi	r18, 0x05	; 5
    346e:	81 f7       	brne	.-32     	; 0x3450 <font_getchar+0x28>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}
    3470:	0f 90       	pop	r0
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	1f 91       	pop	r17
    3478:	0f 91       	pop	r16
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	08 95       	ret

00003480 <font_getbitmap>:

void font_getbitmap (char bitmap, unsigned char dst[8])
{
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    348c:	c8 2f       	mov	r28, r24
    348e:	d0 e0       	ldi	r29, 0x00	; 0
    3490:	33 e0       	ldi	r19, 0x03	; 3
    3492:	cc 0f       	add	r28, r28
    3494:	dd 1f       	adc	r29, r29
    3496:	3a 95       	dec	r19
    3498:	e1 f7       	brne	.-8      	; 0x3492 <font_getbitmap+0x12>
    349a:	7b 01       	movw	r14, r22

void font_getbitmap (char bitmap, unsigned char dst[8])
{
	int i;
	
    for (i = 0; i < 8; i++)
    349c:	00 e0       	ldi	r16, 0x00	; 0
    349e:	10 e0       	ldi	r17, 0x00	; 0
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}

void font_getbitmap (char bitmap, unsigned char dst[8])
    34a0:	ce 5f       	subi	r28, 0xFE	; 254
    34a2:	df 4f       	sbci	r29, 0xFF	; 255
{
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    34a4:	ce 01       	movw	r24, r28
    34a6:	80 0f       	add	r24, r16
    34a8:	91 1f       	adc	r25, r17
    34aa:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__eerd_byte_m32>
    34ae:	f7 01       	movw	r30, r14
    34b0:	81 93       	st	Z+, r24
    34b2:	7f 01       	movw	r14, r30

void font_getbitmap (char bitmap, unsigned char dst[8])
{
	int i;
	
    for (i = 0; i < 8; i++)
    34b4:	0f 5f       	subi	r16, 0xFF	; 255
    34b6:	1f 4f       	sbci	r17, 0xFF	; 255
    34b8:	08 30       	cpi	r16, 0x08	; 8
    34ba:	11 05       	cpc	r17, r1
    34bc:	99 f7       	brne	.-26     	; 0x34a4 <font_getbitmap+0x24>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	1f 91       	pop	r17
    34c4:	0f 91       	pop	r16
    34c6:	ff 90       	pop	r15
    34c8:	ef 90       	pop	r14
    34ca:	08 95       	ret

000034cc <font_getbitmappixel>:

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	0f 92       	push	r0
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	53 e0       	ldi	r21, 0x03	; 3
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	5a 95       	dec	r21
    34e0:	e1 f7       	brne	.-8      	; 0x34da <font_getbitmappixel+0xe>
    34e2:	86 0f       	add	r24, r22
    34e4:	91 1d       	adc	r25, r1
    34e6:	8e 5f       	subi	r24, 0xFE	; 254
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	49 83       	std	Y+1, r20	; 0x01
    34ec:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__eerd_byte_m32>
	return (tmp >> y) & 0x01;
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	49 81       	ldd	r20, Y+1	; 0x01
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <font_getbitmappixel+0x2e>
    34f6:	95 95       	asr	r25
    34f8:	87 95       	ror	r24
    34fa:	4a 95       	dec	r20
    34fc:	e2 f7       	brpl	.-8      	; 0x34f6 <font_getbitmappixel+0x2a>
}
    34fe:	81 70       	andi	r24, 0x01	; 1
    3500:	0f 90       	pop	r0
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	08 95       	ret

00003508 <gol_count_neighbors>:
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
{
    3508:	2f 92       	push	r2
    350a:	3f 92       	push	r3
    350c:	4f 92       	push	r4
    350e:	5f 92       	push	r5
    3510:	7f 92       	push	r7
    3512:	8f 92       	push	r8
    3514:	9f 92       	push	r9
    3516:	af 92       	push	r10
    3518:	bf 92       	push	r11
    351a:	cf 92       	push	r12
    351c:	df 92       	push	r13
    351e:	ef 92       	push	r14
    3520:	ff 92       	push	r15
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	00 d0       	rcall	.+0      	; 0x352c <gol_count_neighbors+0x24>
    352c:	00 d0       	rcall	.+0      	; 0x352e <gol_count_neighbors+0x26>
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	2c 01       	movw	r4, r24
    3534:	1b 01       	movw	r2, r22
    3536:	9a 01       	movw	r18, r20
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
    3538:	ee 24       	eor	r14, r14
    353a:	ea 94       	dec	r14
    353c:	fe 2c       	mov	r15, r14
unsigned char gol_count_neighbors (int x, int y, int z)
{
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
    353e:	dd 24       	eor	r13, r13
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
    3540:	e8 e0       	ldi	r30, 0x08	; 8
    3542:	ae 2e       	mov	r10, r30
    3544:	b1 2c       	mov	r11, r1
    3546:	3f c0       	rjmp	.+126    	; 0x35c6 <gol_count_neighbors+0xbe>
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
			{
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
    3548:	e1 14       	cp	r14, r1
    354a:	f1 04       	cpc	r15, r1
    354c:	39 f4       	brne	.+14     	; 0x355c <gol_count_neighbors+0x54>
    354e:	01 15       	cp	r16, r1
    3550:	11 05       	cpc	r17, r1
    3552:	21 f4       	brne	.+8      	; 0x355c <gol_count_neighbors+0x54>
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	9c 81       	ldd	r25, Y+4	; 0x04
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	a1 f0       	breq	.+40     	; 0x3584 <gol_count_neighbors+0x7c>
			}
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	9c 81       	ldd	r25, Y+4	; 0x04
    3560:	82 0f       	add	r24, r18
    3562:	93 1f       	adc	r25, r19
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
						ny = (y+iy)%GOL_Y;
						nz = (z+iz)%GOL_Z;
    3564:	b5 01       	movw	r22, r10
    3566:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    356a:	ac 01       	movw	r20, r24
						nx = x+ix;
						ny = y+iy;
						nz = z+iz;
					}
					
					if ( getvoxel(nx, ny, nz) )
    356c:	88 2d       	mov	r24, r8
    356e:	97 2d       	mov	r25, r7
    3570:	6c 2d       	mov	r22, r12
    3572:	79 2d       	mov	r23, r9
    3574:	29 83       	std	Y+1, r18	; 0x01
    3576:	3a 83       	std	Y+2, r19	; 0x02
    3578:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    357c:	29 81       	ldd	r18, Y+1	; 0x01
    357e:	3a 81       	ldd	r19, Y+2	; 0x02
    3580:	81 11       	cpse	r24, r1
						neigh++;
    3582:	d3 94       	inc	r13
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
    3584:	eb 81       	ldd	r30, Y+3	; 0x03
    3586:	fc 81       	ldd	r31, Y+4	; 0x04
    3588:	31 96       	adiw	r30, 0x01	; 1
    358a:	fc 83       	std	Y+4, r31	; 0x04
    358c:	eb 83       	std	Y+3, r30	; 0x03
    358e:	e2 30       	cpi	r30, 0x02	; 2
    3590:	f1 05       	cpc	r31, r1
    3592:	d1 f6       	brne	.-76     	; 0x3548 <gol_count_neighbors+0x40>
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
    3594:	0f 5f       	subi	r16, 0xFF	; 255
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	02 30       	cpi	r16, 0x02	; 2
    359a:	11 05       	cpc	r17, r1
    359c:	69 f0       	breq	.+26     	; 0x35b8 <gol_count_neighbors+0xb0>
			}
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
    359e:	c8 01       	movw	r24, r16
    35a0:	82 0d       	add	r24, r2
    35a2:	93 1d       	adc	r25, r3
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
						ny = (y+iy)%GOL_Y;
    35a4:	b5 01       	movw	r22, r10
    35a6:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    35aa:	c8 2e       	mov	r12, r24
    35ac:	99 2e       	mov	r9, r25
    35ae:	8f ef       	ldi	r24, 0xFF	; 255
    35b0:	9f ef       	ldi	r25, 0xFF	; 255
    35b2:	9c 83       	std	Y+4, r25	; 0x04
    35b4:	8b 83       	std	Y+3, r24	; 0x03
    35b6:	c8 cf       	rjmp	.-112    	; 0x3548 <gol_count_neighbors+0x40>
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
    35b8:	08 94       	sec
    35ba:	e1 1c       	adc	r14, r1
    35bc:	f1 1c       	adc	r15, r1
    35be:	92 e0       	ldi	r25, 0x02	; 2
    35c0:	e9 16       	cp	r14, r25
    35c2:	f1 04       	cpc	r15, r1
    35c4:	59 f0       	breq	.+22     	; 0x35dc <gol_count_neighbors+0xd4>
			}
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
    35c6:	c7 01       	movw	r24, r14
    35c8:	84 0d       	add	r24, r4
    35ca:	95 1d       	adc	r25, r5
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
    35cc:	b5 01       	movw	r22, r10
    35ce:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    35d2:	88 2e       	mov	r8, r24
    35d4:	79 2e       	mov	r7, r25
    35d6:	0f ef       	ldi	r16, 0xFF	; 255
    35d8:	1f ef       	ldi	r17, 0xFF	; 255
    35da:	e1 cf       	rjmp	.-62     	; 0x359e <gol_count_neighbors+0x96>
				}
			}
		}
	}
	return neigh;
}
    35dc:	8d 2d       	mov	r24, r13
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	1f 91       	pop	r17
    35ec:	0f 91       	pop	r16
    35ee:	ff 90       	pop	r15
    35f0:	ef 90       	pop	r14
    35f2:	df 90       	pop	r13
    35f4:	cf 90       	pop	r12
    35f6:	bf 90       	pop	r11
    35f8:	af 90       	pop	r10
    35fa:	9f 90       	pop	r9
    35fc:	8f 90       	pop	r8
    35fe:	7f 90       	pop	r7
    3600:	5f 90       	pop	r5
    3602:	4f 90       	pop	r4
    3604:	3f 90       	pop	r3
    3606:	2f 90       	pop	r2
    3608:	08 95       	ret

0000360a <gol_nextgen>:
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    360a:	cf 92       	push	r12
    360c:	df 92       	push	r13
    360e:	ef 92       	push	r14
    3610:	ff 92       	push	r15
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
	int x,y,z;
	unsigned char neigh;
	
	tmpfill(0x00);
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	0e 94 2c 05 	call	0xa58	; 0xa58 <tmpfill>
	
	for (x = 0; x < GOL_X; x++)
    361e:	cc 24       	eor	r12, r12
    3620:	dd 24       	eor	r13, r13
    3622:	33 c0       	rjmp	.+102    	; 0x368a <gol_nextgen+0x80>
	{
		for (y = 0; y < GOL_Y; y++)
		{
			for (z = 0; z < GOL_Z; z++)
			{
				neigh = gol_count_neighbors(x, y, z);
    3624:	c6 01       	movw	r24, r12
    3626:	b7 01       	movw	r22, r14
    3628:	ae 01       	movw	r20, r28
    362a:	0e 94 84 1a 	call	0x3508	; 0x3508 <gol_count_neighbors>
    362e:	18 2f       	mov	r17, r24
				
				// Current voxel is alive.
				if (getvoxel(x,y,z) == 0x01)
    3630:	c6 01       	movw	r24, r12
    3632:	b7 01       	movw	r22, r14
    3634:	ae 01       	movw	r20, r28
    3636:	0e 94 ed 03 	call	0x7da	; 0x7da <getvoxel>
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	51 f4       	brne	.+20     	; 0x3652 <gol_nextgen+0x48>
				{
					if (neigh <= GOL_TERMINATE_LONELY)
					{
						tmpclrvoxel(x,y,z);
    363e:	c6 01       	movw	r24, r12
    3640:	b7 01       	movw	r22, r14
    3642:	ae 01       	movw	r20, r28
				neigh = gol_count_neighbors(x, y, z);
				
				// Current voxel is alive.
				if (getvoxel(x,y,z) == 0x01)
				{
					if (neigh <= GOL_TERMINATE_LONELY)
    3644:	12 30       	cpi	r17, 0x02	; 2
    3646:	10 f0       	brcs	.+4      	; 0x364c <gol_nextgen+0x42>
					{
						tmpclrvoxel(x,y,z);
					} else if(neigh >= GOL_TERMINATE_CROWDED)
    3648:	14 30       	cpi	r17, 0x04	; 4
    364a:	40 f0       	brcs	.+16     	; 0x365c <gol_nextgen+0x52>
					{
						tmpclrvoxel(x,y,z);
    364c:	0e 94 57 03 	call	0x6ae	; 0x6ae <tmpclrvoxel>
    3650:	07 c0       	rjmp	.+14     	; 0x3660 <gol_nextgen+0x56>
						tmpsetvoxel(x,y,z);
					}
				// Current voxel is dead.
				} else
				{
					if (neigh >= GOL_CREATE_MIN && neigh <= GOL_CREATE_MAX)
    3652:	13 30       	cpi	r17, 0x03	; 3
    3654:	29 f4       	brne	.+10     	; 0x3660 <gol_nextgen+0x56>
						tmpsetvoxel(x,y,z);
    3656:	c6 01       	movw	r24, r12
    3658:	b7 01       	movw	r22, r14
    365a:	ae 01       	movw	r20, r28
    365c:	0e 94 a3 03 	call	0x746	; 0x746 <tmpsetvoxel>
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			for (z = 0; z < GOL_Z; z++)
    3660:	21 96       	adiw	r28, 0x01	; 1
    3662:	c8 30       	cpi	r28, 0x08	; 8
    3664:	d1 05       	cpc	r29, r1
    3666:	f1 f6       	brne	.-68     	; 0x3624 <gol_nextgen+0x1a>
	
	tmpfill(0x00);
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    3668:	08 94       	sec
    366a:	e1 1c       	adc	r14, r1
    366c:	f1 1c       	adc	r15, r1
    366e:	88 e0       	ldi	r24, 0x08	; 8
    3670:	e8 16       	cp	r14, r24
    3672:	f1 04       	cpc	r15, r1
    3674:	19 f0       	breq	.+6      	; 0x367c <gol_nextgen+0x72>
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    3676:	c0 e0       	ldi	r28, 0x00	; 0
    3678:	d0 e0       	ldi	r29, 0x00	; 0
    367a:	d4 cf       	rjmp	.-88     	; 0x3624 <gol_nextgen+0x1a>
	int x,y,z;
	unsigned char neigh;
	
	tmpfill(0x00);
	
	for (x = 0; x < GOL_X; x++)
    367c:	08 94       	sec
    367e:	c1 1c       	adc	r12, r1
    3680:	d1 1c       	adc	r13, r1
    3682:	88 e0       	ldi	r24, 0x08	; 8
    3684:	c8 16       	cp	r12, r24
    3686:	d1 04       	cpc	r13, r1
    3688:	19 f0       	breq	.+6      	; 0x3690 <gol_nextgen+0x86>
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    368a:	ee 24       	eor	r14, r14
    368c:	ff 24       	eor	r15, r15
    368e:	f3 cf       	rjmp	.-26     	; 0x3676 <gol_nextgen+0x6c>
						tmpsetvoxel(x,y,z);
				}
			}
		}
	}
}
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	08 95       	ret

000036a0 <gol_count_changes>:
	}
	return neigh;
}

int gol_count_changes (void)
{
    36a0:	cf 93       	push	r28
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
}

int gol_count_changes (void)
{
	int x,y;
	int i = 0;
    36a6:	40 e0       	ldi	r20, 0x00	; 0
    36a8:	50 e0       	ldi	r21, 0x00	; 0
    36aa:	18 c0       	rjmp	.+48     	; 0x36dc <gol_count_changes+0x3c>
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    36ac:	bd 01       	movw	r22, r26
    36ae:	68 0f       	add	r22, r24
    36b0:	79 1f       	adc	r23, r25
    36b2:	fb 01       	movw	r30, r22
    36b4:	e7 55       	subi	r30, 0x57	; 87
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	c0 81       	ld	r28, Z
    36ba:	fb 01       	movw	r30, r22
    36bc:	e7 51       	subi	r30, 0x17	; 23
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	c6 17       	cp	r28, r22
    36c4:	11 f0       	breq	.+4      	; 0x36ca <gol_count_changes+0x2a>
				i++;
    36c6:	4f 5f       	subi	r20, 0xFF	; 255
    36c8:	5f 4f       	sbci	r21, 0xFF	; 255
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	88 30       	cpi	r24, 0x08	; 8
    36ce:	91 05       	cpc	r25, r1
    36d0:	69 f7       	brne	.-38     	; 0x36ac <gol_count_changes+0xc>
int gol_count_changes (void)
{
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
    36d2:	2f 5f       	subi	r18, 0xFF	; 255
    36d4:	3f 4f       	sbci	r19, 0xFF	; 255
    36d6:	28 30       	cpi	r18, 0x08	; 8
    36d8:	31 05       	cpc	r19, r1
    36da:	49 f0       	breq	.+18     	; 0x36ee <gol_count_changes+0x4e>
	}
	return neigh;
}

int gol_count_changes (void)
{
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	90 e0       	ldi	r25, 0x00	; 0
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    36e0:	d9 01       	movw	r26, r18
    36e2:	f3 e0       	ldi	r31, 0x03	; 3
    36e4:	aa 0f       	add	r26, r26
    36e6:	bb 1f       	adc	r27, r27
    36e8:	fa 95       	dec	r31
    36ea:	e1 f7       	brne	.-8      	; 0x36e4 <gol_count_changes+0x44>
    36ec:	df cf       	rjmp	.-66     	; 0x36ac <gol_count_changes+0xc>
				i++;
		}
	}
	
	return i;
}
    36ee:	ca 01       	movw	r24, r20
    36f0:	cf 91       	pop	r28
    36f2:	08 95       	ret

000036f4 <gol_play>:
void gol_nextgen (void);
int gol_count_changes (void);


void gol_play (int iterations, uint16_t delay)
{
    36f4:	ef 92       	push	r14
    36f6:	ff 92       	push	r15
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	7c 01       	movw	r14, r24
    3702:	8b 01       	movw	r16, r22
	int i;
	
	for (i = 0; i < iterations; i++)
    3704:	c0 e0       	ldi	r28, 0x00	; 0
    3706:	d0 e0       	ldi	r29, 0x00	; 0
    3708:	0f c0       	rjmp	.+30     	; 0x3728 <gol_play+0x34>
	{
		debug_blink(LED_GREEN);
    370a:	80 e2       	ldi	r24, 0x20	; 32
    370c:	0e 94 44 03 	call	0x688	; 0x688 <debug_blink>
	
		gol_nextgen();
    3710:	0e 94 05 1b 	call	0x360a	; 0x360a <gol_nextgen>
		
		if (gol_count_changes() == 0)
    3714:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <gol_count_changes>
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	49 f0       	breq	.+18     	; 0x372e <gol_play+0x3a>
			return;
		
		tmp2cube();
    371c:	0e 94 34 08 	call	0x1068	; 0x1068 <tmp2cube>
		
		delay_ms(delay);
    3720:	c8 01       	movw	r24, r16
    3722:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>

void gol_play (int iterations, uint16_t delay)
{
	int i;
	
	for (i = 0; i < iterations; i++)
    3726:	21 96       	adiw	r28, 0x01	; 1
    3728:	ce 15       	cp	r28, r14
    372a:	df 05       	cpc	r29, r15
    372c:	74 f3       	brlt	.-36     	; 0x370a <gol_play+0x16>
		
		delay_ms(delay);
		
		//led_red(1);
	}
}
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	1f 91       	pop	r17
    3734:	0f 91       	pop	r16
    3736:	ff 90       	pop	r15
    3738:	ef 90       	pop	r14
    373a:	08 95       	ret

0000373c <launch_effect>:
#include "gameoflife.h"
#include "debug.h"
#include "util.h"

void launch_effect (int effect)
{
    373c:	cf 92       	push	r12
    373e:	df 92       	push	r13
    3740:	ef 92       	push	r14
    3742:	ff 92       	push	r15
    3744:	0f 93       	push	r16
    3746:	1f 93       	push	r17
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
    374c:	ec 01       	movw	r28, r24
	int i;
    unsigned char ii;

	fill(0x00);
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>

	switch (effect)
    3754:	cb 31       	cpi	r28, 0x1B	; 27
    3756:	d1 05       	cpc	r29, r1
    3758:	08 f0       	brcs	.+2      	; 0x375c <launch_effect+0x20>
    375a:	55 c2       	rjmp	.+1194   	; 0x3c06 <launch_effect+0x4ca>
    375c:	fe 01       	movw	r30, r28
    375e:	e6 5d       	subi	r30, 0xD6	; 214
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	ee 0f       	add	r30, r30
    3764:	ff 1f       	adc	r31, r31
    3766:	05 90       	lpm	r0, Z+
    3768:	f4 91       	lpm	r31, Z
    376a:	e0 2d       	mov	r30, r0
    376c:	09 94       	ijmp
	{
		case 0x00:
			send_debug_info(PSTR("0: Rain\r\n"), 1);
    376e:	84 ed       	ldi	r24, 0xD4	; 212
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	61 e0       	ldi	r22, 0x01	; 1
    3774:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_rain(100);
    3778:	84 e6       	ldi	r24, 0x64	; 100
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <effect_rain>
			break;
    3780:	4c c2       	rjmp	.+1176   	; 0x3c1a <launch_effect+0x4de>
			
		case 1:
			send_debug_info(PSTR("1: Random voxels\r\n"), 1);
    3782:	8e ed       	ldi	r24, 0xDE	; 222
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	61 e0       	ldi	r22, 0x01	; 1
    3788:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			sendvoxels_rand_z(20,220,2000);
    378c:	84 e1       	ldi	r24, 0x14	; 20
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	6c ed       	ldi	r22, 0xDC	; 220
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	40 ed       	ldi	r20, 0xD0	; 208
    3796:	57 e0       	ldi	r21, 0x07	; 7
    3798:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <sendvoxels_rand_z>
			break;
    379c:	3e c2       	rjmp	.+1148   	; 0x3c1a <launch_effect+0x4de>
				
		case 2:
			send_debug_info(PSTR("2: Random filler\r\n"), 1);
    379e:	81 ef       	ldi	r24, 0xF1	; 241
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_random_filler(5,1);
    37a8:	85 e0       	ldi	r24, 0x05	; 5
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	61 e0       	ldi	r22, 0x01	; 1
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_random_filler>
			effect_random_filler(5,0);
    37b4:	85 e0       	ldi	r24, 0x05	; 5
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_random_filler>
			effect_random_filler(5,1);
    37c0:	85 e0       	ldi	r24, 0x05	; 5
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_random_filler>
			effect_random_filler(5,0);
    37cc:	85 e0       	ldi	r24, 0x05	; 5
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <effect_random_filler>
			break;
    37d8:	20 c2       	rjmp	.+1088   	; 0x3c1a <launch_effect+0x4de>
				
		case 3:
			send_debug_info(PSTR("3: Z axis up/down\r\n"), 1);
    37da:	84 e0       	ldi	r24, 0x04	; 4
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_z_updown(20,1000);
    37e4:	84 e1       	ldi	r24, 0x14	; 20
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	68 ee       	ldi	r22, 0xE8	; 232
    37ea:	73 e0       	ldi	r23, 0x03	; 3
    37ec:	0e 94 65 12 	call	0x24ca	; 0x24ca <effect_z_updown>
			break;
    37f0:	14 c2       	rjmp	.+1064   	; 0x3c1a <launch_effect+0x4de>
				
		case 4:
			send_debug_info(PSTR("4: Wormsqueeze\r\n"), 1);
    37f2:	88 e1       	ldi	r24, 0x18	; 24
    37f4:	91 e0       	ldi	r25, 0x01	; 1
    37f6:	61 e0       	ldi	r22, 0x01	; 1
    37f8:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_wormsqueeze (2, AXIS_Z, -1, 100, 1000);
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	e9 c1       	rjmp	.+978    	; 0x3bd4 <launch_effect+0x498>
			break;
				
		case 5:
			send_debug_info(PSTR("5: Blinky\r\n"), 1);
    3802:	89 e2       	ldi	r24, 0x29	; 41
    3804:	91 e0       	ldi	r25, 0x01	; 1
    3806:	61 e0       	ldi	r22, 0x01	; 1
    3808:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_blinky2();
    380c:	0e 94 2d 0b 	call	0x165a	; 0x165a <effect_blinky2>
			break;
    3810:	04 c2       	rjmp	.+1032   	; 0x3c1a <launch_effect+0x4de>
				
		case 6: 
			send_debug_info(PSTR("6: Boxes\r\n"), 1);
    3812:	85 e3       	ldi	r24, 0x35	; 53
    3814:	91 e0       	ldi	r25, 0x01	; 1
    3816:	61 e0       	ldi	r22, 0x01	; 1
    3818:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
    381c:	c0 e0       	ldi	r28, 0x00	; 0
    381e:	d0 e0       	ldi	r29, 0x00	; 0
            for (ii=0;ii<8;ii++)
			{
				effect_box_shrink_grow (1, ii % 4, ii & 0x04, 450);
    3820:	be 01       	movw	r22, r28
    3822:	63 70       	andi	r22, 0x03	; 3
    3824:	70 70       	andi	r23, 0x00	; 0
    3826:	ae 01       	movw	r20, r28
    3828:	44 70       	andi	r20, 0x04	; 4
    382a:	50 70       	andi	r21, 0x00	; 0
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	22 ec       	ldi	r18, 0xC2	; 194
    3832:	31 e0       	ldi	r19, 0x01	; 1
    3834:	0e 94 98 0b 	call	0x1730	; 0x1730 <effect_box_shrink_grow>
    3838:	21 96       	adiw	r28, 0x01	; 1
			effect_blinky2();
			break;
				
		case 6: 
			send_debug_info(PSTR("6: Boxes\r\n"), 1);
            for (ii=0;ii<8;ii++)
    383a:	c8 30       	cpi	r28, 0x08	; 8
    383c:	d1 05       	cpc	r29, r1
    383e:	81 f7       	brne	.-32     	; 0x3820 <launch_effect+0xe4>
			{
				effect_box_shrink_grow (1, ii % 4, ii & 0x04, 450);
			}

			effect_box_woopwoop(800,0);
    3840:	80 e2       	ldi	r24, 0x20	; 32
    3842:	93 e0       	ldi	r25, 0x03	; 3
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	0e 94 25 0c 	call	0x184a	; 0x184a <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    384c:	80 e2       	ldi	r24, 0x20	; 32
    384e:	93 e0       	ldi	r25, 0x03	; 3
    3850:	61 e0       	ldi	r22, 0x01	; 1
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	0e 94 25 0c 	call	0x184a	; 0x184a <effect_box_woopwoop>
			effect_box_woopwoop(800,0);
    3858:	80 e2       	ldi	r24, 0x20	; 32
    385a:	93 e0       	ldi	r25, 0x03	; 3
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	70 e0       	ldi	r23, 0x00	; 0
    3860:	0e 94 25 0c 	call	0x184a	; 0x184a <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    3864:	80 e2       	ldi	r24, 0x20	; 32
    3866:	93 e0       	ldi	r25, 0x03	; 3
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	0e 94 25 0c 	call	0x184a	; 0x184a <effect_box_woopwoop>
			break;
    3870:	d4 c1       	rjmp	.+936    	; 0x3c1a <launch_effect+0x4de>
			
		case 7:
			send_debug_info(PSTR("7: Planboing\r\n"), 1);
    3872:	80 e4       	ldi	r24, 0x40	; 64
    3874:	91 e0       	ldi	r25, 0x01	; 1
    3876:	61 e0       	ldi	r22, 0x01	; 1
    3878:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_planboing (AXIS_Z, 400);
    387c:	8a e7       	ldi	r24, 0x7A	; 122
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	60 e9       	ldi	r22, 0x90	; 144
    3882:	71 e0       	ldi	r23, 0x01	; 1
    3884:	0e 94 04 0b 	call	0x1608	; 0x1608 <effect_planboing>
			effect_planboing (AXIS_X, 400);
    3888:	88 e7       	ldi	r24, 0x78	; 120
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	60 e9       	ldi	r22, 0x90	; 144
    388e:	71 e0       	ldi	r23, 0x01	; 1
    3890:	0e 94 04 0b 	call	0x1608	; 0x1608 <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    3894:	89 e7       	ldi	r24, 0x79	; 121
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	60 e9       	ldi	r22, 0x90	; 144
    389a:	71 e0       	ldi	r23, 0x01	; 1
    389c:	0e 94 04 0b 	call	0x1608	; 0x1608 <effect_planboing>
			effect_planboing (AXIS_Z, 400);
    38a0:	8a e7       	ldi	r24, 0x7A	; 122
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	60 e9       	ldi	r22, 0x90	; 144
    38a6:	71 e0       	ldi	r23, 0x01	; 1
    38a8:	0e 94 04 0b 	call	0x1608	; 0x1608 <effect_planboing>
			effect_planboing (AXIS_X, 400);
    38ac:	88 e7       	ldi	r24, 0x78	; 120
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	60 e9       	ldi	r22, 0x90	; 144
    38b2:	71 e0       	ldi	r23, 0x01	; 1
    38b4:	0e 94 04 0b 	call	0x1608	; 0x1608 <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    38b8:	89 e7       	ldi	r24, 0x79	; 121
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	60 e9       	ldi	r22, 0x90	; 144
    38be:	71 e0       	ldi	r23, 0x01	; 1
    38c0:	0e 94 04 0b 	call	0x1608	; 0x1608 <effect_planboing>
			break;
    38c4:	aa c1       	rjmp	.+852    	; 0x3c1a <launch_effect+0x4de>
		
		case 8:
			send_debug_info(PSTR("8: Telc stairs\r\n"), 1);
    38c6:	8f e4       	ldi	r24, 0x4F	; 79
    38c8:	91 e0       	ldi	r25, 0x01	; 1
    38ca:	61 e0       	ldi	r22, 0x01	; 1
    38cc:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_telcstairs(0,800,0xff);
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	60 e2       	ldi	r22, 0x20	; 32
    38d6:	73 e0       	ldi	r23, 0x03	; 3
    38d8:	4f ef       	ldi	r20, 0xFF	; 255
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	0e 94 b1 14 	call	0x2962	; 0x2962 <effect_telcstairs>
			effect_telcstairs(0,800,0x00);
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	60 e2       	ldi	r22, 0x20	; 32
    38e6:	73 e0       	ldi	r23, 0x03	; 3
    38e8:	40 e0       	ldi	r20, 0x00	; 0
    38ea:	50 e0       	ldi	r21, 0x00	; 0
    38ec:	0e 94 b1 14 	call	0x2962	; 0x2962 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	60 e2       	ldi	r22, 0x20	; 32
    38f6:	73 e0       	ldi	r23, 0x03	; 3
    38f8:	4f ef       	ldi	r20, 0xFF	; 255
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	0e 94 b1 14 	call	0x2962	; 0x2962 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	60 e2       	ldi	r22, 0x20	; 32
    3906:	73 e0       	ldi	r23, 0x03	; 3
    3908:	4f ef       	ldi	r20, 0xFF	; 255
    390a:	50 e0       	ldi	r21, 0x00	; 0
    390c:	0e 94 b1 14 	call	0x2962	; 0x2962 <effect_telcstairs>
			break;
    3910:	84 c1       	rjmp	.+776    	; 0x3c1a <launch_effect+0x4de>
			
		case 9:
			send_debug_info(PSTR("9: Suspend random\r\n"), 1);
    3912:	80 e6       	ldi	r24, 0x60	; 96
    3914:	91 e0       	ldi	r25, 0x01	; 1
    3916:	61 e0       	ldi	r22, 0x01	; 1
    3918:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    391c:	8a e7       	ldi	r24, 0x7A	; 122
    391e:	66 e2       	ldi	r22, 0x26	; 38
    3920:	72 e0       	ldi	r23, 0x02	; 2
    3922:	48 e8       	ldi	r20, 0x88	; 136
    3924:	53 e1       	ldi	r21, 0x13	; 19
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    392e:	8a e7       	ldi	r24, 0x7A	; 122
    3930:	66 e2       	ldi	r22, 0x26	; 38
    3932:	72 e0       	ldi	r23, 0x02	; 2
    3934:	48 e8       	ldi	r20, 0x88	; 136
    3936:	53 e1       	ldi	r21, 0x13	; 19
    3938:	21 e0       	ldi	r18, 0x01	; 1
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    3940:	8a e7       	ldi	r24, 0x7A	; 122
    3942:	66 e2       	ldi	r22, 0x26	; 38
    3944:	72 e0       	ldi	r23, 0x02	; 2
    3946:	48 e8       	ldi	r20, 0x88	; 136
    3948:	53 e1       	ldi	r21, 0x13	; 19
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    3952:	8a e7       	ldi	r24, 0x7A	; 122
    3954:	66 e2       	ldi	r22, 0x26	; 38
    3956:	72 e0       	ldi	r23, 0x02	; 2
    3958:	48 e8       	ldi	r20, 0x88	; 136
    395a:	53 e1       	ldi	r21, 0x13	; 19
    395c:	21 e0       	ldi	r18, 0x01	; 1
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,0);
    3964:	88 e7       	ldi	r24, 0x78	; 120
    3966:	66 e2       	ldi	r22, 0x26	; 38
    3968:	72 e0       	ldi	r23, 0x02	; 2
    396a:	48 e8       	ldi	r20, 0x88	; 136
    396c:	53 e1       	ldi	r21, 0x13	; 19
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,1);
    3976:	88 e7       	ldi	r24, 0x78	; 120
    3978:	66 e2       	ldi	r22, 0x26	; 38
    397a:	72 e0       	ldi	r23, 0x02	; 2
    397c:	48 e8       	ldi	r20, 0x88	; 136
    397e:	53 e1       	ldi	r21, 0x13	; 19
    3980:	21 e0       	ldi	r18, 0x01	; 1
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,0);
    3988:	89 e7       	ldi	r24, 0x79	; 121
    398a:	66 e2       	ldi	r22, 0x26	; 38
    398c:	72 e0       	ldi	r23, 0x02	; 2
    398e:	48 e8       	ldi	r20, 0x88	; 136
    3990:	53 e1       	ldi	r21, 0x13	; 19
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,1);
    399a:	89 e7       	ldi	r24, 0x79	; 121
    399c:	66 e2       	ldi	r22, 0x26	; 38
    399e:	72 e0       	ldi	r23, 0x02	; 2
    39a0:	48 e8       	ldi	r20, 0x88	; 136
    39a2:	53 e1       	ldi	r21, 0x13	; 19
    39a4:	21 e0       	ldi	r18, 0x01	; 1
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	0e 94 92 11 	call	0x2324	; 0x2324 <effect_axis_updown_randsuspend>
			break;
    39ac:	36 c1       	rjmp	.+620    	; 0x3c1a <launch_effect+0x4de>
			
		case 10:
			send_debug_info(PSTR("10: Load bar\r\n"), 1);
    39ae:	84 e7       	ldi	r24, 0x74	; 116
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	61 e0       	ldi	r22, 0x01	; 1
    39b4:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_loadbar(700);
    39b8:	8c eb       	ldi	r24, 0xBC	; 188
    39ba:	92 e0       	ldi	r25, 0x02	; 2
    39bc:	0e 94 ca 13 	call	0x2794	; 0x2794 <effect_loadbar>
			break;
    39c0:	2c c1       	rjmp	.+600    	; 0x3c1a <launch_effect+0x4de>
			
		case 11:
			send_debug_info(PSTR("11: Worm squeeze\r\n"), 1);
    39c2:	83 e8       	ldi	r24, 0x83	; 131
    39c4:	91 e0       	ldi	r25, 0x01	; 1
    39c6:	61 e0       	ldi	r22, 0x01	; 1
    39c8:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_wormsqueeze(1, AXIS_Z, 1, 100, 1000);
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	6a e7       	ldi	r22, 0x7A	; 122
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	41 e0       	ldi	r20, 0x01	; 1
    39d6:	50 e0       	ldi	r21, 0x00	; 0
    39d8:	01 c1       	rjmp	.+514    	; 0x3bdc <launch_effect+0x4a0>
			break;
			
			
		case 12:
			send_debug_info(PSTR("12: String fly\r\n"), 1);
    39da:	86 e9       	ldi	r24, 0x96	; 150
    39dc:	91 e0       	ldi	r25, 0x01	; 1
    39de:	61 e0       	ldi	r22, 0x01	; 1
    39e0:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_stringfly2(PSTR("INSTRUCTABLES"), 1);
    39e4:	87 ea       	ldi	r24, 0xA7	; 167
    39e6:	91 e0       	ldi	r25, 0x01	; 1
    39e8:	15 c1       	rjmp	.+554    	; 0x3c14 <launch_effect+0x4d8>
			break;
			
		case 13:
			send_debug_info(PSTR("13: Game of Life\r\n"), 1);
    39ea:	85 eb       	ldi	r24, 0xB5	; 181
    39ec:	91 e0       	ldi	r25, 0x01	; 1
    39ee:	61 e0       	ldi	r22, 0x01	; 1
    39f0:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
    39f4:	c4 e1       	ldi	r28, 0x14	; 20
    39f6:	d0 e0       	ldi	r29, 0x00	; 0
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
    39f8:	04 e0       	ldi	r16, 0x04	; 4
    39fa:	10 e0       	ldi	r17, 0x00	; 0
    39fc:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    3a00:	7c 01       	movw	r14, r24
    3a02:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    3a06:	6c 01       	movw	r12, r24
    3a08:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	c7 01       	movw	r24, r14
    3a10:	b8 01       	movw	r22, r16
    3a12:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    3a16:	fc 01       	movw	r30, r24
    3a18:	c6 01       	movw	r24, r12
    3a1a:	b8 01       	movw	r22, r16
    3a1c:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    3a20:	7c 01       	movw	r14, r24
    3a22:	c9 01       	movw	r24, r18
    3a24:	b8 01       	movw	r22, r16
    3a26:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    3a2a:	ac 01       	movw	r20, r24
    3a2c:	cf 01       	movw	r24, r30
    3a2e:	b7 01       	movw	r22, r14
    3a30:	0e 94 c8 03 	call	0x790	; 0x790 <setvoxel>
    3a34:	21 97       	sbiw	r28, 0x01	; 1
			break;
			
		case 13:
			send_debug_info(PSTR("13: Game of Life\r\n"), 1);
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
    3a36:	11 f7       	brne	.-60     	; 0x39fc <launch_effect+0x2c0>
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
			}
	
			gol_play(20, 400);
    3a38:	84 e1       	ldi	r24, 0x14	; 20
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	60 e9       	ldi	r22, 0x90	; 144
    3a3e:	71 e0       	ldi	r23, 0x01	; 1
    3a40:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <gol_play>
			break;
    3a44:	ea c0       	rjmp	.+468    	; 0x3c1a <launch_effect+0x4de>
			
		case 14:
			send_debug_info(PSTR("14: Flying boxes?\r\n"), 1);
    3a46:	88 ec       	ldi	r24, 0xC8	; 200
    3a48:	91 e0       	ldi	r25, 0x01	; 1
    3a4a:	61 e0       	ldi	r22, 0x01	; 1
    3a4c:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200, 1);
    3a50:	8a e7       	ldi	r24, 0x7A	; 122
    3a52:	60 e0       	ldi	r22, 0x00	; 0
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	48 ec       	ldi	r20, 0xC8	; 200
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	21 e0       	ldi	r18, 0x01	; 1
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	0e 94 14 13 	call	0x2628	; 0x2628 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a62:	8c ed       	ldi	r24, 0xDC	; 220
    3a64:	95 e0       	ldi	r25, 0x05	; 5
    3a66:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200, 1);
    3a6a:	8a e7       	ldi	r24, 0x7A	; 122
    3a6c:	61 e0       	ldi	r22, 0x01	; 1
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	48 ec       	ldi	r20, 0xC8	; 200
    3a72:	50 e0       	ldi	r21, 0x00	; 0
    3a74:	21 e0       	ldi	r18, 0x01	; 1
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	0e 94 14 13 	call	0x2628	; 0x2628 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a7c:	8c ed       	ldi	r24, 0xDC	; 220
    3a7e:	95 e0       	ldi	r25, 0x05	; 5
    3a80:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200, 2);
    3a84:	8a e7       	ldi	r24, 0x7A	; 122
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	48 ec       	ldi	r20, 0xC8	; 200
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	22 e0       	ldi	r18, 0x02	; 2
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	0e 94 14 13 	call	0x2628	; 0x2628 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a96:	8c ed       	ldi	r24, 0xDC	; 220
    3a98:	95 e0       	ldi	r25, 0x05	; 5
    3a9a:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200, 2);
    3a9e:	8a e7       	ldi	r24, 0x7A	; 122
    3aa0:	61 e0       	ldi	r22, 0x01	; 1
    3aa2:	70 e0       	ldi	r23, 0x00	; 0
    3aa4:	48 ec       	ldi	r20, 0xC8	; 200
    3aa6:	50 e0       	ldi	r21, 0x00	; 0
    3aa8:	22 e0       	ldi	r18, 0x02	; 2
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	0e 94 14 13 	call	0x2628	; 0x2628 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3ab0:	8c ed       	ldi	r24, 0xDC	; 220
    3ab2:	95 e0       	ldi	r25, 0x05	; 5
    3ab4:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Y, 0 , 200, 1);
    3ab8:	89 e7       	ldi	r24, 0x79	; 121
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	70 e0       	ldi	r23, 0x00	; 0
    3abe:	48 ec       	ldi	r20, 0xC8	; 200
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	21 e0       	ldi	r18, 0x01	; 1
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	0e 94 14 13 	call	0x2628	; 0x2628 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3aca:	8c ed       	ldi	r24, 0xDC	; 220
    3acc:	95 e0       	ldi	r25, 0x05	; 5
    3ace:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Y, 1 , 200, 1);
    3ad2:	89 e7       	ldi	r24, 0x79	; 121
    3ad4:	61 e0       	ldi	r22, 0x01	; 1
    3ad6:	70 e0       	ldi	r23, 0x00	; 0
    3ad8:	48 ec       	ldi	r20, 0xC8	; 200
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	21 e0       	ldi	r18, 0x01	; 1
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	0e 94 14 13 	call	0x2628	; 0x2628 <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3ae4:	8c ed       	ldi	r24, 0xDC	; 220
    3ae6:	95 e0       	ldi	r25, 0x05	; 5
    3ae8:	0e 94 c9 21 	call	0x4392	; 0x4392 <delay_ms>
			break;
    3aec:	96 c0       	rjmp	.+300    	; 0x3c1a <launch_effect+0x4de>
			
		case 15:
			send_debug_info(PSTR("15: Boing boing\r\n"), 1);
    3aee:	8c ed       	ldi	r24, 0xDC	; 220
    3af0:	91 e0       	ldi	r25, 0x01	; 1
    3af2:	61 e0       	ldi	r22, 0x01	; 1
    3af4:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			boingboing(250, 600, 0x01, 0x02);
    3af8:	8a ef       	ldi	r24, 0xFA	; 250
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	68 e5       	ldi	r22, 0x58	; 88
    3afe:	72 e0       	ldi	r23, 0x02	; 2
    3b00:	41 e0       	ldi	r20, 0x01	; 1
    3b02:	22 e0       	ldi	r18, 0x02	; 2
    3b04:	7d c0       	rjmp	.+250    	; 0x3c00 <launch_effect+0x4c4>
			break;
			
		case 16:
			send_debug_info(PSTR("16: Smiley spin\r\n"), 1);
    3b06:	8e ee       	ldi	r24, 0xEE	; 238
    3b08:	91 e0       	ldi	r25, 0x01	; 1
    3b0a:	61 e0       	ldi	r22, 0x01	; 1
    3b0c:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_smileyspin(2,1000,0);
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	68 ee       	ldi	r22, 0xE8	; 232
    3b16:	73 e0       	ldi	r23, 0x03	; 3
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	4a c0       	rjmp	.+148    	; 0x3bb0 <launch_effect+0x474>
			break;
			
		case 17:
			send_debug_info(PSTR("17: Path spiral\r\n"), 1);
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	92 e0       	ldi	r25, 0x02	; 2
    3b20:	61 e0       	ldi	r22, 0x01	; 1
    3b22:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_pathspiral(100,500);
    3b26:	84 e6       	ldi	r24, 0x64	; 100
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	64 ef       	ldi	r22, 0xF4	; 244
    3b2c:	71 e0       	ldi	r23, 0x01	; 1
    3b2e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <effect_pathspiral>
			break;
    3b32:	73 c0       	rjmp	.+230    	; 0x3c1a <launch_effect+0x4de>
			
		case 18:
			send_debug_info(PSTR("18: Path bitmap\r\n"), 1);
    3b34:	82 e1       	ldi	r24, 0x12	; 18
    3b36:	92 e0       	ldi	r25, 0x02	; 2
    3b38:	61 e0       	ldi	r22, 0x01	; 1
    3b3a:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_path_bitmap(700,2,3);
    3b3e:	8c eb       	ldi	r24, 0xBC	; 188
    3b40:	92 e0       	ldi	r25, 0x02	; 2
    3b42:	62 e0       	ldi	r22, 0x02	; 2
    3b44:	43 e0       	ldi	r20, 0x03	; 3
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	0e 94 77 19 	call	0x32ee	; 0x32ee <effect_path_bitmap>
			break;
    3b4c:	66 c0       	rjmp	.+204    	; 0x3c1a <launch_effect+0x4de>
			
		case 19:
			send_debug_info(PSTR("19: Smiley spin\r\n"), 1);
    3b4e:	84 e2       	ldi	r24, 0x24	; 36
    3b50:	92 e0       	ldi	r25, 0x02	; 2
    3b52:	61 e0       	ldi	r22, 0x01	; 1
    3b54:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_smileyspin(2,1000,1);
    3b58:	82 e0       	ldi	r24, 0x02	; 2
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	68 ee       	ldi	r22, 0xE8	; 232
    3b5e:	73 e0       	ldi	r23, 0x03	; 3
    3b60:	41 e0       	ldi	r20, 0x01	; 1
    3b62:	26 c0       	rjmp	.+76     	; 0x3bb0 <launch_effect+0x474>
			break;
			
		case 20:
			send_debug_info(PSTR("20: Path text\r\n"), 1);
    3b64:	86 e3       	ldi	r24, 0x36	; 54
    3b66:	92 e0       	ldi	r25, 0x02	; 2
    3b68:	61 e0       	ldi	r22, 0x01	; 1
    3b6a:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_path_text(1000, "TG", 0);
    3b6e:	88 ee       	ldi	r24, 0xE8	; 232
    3b70:	93 e0       	ldi	r25, 0x03	; 3
    3b72:	6b e9       	ldi	r22, 0x9B	; 155
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	40 e0       	ldi	r20, 0x00	; 0
    3b78:	0e 94 c9 18 	call	0x3192	; 0x3192 <effect_path_text>
			break;
    3b7c:	4e c0       	rjmp	.+156    	; 0x3c1a <launch_effect+0x4de>
	
		case 21:
			send_debug_info(PSTR("21: Path text\r\n"), 1);
    3b7e:	86 e4       	ldi	r24, 0x46	; 70
    3b80:	92 e0       	ldi	r25, 0x02	; 2
    3b82:	61 e0       	ldi	r22, 0x01	; 1
    3b84:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_rand_patharound(200,500);
    3b88:	88 ec       	ldi	r24, 0xC8	; 200
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	64 ef       	ldi	r22, 0xF4	; 244
    3b8e:	71 e0       	ldi	r23, 0x01	; 1
    3b90:	0e 94 07 18 	call	0x300e	; 0x300e <effect_rand_patharound>
			break;
    3b94:	42 c0       	rjmp	.+132    	; 0x3c1a <launch_effect+0x4de>
			
		case 22:
			send_debug_info(PSTR("22: Worm squeeze\r\n"), 1);
    3b96:	86 e5       	ldi	r24, 0x56	; 86
    3b98:	92 e0       	ldi	r25, 0x02	; 2
    3b9a:	17 c0       	rjmp	.+46     	; 0x3bca <launch_effect+0x48e>
			effect_wormsqueeze(1, AXIS_Z, -1, 100, 1000);
			break;
			
		case 23:
			send_debug_info(PSTR("23: Smiley spin\r\n"), 1);
    3b9c:	89 e6       	ldi	r24, 0x69	; 105
    3b9e:	92 e0       	ldi	r25, 0x02	; 2
    3ba0:	61 e0       	ldi	r22, 0x01	; 1
    3ba2:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_smileyspin(2,1000,2);
    3ba6:	82 e0       	ldi	r24, 0x02	; 2
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	68 ee       	ldi	r22, 0xE8	; 232
    3bac:	73 e0       	ldi	r23, 0x03	; 3
    3bae:	42 e0       	ldi	r20, 0x02	; 2
    3bb0:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <effect_smileyspin>
			break;
    3bb4:	32 c0       	rjmp	.+100    	; 0x3c1a <launch_effect+0x4de>
			
		case 24:
			send_debug_info(PSTR("24: Random sparkle\r\n"), 1);
    3bb6:	8b e7       	ldi	r24, 0x7B	; 123
    3bb8:	92 e0       	ldi	r25, 0x02	; 2
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_random_sparkle();
    3bc0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <effect_random_sparkle>
			break;
    3bc4:	2a c0       	rjmp	.+84     	; 0x3c1a <launch_effect+0x4de>
			
		case 25:
			send_debug_info(PSTR("25: Worm squeeze\r\n"), 1);
    3bc6:	80 e9       	ldi	r24, 0x90	; 144
    3bc8:	92 e0       	ldi	r25, 0x02	; 2
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_wormsqueeze(1, AXIS_Z, -1, 100, 1000);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	6a e7       	ldi	r22, 0x7A	; 122
    3bd6:	70 e0       	ldi	r23, 0x00	; 0
    3bd8:	4f ef       	ldi	r20, 0xFF	; 255
    3bda:	5f ef       	ldi	r21, 0xFF	; 255
    3bdc:	24 e6       	ldi	r18, 0x64	; 100
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	08 ee       	ldi	r16, 0xE8	; 232
    3be2:	13 e0       	ldi	r17, 0x03	; 3
    3be4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <effect_wormsqueeze>
			break;
    3be8:	18 c0       	rjmp	.+48     	; 0x3c1a <launch_effect+0x4de>
		
		case 26:
			send_debug_info(PSTR("26: Boing boing\r\n"), 1);
    3bea:	83 ea       	ldi	r24, 0xA3	; 163
    3bec:	92 e0       	ldi	r25, 0x02	; 2
    3bee:	61 e0       	ldi	r22, 0x01	; 1
    3bf0:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			boingboing(250, 600, 0x01, 0x03);
    3bf4:	8a ef       	ldi	r24, 0xFA	; 250
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	68 e5       	ldi	r22, 0x58	; 88
    3bfa:	72 e0       	ldi	r23, 0x02	; 2
    3bfc:	41 e0       	ldi	r20, 0x01	; 1
    3bfe:	23 e0       	ldi	r18, 0x03	; 3
    3c00:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <boingboing>
			break;
    3c04:	0a c0       	rjmp	.+20     	; 0x3c1a <launch_effect+0x4de>
		
		// In case the effect number is out of range:
		default:
			send_debug_info(PSTR("Fail\r\n"), 1);
    3c06:	85 eb       	ldi	r24, 0xB5	; 181
    3c08:	92 e0       	ldi	r25, 0x02	; 2
    3c0a:	61 e0       	ldi	r22, 0x01	; 1
    3c0c:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_stringfly2(PSTR("FAIL"), 1);
    3c10:	8c eb       	ldi	r24, 0xBC	; 188
    3c12:	92 e0       	ldi	r25, 0x02	; 2
    3c14:	61 e0       	ldi	r22, 0x01	; 1
    3c16:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <effect_stringfly2>
			break;
	}
}
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	ff 90       	pop	r15
    3c24:	ef 90       	pop	r14
    3c26:	df 90       	pop	r13
    3c28:	cf 90       	pop	r12
    3c2a:	08 95       	ret

00003c2c <music_bars>:
            
    }
}

void music_bars()
{
    3c2c:	6f 92       	push	r6
    3c2e:	7f 92       	push	r7
    3c30:	8f 92       	push	r8
    3c32:	9f 92       	push	r9
    3c34:	af 92       	push	r10
    3c36:	bf 92       	push	r11
    3c38:	cf 92       	push	r12
    3c3a:	df 92       	push	r13
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	6c 97       	sbiw	r28, 0x1c	; 28
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
    unsigned int eq_buffer[14];
    int i;
    
    // Run this for 10 seconds
    set_timer(10000);
    3c58:	80 e1       	ldi	r24, 0x10	; 16
    3c5a:	97 e2       	ldi	r25, 0x27	; 39
    3c5c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <set_timer>
    while(!timer_expired())
    {
        EQ_Read(eq_buffer);
        fill(0x00);
        // Basen längst bak
        box_filled(7, 0, 0, 6, 3, (eq_buffer[0] / 128));
    3c60:	17 e0       	ldi	r17, 0x07	; 7
    3c62:	61 2e       	mov	r6, r17
    3c64:	71 2c       	mov	r7, r1
    int i;
    
    // Run this for 10 seconds
    set_timer(10000);
    
    while(!timer_expired())
    3c66:	8a c0       	rjmp	.+276    	; 0x3d7c <music_bars+0x150>
    {
        EQ_Read(eq_buffer);
    3c68:	ce 01       	movw	r24, r28
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	0e 94 13 22 	call	0x4426	; 0x4426 <EQ_Read>
        fill(0x00);
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
        // Basen längst bak
        box_filled(7, 0, 0, 6, 3, (eq_buffer[0] / 128));
    3c76:	e9 80       	ldd	r14, Y+1	; 0x01
    3c78:	fa 80       	ldd	r15, Y+2	; 0x02
    3c7a:	ee 0c       	add	r14, r14
    3c7c:	ef 2c       	mov	r14, r15
    3c7e:	ee 1c       	adc	r14, r14
    3c80:	ff 08       	sbc	r15, r15
    3c82:	f1 94       	neg	r15
    3c84:	87 e0       	ldi	r24, 0x07	; 7
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	70 e0       	ldi	r23, 0x00	; 0
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	26 e0       	ldi	r18, 0x06	; 6
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	03 e0       	ldi	r16, 0x03	; 3
    3c96:	10 e0       	ldi	r17, 0x00	; 0
    3c98:	0e 94 80 06 	call	0xd00	; 0xd00 <box_filled>
        box_filled(7, 4, 0, 6, 7, (eq_buffer[7] / 128));
    3c9c:	ef 84       	ldd	r14, Y+15	; 0x0f
    3c9e:	f8 88       	ldd	r15, Y+16	; 0x10
    3ca0:	ee 0c       	add	r14, r14
    3ca2:	ef 2c       	mov	r14, r15
    3ca4:	ee 1c       	adc	r14, r14
    3ca6:	ff 08       	sbc	r15, r15
    3ca8:	f1 94       	neg	r15
    3caa:	87 e0       	ldi	r24, 0x07	; 7
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	64 e0       	ldi	r22, 0x04	; 4
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	26 e0       	ldi	r18, 0x06	; 6
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	07 e0       	ldi	r16, 0x07	; 7
    3cbc:	10 e0       	ldi	r17, 0x00	; 0
    3cbe:	0e 94 80 06 	call	0xd00	; 0xd00 <box_filled>
    3cc2:	f3 e0       	ldi	r31, 0x03	; 3
    3cc4:	af 2e       	mov	r10, r31
    3cc6:	b1 2c       	mov	r11, r1
    3cc8:	ac 0e       	add	r10, r28
    3cca:	bd 1e       	adc	r11, r29
    3ccc:	a5 e0       	ldi	r26, 0x05	; 5
    3cce:	8a 2e       	mov	r8, r26
    3cd0:	91 2c       	mov	r9, r1
    3cd2:	b6 e0       	ldi	r27, 0x06	; 6
    3cd4:	cb 2e       	mov	r12, r27
    3cd6:	d1 2c       	mov	r13, r1
			break;
            
    }
}

void music_bars()
    3cd8:	c3 01       	movw	r24, r6
    3cda:	8c 19       	sub	r24, r12
    3cdc:	9d 09       	sbc	r25, r13
        
        for(i = 1; i < 7; i++)
        {
            if(i % 2 == 1)
            {
                box_filled((7 - i), 0, 0, (6 - i), 1, (eq_buffer[i] / 128));
    3cde:	f5 01       	movw	r30, r10
    3ce0:	e0 80       	ld	r14, Z
    3ce2:	f1 80       	ldd	r15, Z+1	; 0x01
    3ce4:	ee 0c       	add	r14, r14
    3ce6:	ef 2c       	mov	r14, r15
    3ce8:	ee 1c       	adc	r14, r14
    3cea:	ff 08       	sbc	r15, r15
    3cec:	f1 94       	neg	r15
        box_filled(7, 0, 0, 6, 3, (eq_buffer[0] / 128));
        box_filled(7, 4, 0, 6, 7, (eq_buffer[7] / 128));
        
        for(i = 1; i < 7; i++)
        {
            if(i % 2 == 1)
    3cee:	80 ff       	sbrs	r24, 0
    3cf0:	1b c0       	rjmp	.+54     	; 0x3d28 <music_bars+0xfc>
            {
                box_filled((7 - i), 0, 0, (6 - i), 1, (eq_buffer[i] / 128));
    3cf2:	c6 01       	movw	r24, r12
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	70 e0       	ldi	r23, 0x00	; 0
    3cf8:	40 e0       	ldi	r20, 0x00	; 0
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	94 01       	movw	r18, r8
    3cfe:	01 e0       	ldi	r16, 0x01	; 1
    3d00:	10 e0       	ldi	r17, 0x00	; 0
    3d02:	0e 94 80 06 	call	0xd00	; 0xd00 <box_filled>
                box_filled((7 - i), 6, 0, (6 - i), 7, (eq_buffer[i + 7] / 128));
    3d06:	f5 01       	movw	r30, r10
    3d08:	e6 84       	ldd	r14, Z+14	; 0x0e
    3d0a:	f7 84       	ldd	r15, Z+15	; 0x0f
    3d0c:	ee 0c       	add	r14, r14
    3d0e:	ef 2c       	mov	r14, r15
    3d10:	ee 1c       	adc	r14, r14
    3d12:	ff 08       	sbc	r15, r15
    3d14:	f1 94       	neg	r15
    3d16:	c6 01       	movw	r24, r12
    3d18:	66 e0       	ldi	r22, 0x06	; 6
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	94 01       	movw	r18, r8
    3d22:	07 e0       	ldi	r16, 0x07	; 7
    3d24:	10 e0       	ldi	r17, 0x00	; 0
    3d26:	1a c0       	rjmp	.+52     	; 0x3d5c <music_bars+0x130>
            }
            else
            {
                box_filled((7 - i), 2, 0, (6 - i), 3, (eq_buffer[i] / 128));
    3d28:	c6 01       	movw	r24, r12
    3d2a:	62 e0       	ldi	r22, 0x02	; 2
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	40 e0       	ldi	r20, 0x00	; 0
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	94 01       	movw	r18, r8
    3d34:	03 e0       	ldi	r16, 0x03	; 3
    3d36:	10 e0       	ldi	r17, 0x00	; 0
    3d38:	0e 94 80 06 	call	0xd00	; 0xd00 <box_filled>
                box_filled((7 - i), 4, 0, (6 - i), 5, (eq_buffer[i + 7] / 128));
    3d3c:	f5 01       	movw	r30, r10
    3d3e:	e6 84       	ldd	r14, Z+14	; 0x0e
    3d40:	f7 84       	ldd	r15, Z+15	; 0x0f
    3d42:	ee 0c       	add	r14, r14
    3d44:	ef 2c       	mov	r14, r15
    3d46:	ee 1c       	adc	r14, r14
    3d48:	ff 08       	sbc	r15, r15
    3d4a:	f1 94       	neg	r15
    3d4c:	c6 01       	movw	r24, r12
    3d4e:	64 e0       	ldi	r22, 0x04	; 4
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	40 e0       	ldi	r20, 0x00	; 0
    3d54:	50 e0       	ldi	r21, 0x00	; 0
    3d56:	94 01       	movw	r18, r8
    3d58:	05 e0       	ldi	r16, 0x05	; 5
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	0e 94 80 06 	call	0xd00	; 0xd00 <box_filled>
    3d60:	08 94       	sec
    3d62:	c1 08       	sbc	r12, r1
    3d64:	d1 08       	sbc	r13, r1
    3d66:	08 94       	sec
    3d68:	81 08       	sbc	r8, r1
    3d6a:	91 08       	sbc	r9, r1
    3d6c:	82 e0       	ldi	r24, 0x02	; 2
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	a8 0e       	add	r10, r24
    3d72:	b9 1e       	adc	r11, r25
        fill(0x00);
        // Basen längst bak
        box_filled(7, 0, 0, 6, 3, (eq_buffer[0] / 128));
        box_filled(7, 4, 0, 6, 7, (eq_buffer[7] / 128));
        
        for(i = 1; i < 7; i++)
    3d74:	c1 14       	cp	r12, r1
    3d76:	d1 04       	cpc	r13, r1
    3d78:	09 f0       	breq	.+2      	; 0x3d7c <music_bars+0x150>
    3d7a:	ae cf       	rjmp	.-164    	; 0x3cd8 <music_bars+0xac>
    int i;
    
    // Run this for 10 seconds
    set_timer(10000);
    
    while(!timer_expired())
    3d7c:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <timer_expired>
    3d80:	88 23       	and	r24, r24
    3d82:	09 f4       	brne	.+2      	; 0x3d86 <music_bars+0x15a>
    3d84:	71 cf       	rjmp	.-286    	; 0x3c68 <music_bars+0x3c>
                box_filled((7 - i), 4, 0, (6 - i), 5, (eq_buffer[i + 7] / 128));

            }
        }
    }
}
    3d86:	6c 96       	adiw	r28, 0x1c	; 28
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	ff 90       	pop	r15
    3d9c:	ef 90       	pop	r14
    3d9e:	df 90       	pop	r13
    3da0:	cf 90       	pop	r12
    3da2:	bf 90       	pop	r11
    3da4:	af 90       	pop	r10
    3da6:	9f 90       	pop	r9
    3da8:	8f 90       	pop	r8
    3daa:	7f 90       	pop	r7
    3dac:	6f 90       	pop	r6
    3dae:	08 95       	ret

00003db0 <music_ball>:
void music_ball()
{
    unsigned int eq_buffer[14];
    int i;
    
    set_timer(10000);
    3db0:	80 e1       	ldi	r24, 0x10	; 16
    3db2:	97 e2       	ldi	r25, 0x27	; 39
    3db4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <set_timer>
        EQ_Read(eq_buffer);
        fill(0x00);
        
        
    }
}
    3db8:	08 95       	ret

00003dba <launch_music_effect>:
#include "util.h"
#include <stdbool.h>


void launch_music_effect(int effect)
{
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	ec 01       	movw	r28, r24
    fill(0x00);
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	0e 94 14 05 	call	0xa28	; 0xa28 <fill>
    
    switch(effect)
    3dc6:	20 97       	sbiw	r28, 0x00	; 0
    3dc8:	21 f0       	breq	.+8      	; 0x3dd2 <launch_music_effect+0x18>
    3dca:	c1 30       	cpi	r28, 0x01	; 1
    3dcc:	d1 05       	cpc	r29, r1
    3dce:	81 f4       	brne	.+32     	; 0x3df0 <launch_music_effect+0x36>
    3dd0:	08 c0       	rjmp	.+16     	; 0x3de2 <launch_music_effect+0x28>
    {
        case 0:
            send_debug_info(PSTR("Music bars\r\n"), 1);
    3dd2:	81 ec       	ldi	r24, 0xC1	; 193
    3dd4:	92 e0       	ldi	r25, 0x02	; 2
    3dd6:	61 e0       	ldi	r22, 0x01	; 1
    3dd8:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
            music_bars();
    3ddc:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <music_bars>
            break;
    3de0:	11 c0       	rjmp	.+34     	; 0x3e04 <launch_music_effect+0x4a>
        case 1:
            send_debug_info(PSTR("Music ball\r\n"), 1);
    3de2:	8e ec       	ldi	r24, 0xCE	; 206
    3de4:	92 e0       	ldi	r25, 0x02	; 2
    3de6:	61 e0       	ldi	r22, 0x01	; 1
    3de8:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
            music_ball();
    3dec:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <music_ball>
        default:
            send_debug_info(PSTR("Music fail\r\n"), 1);
    3df0:	8b ed       	ldi	r24, 0xDB	; 219
    3df2:	92 e0       	ldi	r25, 0x02	; 2
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	0e 94 3e 03 	call	0x67c	; 0x67c <send_debug_info>
			effect_stringfly2(PSTR("MUSIC FAIL"), 1);
    3dfa:	88 ee       	ldi	r24, 0xE8	; 232
    3dfc:	92 e0       	ldi	r25, 0x02	; 2
    3dfe:	61 e0       	ldi	r22, 0x01	; 1
    3e00:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <effect_stringfly2>
			break;
            
    }
}
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	08 95       	ret

00003e0a <usart_init>:
// Member variables
char m_Echo;

void usart_init()
{
	RINGFIFO_RESET(RXFifo);
    3e0a:	10 92 00 02 	sts	0x0200, r1
    3e0e:	10 92 01 02 	sts	0x0201, r1
    3e12:	10 92 02 02 	sts	0x0202, r1
    3e16:	10 92 03 02 	sts	0x0203, r1
    3e1a:	10 92 04 02 	sts	0x0204, r1
    3e1e:	10 92 05 02 	sts	0x0205, r1
    3e22:	10 92 06 02 	sts	0x0206, r1
    3e26:	10 92 07 02 	sts	0x0207, r1
	RINGFIFO_RESET(TXFifo);
    3e2a:	10 92 74 01 	sts	0x0174, r1
    3e2e:	10 92 75 01 	sts	0x0175, r1
    3e32:	10 92 76 01 	sts	0x0176, r1
    3e36:	10 92 77 01 	sts	0x0177, r1
    3e3a:	10 92 78 01 	sts	0x0178, r1
    3e3e:	10 92 79 01 	sts	0x0179, r1
    3e42:	10 92 7a 01 	sts	0x017A, r1
    3e46:	10 92 7b 01 	sts	0x017B, r1

    // Initiate RS232
    // USART Baud rate is defined in MYUBRR
    UBRRH = MYUBRR >> 8;
    3e4a:	10 bc       	out	0x20, r1	; 32
    UBRRL = MYUBRR;
    3e4c:	87 e0       	ldi	r24, 0x07	; 7
    3e4e:	89 b9       	out	0x09, r24	; 9
    // bit 6		sync/ascyn 0 = async,  1 = sync
    // bit 5-4      parity 00 = disabled
    // bit 3        stop bits 0 = 1 bit  1 = 2 bits
    // bit 2-1      frame length 11 = 8
    // bit 0        clock polarity, should be 0 in asynch mode
    UCSRC  = 0b10000110;
    3e50:	86 e8       	ldi	r24, 0x86	; 134
    3e52:	80 bd       	out	0x20, r24	; 32
    // Enable RS232, rx, tx, Data Register empty interrupt and rx complete interrupt
    UCSRB = _BV(RXEN) | _BV(TXEN) | _BV(UDRIE) | _BV(RXCIE);
    3e54:	88 eb       	ldi	r24, 0xB8	; 184
    3e56:	8a b9       	out	0x0a, r24	; 10
    //UDR = 0x00; // send an empty byte to indicate powerup.


	// Local echo on
	m_Echo = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	80 93 6f 01 	sts	0x016F, r24
}
    3e5e:	08 95       	ret

00003e60 <send_char>:


int send_char(char data)
{
    3e60:	cf 92       	push	r12
    3e62:	df 92       	push	r13
    3e64:	ef 92       	push	r14
    3e66:	ff 92       	push	r15
    3e68:	0f 93       	push	r16
    3e6a:	1f 93       	push	r17
	if(!RINGFIFO_FULL(TXFifo))
    3e6c:	c0 90 74 01 	lds	r12, 0x0174
    3e70:	d0 90 75 01 	lds	r13, 0x0175
    3e74:	e0 90 76 01 	lds	r14, 0x0176
    3e78:	f0 90 77 01 	lds	r15, 0x0177
    3e7c:	97 01       	movw	r18, r14
    3e7e:	86 01       	movw	r16, r12
    3e80:	0f 5f       	subi	r16, 0xFF	; 255
    3e82:	1f 4f       	sbci	r17, 0xFF	; 255
    3e84:	2f 4f       	sbci	r18, 0xFF	; 255
    3e86:	3f 4f       	sbci	r19, 0xFF	; 255
    3e88:	40 91 78 01 	lds	r20, 0x0178
    3e8c:	50 91 79 01 	lds	r21, 0x0179
    3e90:	60 91 7a 01 	lds	r22, 0x017A
    3e94:	70 91 7b 01 	lds	r23, 0x017B
    3e98:	40 27       	eor	r20, r16
    3e9a:	51 27       	eor	r21, r17
    3e9c:	62 27       	eor	r22, r18
    3e9e:	73 27       	eor	r23, r19
    3ea0:	4f 77       	andi	r20, 0x7F	; 127
    3ea2:	50 70       	andi	r21, 0x00	; 0
    3ea4:	60 70       	andi	r22, 0x00	; 0
    3ea6:	70 70       	andi	r23, 0x00	; 0
    3ea8:	41 15       	cp	r20, r1
    3eaa:	51 05       	cpc	r21, r1
    3eac:	61 05       	cpc	r22, r1
    3eae:	71 05       	cpc	r23, r1
    3eb0:	c1 f0       	breq	.+48     	; 0x3ee2 <send_char+0x82>
	{
		RINGFIFO_WR(TXFifo, data);
    3eb2:	b7 01       	movw	r22, r14
    3eb4:	a6 01       	movw	r20, r12
    3eb6:	4f 77       	andi	r20, 0x7F	; 127
    3eb8:	50 70       	andi	r21, 0x00	; 0
    3eba:	60 70       	andi	r22, 0x00	; 0
    3ebc:	70 70       	andi	r23, 0x00	; 0
    3ebe:	40 59       	subi	r20, 0x90	; 144
    3ec0:	5e 4f       	sbci	r21, 0xFE	; 254
    3ec2:	fa 01       	movw	r30, r20
    3ec4:	84 87       	std	Z+12, r24	; 0x0c
    3ec6:	00 93 74 01 	sts	0x0174, r16
    3eca:	10 93 75 01 	sts	0x0175, r17
    3ece:	20 93 76 01 	sts	0x0176, r18
    3ed2:	30 93 77 01 	sts	0x0177, r19
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3ed6:	f8 94       	cli

		//Ensure that no interrupts can fiddle with the UCSRB while we set the drie flag.
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			UCSRB |= _BV(UDRIE);
    3ed8:	55 9a       	sbi	0x0a, 5	; 10
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3eda:	78 94       	sei
		}
		return 1;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	02 c0       	rjmp	.+4      	; 0x3ee6 <send_char+0x86>
	}
	else
	{
		return 0;
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    3ee6:	1f 91       	pop	r17
    3ee8:	0f 91       	pop	r16
    3eea:	ff 90       	pop	r15
    3eec:	ef 90       	pop	r14
    3eee:	df 90       	pop	r13
    3ef0:	cf 90       	pop	r12
    3ef2:	08 95       	ret

00003ef4 <send_string>:


int send_string(const char *data)
{
    3ef4:	8f 92       	push	r8
    3ef6:	9f 92       	push	r9
    3ef8:	af 92       	push	r10
    3efa:	bf 92       	push	r11
    3efc:	ef 92       	push	r14
    3efe:	ff 92       	push	r15
    3f00:	0f 93       	push	r16
    3f02:	1f 93       	push	r17
    3f04:	cf 93       	push	r28
    3f06:	df 93       	push	r29
	int pos = 0;
	uint8_t tempChar;

    tempChar = data[pos];
    3f08:	dc 01       	movw	r26, r24
    3f0a:	ec 91       	ld	r30, X
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3f0c:	80 90 78 01 	lds	r8, 0x0178
    3f10:	90 90 79 01 	lds	r9, 0x0179
    3f14:	a0 90 7a 01 	lds	r10, 0x017A
    3f18:	b0 90 7b 01 	lds	r11, 0x017B
    3f1c:	7c 01       	movw	r14, r24
}


int send_string(const char *data)
{
	int pos = 0;
    3f1e:	c0 e0       	ldi	r28, 0x00	; 0
    3f20:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t tempChar;

    tempChar = data[pos];
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3f22:	16 c0       	rjmp	.+44     	; 0x3f50 <send_string+0x5c>
	{
		RINGFIFO_WR(TXFifo, data[pos]);
    3f24:	f7 01       	movw	r30, r14
    3f26:	81 91       	ld	r24, Z+
    3f28:	7f 01       	movw	r14, r30
    3f2a:	4f 77       	andi	r20, 0x7F	; 127
    3f2c:	50 70       	andi	r21, 0x00	; 0
    3f2e:	60 70       	andi	r22, 0x00	; 0
    3f30:	70 70       	andi	r23, 0x00	; 0
    3f32:	fa 01       	movw	r30, r20
    3f34:	e0 59       	subi	r30, 0x90	; 144
    3f36:	fe 4f       	sbci	r31, 0xFE	; 254
    3f38:	84 87       	std	Z+12, r24	; 0x0c
    3f3a:	00 93 74 01 	sts	0x0174, r16
    3f3e:	10 93 75 01 	sts	0x0175, r17
    3f42:	20 93 76 01 	sts	0x0176, r18
    3f46:	30 93 77 01 	sts	0x0177, r19
		pos++;
    3f4a:	21 96       	adiw	r28, 0x01	; 1

        tempChar = data[pos];
    3f4c:	d7 01       	movw	r26, r14
    3f4e:	ec 91       	ld	r30, X
	int pos = 0;
	uint8_t tempChar;

    tempChar = data[pos];
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3f50:	40 91 74 01 	lds	r20, 0x0174
    3f54:	50 91 75 01 	lds	r21, 0x0175
    3f58:	60 91 76 01 	lds	r22, 0x0176
    3f5c:	70 91 77 01 	lds	r23, 0x0177
    3f60:	8a 01       	movw	r16, r20
    3f62:	9b 01       	movw	r18, r22
    3f64:	0f 5f       	subi	r16, 0xFF	; 255
    3f66:	1f 4f       	sbci	r17, 0xFF	; 255
    3f68:	2f 4f       	sbci	r18, 0xFF	; 255
    3f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6c:	d9 01       	movw	r26, r18
    3f6e:	c8 01       	movw	r24, r16
    3f70:	88 25       	eor	r24, r8
    3f72:	99 25       	eor	r25, r9
    3f74:	aa 25       	eor	r26, r10
    3f76:	bb 25       	eor	r27, r11
    3f78:	8f 77       	andi	r24, 0x7F	; 127
    3f7a:	90 70       	andi	r25, 0x00	; 0
    3f7c:	a0 70       	andi	r26, 0x00	; 0
    3f7e:	b0 70       	andi	r27, 0x00	; 0
    3f80:	00 97       	sbiw	r24, 0x00	; 0
    3f82:	a1 05       	cpc	r26, r1
    3f84:	b1 05       	cpc	r27, r1
    3f86:	11 f0       	breq	.+4      	; 0x3f8c <send_string+0x98>
    3f88:	ee 23       	and	r30, r30
    3f8a:	61 f6       	brne	.-104    	; 0x3f24 <send_string+0x30>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3f8c:	f8 94       	cli
	}

	//Ensure that no interrupts can fiddle with the UCSRB while we set the drie flag.
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UCSRB |= _BV(UDRIE);
    3f8e:	55 9a       	sbi	0x0a, 5	; 10
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3f90:	78 94       	sei
	}

	return pos;
}
    3f92:	ce 01       	movw	r24, r28
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	1f 91       	pop	r17
    3f9a:	0f 91       	pop	r16
    3f9c:	ff 90       	pop	r15
    3f9e:	ef 90       	pop	r14
    3fa0:	bf 90       	pop	r11
    3fa2:	af 90       	pop	r10
    3fa4:	9f 90       	pop	r9
    3fa6:	8f 90       	pop	r8
    3fa8:	08 95       	ret

00003faa <send_string_p>:


int send_string_p(const char * data)
{
    3faa:	8f 92       	push	r8
    3fac:	9f 92       	push	r9
    3fae:	af 92       	push	r10
    3fb0:	bf 92       	push	r11
    3fb2:	df 92       	push	r13
    3fb4:	ef 92       	push	r14
    3fb6:	ff 92       	push	r15
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    int pos = 0;
	uint8_t tempChar;
    
	
    tempChar = pgm_read_byte(&(data[pos]));
    3fc0:	ec 01       	movw	r28, r24
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	d4 90       	lpm	r13, Z
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3fc6:	80 90 78 01 	lds	r8, 0x0178
    3fca:	90 90 79 01 	lds	r9, 0x0179
    3fce:	a0 90 7a 01 	lds	r10, 0x017A
    3fd2:	b0 90 7b 01 	lds	r11, 0x017B
}


int send_string_p(const char * data)
{
    int pos = 0;
    3fd6:	ee 24       	eor	r14, r14
    3fd8:	ff 24       	eor	r15, r15
	uint8_t tempChar;
    
	
    tempChar = pgm_read_byte(&(data[pos]));
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3fda:	16 c0       	rjmp	.+44     	; 0x4008 <send_string_p+0x5e>
	{
		RINGFIFO_WR(TXFifo, data[pos]);
    3fdc:	89 91       	ld	r24, Y+
    3fde:	4f 77       	andi	r20, 0x7F	; 127
    3fe0:	50 70       	andi	r21, 0x00	; 0
    3fe2:	60 70       	andi	r22, 0x00	; 0
    3fe4:	70 70       	andi	r23, 0x00	; 0
    3fe6:	fa 01       	movw	r30, r20
    3fe8:	e0 59       	subi	r30, 0x90	; 144
    3fea:	fe 4f       	sbci	r31, 0xFE	; 254
    3fec:	84 87       	std	Z+12, r24	; 0x0c
    3fee:	00 93 74 01 	sts	0x0174, r16
    3ff2:	10 93 75 01 	sts	0x0175, r17
    3ff6:	20 93 76 01 	sts	0x0176, r18
    3ffa:	30 93 77 01 	sts	0x0177, r19
		pos++;
    3ffe:	08 94       	sec
    4000:	e1 1c       	adc	r14, r1
    4002:	f1 1c       	adc	r15, r1

        tempChar = pgm_read_byte(&(data[pos]));
    4004:	fe 01       	movw	r30, r28
    4006:	d4 90       	lpm	r13, Z
	uint8_t tempChar;
    
	
    tempChar = pgm_read_byte(&(data[pos]));
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    4008:	40 91 74 01 	lds	r20, 0x0174
    400c:	50 91 75 01 	lds	r21, 0x0175
    4010:	60 91 76 01 	lds	r22, 0x0176
    4014:	70 91 77 01 	lds	r23, 0x0177
    4018:	8a 01       	movw	r16, r20
    401a:	9b 01       	movw	r18, r22
    401c:	0f 5f       	subi	r16, 0xFF	; 255
    401e:	1f 4f       	sbci	r17, 0xFF	; 255
    4020:	2f 4f       	sbci	r18, 0xFF	; 255
    4022:	3f 4f       	sbci	r19, 0xFF	; 255
    4024:	d9 01       	movw	r26, r18
    4026:	c8 01       	movw	r24, r16
    4028:	88 25       	eor	r24, r8
    402a:	99 25       	eor	r25, r9
    402c:	aa 25       	eor	r26, r10
    402e:	bb 25       	eor	r27, r11
    4030:	8f 77       	andi	r24, 0x7F	; 127
    4032:	90 70       	andi	r25, 0x00	; 0
    4034:	a0 70       	andi	r26, 0x00	; 0
    4036:	b0 70       	andi	r27, 0x00	; 0
    4038:	00 97       	sbiw	r24, 0x00	; 0
    403a:	a1 05       	cpc	r26, r1
    403c:	b1 05       	cpc	r27, r1
    403e:	11 f0       	breq	.+4      	; 0x4044 <send_string_p+0x9a>
    4040:	dd 20       	and	r13, r13
    4042:	61 f6       	brne	.-104    	; 0x3fdc <send_string_p+0x32>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4044:	f8 94       	cli
	}
    
	//Ensure that no interrupts can fiddle with the UCSRB while we set the drie flag.
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UCSRB |= _BV(UDRIE);
    4046:	55 9a       	sbi	0x0a, 5	; 10
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    4048:	78 94       	sei
	}
    
	return pos;
}
    404a:	c7 01       	movw	r24, r14
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	bf 90       	pop	r11
    405c:	af 90       	pop	r10
    405e:	9f 90       	pop	r9
    4060:	8f 90       	pop	r8
    4062:	08 95       	ret

00004064 <receive_char>:


// Receives a character from the SW buffer
int receive_char(char *data)
{
    4064:	0f 93       	push	r16
    4066:	1f 93       	push	r17
	char tempValue;
	if(!RINGFIFO_EMPTY(RXFifo))
    4068:	40 91 04 02 	lds	r20, 0x0204
    406c:	50 91 05 02 	lds	r21, 0x0205
    4070:	60 91 06 02 	lds	r22, 0x0206
    4074:	70 91 07 02 	lds	r23, 0x0207
    4078:	00 91 00 02 	lds	r16, 0x0200
    407c:	10 91 01 02 	lds	r17, 0x0201
    4080:	20 91 02 02 	lds	r18, 0x0202
    4084:	30 91 03 02 	lds	r19, 0x0203
    4088:	40 17       	cp	r20, r16
    408a:	51 07       	cpc	r21, r17
    408c:	62 07       	cpc	r22, r18
    408e:	73 07       	cpc	r23, r19
    4090:	d9 f0       	breq	.+54     	; 0x40c8 <receive_char+0x64>
	{
		RINGFIFO_RD(RXFifo, tempValue);
    4092:	8a 01       	movw	r16, r20
    4094:	9b 01       	movw	r18, r22
    4096:	0f 5f       	subi	r16, 0xFF	; 255
    4098:	1f 4f       	sbci	r17, 0xFF	; 255
    409a:	2f 4f       	sbci	r18, 0xFF	; 255
    409c:	3f 4f       	sbci	r19, 0xFF	; 255
    409e:	00 93 04 02 	sts	0x0204, r16
    40a2:	10 93 05 02 	sts	0x0205, r17
    40a6:	20 93 06 02 	sts	0x0206, r18
    40aa:	30 93 07 02 	sts	0x0207, r19
    40ae:	4f 77       	andi	r20, 0x7F	; 127
    40b0:	50 70       	andi	r21, 0x00	; 0
    40b2:	60 70       	andi	r22, 0x00	; 0
    40b4:	70 70       	andi	r23, 0x00	; 0
    40b6:	44 50       	subi	r20, 0x04	; 4
    40b8:	5e 4f       	sbci	r21, 0xFE	; 254
    40ba:	fa 01       	movw	r30, r20
    40bc:	24 85       	ldd	r18, Z+12	; 0x0c
		data[0] = tempValue;
    40be:	fc 01       	movw	r30, r24
    40c0:	20 83       	st	Z, r18
		return 1;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	02 c0       	rjmp	.+4      	; 0x40cc <receive_char+0x68>
	}
	else
	{
		return 0;
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	08 95       	ret

000040d2 <receive_string>:

// Receives a string from the SW buffer, 
// data: Pointer to where the data will be received
// Return value is number of chars that were read from the buffer
int receive_string(char * data, int max_chars)
{
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	eb 01       	movw	r28, r22
	char tempValue;
	int charsRead = 0;
    40d8:	fc 01       	movw	r30, r24
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
	while(!RINGFIFO_EMPTY(RXFifo) && charsRead < max_chars)
    40de:	1a c0       	rjmp	.+52     	; 0x4114 <receive_string+0x42>
	{
		RINGFIFO_RD(RXFifo, tempValue);
    40e0:	ac 01       	movw	r20, r24
    40e2:	bd 01       	movw	r22, r26
    40e4:	4f 5f       	subi	r20, 0xFF	; 255
    40e6:	5f 4f       	sbci	r21, 0xFF	; 255
    40e8:	6f 4f       	sbci	r22, 0xFF	; 255
    40ea:	7f 4f       	sbci	r23, 0xFF	; 255
    40ec:	40 93 04 02 	sts	0x0204, r20
    40f0:	50 93 05 02 	sts	0x0205, r21
    40f4:	60 93 06 02 	sts	0x0206, r22
    40f8:	70 93 07 02 	sts	0x0207, r23
    40fc:	8f 77       	andi	r24, 0x7F	; 127
    40fe:	90 70       	andi	r25, 0x00	; 0
    4100:	a0 70       	andi	r26, 0x00	; 0
    4102:	b0 70       	andi	r27, 0x00	; 0
    4104:	84 50       	subi	r24, 0x04	; 4
    4106:	9e 4f       	sbci	r25, 0xFE	; 254
    4108:	dc 01       	movw	r26, r24
    410a:	1c 96       	adiw	r26, 0x0c	; 12
    410c:	8c 91       	ld	r24, X
		data[charsRead] = tempValue;
    410e:	81 93       	st	Z+, r24
		charsRead++;
    4110:	2f 5f       	subi	r18, 0xFF	; 255
    4112:	3f 4f       	sbci	r19, 0xFF	; 255
// Return value is number of chars that were read from the buffer
int receive_string(char * data, int max_chars)
{
	char tempValue;
	int charsRead = 0;
	while(!RINGFIFO_EMPTY(RXFifo) && charsRead < max_chars)
    4114:	80 91 04 02 	lds	r24, 0x0204
    4118:	90 91 05 02 	lds	r25, 0x0205
    411c:	a0 91 06 02 	lds	r26, 0x0206
    4120:	b0 91 07 02 	lds	r27, 0x0207
    4124:	40 91 00 02 	lds	r20, 0x0200
    4128:	50 91 01 02 	lds	r21, 0x0201
    412c:	60 91 02 02 	lds	r22, 0x0202
    4130:	70 91 03 02 	lds	r23, 0x0203
    4134:	84 17       	cp	r24, r20
    4136:	95 07       	cpc	r25, r21
    4138:	a6 07       	cpc	r26, r22
    413a:	b7 07       	cpc	r27, r23
    413c:	19 f0       	breq	.+6      	; 0x4144 <receive_string+0x72>
    413e:	2c 17       	cp	r18, r28
    4140:	3d 07       	cpc	r19, r29
    4142:	74 f2       	brlt	.-100    	; 0x40e0 <receive_string+0xe>
		data[charsRead] = tempValue;
		charsRead++;
	}

	return charsRead;
}
    4144:	c9 01       	movw	r24, r18
    4146:	df 91       	pop	r29
    4148:	cf 91       	pop	r28
    414a:	08 95       	ret

0000414c <SetEcho>:

// Set whether or not to echo received chars
void SetEcho(unsigned char echo)
{
	m_Echo = echo;
    414c:	80 93 6f 01 	sts	0x016F, r24
}
    4150:	08 95       	ret

00004152 <HasChars>:

uint8_t HasChars()
{
    4152:	0f 93       	push	r16
    4154:	1f 93       	push	r17
	return !RINGFIFO_EMPTY(RXFifo);
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	00 91 04 02 	lds	r16, 0x0204
    415c:	10 91 05 02 	lds	r17, 0x0205
    4160:	20 91 06 02 	lds	r18, 0x0206
    4164:	30 91 07 02 	lds	r19, 0x0207
    4168:	40 91 00 02 	lds	r20, 0x0200
    416c:	50 91 01 02 	lds	r21, 0x0201
    4170:	60 91 02 02 	lds	r22, 0x0202
    4174:	70 91 03 02 	lds	r23, 0x0203
    4178:	04 17       	cp	r16, r20
    417a:	15 07       	cpc	r17, r21
    417c:	26 07       	cpc	r18, r22
    417e:	37 07       	cpc	r19, r23
    4180:	09 f4       	brne	.+2      	; 0x4184 <HasChars+0x32>
    4182:	80 e0       	ldi	r24, 0x00	; 0
}
    4184:	1f 91       	pop	r17
    4186:	0f 91       	pop	r16
    4188:	08 95       	ret

0000418a <__vector_14>:

// Interrupt handler for the Data Register Empty Interrupt
// Transmits the first character in the SW Buffer
// and disables the interrupt if there are no more characters to send.
ISR(USART_UDRE_vect)
{
    418a:	1f 92       	push	r1
    418c:	0f 92       	push	r0
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	0f 92       	push	r0
    4192:	11 24       	eor	r1, r1
    4194:	0f 93       	push	r16
    4196:	1f 93       	push	r17
    4198:	2f 93       	push	r18
    419a:	3f 93       	push	r19
    419c:	4f 93       	push	r20
    419e:	5f 93       	push	r21
    41a0:	6f 93       	push	r22
    41a2:	7f 93       	push	r23
    41a4:	8f 93       	push	r24
    41a6:	9f 93       	push	r25
    41a8:	af 93       	push	r26
    41aa:	bf 93       	push	r27
    41ac:	ef 93       	push	r30
    41ae:	ff 93       	push	r31
	char tempValue;
	if(!RINGFIFO_EMPTY(TXFifo))
    41b0:	80 91 78 01 	lds	r24, 0x0178
    41b4:	90 91 79 01 	lds	r25, 0x0179
    41b8:	a0 91 7a 01 	lds	r26, 0x017A
    41bc:	b0 91 7b 01 	lds	r27, 0x017B
    41c0:	40 91 74 01 	lds	r20, 0x0174
    41c4:	50 91 75 01 	lds	r21, 0x0175
    41c8:	60 91 76 01 	lds	r22, 0x0176
    41cc:	70 91 77 01 	lds	r23, 0x0177
    41d0:	84 17       	cp	r24, r20
    41d2:	95 07       	cpc	r25, r21
    41d4:	a6 07       	cpc	r26, r22
    41d6:	b7 07       	cpc	r27, r23
    41d8:	b9 f0       	breq	.+46     	; 0x4208 <__vector_14+0x7e>
	{
		RINGFIFO_RD(TXFifo, tempValue);
    41da:	8c 01       	movw	r16, r24
    41dc:	9d 01       	movw	r18, r26
    41de:	0f 5f       	subi	r16, 0xFF	; 255
    41e0:	1f 4f       	sbci	r17, 0xFF	; 255
    41e2:	2f 4f       	sbci	r18, 0xFF	; 255
    41e4:	3f 4f       	sbci	r19, 0xFF	; 255
    41e6:	00 93 78 01 	sts	0x0178, r16
    41ea:	10 93 79 01 	sts	0x0179, r17
    41ee:	20 93 7a 01 	sts	0x017A, r18
    41f2:	30 93 7b 01 	sts	0x017B, r19
    41f6:	8f 77       	andi	r24, 0x7F	; 127
    41f8:	90 70       	andi	r25, 0x00	; 0
    41fa:	a0 70       	andi	r26, 0x00	; 0
    41fc:	b0 70       	andi	r27, 0x00	; 0
    41fe:	80 59       	subi	r24, 0x90	; 144
    4200:	9e 4f       	sbci	r25, 0xFE	; 254
    4202:	fc 01       	movw	r30, r24
    4204:	84 85       	ldd	r24, Z+12	; 0x0c
		UDR = tempValue;
    4206:	8c b9       	out	0x0c, r24	; 12
	}

	// Clear the Data register empty interrupt if there are no more data to be transmitted
	// This will be set by the sender functions once more data is loaded to the buffer.
	if(RINGFIFO_EMPTY(TXFifo))
    4208:	80 91 78 01 	lds	r24, 0x0178
    420c:	90 91 79 01 	lds	r25, 0x0179
    4210:	a0 91 7a 01 	lds	r26, 0x017A
    4214:	b0 91 7b 01 	lds	r27, 0x017B
    4218:	84 17       	cp	r24, r20
    421a:	95 07       	cpc	r25, r21
    421c:	a6 07       	cpc	r26, r22
    421e:	b7 07       	cpc	r27, r23
    4220:	09 f4       	brne	.+2      	; 0x4224 <__vector_14+0x9a>
	{
		UCSRB &= ~_BV(UDRIE);
    4222:	55 98       	cbi	0x0a, 5	; 10
	}
}
    4224:	ff 91       	pop	r31
    4226:	ef 91       	pop	r30
    4228:	bf 91       	pop	r27
    422a:	af 91       	pop	r26
    422c:	9f 91       	pop	r25
    422e:	8f 91       	pop	r24
    4230:	7f 91       	pop	r23
    4232:	6f 91       	pop	r22
    4234:	5f 91       	pop	r21
    4236:	4f 91       	pop	r20
    4238:	3f 91       	pop	r19
    423a:	2f 91       	pop	r18
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	0f 90       	pop	r0
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	0f 90       	pop	r0
    4246:	1f 90       	pop	r1
    4248:	18 95       	reti

0000424a <__vector_13>:

// Interrupt handler for the Receive Completed interrupt
// Re
ISR(USART_RXC_vect)
{
    424a:	1f 92       	push	r1
    424c:	0f 92       	push	r0
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	0f 92       	push	r0
    4252:	11 24       	eor	r1, r1
    4254:	cf 92       	push	r12
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	2f 93       	push	r18
    4262:	3f 93       	push	r19
    4264:	4f 93       	push	r20
    4266:	5f 93       	push	r21
    4268:	6f 93       	push	r22
    426a:	7f 93       	push	r23
    426c:	8f 93       	push	r24
    426e:	9f 93       	push	r25
    4270:	af 93       	push	r26
    4272:	bf 93       	push	r27
    4274:	ef 93       	push	r30
    4276:	ff 93       	push	r31
	// Status must be read before data
	char Status = UCSRA;
    4278:	9b b1       	in	r25, 0x0b	; 11
	char tempValue = UDR;
    427a:	8c b1       	in	r24, 0x0c	; 12
	// If there is no error when receiving
	if(!(Status & _BV(FE)) && !(Status & _BV(DOR)) && !(Status & _BV(PE)))
    427c:	94 fd       	sbrc	r25, 4
    427e:	3f c0       	rjmp	.+126    	; 0x42fe <__vector_13+0xb4>
    4280:	93 fd       	sbrc	r25, 3
    4282:	3d c0       	rjmp	.+122    	; 0x42fe <__vector_13+0xb4>
    4284:	92 fd       	sbrc	r25, 2
    4286:	3b c0       	rjmp	.+118    	; 0x42fe <__vector_13+0xb4>
	{
		// If there is room in the buffer
		if(!RINGFIFO_FULL(RXFifo))
    4288:	c0 90 00 02 	lds	r12, 0x0200
    428c:	d0 90 01 02 	lds	r13, 0x0201
    4290:	e0 90 02 02 	lds	r14, 0x0202
    4294:	f0 90 03 02 	lds	r15, 0x0203
    4298:	97 01       	movw	r18, r14
    429a:	86 01       	movw	r16, r12
    429c:	0f 5f       	subi	r16, 0xFF	; 255
    429e:	1f 4f       	sbci	r17, 0xFF	; 255
    42a0:	2f 4f       	sbci	r18, 0xFF	; 255
    42a2:	3f 4f       	sbci	r19, 0xFF	; 255
    42a4:	40 91 04 02 	lds	r20, 0x0204
    42a8:	50 91 05 02 	lds	r21, 0x0205
    42ac:	60 91 06 02 	lds	r22, 0x0206
    42b0:	70 91 07 02 	lds	r23, 0x0207
    42b4:	40 27       	eor	r20, r16
    42b6:	51 27       	eor	r21, r17
    42b8:	62 27       	eor	r22, r18
    42ba:	73 27       	eor	r23, r19
    42bc:	4f 77       	andi	r20, 0x7F	; 127
    42be:	50 70       	andi	r21, 0x00	; 0
    42c0:	60 70       	andi	r22, 0x00	; 0
    42c2:	70 70       	andi	r23, 0x00	; 0
    42c4:	41 15       	cp	r20, r1
    42c6:	51 05       	cpc	r21, r1
    42c8:	61 05       	cpc	r22, r1
    42ca:	71 05       	cpc	r23, r1
    42cc:	c1 f0       	breq	.+48     	; 0x42fe <__vector_13+0xb4>
		{
			RINGFIFO_WR(RXFifo, tempValue);
    42ce:	b7 01       	movw	r22, r14
    42d0:	a6 01       	movw	r20, r12
    42d2:	4f 77       	andi	r20, 0x7F	; 127
    42d4:	50 70       	andi	r21, 0x00	; 0
    42d6:	60 70       	andi	r22, 0x00	; 0
    42d8:	70 70       	andi	r23, 0x00	; 0
    42da:	44 50       	subi	r20, 0x04	; 4
    42dc:	5e 4f       	sbci	r21, 0xFE	; 254
    42de:	fa 01       	movw	r30, r20
    42e0:	84 87       	std	Z+12, r24	; 0x0c
    42e2:	00 93 00 02 	sts	0x0200, r16
    42e6:	10 93 01 02 	sts	0x0201, r17
    42ea:	20 93 02 02 	sts	0x0202, r18
    42ee:	30 93 03 02 	sts	0x0203, r19
			if(m_Echo != 0)
    42f2:	90 91 6f 01 	lds	r25, 0x016F
    42f6:	99 23       	and	r25, r25
    42f8:	11 f0       	breq	.+4      	; 0x42fe <__vector_13+0xb4>
			{
				send_char(tempValue);
    42fa:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <send_char>
			}
		}
	}
    42fe:	ff 91       	pop	r31
    4300:	ef 91       	pop	r30
    4302:	bf 91       	pop	r27
    4304:	af 91       	pop	r26
    4306:	9f 91       	pop	r25
    4308:	8f 91       	pop	r24
    430a:	7f 91       	pop	r23
    430c:	6f 91       	pop	r22
    430e:	5f 91       	pop	r21
    4310:	4f 91       	pop	r20
    4312:	3f 91       	pop	r19
    4314:	2f 91       	pop	r18
    4316:	1f 91       	pop	r17
    4318:	0f 91       	pop	r16
    431a:	ff 90       	pop	r15
    431c:	ef 90       	pop	r14
    431e:	df 90       	pop	r13
    4320:	cf 90       	pop	r12
    4322:	0f 90       	pop	r0
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	0f 90       	pop	r0
    4328:	1f 90       	pop	r1
    432a:	18 95       	reti

0000432c <util_init>:
volatile unsigned char m_override_delay;


void util_init()
{
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);  // Sets the prescaler to 128
    432c:	87 e0       	ldi	r24, 0x07	; 7
    432e:	86 b9       	out	0x06, r24	; 6
    ADMUX = _BV(REFS0);     // Selects AVCC as reference voltage
    4330:	80 e4       	ldi	r24, 0x40	; 64
    4332:	87 b9       	out	0x07, r24	; 7
    ADCSRA = _BV(ADEN);     // Enables the AD converter
    4334:	80 e8       	ldi	r24, 0x80	; 128
    4336:	86 b9       	out	0x06, r24	; 6
}
    4338:	08 95       	ret

0000433a <delay_tick>:


void delay_tick()
{
	if(m_override_delay == 1)
    433a:	80 91 8a 02 	lds	r24, 0x028A
    433e:	81 30       	cpi	r24, 0x01	; 1
    4340:	49 f4       	brne	.+18     	; 0x4354 <delay_tick+0x1a>
	{
		m_current_delay = 0;
    4342:	10 92 8c 02 	sts	0x028C, r1
    4346:	10 92 8b 02 	sts	0x028B, r1
        m_timer_ms = 0;
    434a:	10 92 89 02 	sts	0x0289, r1
    434e:	10 92 88 02 	sts	0x0288, r1
    4352:	08 95       	ret
	}
	else
	{
		// Count down if there is a delay started
		if(m_current_delay > 0)
    4354:	80 91 8b 02 	lds	r24, 0x028B
    4358:	90 91 8c 02 	lds	r25, 0x028C
    435c:	00 97       	sbiw	r24, 0x00	; 0
    435e:	49 f0       	breq	.+18     	; 0x4372 <delay_tick+0x38>
		{
			m_current_delay--;
    4360:	80 91 8b 02 	lds	r24, 0x028B
    4364:	90 91 8c 02 	lds	r25, 0x028C
    4368:	01 97       	sbiw	r24, 0x01	; 1
    436a:	90 93 8c 02 	sts	0x028C, r25
    436e:	80 93 8b 02 	sts	0x028B, r24
		}
        // Count down if there is a timer started
        if(m_timer_ms > 0)
    4372:	80 91 88 02 	lds	r24, 0x0288
    4376:	90 91 89 02 	lds	r25, 0x0289
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	49 f0       	breq	.+18     	; 0x4390 <delay_tick+0x56>
        {
            m_timer_ms--;
    437e:	80 91 88 02 	lds	r24, 0x0288
    4382:	90 91 89 02 	lds	r25, 0x0289
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	90 93 89 02 	sts	0x0289, r25
    438c:	80 93 88 02 	sts	0x0288, r24
    4390:	08 95       	ret

00004392 <delay_ms>:

}

void delay_ms(unsigned int delay)
{
	if(m_override_delay == 0)
    4392:	20 91 8a 02 	lds	r18, 0x028A
    4396:	22 23       	and	r18, r18
    4398:	79 f4       	brne	.+30     	; 0x43b8 <delay_ms+0x26>
	{
		if(delay < UINT16_MAX)
    439a:	2f ef       	ldi	r18, 0xFF	; 255
    439c:	8f 3f       	cpi	r24, 0xFF	; 255
    439e:	92 07       	cpc	r25, r18
    43a0:	09 f0       	breq	.+2      	; 0x43a4 <delay_ms+0x12>
		{
			// Adding 1 to ensure that the delay the wait time is at least "delay" ms.
			m_current_delay = delay + 1;
    43a2:	01 96       	adiw	r24, 0x01	; 1
		}
        else
        {
            m_current_delay = delay;
    43a4:	90 93 8c 02 	sts	0x028C, r25
    43a8:	80 93 8b 02 	sts	0x028B, r24
        }
	
		while(m_current_delay != 0);
    43ac:	80 91 8b 02 	lds	r24, 0x028B
    43b0:	90 91 8c 02 	lds	r25, 0x028C
    43b4:	00 97       	sbiw	r24, 0x00	; 0
    43b6:	d1 f7       	brne	.-12     	; 0x43ac <delay_ms+0x1a>
    43b8:	08 95       	ret

000043ba <set_timer>:
	}
}

void set_timer(unsigned int time_ms)
{
    if(m_override_delay== 0)
    43ba:	20 91 8a 02 	lds	r18, 0x028A
    43be:	22 23       	and	r18, r18
    43c0:	71 f4       	brne	.+28     	; 0x43de <set_timer+0x24>
    {
        if(time_ms < UINT16_MAX)
    43c2:	2f ef       	ldi	r18, 0xFF	; 255
    43c4:	8f 3f       	cpi	r24, 0xFF	; 255
    43c6:	92 07       	cpc	r25, r18
    43c8:	31 f0       	breq	.+12     	; 0x43d6 <set_timer+0x1c>
        {
            m_timer_ms = time_ms + 1;
    43ca:	01 96       	adiw	r24, 0x01	; 1
    43cc:	90 93 89 02 	sts	0x0289, r25
    43d0:	80 93 88 02 	sts	0x0288, r24
    43d4:	08 95       	ret
        }
        else
        {
            m_timer_ms = time_ms;
    43d6:	90 93 89 02 	sts	0x0289, r25
    43da:	80 93 88 02 	sts	0x0288, r24
    43de:	08 95       	ret

000043e0 <timer_expired>:
}


bool timer_expired()
{
    return m_timer_ms == 0;
    43e0:	20 91 88 02 	lds	r18, 0x0288
    43e4:	30 91 89 02 	lds	r19, 0x0289
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	21 15       	cp	r18, r1
    43ec:	31 05       	cpc	r19, r1
    43ee:	09 f0       	breq	.+2      	; 0x43f2 <timer_expired+0x12>
    43f0:	80 e0       	ldi	r24, 0x00	; 0
}
    43f2:	08 95       	ret

000043f4 <override_delay>:


void override_delay(unsigned char override)
{
	m_override_delay = override;
    43f4:	80 93 8a 02 	sts	0x028A, r24
}
    43f8:	08 95       	ret

000043fa <GetChar>:


uint8_t GetChar(const char * str_ptr, uint16_t index, uint8_t prgMem)
{
    43fa:	fb 01       	movw	r30, r22
    43fc:	e8 0f       	add	r30, r24
    43fe:	f9 1f       	adc	r31, r25
	if(prgMem)
    4400:	44 23       	and	r20, r20
    4402:	11 f0       	breq	.+4      	; 0x4408 <GetChar+0xe>
	{
		return pgm_read_byte(&(str_ptr[index]));
    4404:	84 91       	lpm	r24, Z
    4406:	08 95       	ret
	}
	else
	{
		return str_ptr[index];
    4408:	80 81       	ld	r24, Z
	}
}
    440a:	08 95       	ret

0000440c <ADC_Read>:

unsigned int ADC_Read(unsigned char portNo)
{
    unsigned int ad_value;
    // Clears the input
    ADMUX &= ~MUX_INPUT_MASK;
    440c:	97 b1       	in	r25, 0x07	; 7
    440e:	90 7e       	andi	r25, 0xE0	; 224
    4410:	97 b9       	out	0x07, r25	; 7
    
    // Selects input
    ADMUX |= portNo;
    4412:	97 b1       	in	r25, 0x07	; 7
    4414:	98 2b       	or	r25, r24
    4416:	97 b9       	out	0x07, r25	; 7
    
    // Starts the conversion
    ADCSRA |= _BV(ADSC);
    4418:	36 9a       	sbi	0x06, 6	; 6
    
    // Waits until its don
    while(!(ADCSRA & ADIF));
    441a:	32 9b       	sbis	0x06, 2	; 6
    441c:	fe cf       	rjmp	.-4      	; 0x441a <ADC_Read+0xe>
    
    // ADCL must be read before ADCH
    ad_value = ADCL;
    441e:	84 b1       	in	r24, 0x04	; 4
    ad_value = ADCH << 8;
    4420:	95 b1       	in	r25, 0x05	; 5
    
    return ad_value;
}
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	08 95       	ret

00004426 <EQ_Read>:
// buffer_ptr should be an array of 14 unsigned ints.
// Values are entered with the left channel on the first 7 indices and the right on the last 7 indices
// Values are entered with the lowest frequency on index 0 and 7 respectively and going up.
// Frequencys are in ascending order: 63Hz, 160Hz, 400Hz, 1kHz, 2.5kHz, 6.25kHz and 16kHz.
void EQ_Read(unsigned int * buffer_ptr)
{
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    int i;
    
    // Resets the control port
    EQ_PORT |= EQ_RESET;
    443a:	db 9a       	sbi	0x1b, 3	; 27
    // Inserts a couple of nops to ensure that the minimum reset time of 100ns is fulfilled
    asm volatile(" nop");
    443c:	00 00       	nop
    asm volatile(" nop");
    443e:	00 00       	nop
    EQ_PORT &= ~EQ_RESET;
    4440:	db 98       	cbi	0x1b, 3	; 27
    4442:	ec 01       	movw	r28, r24
    
    for(i = 0; i < 7; i++)
    4444:	00 e0       	ldi	r16, 0x00	; 0
    4446:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4448:	8a e0       	ldi	r24, 0x0A	; 10
    444a:	e8 2e       	mov	r14, r24
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	f8 2e       	mov	r15, r24
    4450:	98 e9       	ldi	r25, 0x98	; 152
    4452:	c9 2e       	mov	r12, r25
    4454:	92 e0       	ldi	r25, 0x02	; 2
    4456:	d9 2e       	mov	r13, r25
    4458:	20 e3       	ldi	r18, 0x30	; 48
    445a:	a2 2e       	mov	r10, r18
    445c:	25 e0       	ldi	r18, 0x05	; 5
    445e:	b2 2e       	mov	r11, r18
    4460:	c7 01       	movw	r24, r14
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	f1 f7       	brne	.-4      	; 0x4462 <EQ_Read+0x3c>
    {
        // Delays to ensure that the Strobe to Strobe delay is fulfilled (and also the reset to strobe delay)
        _delay_loop_2(STROBE_TO_STROBE_DELAY);
        // Pulses the strobe
        EQ_PORT |= EQ_STROBE;
    4466:	da 9a       	sbi	0x1b, 2	; 27
    4468:	c6 01       	movw	r24, r12
    446a:	01 97       	sbiw	r24, 0x01	; 1
    446c:	f1 f7       	brne	.-4      	; 0x446a <EQ_Read+0x44>
        // Delay to ensure that the minimum pulse width is fulfilled
        _delay_loop_2(STROBE_PULSE_WIDTH);
        EQ_PORT &= ~EQ_STROBE;
    446e:	da 98       	cbi	0x1b, 2	; 27
    4470:	c5 01       	movw	r24, r10
    4472:	01 97       	sbiw	r24, 0x01	; 1
    4474:	f1 f7       	brne	.-4      	; 0x4472 <EQ_Read+0x4c>
        // Delay to get the outputs to settle
        _delay_loop_2(OUTPUT_SETTLING_TIME);
        // And read the two chips.
        buffer_ptr[i] = ADC_Read(EQ_AD_LEFT);
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	0e 94 06 22 	call	0x440c	; 0x440c <ADC_Read>
    447c:	89 93       	st	Y+, r24
    447e:	99 93       	st	Y+, r25
        buffer_ptr[(i + 7)] = ADC_Read(EQ_AD_RIGHT);
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	0e 94 06 22 	call	0x440c	; 0x440c <ADC_Read>
    4486:	9d 87       	std	Y+13, r25	; 0x0d
    4488:	8c 87       	std	Y+12, r24	; 0x0c
    // Inserts a couple of nops to ensure that the minimum reset time of 100ns is fulfilled
    asm volatile(" nop");
    asm volatile(" nop");
    EQ_PORT &= ~EQ_RESET;
    
    for(i = 0; i < 7; i++)
    448a:	0f 5f       	subi	r16, 0xFF	; 255
    448c:	1f 4f       	sbci	r17, 0xFF	; 255
    448e:	07 30       	cpi	r16, 0x07	; 7
    4490:	11 05       	cpc	r17, r1
    4492:	31 f7       	brne	.-52     	; 0x4460 <EQ_Read+0x3a>
        _delay_loop_2(OUTPUT_SETTLING_TIME);
        // And read the two chips.
        buffer_ptr[i] = ADC_Read(EQ_AD_LEFT);
        buffer_ptr[(i + 7)] = ADC_Read(EQ_AD_RIGHT);
    }
}
    4494:	df 91       	pop	r29
    4496:	cf 91       	pop	r28
    4498:	1f 91       	pop	r17
    449a:	0f 91       	pop	r16
    449c:	ff 90       	pop	r15
    449e:	ef 90       	pop	r14
    44a0:	df 90       	pop	r13
    44a2:	cf 90       	pop	r12
    44a4:	bf 90       	pop	r11
    44a6:	af 90       	pop	r10
    44a8:	08 95       	ret

000044aa <DebounceKey>:


void DebounceKey(bool *keyChanged, bool *keyPressed)
{
    44aa:	fc 01       	movw	r30, r24
    44ac:	db 01       	movw	r26, r22
    static unsigned char count = PRESS_MS / CHECK_MS;
    static bool debouncedKeyPress = false;
    
    *keyChanged = false;
    44ae:	10 82       	st	Z, r1
    *keyPressed = debouncedKeyPress;
    44b0:	90 91 a5 00 	lds	r25, 0x00A5
    44b4:	9c 93       	st	X, r25
    
    bool rawState = !(BUTTON_PORT & BUTTON0);
    44b6:	81 e0       	ldi	r24, 0x01	; 1
    44b8:	92 99       	sbic	0x12, 2	; 18
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    
    if(rawState == debouncedKeyPress)
    44bc:	89 17       	cp	r24, r25
    44be:	21 f4       	brne	.+8      	; 0x44c8 <DebounceKey+0x1e>
    {
        if(debouncedKeyPress)
    44c0:	88 23       	and	r24, r24
    44c2:	81 f4       	brne	.+32     	; 0x44e4 <DebounceKey+0x3a>
        {
            count = RELEASE_MS / CHECK_MS;
        }
        else
        {
            count = PRESS_MS / CHECK_MS;
    44c4:	84 e1       	ldi	r24, 0x14	; 20
    44c6:	0f c0       	rjmp	.+30     	; 0x44e6 <DebounceKey+0x3c>
        }
    }
    else
    {
        count--;
    44c8:	90 91 9e 00 	lds	r25, 0x009E
    44cc:	91 50       	subi	r25, 0x01	; 1
    44ce:	90 93 9e 00 	sts	0x009E, r25
        if(count == 0)
    44d2:	99 23       	and	r25, r25
    44d4:	71 f4       	brne	.+28     	; 0x44f2 <DebounceKey+0x48>
        {
            debouncedKeyPress = rawState;
    44d6:	80 93 a5 00 	sts	0x00A5, r24
            *keyChanged = true;
    44da:	91 e0       	ldi	r25, 0x01	; 1
    44dc:	90 83       	st	Z, r25
            *keyPressed = debouncedKeyPress;
    44de:	8c 93       	st	X, r24
            if(debouncedKeyPress)
    44e0:	88 23       	and	r24, r24
    44e2:	21 f0       	breq	.+8      	; 0x44ec <DebounceKey+0x42>
            {
                count = RELEASE_MS / CHECK_MS;
    44e4:	82 e3       	ldi	r24, 0x32	; 50
    44e6:	80 93 9e 00 	sts	0x009E, r24
    44ea:	08 95       	ret
            }
            else
            {
                count = PRESS_MS / CHECK_MS;
    44ec:	84 e1       	ldi	r24, 0x14	; 20
    44ee:	80 93 9e 00 	sts	0x009E, r24
    44f2:	08 95       	ret

000044f4 <main>:
	int effect_index = 0;
    int tempval;
    
    // This function initiates IO ports, timers, interrupts and
    // serial communications
	ioinit();
    44f4:	0e 94 28 02 	call	0x450	; 0x450 <ioinit>

    usart_init();
    44f8:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <usart_init>
    
	debug_init();
    44fc:	0e 94 0d 03 	call	0x61a	; 0x61a <debug_init>

	util_init();
    4500:	0e 94 96 21 	call	0x432c	; 0x432c <util_init>
	
    // This variable specifies which layer is currently being drawn by the
	// cube interrupt routine. We assign a value to it to make sure it's not >7.
	current_layer = 7;
    4504:	87 e0       	ldi	r24, 0x07	; 7
    4506:	80 93 29 01 	sts	0x0129, r24
	
    // This variable specifies the starting mode, this can be changed by pushing the
    // mode button or by typing in commands in the prompt.
    current_mode = MODE_RANDOM;
    450a:	10 92 a8 00 	sts	0x00A8, r1

	//Binary mode
	binary_mode = 0;
    450e:	10 92 2a 01 	sts	0x012A, r1


    // Reads a value from AD converter and uses it to seed the pseudo random number generator,
    // Not perfect since AD converter returns a value from 0 to 1023 but good enough.
    tempval = ADC_Read(7);
    4512:	0e 94 06 22 	call	0x440c	; 0x440c <ADC_Read>
	srand(tempval);
    4516:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <srand>

	// Enable interrupts
	// This starts the routine that draws the cube content
	sei();
    451a:	78 94       	sei

// Main loop
// the AVR enters this function at boot time
int main (void)
{
	int effect_index = 0;
    451c:	c0 e0       	ldi	r28, 0x00	; 0
    451e:	d0 e0       	ldi	r29, 0x00	; 0
	// Main loop, does awesome shit forever!
	while (1)
	{
        if(current_mode == MODE_RANDOM)
        {
            effect_index = rand() % EFFECTS_TOTAL;
    4520:	0b e1       	ldi	r16, 0x1B	; 27
    4522:	10 e0       	ldi	r17, 0x00	; 0
	sei();

	// Main loop, does awesome shit forever!
	while (1)
	{
        if(current_mode == MODE_RANDOM)
    4524:	80 91 a8 00 	lds	r24, 0x00A8
    4528:	88 23       	and	r24, r24
    452a:	19 f4       	brne	.+6      	; 0x4532 <main+0x3e>
        {
            effect_index = rand() % EFFECTS_TOTAL;
    452c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <rand>
    4530:	06 c0       	rjmp	.+12     	; 0x453e <main+0x4a>
            
            launch_effect(effect_index);
        }
        else if(current_mode == MODE_SEQUENTIAL)
    4532:	80 91 a8 00 	lds	r24, 0x00A8
    4536:	81 30       	cpi	r24, 0x01	; 1
    4538:	49 f4       	brne	.+18     	; 0x454c <main+0x58>
        {
            effect_index++;
    453a:	ce 01       	movw	r24, r28
    453c:	01 96       	adiw	r24, 0x01	; 1
            effect_index %= EFFECTS_TOTAL;
    453e:	b8 01       	movw	r22, r16
    4540:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__divmodhi4>
    4544:	ec 01       	movw	r28, r24
            
            launch_effect(effect_index);
    4546:	0e 94 9e 1b 	call	0x373c	; 0x373c <launch_effect>
    454a:	ec cf       	rjmp	.-40     	; 0x4524 <main+0x30>
        }
        else if(current_mode == MODE_SELF_TEST)
    454c:	80 91 a8 00 	lds	r24, 0x00A8
    4550:	82 30       	cpi	r24, 0x02	; 2
    4552:	31 f4       	brne	.+12     	; 0x4560 <main+0x6c>
        {
            override_delay(0);
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <override_delay>
            
			SelfTest();
    455a:	0e 94 4d 02 	call	0x49a	; 0x49a <SelfTest>
    455e:	e2 cf       	rjmp	.-60     	; 0x4524 <main+0x30>
        }
        else if(current_mode == MODE_MUSIC_RANDOM)
    4560:	80 91 a8 00 	lds	r24, 0x00A8
    4564:	83 30       	cpi	r24, 0x03	; 3
    4566:	f1 f2       	breq	.-68     	; 0x4524 <main+0x30>
        {
            
        }
        else if(current_mode == MODE_MUSIC_SEQUENTIAL)
    4568:	80 91 a8 00 	lds	r24, 0x00A8
    456c:	84 30       	cpi	r24, 0x04	; 4
    456e:	d1 f2       	breq	.-76     	; 0x4524 <main+0x30>
        {
            
        }
        else if(current_mode == MODE_BINARY)
    4570:	80 91 a8 00 	lds	r24, 0x00A8
    4574:	85 30       	cpi	r24, 0x05	; 5
    4576:	19 f4       	brne	.+6      	; 0x457e <main+0x8a>
        {
            rs232();
    4578:	0e 94 91 02 	call	0x522	; 0x522 <rs232>
    457c:	d3 cf       	rjmp	.-90     	; 0x4524 <main+0x30>
        }
        else
        {
            current_mode = MODE_RANDOM;
    457e:	10 92 a8 00 	sts	0x00A8, r1
    4582:	d0 cf       	rjmp	.-96     	; 0x4524 <main+0x30>

00004584 <__subsf3>:
    4584:	50 58       	subi	r21, 0x80	; 128

00004586 <__addsf3>:
    4586:	bb 27       	eor	r27, r27
    4588:	aa 27       	eor	r26, r26
    458a:	0e d0       	rcall	.+28     	; 0x45a8 <__addsf3x>
    458c:	78 c1       	rjmp	.+752    	; 0x487e <__fp_round>
    458e:	41 d1       	rcall	.+642    	; 0x4812 <__fp_pscA>
    4590:	30 f0       	brcs	.+12     	; 0x459e <__addsf3+0x18>
    4592:	46 d1       	rcall	.+652    	; 0x4820 <__fp_pscB>
    4594:	20 f0       	brcs	.+8      	; 0x459e <__addsf3+0x18>
    4596:	31 f4       	brne	.+12     	; 0x45a4 <__addsf3+0x1e>
    4598:	9f 3f       	cpi	r25, 0xFF	; 255
    459a:	11 f4       	brne	.+4      	; 0x45a0 <__addsf3+0x1a>
    459c:	1e f4       	brtc	.+6      	; 0x45a4 <__addsf3+0x1e>
    459e:	36 c1       	rjmp	.+620    	; 0x480c <__fp_nan>
    45a0:	0e f4       	brtc	.+2      	; 0x45a4 <__addsf3+0x1e>
    45a2:	e0 95       	com	r30
    45a4:	e7 fb       	bst	r30, 7
    45a6:	2c c1       	rjmp	.+600    	; 0x4800 <__fp_inf>

000045a8 <__addsf3x>:
    45a8:	e9 2f       	mov	r30, r25
    45aa:	8b d1       	rcall	.+790    	; 0x48c2 <__fp_split3>
    45ac:	80 f3       	brcs	.-32     	; 0x458e <__addsf3+0x8>
    45ae:	ba 17       	cp	r27, r26
    45b0:	62 07       	cpc	r22, r18
    45b2:	73 07       	cpc	r23, r19
    45b4:	84 07       	cpc	r24, r20
    45b6:	95 07       	cpc	r25, r21
    45b8:	18 f0       	brcs	.+6      	; 0x45c0 <__addsf3x+0x18>
    45ba:	71 f4       	brne	.+28     	; 0x45d8 <__addsf3x+0x30>
    45bc:	9e f5       	brtc	.+102    	; 0x4624 <__addsf3x+0x7c>
    45be:	a3 c1       	rjmp	.+838    	; 0x4906 <__fp_zero>
    45c0:	0e f4       	brtc	.+2      	; 0x45c4 <__addsf3x+0x1c>
    45c2:	e0 95       	com	r30
    45c4:	0b 2e       	mov	r0, r27
    45c6:	ba 2f       	mov	r27, r26
    45c8:	a0 2d       	mov	r26, r0
    45ca:	0b 01       	movw	r0, r22
    45cc:	b9 01       	movw	r22, r18
    45ce:	90 01       	movw	r18, r0
    45d0:	0c 01       	movw	r0, r24
    45d2:	ca 01       	movw	r24, r20
    45d4:	a0 01       	movw	r20, r0
    45d6:	11 24       	eor	r1, r1
    45d8:	ff 27       	eor	r31, r31
    45da:	59 1b       	sub	r21, r25
    45dc:	99 f0       	breq	.+38     	; 0x4604 <__addsf3x+0x5c>
    45de:	59 3f       	cpi	r21, 0xF9	; 249
    45e0:	50 f4       	brcc	.+20     	; 0x45f6 <__addsf3x+0x4e>
    45e2:	50 3e       	cpi	r21, 0xE0	; 224
    45e4:	68 f1       	brcs	.+90     	; 0x4640 <__addsf3x+0x98>
    45e6:	1a 16       	cp	r1, r26
    45e8:	f0 40       	sbci	r31, 0x00	; 0
    45ea:	a2 2f       	mov	r26, r18
    45ec:	23 2f       	mov	r18, r19
    45ee:	34 2f       	mov	r19, r20
    45f0:	44 27       	eor	r20, r20
    45f2:	58 5f       	subi	r21, 0xF8	; 248
    45f4:	f3 cf       	rjmp	.-26     	; 0x45dc <__addsf3x+0x34>
    45f6:	46 95       	lsr	r20
    45f8:	37 95       	ror	r19
    45fa:	27 95       	ror	r18
    45fc:	a7 95       	ror	r26
    45fe:	f0 40       	sbci	r31, 0x00	; 0
    4600:	53 95       	inc	r21
    4602:	c9 f7       	brne	.-14     	; 0x45f6 <__addsf3x+0x4e>
    4604:	7e f4       	brtc	.+30     	; 0x4624 <__addsf3x+0x7c>
    4606:	1f 16       	cp	r1, r31
    4608:	ba 0b       	sbc	r27, r26
    460a:	62 0b       	sbc	r22, r18
    460c:	73 0b       	sbc	r23, r19
    460e:	84 0b       	sbc	r24, r20
    4610:	ba f0       	brmi	.+46     	; 0x4640 <__addsf3x+0x98>
    4612:	91 50       	subi	r25, 0x01	; 1
    4614:	a1 f0       	breq	.+40     	; 0x463e <__addsf3x+0x96>
    4616:	ff 0f       	add	r31, r31
    4618:	bb 1f       	adc	r27, r27
    461a:	66 1f       	adc	r22, r22
    461c:	77 1f       	adc	r23, r23
    461e:	88 1f       	adc	r24, r24
    4620:	c2 f7       	brpl	.-16     	; 0x4612 <__addsf3x+0x6a>
    4622:	0e c0       	rjmp	.+28     	; 0x4640 <__addsf3x+0x98>
    4624:	ba 0f       	add	r27, r26
    4626:	62 1f       	adc	r22, r18
    4628:	73 1f       	adc	r23, r19
    462a:	84 1f       	adc	r24, r20
    462c:	48 f4       	brcc	.+18     	; 0x4640 <__addsf3x+0x98>
    462e:	87 95       	ror	r24
    4630:	77 95       	ror	r23
    4632:	67 95       	ror	r22
    4634:	b7 95       	ror	r27
    4636:	f7 95       	ror	r31
    4638:	9e 3f       	cpi	r25, 0xFE	; 254
    463a:	08 f0       	brcs	.+2      	; 0x463e <__addsf3x+0x96>
    463c:	b3 cf       	rjmp	.-154    	; 0x45a4 <__addsf3+0x1e>
    463e:	93 95       	inc	r25
    4640:	88 0f       	add	r24, r24
    4642:	08 f0       	brcs	.+2      	; 0x4646 <__addsf3x+0x9e>
    4644:	99 27       	eor	r25, r25
    4646:	ee 0f       	add	r30, r30
    4648:	97 95       	ror	r25
    464a:	87 95       	ror	r24
    464c:	08 95       	ret

0000464e <cos>:
    464e:	f0 d0       	rcall	.+480    	; 0x4830 <__fp_rempio2>
    4650:	e3 95       	inc	r30
    4652:	26 c1       	rjmp	.+588    	; 0x48a0 <__fp_sinus>

00004654 <__divsf3>:
    4654:	0c d0       	rcall	.+24     	; 0x466e <__divsf3x>
    4656:	13 c1       	rjmp	.+550    	; 0x487e <__fp_round>
    4658:	e3 d0       	rcall	.+454    	; 0x4820 <__fp_pscB>
    465a:	40 f0       	brcs	.+16     	; 0x466c <__divsf3+0x18>
    465c:	da d0       	rcall	.+436    	; 0x4812 <__fp_pscA>
    465e:	30 f0       	brcs	.+12     	; 0x466c <__divsf3+0x18>
    4660:	21 f4       	brne	.+8      	; 0x466a <__divsf3+0x16>
    4662:	5f 3f       	cpi	r21, 0xFF	; 255
    4664:	19 f0       	breq	.+6      	; 0x466c <__divsf3+0x18>
    4666:	cc c0       	rjmp	.+408    	; 0x4800 <__fp_inf>
    4668:	51 11       	cpse	r21, r1
    466a:	4e c1       	rjmp	.+668    	; 0x4908 <__fp_szero>
    466c:	cf c0       	rjmp	.+414    	; 0x480c <__fp_nan>

0000466e <__divsf3x>:
    466e:	29 d1       	rcall	.+594    	; 0x48c2 <__fp_split3>
    4670:	98 f3       	brcs	.-26     	; 0x4658 <__divsf3+0x4>

00004672 <__divsf3_pse>:
    4672:	99 23       	and	r25, r25
    4674:	c9 f3       	breq	.-14     	; 0x4668 <__divsf3+0x14>
    4676:	55 23       	and	r21, r21
    4678:	b1 f3       	breq	.-20     	; 0x4666 <__divsf3+0x12>
    467a:	95 1b       	sub	r25, r21
    467c:	55 0b       	sbc	r21, r21
    467e:	bb 27       	eor	r27, r27
    4680:	aa 27       	eor	r26, r26
    4682:	62 17       	cp	r22, r18
    4684:	73 07       	cpc	r23, r19
    4686:	84 07       	cpc	r24, r20
    4688:	38 f0       	brcs	.+14     	; 0x4698 <__divsf3_pse+0x26>
    468a:	9f 5f       	subi	r25, 0xFF	; 255
    468c:	5f 4f       	sbci	r21, 0xFF	; 255
    468e:	22 0f       	add	r18, r18
    4690:	33 1f       	adc	r19, r19
    4692:	44 1f       	adc	r20, r20
    4694:	aa 1f       	adc	r26, r26
    4696:	a9 f3       	breq	.-22     	; 0x4682 <__divsf3_pse+0x10>
    4698:	33 d0       	rcall	.+102    	; 0x4700 <__divsf3_pse+0x8e>
    469a:	0e 2e       	mov	r0, r30
    469c:	3a f0       	brmi	.+14     	; 0x46ac <__divsf3_pse+0x3a>
    469e:	e0 e8       	ldi	r30, 0x80	; 128
    46a0:	30 d0       	rcall	.+96     	; 0x4702 <__divsf3_pse+0x90>
    46a2:	91 50       	subi	r25, 0x01	; 1
    46a4:	50 40       	sbci	r21, 0x00	; 0
    46a6:	e6 95       	lsr	r30
    46a8:	00 1c       	adc	r0, r0
    46aa:	ca f7       	brpl	.-14     	; 0x469e <__divsf3_pse+0x2c>
    46ac:	29 d0       	rcall	.+82     	; 0x4700 <__divsf3_pse+0x8e>
    46ae:	fe 2f       	mov	r31, r30
    46b0:	27 d0       	rcall	.+78     	; 0x4700 <__divsf3_pse+0x8e>
    46b2:	66 0f       	add	r22, r22
    46b4:	77 1f       	adc	r23, r23
    46b6:	88 1f       	adc	r24, r24
    46b8:	bb 1f       	adc	r27, r27
    46ba:	26 17       	cp	r18, r22
    46bc:	37 07       	cpc	r19, r23
    46be:	48 07       	cpc	r20, r24
    46c0:	ab 07       	cpc	r26, r27
    46c2:	b0 e8       	ldi	r27, 0x80	; 128
    46c4:	09 f0       	breq	.+2      	; 0x46c8 <__divsf3_pse+0x56>
    46c6:	bb 0b       	sbc	r27, r27
    46c8:	80 2d       	mov	r24, r0
    46ca:	bf 01       	movw	r22, r30
    46cc:	ff 27       	eor	r31, r31
    46ce:	93 58       	subi	r25, 0x83	; 131
    46d0:	5f 4f       	sbci	r21, 0xFF	; 255
    46d2:	2a f0       	brmi	.+10     	; 0x46de <__divsf3_pse+0x6c>
    46d4:	9e 3f       	cpi	r25, 0xFE	; 254
    46d6:	51 05       	cpc	r21, r1
    46d8:	68 f0       	brcs	.+26     	; 0x46f4 <__divsf3_pse+0x82>
    46da:	92 c0       	rjmp	.+292    	; 0x4800 <__fp_inf>
    46dc:	15 c1       	rjmp	.+554    	; 0x4908 <__fp_szero>
    46de:	5f 3f       	cpi	r21, 0xFF	; 255
    46e0:	ec f3       	brlt	.-6      	; 0x46dc <__divsf3_pse+0x6a>
    46e2:	98 3e       	cpi	r25, 0xE8	; 232
    46e4:	dc f3       	brlt	.-10     	; 0x46dc <__divsf3_pse+0x6a>
    46e6:	86 95       	lsr	r24
    46e8:	77 95       	ror	r23
    46ea:	67 95       	ror	r22
    46ec:	b7 95       	ror	r27
    46ee:	f7 95       	ror	r31
    46f0:	9f 5f       	subi	r25, 0xFF	; 255
    46f2:	c9 f7       	brne	.-14     	; 0x46e6 <__divsf3_pse+0x74>
    46f4:	88 0f       	add	r24, r24
    46f6:	91 1d       	adc	r25, r1
    46f8:	96 95       	lsr	r25
    46fa:	87 95       	ror	r24
    46fc:	97 f9       	bld	r25, 7
    46fe:	08 95       	ret
    4700:	e1 e0       	ldi	r30, 0x01	; 1
    4702:	66 0f       	add	r22, r22
    4704:	77 1f       	adc	r23, r23
    4706:	88 1f       	adc	r24, r24
    4708:	bb 1f       	adc	r27, r27
    470a:	62 17       	cp	r22, r18
    470c:	73 07       	cpc	r23, r19
    470e:	84 07       	cpc	r24, r20
    4710:	ba 07       	cpc	r27, r26
    4712:	20 f0       	brcs	.+8      	; 0x471c <__divsf3_pse+0xaa>
    4714:	62 1b       	sub	r22, r18
    4716:	73 0b       	sbc	r23, r19
    4718:	84 0b       	sbc	r24, r20
    471a:	ba 0b       	sbc	r27, r26
    471c:	ee 1f       	adc	r30, r30
    471e:	88 f7       	brcc	.-30     	; 0x4702 <__divsf3_pse+0x90>
    4720:	e0 95       	com	r30
    4722:	08 95       	ret

00004724 <__fixsfsi>:
    4724:	04 d0       	rcall	.+8      	; 0x472e <__fixunssfsi>
    4726:	68 94       	set
    4728:	b1 11       	cpse	r27, r1
    472a:	ee c0       	rjmp	.+476    	; 0x4908 <__fp_szero>
    472c:	08 95       	ret

0000472e <__fixunssfsi>:
    472e:	d1 d0       	rcall	.+418    	; 0x48d2 <__fp_splitA>
    4730:	88 f0       	brcs	.+34     	; 0x4754 <__fixunssfsi+0x26>
    4732:	9f 57       	subi	r25, 0x7F	; 127
    4734:	90 f0       	brcs	.+36     	; 0x475a <__fixunssfsi+0x2c>
    4736:	b9 2f       	mov	r27, r25
    4738:	99 27       	eor	r25, r25
    473a:	b7 51       	subi	r27, 0x17	; 23
    473c:	a0 f0       	brcs	.+40     	; 0x4766 <__fixunssfsi+0x38>
    473e:	d1 f0       	breq	.+52     	; 0x4774 <__fixunssfsi+0x46>
    4740:	66 0f       	add	r22, r22
    4742:	77 1f       	adc	r23, r23
    4744:	88 1f       	adc	r24, r24
    4746:	99 1f       	adc	r25, r25
    4748:	1a f0       	brmi	.+6      	; 0x4750 <__fixunssfsi+0x22>
    474a:	ba 95       	dec	r27
    474c:	c9 f7       	brne	.-14     	; 0x4740 <__fixunssfsi+0x12>
    474e:	12 c0       	rjmp	.+36     	; 0x4774 <__fixunssfsi+0x46>
    4750:	b1 30       	cpi	r27, 0x01	; 1
    4752:	81 f0       	breq	.+32     	; 0x4774 <__fixunssfsi+0x46>
    4754:	d8 d0       	rcall	.+432    	; 0x4906 <__fp_zero>
    4756:	b1 e0       	ldi	r27, 0x01	; 1
    4758:	08 95       	ret
    475a:	d5 c0       	rjmp	.+426    	; 0x4906 <__fp_zero>
    475c:	67 2f       	mov	r22, r23
    475e:	78 2f       	mov	r23, r24
    4760:	88 27       	eor	r24, r24
    4762:	b8 5f       	subi	r27, 0xF8	; 248
    4764:	39 f0       	breq	.+14     	; 0x4774 <__fixunssfsi+0x46>
    4766:	b9 3f       	cpi	r27, 0xF9	; 249
    4768:	cc f3       	brlt	.-14     	; 0x475c <__fixunssfsi+0x2e>
    476a:	86 95       	lsr	r24
    476c:	77 95       	ror	r23
    476e:	67 95       	ror	r22
    4770:	b3 95       	inc	r27
    4772:	d9 f7       	brne	.-10     	; 0x476a <__fixunssfsi+0x3c>
    4774:	3e f4       	brtc	.+14     	; 0x4784 <__fixunssfsi+0x56>
    4776:	90 95       	com	r25
    4778:	80 95       	com	r24
    477a:	70 95       	com	r23
    477c:	61 95       	neg	r22
    477e:	7f 4f       	sbci	r23, 0xFF	; 255
    4780:	8f 4f       	sbci	r24, 0xFF	; 255
    4782:	9f 4f       	sbci	r25, 0xFF	; 255
    4784:	08 95       	ret

00004786 <__floatunsisf>:
    4786:	e8 94       	clt
    4788:	09 c0       	rjmp	.+18     	; 0x479c <__floatsisf+0x12>

0000478a <__floatsisf>:
    478a:	97 fb       	bst	r25, 7
    478c:	3e f4       	brtc	.+14     	; 0x479c <__floatsisf+0x12>
    478e:	90 95       	com	r25
    4790:	80 95       	com	r24
    4792:	70 95       	com	r23
    4794:	61 95       	neg	r22
    4796:	7f 4f       	sbci	r23, 0xFF	; 255
    4798:	8f 4f       	sbci	r24, 0xFF	; 255
    479a:	9f 4f       	sbci	r25, 0xFF	; 255
    479c:	99 23       	and	r25, r25
    479e:	a9 f0       	breq	.+42     	; 0x47ca <__floatsisf+0x40>
    47a0:	f9 2f       	mov	r31, r25
    47a2:	96 e9       	ldi	r25, 0x96	; 150
    47a4:	bb 27       	eor	r27, r27
    47a6:	93 95       	inc	r25
    47a8:	f6 95       	lsr	r31
    47aa:	87 95       	ror	r24
    47ac:	77 95       	ror	r23
    47ae:	67 95       	ror	r22
    47b0:	b7 95       	ror	r27
    47b2:	f1 11       	cpse	r31, r1
    47b4:	f8 cf       	rjmp	.-16     	; 0x47a6 <__floatsisf+0x1c>
    47b6:	fa f4       	brpl	.+62     	; 0x47f6 <__floatsisf+0x6c>
    47b8:	bb 0f       	add	r27, r27
    47ba:	11 f4       	brne	.+4      	; 0x47c0 <__floatsisf+0x36>
    47bc:	60 ff       	sbrs	r22, 0
    47be:	1b c0       	rjmp	.+54     	; 0x47f6 <__floatsisf+0x6c>
    47c0:	6f 5f       	subi	r22, 0xFF	; 255
    47c2:	7f 4f       	sbci	r23, 0xFF	; 255
    47c4:	8f 4f       	sbci	r24, 0xFF	; 255
    47c6:	9f 4f       	sbci	r25, 0xFF	; 255
    47c8:	16 c0       	rjmp	.+44     	; 0x47f6 <__floatsisf+0x6c>
    47ca:	88 23       	and	r24, r24
    47cc:	11 f0       	breq	.+4      	; 0x47d2 <__floatsisf+0x48>
    47ce:	96 e9       	ldi	r25, 0x96	; 150
    47d0:	11 c0       	rjmp	.+34     	; 0x47f4 <__floatsisf+0x6a>
    47d2:	77 23       	and	r23, r23
    47d4:	21 f0       	breq	.+8      	; 0x47de <__floatsisf+0x54>
    47d6:	9e e8       	ldi	r25, 0x8E	; 142
    47d8:	87 2f       	mov	r24, r23
    47da:	76 2f       	mov	r23, r22
    47dc:	05 c0       	rjmp	.+10     	; 0x47e8 <__floatsisf+0x5e>
    47de:	66 23       	and	r22, r22
    47e0:	71 f0       	breq	.+28     	; 0x47fe <__floatsisf+0x74>
    47e2:	96 e8       	ldi	r25, 0x86	; 134
    47e4:	86 2f       	mov	r24, r22
    47e6:	70 e0       	ldi	r23, 0x00	; 0
    47e8:	60 e0       	ldi	r22, 0x00	; 0
    47ea:	2a f0       	brmi	.+10     	; 0x47f6 <__floatsisf+0x6c>
    47ec:	9a 95       	dec	r25
    47ee:	66 0f       	add	r22, r22
    47f0:	77 1f       	adc	r23, r23
    47f2:	88 1f       	adc	r24, r24
    47f4:	da f7       	brpl	.-10     	; 0x47ec <__floatsisf+0x62>
    47f6:	88 0f       	add	r24, r24
    47f8:	96 95       	lsr	r25
    47fa:	87 95       	ror	r24
    47fc:	97 f9       	bld	r25, 7
    47fe:	08 95       	ret

00004800 <__fp_inf>:
    4800:	97 f9       	bld	r25, 7
    4802:	9f 67       	ori	r25, 0x7F	; 127
    4804:	80 e8       	ldi	r24, 0x80	; 128
    4806:	70 e0       	ldi	r23, 0x00	; 0
    4808:	60 e0       	ldi	r22, 0x00	; 0
    480a:	08 95       	ret

0000480c <__fp_nan>:
    480c:	9f ef       	ldi	r25, 0xFF	; 255
    480e:	80 ec       	ldi	r24, 0xC0	; 192
    4810:	08 95       	ret

00004812 <__fp_pscA>:
    4812:	00 24       	eor	r0, r0
    4814:	0a 94       	dec	r0
    4816:	16 16       	cp	r1, r22
    4818:	17 06       	cpc	r1, r23
    481a:	18 06       	cpc	r1, r24
    481c:	09 06       	cpc	r0, r25
    481e:	08 95       	ret

00004820 <__fp_pscB>:
    4820:	00 24       	eor	r0, r0
    4822:	0a 94       	dec	r0
    4824:	12 16       	cp	r1, r18
    4826:	13 06       	cpc	r1, r19
    4828:	14 06       	cpc	r1, r20
    482a:	05 06       	cpc	r0, r21
    482c:	08 95       	ret
    482e:	ee cf       	rjmp	.-36     	; 0x480c <__fp_nan>

00004830 <__fp_rempio2>:
    4830:	50 d0       	rcall	.+160    	; 0x48d2 <__fp_splitA>
    4832:	e8 f3       	brcs	.-6      	; 0x482e <__fp_pscB+0xe>
    4834:	e8 94       	clt
    4836:	e0 e0       	ldi	r30, 0x00	; 0
    4838:	bb 27       	eor	r27, r27
    483a:	9f 57       	subi	r25, 0x7F	; 127
    483c:	f0 f0       	brcs	.+60     	; 0x487a <__fp_rempio2+0x4a>
    483e:	2a ed       	ldi	r18, 0xDA	; 218
    4840:	3f e0       	ldi	r19, 0x0F	; 15
    4842:	49 ec       	ldi	r20, 0xC9	; 201
    4844:	06 c0       	rjmp	.+12     	; 0x4852 <__fp_rempio2+0x22>
    4846:	ee 0f       	add	r30, r30
    4848:	bb 0f       	add	r27, r27
    484a:	66 1f       	adc	r22, r22
    484c:	77 1f       	adc	r23, r23
    484e:	88 1f       	adc	r24, r24
    4850:	28 f0       	brcs	.+10     	; 0x485c <__fp_rempio2+0x2c>
    4852:	b2 3a       	cpi	r27, 0xA2	; 162
    4854:	62 07       	cpc	r22, r18
    4856:	73 07       	cpc	r23, r19
    4858:	84 07       	cpc	r24, r20
    485a:	28 f0       	brcs	.+10     	; 0x4866 <__fp_rempio2+0x36>
    485c:	b2 5a       	subi	r27, 0xA2	; 162
    485e:	62 0b       	sbc	r22, r18
    4860:	73 0b       	sbc	r23, r19
    4862:	84 0b       	sbc	r24, r20
    4864:	e3 95       	inc	r30
    4866:	9a 95       	dec	r25
    4868:	72 f7       	brpl	.-36     	; 0x4846 <__fp_rempio2+0x16>
    486a:	80 38       	cpi	r24, 0x80	; 128
    486c:	30 f4       	brcc	.+12     	; 0x487a <__fp_rempio2+0x4a>
    486e:	9a 95       	dec	r25
    4870:	bb 0f       	add	r27, r27
    4872:	66 1f       	adc	r22, r22
    4874:	77 1f       	adc	r23, r23
    4876:	88 1f       	adc	r24, r24
    4878:	d2 f7       	brpl	.-12     	; 0x486e <__fp_rempio2+0x3e>
    487a:	90 48       	sbci	r25, 0x80	; 128
    487c:	b6 c0       	rjmp	.+364    	; 0x49ea <__fp_mpack_finite>

0000487e <__fp_round>:
    487e:	09 2e       	mov	r0, r25
    4880:	03 94       	inc	r0
    4882:	00 0c       	add	r0, r0
    4884:	11 f4       	brne	.+4      	; 0x488a <__fp_round+0xc>
    4886:	88 23       	and	r24, r24
    4888:	52 f0       	brmi	.+20     	; 0x489e <__fp_round+0x20>
    488a:	bb 0f       	add	r27, r27
    488c:	40 f4       	brcc	.+16     	; 0x489e <__fp_round+0x20>
    488e:	bf 2b       	or	r27, r31
    4890:	11 f4       	brne	.+4      	; 0x4896 <__fp_round+0x18>
    4892:	60 ff       	sbrs	r22, 0
    4894:	04 c0       	rjmp	.+8      	; 0x489e <__fp_round+0x20>
    4896:	6f 5f       	subi	r22, 0xFF	; 255
    4898:	7f 4f       	sbci	r23, 0xFF	; 255
    489a:	8f 4f       	sbci	r24, 0xFF	; 255
    489c:	9f 4f       	sbci	r25, 0xFF	; 255
    489e:	08 95       	ret

000048a0 <__fp_sinus>:
    48a0:	ef 93       	push	r30
    48a2:	e0 ff       	sbrs	r30, 0
    48a4:	06 c0       	rjmp	.+12     	; 0x48b2 <__fp_sinus+0x12>
    48a6:	a2 ea       	ldi	r26, 0xA2	; 162
    48a8:	2a ed       	ldi	r18, 0xDA	; 218
    48aa:	3f e0       	ldi	r19, 0x0F	; 15
    48ac:	49 ec       	ldi	r20, 0xC9	; 201
    48ae:	5f eb       	ldi	r21, 0xBF	; 191
    48b0:	7b de       	rcall	.-778    	; 0x45a8 <__addsf3x>
    48b2:	e5 df       	rcall	.-54     	; 0x487e <__fp_round>
    48b4:	0f 90       	pop	r0
    48b6:	03 94       	inc	r0
    48b8:	01 fc       	sbrc	r0, 1
    48ba:	90 58       	subi	r25, 0x80	; 128
    48bc:	ea e8       	ldi	r30, 0x8A	; 138
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	a0 c0       	rjmp	.+320    	; 0x4a02 <__fp_powsodd>

000048c2 <__fp_split3>:
    48c2:	57 fd       	sbrc	r21, 7
    48c4:	90 58       	subi	r25, 0x80	; 128
    48c6:	44 0f       	add	r20, r20
    48c8:	55 1f       	adc	r21, r21
    48ca:	59 f0       	breq	.+22     	; 0x48e2 <__fp_splitA+0x10>
    48cc:	5f 3f       	cpi	r21, 0xFF	; 255
    48ce:	71 f0       	breq	.+28     	; 0x48ec <__fp_splitA+0x1a>
    48d0:	47 95       	ror	r20

000048d2 <__fp_splitA>:
    48d2:	88 0f       	add	r24, r24
    48d4:	97 fb       	bst	r25, 7
    48d6:	99 1f       	adc	r25, r25
    48d8:	61 f0       	breq	.+24     	; 0x48f2 <__fp_splitA+0x20>
    48da:	9f 3f       	cpi	r25, 0xFF	; 255
    48dc:	79 f0       	breq	.+30     	; 0x48fc <__fp_splitA+0x2a>
    48de:	87 95       	ror	r24
    48e0:	08 95       	ret
    48e2:	12 16       	cp	r1, r18
    48e4:	13 06       	cpc	r1, r19
    48e6:	14 06       	cpc	r1, r20
    48e8:	55 1f       	adc	r21, r21
    48ea:	f2 cf       	rjmp	.-28     	; 0x48d0 <__fp_split3+0xe>
    48ec:	46 95       	lsr	r20
    48ee:	f1 df       	rcall	.-30     	; 0x48d2 <__fp_splitA>
    48f0:	08 c0       	rjmp	.+16     	; 0x4902 <__fp_splitA+0x30>
    48f2:	16 16       	cp	r1, r22
    48f4:	17 06       	cpc	r1, r23
    48f6:	18 06       	cpc	r1, r24
    48f8:	99 1f       	adc	r25, r25
    48fa:	f1 cf       	rjmp	.-30     	; 0x48de <__fp_splitA+0xc>
    48fc:	86 95       	lsr	r24
    48fe:	71 05       	cpc	r23, r1
    4900:	61 05       	cpc	r22, r1
    4902:	08 94       	sec
    4904:	08 95       	ret

00004906 <__fp_zero>:
    4906:	e8 94       	clt

00004908 <__fp_szero>:
    4908:	bb 27       	eor	r27, r27
    490a:	66 27       	eor	r22, r22
    490c:	77 27       	eor	r23, r23
    490e:	cb 01       	movw	r24, r22
    4910:	97 f9       	bld	r25, 7
    4912:	08 95       	ret

00004914 <__mulsf3>:
    4914:	0b d0       	rcall	.+22     	; 0x492c <__mulsf3x>
    4916:	b3 cf       	rjmp	.-154    	; 0x487e <__fp_round>
    4918:	7c df       	rcall	.-264    	; 0x4812 <__fp_pscA>
    491a:	28 f0       	brcs	.+10     	; 0x4926 <__mulsf3+0x12>
    491c:	81 df       	rcall	.-254    	; 0x4820 <__fp_pscB>
    491e:	18 f0       	brcs	.+6      	; 0x4926 <__mulsf3+0x12>
    4920:	95 23       	and	r25, r21
    4922:	09 f0       	breq	.+2      	; 0x4926 <__mulsf3+0x12>
    4924:	6d cf       	rjmp	.-294    	; 0x4800 <__fp_inf>
    4926:	72 cf       	rjmp	.-284    	; 0x480c <__fp_nan>
    4928:	11 24       	eor	r1, r1
    492a:	ee cf       	rjmp	.-36     	; 0x4908 <__fp_szero>

0000492c <__mulsf3x>:
    492c:	ca df       	rcall	.-108    	; 0x48c2 <__fp_split3>
    492e:	a0 f3       	brcs	.-24     	; 0x4918 <__mulsf3+0x4>

00004930 <__mulsf3_pse>:
    4930:	95 9f       	mul	r25, r21
    4932:	d1 f3       	breq	.-12     	; 0x4928 <__mulsf3+0x14>
    4934:	95 0f       	add	r25, r21
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	55 1f       	adc	r21, r21
    493a:	62 9f       	mul	r22, r18
    493c:	f0 01       	movw	r30, r0
    493e:	72 9f       	mul	r23, r18
    4940:	bb 27       	eor	r27, r27
    4942:	f0 0d       	add	r31, r0
    4944:	b1 1d       	adc	r27, r1
    4946:	63 9f       	mul	r22, r19
    4948:	aa 27       	eor	r26, r26
    494a:	f0 0d       	add	r31, r0
    494c:	b1 1d       	adc	r27, r1
    494e:	aa 1f       	adc	r26, r26
    4950:	64 9f       	mul	r22, r20
    4952:	66 27       	eor	r22, r22
    4954:	b0 0d       	add	r27, r0
    4956:	a1 1d       	adc	r26, r1
    4958:	66 1f       	adc	r22, r22
    495a:	82 9f       	mul	r24, r18
    495c:	22 27       	eor	r18, r18
    495e:	b0 0d       	add	r27, r0
    4960:	a1 1d       	adc	r26, r1
    4962:	62 1f       	adc	r22, r18
    4964:	73 9f       	mul	r23, r19
    4966:	b0 0d       	add	r27, r0
    4968:	a1 1d       	adc	r26, r1
    496a:	62 1f       	adc	r22, r18
    496c:	83 9f       	mul	r24, r19
    496e:	a0 0d       	add	r26, r0
    4970:	61 1d       	adc	r22, r1
    4972:	22 1f       	adc	r18, r18
    4974:	74 9f       	mul	r23, r20
    4976:	33 27       	eor	r19, r19
    4978:	a0 0d       	add	r26, r0
    497a:	61 1d       	adc	r22, r1
    497c:	23 1f       	adc	r18, r19
    497e:	84 9f       	mul	r24, r20
    4980:	60 0d       	add	r22, r0
    4982:	21 1d       	adc	r18, r1
    4984:	82 2f       	mov	r24, r18
    4986:	76 2f       	mov	r23, r22
    4988:	6a 2f       	mov	r22, r26
    498a:	11 24       	eor	r1, r1
    498c:	9f 57       	subi	r25, 0x7F	; 127
    498e:	50 40       	sbci	r21, 0x00	; 0
    4990:	8a f0       	brmi	.+34     	; 0x49b4 <__mulsf3_pse+0x84>
    4992:	e1 f0       	breq	.+56     	; 0x49cc <__mulsf3_pse+0x9c>
    4994:	88 23       	and	r24, r24
    4996:	4a f0       	brmi	.+18     	; 0x49aa <__mulsf3_pse+0x7a>
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	bb 1f       	adc	r27, r27
    499e:	66 1f       	adc	r22, r22
    49a0:	77 1f       	adc	r23, r23
    49a2:	88 1f       	adc	r24, r24
    49a4:	91 50       	subi	r25, 0x01	; 1
    49a6:	50 40       	sbci	r21, 0x00	; 0
    49a8:	a9 f7       	brne	.-22     	; 0x4994 <__mulsf3_pse+0x64>
    49aa:	9e 3f       	cpi	r25, 0xFE	; 254
    49ac:	51 05       	cpc	r21, r1
    49ae:	70 f0       	brcs	.+28     	; 0x49cc <__mulsf3_pse+0x9c>
    49b0:	27 cf       	rjmp	.-434    	; 0x4800 <__fp_inf>
    49b2:	aa cf       	rjmp	.-172    	; 0x4908 <__fp_szero>
    49b4:	5f 3f       	cpi	r21, 0xFF	; 255
    49b6:	ec f3       	brlt	.-6      	; 0x49b2 <__mulsf3_pse+0x82>
    49b8:	98 3e       	cpi	r25, 0xE8	; 232
    49ba:	dc f3       	brlt	.-10     	; 0x49b2 <__mulsf3_pse+0x82>
    49bc:	86 95       	lsr	r24
    49be:	77 95       	ror	r23
    49c0:	67 95       	ror	r22
    49c2:	b7 95       	ror	r27
    49c4:	f7 95       	ror	r31
    49c6:	e7 95       	ror	r30
    49c8:	9f 5f       	subi	r25, 0xFF	; 255
    49ca:	c1 f7       	brne	.-16     	; 0x49bc <__mulsf3_pse+0x8c>
    49cc:	fe 2b       	or	r31, r30
    49ce:	88 0f       	add	r24, r24
    49d0:	91 1d       	adc	r25, r1
    49d2:	96 95       	lsr	r25
    49d4:	87 95       	ror	r24
    49d6:	97 f9       	bld	r25, 7
    49d8:	08 95       	ret

000049da <sin>:
    49da:	9f 93       	push	r25
    49dc:	29 df       	rcall	.-430    	; 0x4830 <__fp_rempio2>
    49de:	0f 90       	pop	r0
    49e0:	07 fc       	sbrc	r0, 7
    49e2:	ee 5f       	subi	r30, 0xFE	; 254
    49e4:	5d cf       	rjmp	.-326    	; 0x48a0 <__fp_sinus>

000049e6 <__fp_mpack>:
    49e6:	9f 3f       	cpi	r25, 0xFF	; 255
    49e8:	31 f0       	breq	.+12     	; 0x49f6 <__fp_mpack_finite+0xc>

000049ea <__fp_mpack_finite>:
    49ea:	91 50       	subi	r25, 0x01	; 1
    49ec:	20 f4       	brcc	.+8      	; 0x49f6 <__fp_mpack_finite+0xc>
    49ee:	87 95       	ror	r24
    49f0:	77 95       	ror	r23
    49f2:	67 95       	ror	r22
    49f4:	b7 95       	ror	r27
    49f6:	88 0f       	add	r24, r24
    49f8:	91 1d       	adc	r25, r1
    49fa:	96 95       	lsr	r25
    49fc:	87 95       	ror	r24
    49fe:	97 f9       	bld	r25, 7
    4a00:	08 95       	ret

00004a02 <__fp_powsodd>:
    4a02:	9f 93       	push	r25
    4a04:	8f 93       	push	r24
    4a06:	7f 93       	push	r23
    4a08:	6f 93       	push	r22
    4a0a:	ff 93       	push	r31
    4a0c:	ef 93       	push	r30
    4a0e:	9b 01       	movw	r18, r22
    4a10:	ac 01       	movw	r20, r24
    4a12:	80 df       	rcall	.-256    	; 0x4914 <__mulsf3>
    4a14:	ef 91       	pop	r30
    4a16:	ff 91       	pop	r31
    4a18:	05 d0       	rcall	.+10     	; 0x4a24 <__fp_powser>
    4a1a:	2f 91       	pop	r18
    4a1c:	3f 91       	pop	r19
    4a1e:	4f 91       	pop	r20
    4a20:	5f 91       	pop	r21
    4a22:	78 cf       	rjmp	.-272    	; 0x4914 <__mulsf3>

00004a24 <__fp_powser>:
    4a24:	df 93       	push	r29
    4a26:	cf 93       	push	r28
    4a28:	1f 93       	push	r17
    4a2a:	0f 93       	push	r16
    4a2c:	ff 92       	push	r15
    4a2e:	ef 92       	push	r14
    4a30:	df 92       	push	r13
    4a32:	7b 01       	movw	r14, r22
    4a34:	8c 01       	movw	r16, r24
    4a36:	68 94       	set
    4a38:	05 c0       	rjmp	.+10     	; 0x4a44 <__fp_powser+0x20>
    4a3a:	da 2e       	mov	r13, r26
    4a3c:	ef 01       	movw	r28, r30
    4a3e:	76 df       	rcall	.-276    	; 0x492c <__mulsf3x>
    4a40:	fe 01       	movw	r30, r28
    4a42:	e8 94       	clt
    4a44:	a5 91       	lpm	r26, Z+
    4a46:	25 91       	lpm	r18, Z+
    4a48:	35 91       	lpm	r19, Z+
    4a4a:	45 91       	lpm	r20, Z+
    4a4c:	55 91       	lpm	r21, Z+
    4a4e:	ae f3       	brts	.-22     	; 0x4a3a <__fp_powser+0x16>
    4a50:	ef 01       	movw	r28, r30
    4a52:	aa dd       	rcall	.-1196   	; 0x45a8 <__addsf3x>
    4a54:	fe 01       	movw	r30, r28
    4a56:	97 01       	movw	r18, r14
    4a58:	a8 01       	movw	r20, r16
    4a5a:	da 94       	dec	r13
    4a5c:	79 f7       	brne	.-34     	; 0x4a3c <__fp_powser+0x18>
    4a5e:	df 90       	pop	r13
    4a60:	ef 90       	pop	r14
    4a62:	ff 90       	pop	r15
    4a64:	0f 91       	pop	r16
    4a66:	1f 91       	pop	r17
    4a68:	cf 91       	pop	r28
    4a6a:	df 91       	pop	r29
    4a6c:	08 95       	ret

00004a6e <__udivmodqi4>:
    4a6e:	99 1b       	sub	r25, r25
    4a70:	79 e0       	ldi	r23, 0x09	; 9
    4a72:	04 c0       	rjmp	.+8      	; 0x4a7c <__udivmodqi4_ep>

00004a74 <__udivmodqi4_loop>:
    4a74:	99 1f       	adc	r25, r25
    4a76:	96 17       	cp	r25, r22
    4a78:	08 f0       	brcs	.+2      	; 0x4a7c <__udivmodqi4_ep>
    4a7a:	96 1b       	sub	r25, r22

00004a7c <__udivmodqi4_ep>:
    4a7c:	88 1f       	adc	r24, r24
    4a7e:	7a 95       	dec	r23
    4a80:	c9 f7       	brne	.-14     	; 0x4a74 <__udivmodqi4_loop>
    4a82:	80 95       	com	r24
    4a84:	08 95       	ret

00004a86 <__divmodhi4>:
    4a86:	97 fb       	bst	r25, 7
    4a88:	09 2e       	mov	r0, r25
    4a8a:	07 26       	eor	r0, r23
    4a8c:	0a d0       	rcall	.+20     	; 0x4aa2 <__divmodhi4_neg1>
    4a8e:	77 fd       	sbrc	r23, 7
    4a90:	04 d0       	rcall	.+8      	; 0x4a9a <__divmodhi4_neg2>
    4a92:	0c d0       	rcall	.+24     	; 0x4aac <__udivmodhi4>
    4a94:	06 d0       	rcall	.+12     	; 0x4aa2 <__divmodhi4_neg1>
    4a96:	00 20       	and	r0, r0
    4a98:	1a f4       	brpl	.+6      	; 0x4aa0 <__divmodhi4_exit>

00004a9a <__divmodhi4_neg2>:
    4a9a:	70 95       	com	r23
    4a9c:	61 95       	neg	r22
    4a9e:	7f 4f       	sbci	r23, 0xFF	; 255

00004aa0 <__divmodhi4_exit>:
    4aa0:	08 95       	ret

00004aa2 <__divmodhi4_neg1>:
    4aa2:	f6 f7       	brtc	.-4      	; 0x4aa0 <__divmodhi4_exit>
    4aa4:	90 95       	com	r25
    4aa6:	81 95       	neg	r24
    4aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aaa:	08 95       	ret

00004aac <__udivmodhi4>:
    4aac:	aa 1b       	sub	r26, r26
    4aae:	bb 1b       	sub	r27, r27
    4ab0:	51 e1       	ldi	r21, 0x11	; 17
    4ab2:	07 c0       	rjmp	.+14     	; 0x4ac2 <__udivmodhi4_ep>

00004ab4 <__udivmodhi4_loop>:
    4ab4:	aa 1f       	adc	r26, r26
    4ab6:	bb 1f       	adc	r27, r27
    4ab8:	a6 17       	cp	r26, r22
    4aba:	b7 07       	cpc	r27, r23
    4abc:	10 f0       	brcs	.+4      	; 0x4ac2 <__udivmodhi4_ep>
    4abe:	a6 1b       	sub	r26, r22
    4ac0:	b7 0b       	sbc	r27, r23

00004ac2 <__udivmodhi4_ep>:
    4ac2:	88 1f       	adc	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	5a 95       	dec	r21
    4ac8:	a9 f7       	brne	.-22     	; 0x4ab4 <__udivmodhi4_loop>
    4aca:	80 95       	com	r24
    4acc:	90 95       	com	r25
    4ace:	bc 01       	movw	r22, r24
    4ad0:	cd 01       	movw	r24, r26
    4ad2:	08 95       	ret

00004ad4 <do_rand>:
    4ad4:	8f 92       	push	r8
    4ad6:	9f 92       	push	r9
    4ad8:	af 92       	push	r10
    4ada:	bf 92       	push	r11
    4adc:	cf 92       	push	r12
    4ade:	df 92       	push	r13
    4ae0:	ef 92       	push	r14
    4ae2:	ff 92       	push	r15
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	ec 01       	movw	r28, r24
    4aea:	88 81       	ld	r24, Y
    4aec:	99 81       	ldd	r25, Y+1	; 0x01
    4aee:	aa 81       	ldd	r26, Y+2	; 0x02
    4af0:	bb 81       	ldd	r27, Y+3	; 0x03
    4af2:	00 97       	sbiw	r24, 0x00	; 0
    4af4:	a1 05       	cpc	r26, r1
    4af6:	b1 05       	cpc	r27, r1
    4af8:	21 f4       	brne	.+8      	; 0x4b02 <do_rand+0x2e>
    4afa:	84 e2       	ldi	r24, 0x24	; 36
    4afc:	99 ed       	ldi	r25, 0xD9	; 217
    4afe:	ab e5       	ldi	r26, 0x5B	; 91
    4b00:	b7 e0       	ldi	r27, 0x07	; 7
    4b02:	bc 01       	movw	r22, r24
    4b04:	cd 01       	movw	r24, r26
    4b06:	2d e1       	ldi	r18, 0x1D	; 29
    4b08:	33 ef       	ldi	r19, 0xF3	; 243
    4b0a:	41 e0       	ldi	r20, 0x01	; 1
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <__divmodsi4>
    4b12:	49 01       	movw	r8, r18
    4b14:	5a 01       	movw	r10, r20
    4b16:	27 ea       	ldi	r18, 0xA7	; 167
    4b18:	31 e4       	ldi	r19, 0x41	; 65
    4b1a:	40 e0       	ldi	r20, 0x00	; 0
    4b1c:	50 e0       	ldi	r21, 0x00	; 0
    4b1e:	0e 94 03 26 	call	0x4c06	; 0x4c06 <__mulsi3>
    4b22:	6b 01       	movw	r12, r22
    4b24:	7c 01       	movw	r14, r24
    4b26:	c5 01       	movw	r24, r10
    4b28:	b4 01       	movw	r22, r8
    4b2a:	2c ee       	ldi	r18, 0xEC	; 236
    4b2c:	34 ef       	ldi	r19, 0xF4	; 244
    4b2e:	4f ef       	ldi	r20, 0xFF	; 255
    4b30:	5f ef       	ldi	r21, 0xFF	; 255
    4b32:	0e 94 03 26 	call	0x4c06	; 0x4c06 <__mulsi3>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	c8 0e       	add	r12, r24
    4b3c:	d9 1e       	adc	r13, r25
    4b3e:	ea 1e       	adc	r14, r26
    4b40:	fb 1e       	adc	r15, r27
    4b42:	f7 fe       	sbrs	r15, 7
    4b44:	08 c0       	rjmp	.+16     	; 0x4b56 <do_rand+0x82>
    4b46:	8f ef       	ldi	r24, 0xFF	; 255
    4b48:	9f ef       	ldi	r25, 0xFF	; 255
    4b4a:	af ef       	ldi	r26, 0xFF	; 255
    4b4c:	bf e7       	ldi	r27, 0x7F	; 127
    4b4e:	c8 0e       	add	r12, r24
    4b50:	d9 1e       	adc	r13, r25
    4b52:	ea 1e       	adc	r14, r26
    4b54:	fb 1e       	adc	r15, r27
    4b56:	c8 82       	st	Y, r12
    4b58:	d9 82       	std	Y+1, r13	; 0x01
    4b5a:	ea 82       	std	Y+2, r14	; 0x02
    4b5c:	fb 82       	std	Y+3, r15	; 0x03
    4b5e:	c6 01       	movw	r24, r12
    4b60:	9f 77       	andi	r25, 0x7F	; 127
    4b62:	df 91       	pop	r29
    4b64:	cf 91       	pop	r28
    4b66:	ff 90       	pop	r15
    4b68:	ef 90       	pop	r14
    4b6a:	df 90       	pop	r13
    4b6c:	cf 90       	pop	r12
    4b6e:	bf 90       	pop	r11
    4b70:	af 90       	pop	r10
    4b72:	9f 90       	pop	r9
    4b74:	8f 90       	pop	r8
    4b76:	08 95       	ret

00004b78 <rand_r>:
    4b78:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <do_rand>
    4b7c:	08 95       	ret

00004b7e <rand>:
    4b7e:	8f e9       	ldi	r24, 0x9F	; 159
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <do_rand>
    4b86:	08 95       	ret

00004b88 <srand>:
    4b88:	a0 e0       	ldi	r26, 0x00	; 0
    4b8a:	b0 e0       	ldi	r27, 0x00	; 0
    4b8c:	80 93 9f 00 	sts	0x009F, r24
    4b90:	90 93 a0 00 	sts	0x00A0, r25
    4b94:	a0 93 a1 00 	sts	0x00A1, r26
    4b98:	b0 93 a2 00 	sts	0x00A2, r27
    4b9c:	08 95       	ret

00004b9e <strtok>:
    4b9e:	46 ea       	ldi	r20, 0xA6	; 166
    4ba0:	50 e0       	ldi	r21, 0x00	; 0
    4ba2:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <strtok_r>
    4ba6:	08 95       	ret

00004ba8 <strtok_r>:
    4ba8:	fa 01       	movw	r30, r20
    4baa:	a1 91       	ld	r26, Z+
    4bac:	b0 81       	ld	r27, Z
    4bae:	00 97       	sbiw	r24, 0x00	; 0
    4bb0:	19 f4       	brne	.+6      	; 0x4bb8 <strtok_r+0x10>
    4bb2:	10 97       	sbiw	r26, 0x00	; 0
    4bb4:	e1 f0       	breq	.+56     	; 0x4bee <strtok_r+0x46>
    4bb6:	cd 01       	movw	r24, r26
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cd 01       	movw	r24, r26
    4bbc:	0d 90       	ld	r0, X+
    4bbe:	00 20       	and	r0, r0
    4bc0:	11 f4       	brne	.+4      	; 0x4bc6 <strtok_r+0x1e>
    4bc2:	c0 01       	movw	r24, r0
    4bc4:	13 c0       	rjmp	.+38     	; 0x4bec <strtok_r+0x44>
    4bc6:	fb 01       	movw	r30, r22
    4bc8:	21 91       	ld	r18, Z+
    4bca:	22 23       	and	r18, r18
    4bcc:	19 f0       	breq	.+6      	; 0x4bd4 <strtok_r+0x2c>
    4bce:	20 15       	cp	r18, r0
    4bd0:	d9 f7       	brne	.-10     	; 0x4bc8 <strtok_r+0x20>
    4bd2:	f3 cf       	rjmp	.-26     	; 0x4bba <strtok_r+0x12>
    4bd4:	fb 01       	movw	r30, r22
    4bd6:	21 91       	ld	r18, Z+
    4bd8:	20 15       	cp	r18, r0
    4bda:	19 f4       	brne	.+6      	; 0x4be2 <strtok_r+0x3a>
    4bdc:	1e 92       	st	-X, r1
    4bde:	11 96       	adiw	r26, 0x01	; 1
    4be0:	06 c0       	rjmp	.+12     	; 0x4bee <strtok_r+0x46>
    4be2:	22 23       	and	r18, r18
    4be4:	c1 f7       	brne	.-16     	; 0x4bd6 <strtok_r+0x2e>
    4be6:	0d 90       	ld	r0, X+
    4be8:	00 20       	and	r0, r0
    4bea:	a1 f7       	brne	.-24     	; 0x4bd4 <strtok_r+0x2c>
    4bec:	d0 01       	movw	r26, r0
    4bee:	fa 01       	movw	r30, r20
    4bf0:	a1 93       	st	Z+, r26
    4bf2:	b0 83       	st	Z, r27
    4bf4:	08 95       	ret

00004bf6 <__eerd_byte_m32>:
    4bf6:	e1 99       	sbic	0x1c, 1	; 28
    4bf8:	fe cf       	rjmp	.-4      	; 0x4bf6 <__eerd_byte_m32>
    4bfa:	9f bb       	out	0x1f, r25	; 31
    4bfc:	8e bb       	out	0x1e, r24	; 30
    4bfe:	e0 9a       	sbi	0x1c, 0	; 28
    4c00:	99 27       	eor	r25, r25
    4c02:	8d b3       	in	r24, 0x1d	; 29
    4c04:	08 95       	ret

00004c06 <__mulsi3>:
    4c06:	62 9f       	mul	r22, r18
    4c08:	d0 01       	movw	r26, r0
    4c0a:	73 9f       	mul	r23, r19
    4c0c:	f0 01       	movw	r30, r0
    4c0e:	82 9f       	mul	r24, r18
    4c10:	e0 0d       	add	r30, r0
    4c12:	f1 1d       	adc	r31, r1
    4c14:	64 9f       	mul	r22, r20
    4c16:	e0 0d       	add	r30, r0
    4c18:	f1 1d       	adc	r31, r1
    4c1a:	92 9f       	mul	r25, r18
    4c1c:	f0 0d       	add	r31, r0
    4c1e:	83 9f       	mul	r24, r19
    4c20:	f0 0d       	add	r31, r0
    4c22:	74 9f       	mul	r23, r20
    4c24:	f0 0d       	add	r31, r0
    4c26:	65 9f       	mul	r22, r21
    4c28:	f0 0d       	add	r31, r0
    4c2a:	99 27       	eor	r25, r25
    4c2c:	72 9f       	mul	r23, r18
    4c2e:	b0 0d       	add	r27, r0
    4c30:	e1 1d       	adc	r30, r1
    4c32:	f9 1f       	adc	r31, r25
    4c34:	63 9f       	mul	r22, r19
    4c36:	b0 0d       	add	r27, r0
    4c38:	e1 1d       	adc	r30, r1
    4c3a:	f9 1f       	adc	r31, r25
    4c3c:	bd 01       	movw	r22, r26
    4c3e:	cf 01       	movw	r24, r30
    4c40:	11 24       	eor	r1, r1
    4c42:	08 95       	ret

00004c44 <__divmodsi4>:
    4c44:	97 fb       	bst	r25, 7
    4c46:	09 2e       	mov	r0, r25
    4c48:	05 26       	eor	r0, r21
    4c4a:	0e d0       	rcall	.+28     	; 0x4c68 <__divmodsi4_neg1>
    4c4c:	57 fd       	sbrc	r21, 7
    4c4e:	04 d0       	rcall	.+8      	; 0x4c58 <__divmodsi4_neg2>
    4c50:	14 d0       	rcall	.+40     	; 0x4c7a <__udivmodsi4>
    4c52:	0a d0       	rcall	.+20     	; 0x4c68 <__divmodsi4_neg1>
    4c54:	00 1c       	adc	r0, r0
    4c56:	38 f4       	brcc	.+14     	; 0x4c66 <__divmodsi4_exit>

00004c58 <__divmodsi4_neg2>:
    4c58:	50 95       	com	r21
    4c5a:	40 95       	com	r20
    4c5c:	30 95       	com	r19
    4c5e:	21 95       	neg	r18
    4c60:	3f 4f       	sbci	r19, 0xFF	; 255
    4c62:	4f 4f       	sbci	r20, 0xFF	; 255
    4c64:	5f 4f       	sbci	r21, 0xFF	; 255

00004c66 <__divmodsi4_exit>:
    4c66:	08 95       	ret

00004c68 <__divmodsi4_neg1>:
    4c68:	f6 f7       	brtc	.-4      	; 0x4c66 <__divmodsi4_exit>
    4c6a:	90 95       	com	r25
    4c6c:	80 95       	com	r24
    4c6e:	70 95       	com	r23
    4c70:	61 95       	neg	r22
    4c72:	7f 4f       	sbci	r23, 0xFF	; 255
    4c74:	8f 4f       	sbci	r24, 0xFF	; 255
    4c76:	9f 4f       	sbci	r25, 0xFF	; 255
    4c78:	08 95       	ret

00004c7a <__udivmodsi4>:
    4c7a:	a1 e2       	ldi	r26, 0x21	; 33
    4c7c:	1a 2e       	mov	r1, r26
    4c7e:	aa 1b       	sub	r26, r26
    4c80:	bb 1b       	sub	r27, r27
    4c82:	fd 01       	movw	r30, r26
    4c84:	0d c0       	rjmp	.+26     	; 0x4ca0 <__udivmodsi4_ep>

00004c86 <__udivmodsi4_loop>:
    4c86:	aa 1f       	adc	r26, r26
    4c88:	bb 1f       	adc	r27, r27
    4c8a:	ee 1f       	adc	r30, r30
    4c8c:	ff 1f       	adc	r31, r31
    4c8e:	a2 17       	cp	r26, r18
    4c90:	b3 07       	cpc	r27, r19
    4c92:	e4 07       	cpc	r30, r20
    4c94:	f5 07       	cpc	r31, r21
    4c96:	20 f0       	brcs	.+8      	; 0x4ca0 <__udivmodsi4_ep>
    4c98:	a2 1b       	sub	r26, r18
    4c9a:	b3 0b       	sbc	r27, r19
    4c9c:	e4 0b       	sbc	r30, r20
    4c9e:	f5 0b       	sbc	r31, r21

00004ca0 <__udivmodsi4_ep>:
    4ca0:	66 1f       	adc	r22, r22
    4ca2:	77 1f       	adc	r23, r23
    4ca4:	88 1f       	adc	r24, r24
    4ca6:	99 1f       	adc	r25, r25
    4ca8:	1a 94       	dec	r1
    4caa:	69 f7       	brne	.-38     	; 0x4c86 <__udivmodsi4_loop>
    4cac:	60 95       	com	r22
    4cae:	70 95       	com	r23
    4cb0:	80 95       	com	r24
    4cb2:	90 95       	com	r25
    4cb4:	9b 01       	movw	r18, r22
    4cb6:	ac 01       	movw	r20, r24
    4cb8:	bd 01       	movw	r22, r26
    4cba:	cf 01       	movw	r24, r30
    4cbc:	08 95       	ret

00004cbe <_exit>:
    4cbe:	f8 94       	cli

00004cc0 <__stop_program>:
    4cc0:	ff cf       	rjmp	.-2      	; 0x4cc0 <__stop_program>
