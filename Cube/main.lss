
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000490a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000490a  000049be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e6  00800098  00800098  000049f6  2**0
                  ALLOC
  3 .eeprom       000001f9  00810000  00810000  000049f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000140  00000000  00000000  00004bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000a86  00000000  00000000  00004d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331d  00000000  00000000  000057b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cca  00000000  00000000  00008ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b61  00000000  00000000  0000979c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  0000c300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008df  00000000  00000000  0000c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c15  00000000  00000000  0000d28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000fea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__ctors_end>
       4:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
       8:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
       c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      10:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_4>
      14:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      18:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      1c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      20:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      24:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      28:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_10>
      2c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      30:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      34:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <__vector_13>
      38:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__vector_14>
      3c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      40:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      44:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      48:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      4c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      50:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__bad_interrupt>
      54:	6e 1b       	sub	r22, r30
      56:	78 1b       	sub	r23, r24
      58:	86 1b       	sub	r24, r22
      5a:	a4 1b       	sub	r26, r20
      5c:	b0 1b       	sub	r27, r16
      5e:	b8 1b       	sub	r27, r24
      60:	c0 1b       	sub	r28, r16
      62:	f1 1b       	sub	r31, r17
      64:	1b 1c       	adc	r1, r11
      66:	41 1c       	adc	r4, r1
      68:	8f 1c       	adc	r8, r15
      6a:	99 1c       	adc	r9, r9
      6c:	a5 1c       	adc	r10, r5
      6e:	ad 1c       	adc	r10, r13
      70:	de 1c       	adc	r13, r14
      72:	32 1d       	adc	r19, r2
      74:	3e 1d       	adc	r19, r14
      76:	49 1d       	adc	r20, r9
      78:	55 1d       	adc	r21, r5
      7a:	62 1d       	adc	r22, r2
      7c:	6d 1d       	adc	r22, r13
      7e:	7a 1d       	adc	r23, r10
      80:	86 1d       	adc	r24, r6
      82:	89 1d       	adc	r24, r9
      84:	96 1d       	adc	r25, r6
      86:	9e 1d       	adc	r25, r14
      88:	b0 1d       	adc	r27, r0
      8a:	05 a8       	ldd	r0, Z+53	; 0x35
      8c:	4c cd       	rjmp	.-1384   	; 0xfffffb26 <__eeprom_end+0xff7ef92d>
      8e:	b2 d4       	rcall	.+2404   	; 0x9f4 <setplane+0x2e>
      90:	4e b9       	out	0x0e, r20	; 14
      92:	38 36       	cpi	r19, 0x68	; 104
      94:	a9 02       	muls	r26, r25
      96:	0c 50       	subi	r16, 0x0C	; 12
      98:	b9 91       	ld	r27, Y+
      9a:	86 88       	ldd	r8, Z+22	; 0x16
      9c:	08 3c       	cpi	r16, 0xC8	; 200
      9e:	a6 aa       	std	Z+54, r10	; 0x36
      a0:	aa 2a       	or	r10, r26
      a2:	be 00       	.word	0x00be	; ????
      a4:	00 00       	nop
      a6:	80 3f       	cpi	r24, 0xF0	; 240

000000a8 <paths>:
      a8:	07 06 05 04 03 02 01 00 10 20 30 40 50 60 70 71     ......... 0@P`pq
      b8:	72 73 74 75 76 77 67 57 47 37 27 17 04 03 12 21     rstuvwgWG7'....!
      c8:	30 40 51 62 73 74 65 56 47 37 26 15                 0@QbsteVG7&.

000000d4 <__c.1788>:
      d4:	46 41 49 4c 00                                      FAIL.

000000d9 <__c.1786>:
      d9:	46 61 69 6c 0d 0a 00                                Fail...

000000e0 <__c.1783>:
      e0:	32 36 3a 20 42 6f 69 6e 67 20 62 6f 69 6e 67 0d     26: Boing boing.
      f0:	0a 00                                               ..

000000f2 <__c.1780>:
      f2:	32 35 3a 20 57 6f 72 6d 20 73 71 75 65 65 7a 65     25: Worm squeeze
     102:	0d 0a 00                                            ...

00000105 <__c.1777>:
     105:	32 34 3a 20 52 61 6e 64 6f 6d 20 73 70 61 72 6b     24: Random spark
     115:	6c 65 0d 0a 00                                      le...

0000011a <__c.1774>:
     11a:	32 33 3a 20 53 6d 69 6c 65 79 20 73 70 69 6e 0d     23: Smiley spin.
     12a:	0a 00                                               ..

0000012c <__c.1771>:
     12c:	32 32 3a 20 57 6f 72 6d 20 73 71 75 65 65 7a 65     22: Worm squeeze
     13c:	0d 0a 00                                            ...

0000013f <__c.1768>:
     13f:	32 31 3a 20 50 61 74 68 20 74 65 78 74 0d 0a 00     21: Path text...

0000014f <__c.1765>:
     14f:	32 30 3a 20 50 61 74 68 20 74 65 78 74 0d 0a 00     20: Path text...

0000015f <__c.1762>:
     15f:	31 39 3a 20 53 6d 69 6c 65 79 20 73 70 69 6e 0d     19: Smiley spin.
     16f:	0a 00                                               ..

00000171 <__c.1759>:
     171:	31 38 3a 20 50 61 74 68 20 62 69 74 6d 61 70 0d     18: Path bitmap.
     181:	0a 00                                               ..

00000183 <__c.1756>:
     183:	31 37 3a 20 50 61 74 68 20 73 70 69 72 61 6c 0d     17: Path spiral.
     193:	0a 00                                               ..

00000195 <__c.1753>:
     195:	31 36 3a 20 53 6d 69 6c 65 79 20 73 70 69 6e 0d     16: Smiley spin.
     1a5:	0a 00                                               ..

000001a7 <__c.1750>:
     1a7:	31 35 3a 20 42 6f 69 6e 67 20 62 6f 69 6e 67 0d     15: Boing boing.
     1b7:	0a 00                                               ..

000001b9 <__c.1747>:
     1b9:	31 34 3a 20 46 6c 79 69 6e 67 20 62 6f 78 65 73     14: Flying boxes
     1c9:	3f 0d 0a 00                                         ?...

000001cd <__c.1741>:
     1cd:	31 33 3a 20 47 61 6d 65 20 6f 66 20 4c 69 66 65     13: Game of Life
     1dd:	0d 0a 00                                            ...

000001e0 <__c.1738>:
     1e0:	49 4e 53 54 52 55 43 54 41 42 4c 45 53 00           INSTRUCTABLES.

000001ee <__c.1736>:
     1ee:	31 32 3a 20 53 74 72 69 6e 67 20 66 6c 79 0d 0a     12: String fly..
	...

000001ff <__c.1733>:
     1ff:	31 31 3a 20 57 6f 72 6d 20 73 71 75 65 65 7a 65     11: Worm squeeze
     20f:	0d 0a 00                                            ...

00000212 <__c.1730>:
     212:	31 30 3a 20 4c 6f 61 64 20 62 61 72 0d 0a 00        10: Load bar...

00000221 <__c.1727>:
     221:	39 3a 20 53 75 73 70 65 6e 64 20 72 61 6e 64 6f     9: Suspend rando
     231:	6d 0d 0a 00                                         m...

00000235 <__c.1724>:
     235:	38 3a 20 54 65 6c 63 20 73 74 61 69 72 73 0d 0a     8: Telc stairs..
	...

00000246 <__c.1721>:
     246:	37 3a 20 50 6c 61 6e 62 6f 69 6e 67 0d 0a 00        7: Planboing...

00000255 <__c.1715>:
     255:	36 3a 20 42 6f 78 65 73 0d 0a 00                    6: Boxes...

00000260 <__c.1712>:
     260:	35 3a 20 42 6c 69 6e 6b 79 0d 0a 00                 5: Blinky...

0000026c <__c.1709>:
     26c:	34 3a 20 57 6f 72 6d 73 71 75 65 65 7a 65 0d 0a     4: Wormsqueeze..
	...

0000027d <__c.1706>:
     27d:	33 3a 20 5a 20 61 78 69 73 20 75 70 2f 64 6f 77     3: Z axis up/dow
     28d:	6e 0d 0a 00                                         n...

00000291 <__c.1703>:
     291:	32 3a 20 52 61 6e 64 6f 6d 20 66 69 6c 6c 65 72     2: Random filler
     2a1:	0d 0a 00                                            ...

000002a4 <__c.1700>:
     2a4:	31 3a 20 52 61 6e 64 6f 6d 20 76 6f 78 65 6c 73     1: Random voxels
     2b4:	0d 0a 00                                            ...

000002b7 <__c.1696>:
     2b7:	30 3a 20 52 61 69 6e 0d 0a 00 00                    0: Rain....

000002c2 <__ctors_end>:
     2c2:	11 24       	eor	r1, r1
     2c4:	1f be       	out	0x3f, r1	; 63
     2c6:	cf e5       	ldi	r28, 0x5F	; 95
     2c8:	d8 e0       	ldi	r29, 0x08	; 8
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61

000002ce <__do_copy_data>:
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	a0 e6       	ldi	r26, 0x60	; 96
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ea e0       	ldi	r30, 0x0A	; 10
     2d6:	f9 e4       	ldi	r31, 0x49	; 73
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <.do_copy_data_start>

000002da <.do_copy_data_loop>:
     2da:	05 90       	lpm	r0, Z+
     2dc:	0d 92       	st	X+, r0

000002de <.do_copy_data_start>:
     2de:	a8 39       	cpi	r26, 0x98	; 152
     2e0:	b1 07       	cpc	r27, r17
     2e2:	d9 f7       	brne	.-10     	; 0x2da <.do_copy_data_loop>

000002e4 <__do_clear_bss>:
     2e4:	12 e0       	ldi	r17, 0x02	; 2
     2e6:	a8 e9       	ldi	r26, 0x98	; 152
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	ae 37       	cpi	r26, 0x7E	; 126
     2f0:	b1 07       	cpc	r27, r17
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 86 02 	call	0x50c	; 0x50c <main>
     2f8:	0c 94 83 24 	jmp	0x4906	; 0x4906 <_exit>

000002fc <__bad_interrupt>:
     2fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000300 <__vector_4>:
/*
 * Multiplexer/framebuffer routine
 * This function is called by an interrupt generated by timer 2.
*/
ISR(TIMER2_COMP_vect)
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	8f 93       	push	r24
     30c:	9f 93       	push	r25
     30e:	af 93       	push	r26
     310:	bf 93       	push	r27
     312:	ef 93       	push	r30
     314:	ff 93       	push	r31
	int i;

	// Increment the current_layer counter so that the next layer is
	// drawn the next time this function runs.
	current_layer = (current_layer + 1) % 8;
     316:	80 91 1e 01 	lds	r24, 0x011E
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	87 70       	andi	r24, 0x07	; 7
     320:	90 70       	andi	r25, 0x00	; 0
     322:	80 93 1e 01 	sts	0x011E, r24

	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)
     326:	18 ba       	out	0x18, r1	; 24
     328:	af e6       	ldi	r26, 0x6F	; 111
     32a:	b0 e0       	ldi	r27, 0x00	; 0
	// Loop through all 8 bytes of data in the current layer in reverse order
	// and shift it onto the layer.
	for (i = 7; i >= 0; i--)
	{
		// Set the shift clock to 0 
		SHIFTCLK_ADDR &= ~SHIFTCLK_MASK;
     32c:	97 98       	cbi	0x12, 7	; 18
		// Set the data on the data-bus of the latch array.
		DATA_BUS = cube[current_layer][PlaneYLookup[i]];
     32e:	e0 91 1e 01 	lds	r30, 0x011E
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	8c 91       	ld	r24, X
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	ee 0f       	add	r30, r30
     33a:	ff 1f       	adc	r31, r31
     33c:	9a 95       	dec	r25
     33e:	e1 f7       	brne	.-8      	; 0x338 <__vector_4+0x38>
     340:	e8 0f       	add	r30, r24
     342:	f1 1d       	adc	r31, r1
     344:	e6 52       	subi	r30, 0x26	; 38
     346:	ff 4f       	sbci	r31, 0xFF	; 255
     348:	80 81       	ld	r24, Z
     34a:	85 bb       	out	0x15, r24	; 21
		// Set the shift clock to 1 to create a rising edge and shift in the data on the data bus.
		SHIFTCLK_ADDR |= SHIFTCLK_MASK;
     34c:	97 9a       	sbi	0x12, 7	; 18
     34e:	11 97       	sbiw	r26, 0x01	; 1

	LAYER_SELECT = 0x00; // Turn all cathode layers off. (all transistors off)

	// Loop through all 8 bytes of data in the current layer in reverse order
	// and shift it onto the layer.
	for (i = 7; i >= 0; i--)
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	a7 36       	cpi	r26, 0x67	; 103
     354:	b8 07       	cpc	r27, r24
     356:	51 f7       	brne	.-44     	; 0x32c <__vector_4+0x2c>
		DATA_BUS = cube[current_layer][PlaneYLookup[i]];
		// Set the shift clock to 1 to create a rising edge and shift in the data on the data bus.
		SHIFTCLK_ADDR |= SHIFTCLK_MASK;
	}

	LAYER_SELECT = _BV(LayerLookup[current_layer]);	// Transistor ON for current layer
     358:	e0 91 1e 01 	lds	r30, 0x011E
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	e0 5a       	subi	r30, 0xA0	; 160
     360:	ff 4f       	sbci	r31, 0xFF	; 255
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	00 80       	ld	r0, Z
     368:	02 c0       	rjmp	.+4      	; 0x36e <__vector_4+0x6e>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <__vector_4+0x6a>
     372:	88 bb       	out	0x18, r24	; 24
}
     374:	ff 91       	pop	r31
     376:	ef 91       	pop	r30
     378:	bf 91       	pop	r27
     37a:	af 91       	pop	r26
     37c:	9f 91       	pop	r25
     37e:	8f 91       	pop	r24
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <ioinit>:
	DebugTick();
}

void ioinit (void)
{
	DDRA = 0x0c;	// EQ AD input and output
     38a:	8c e0       	ldi	r24, 0x0C	; 12
     38c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;	// Layer select and ISP
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;	// Data port
     392:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xf3;	// RS232, buttons, LEDS and shift clock
     394:	83 ef       	ldi	r24, 0xF3	; 243
     396:	81 bb       	out	0x11, r24	; 17
	
	
	PORTA = 0x00;	// EQ AD input pullup off? EQ outputs off
     398:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;	// Layer select off
     39a:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;	// Data port off
     39c:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x04;	// All outputs off, enable pullup on button
     39e:	84 e0       	ldi	r24, 0x04	; 4
     3a0:	82 bb       	out	0x12, r24	; 18


	// Timer 0
	// General purpose timer interrupt
	// 14745600/64/230 = 1001 interrupts per second or 1 interrupt every 0,998ms
	OCR0 = 229;
     3a2:	85 ee       	ldi	r24, 0xE5	; 229
     3a4:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= _BV(CS01) | _BV(CS02); // Prescaler = 64.
     3a6:	83 b7       	in	r24, 0x33	; 51
     3a8:	86 60       	ori	r24, 0x06	; 6
     3aa:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= _BV(WGM01); // CTC mode. Reset counter when OCR0 is reached.
     3ac:	83 b7       	in	r24, 0x33	; 51
     3ae:	88 60       	ori	r24, 0x08	; 8
     3b0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;	// Initial counter value = 0;
     3b2:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(OCIE0);	// Enable CTC interrupt.
     3b4:	89 b7       	in	r24, 0x39	; 57
     3b6:	82 60       	ori	r24, 0x02	; 2
     3b8:	89 bf       	out	0x39, r24	; 57

	// Timer 2
	// Frame buffer interrupt
	// 14745600/128/11 = 10472.72 interrupts per second
	// 10472.72/8 = 1309 frames per second
	OCR2 = 10; 	// interrupt at counter = 10
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	83 bd       	out	0x23, r24	; 35
    TCCR2 |= _BV(CS20) | _BV(CS22); // Prescaler = 128.
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	85 60       	ori	r24, 0x05	; 5
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= _BV(WGM21); // CTC mode. Reset counter when OCR2 is reached.
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	88 60       	ori	r24, 0x08	; 8
     3c8:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;	// initial counter value = 0;
     3ca:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(OCIE2); // Enable CTC interrupt.
     3cc:	89 b7       	in	r24, 0x39	; 57
     3ce:	80 68       	ori	r24, 0x80	; 128
     3d0:	89 bf       	out	0x39, r24	; 57
}
     3d2:	08 95       	ret

000003d4 <rs232>:
	}
}

// Take input from a computer and load it onto the cube buffer
void rs232(void)
{
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 e0       	ldi	r16, 0x00	; 0
     3de:	10 e0       	ldi	r17, 0x00	; 0
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		// Switch state on red LED for debugging
		// Should switch state every time the code
		// is waiting for a byte to be received.
		DebugBlink(LED_RED);
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	0e 94 1c 03 	call	0x638	; 0x638 <DebugBlink>

		// Wait until a byte has been received
		while ( !(UCSRA & (1<<RXC)) );
     3ea:	5f 9b       	sbis	0x0b, 7	; 11
     3ec:	fe cf       	rjmp	.-4      	; 0x3ea <rs232+0x16>

		// Load the received byte from rs232 into a buffer.
		tempval = UDR;
     3ee:	8c b1       	in	r24, 0x0c	; 12
     3f0:	90 e0       	ldi	r25, 0x00	; 0
		// are reset to 0. This way the x and y counters are
		// always the same on the computer and in the cube.
		// To send an 0xff byte, you have to send it twice!

		// Go into sync escape mode
		if (tempval == 0xff)
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	91 05       	cpc	r25, r1
     3f6:	31 f4       	brne	.+12     	; 0x404 <rs232+0x30>
		{
			// Wait for the next byte
			 while ( !(UCSRA & (1<<RXC)) );
     3f8:	5f 9b       	sbis	0x0b, 7	; 11
     3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <rs232+0x24>
			 // Get the next byte
			 tempval = UDR;
     3fc:	8c b1       	in	r24, 0x0c	; 12
     3fe:	90 e0       	ldi	r25, 0x00	; 0

			 // Sync signal is received.
			 // Reset x and y counters to 0.
			 if (tempval == 0x00)
     400:	00 97       	sbiw	r24, 0x00	; 0
     402:	61 f3       	breq	.-40     	; 0x3dc <rs232+0x8>
		}

        if (escape == 0)
        {
			// Load data into the current position in the buffer
			fb[x][y] = tempval;
     404:	f8 01       	movw	r30, r16
     406:	23 e0       	ldi	r18, 0x03	; 3
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	2a 95       	dec	r18
     40e:	e1 f7       	brne	.-8      	; 0x408 <rs232+0x34>
     410:	ec 0f       	add	r30, r28
     412:	fd 1f       	adc	r31, r29
     414:	e6 56       	subi	r30, 0x66	; 102
     416:	ff 4f       	sbci	r31, 0xFF	; 255
     418:	80 83       	st	Z, r24

    		// Check if we have reached the limits of the buffer array.
    		if (y == 7)
     41a:	c7 30       	cpi	r28, 0x07	; 7
     41c:	d1 05       	cpc	r29, r1
     41e:	49 f4       	brne	.+18     	; 0x432 <rs232+0x5e>
    		{
    			if (x == 7)
     420:	07 30       	cpi	r16, 0x07	; 7
     422:	11 05       	cpc	r17, r1
     424:	19 f4       	brne	.+6      	; 0x42c <rs232+0x58>
    			{
    				// All data is loaded. Reset both counters
    				y = 0;
    				x = 0;
                    // Copy the data onto the cube.
    				tmp2cube();
     426:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <tmp2cube>
     42a:	d8 cf       	rjmp	.-80     	; 0x3dc <rs232+0x8>
    			} 
				else
    			{
    				// A layer is loaded, reset y and increment x.
    				x++;
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
     430:	d7 cf       	rjmp	.-82     	; 0x3e0 <rs232+0xc>
    			}
    		} 
			else
    		{
    			// We are in the middle of loading a layer. increment y.
    			y++;
     432:	21 96       	adiw	r28, 0x01	; 1
     434:	d7 cf       	rjmp	.-82     	; 0x3e4 <rs232+0x10>

00000436 <SelfTest>:
	TCNT2 = 0x00;	// initial counter value = 0;
	TIMSK |= _BV(OCIE2); // Enable CTC interrupt.
}

void SelfTest()
{
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	00 e0       	ldi	r16, 0x00	; 0
     448:	10 e0       	ldi	r17, 0x00	; 0
	int i, x, y;

	for(i = 0; i < 7; i++)
	{
		setplane_z(i);
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 32 04 	call	0x864	; 0x864 <setplane_z>
		delay_ms(1000);	
     450:	88 ee       	ldi	r24, 0xE8	; 232
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		clrplane_z(i);
     458:	c8 01       	movw	r24, r16
     45a:	0e 94 49 04 	call	0x892	; 0x892 <clrplane_z>

void SelfTest()
{
	int i, x, y;

	for(i = 0; i < 7; i++)
     45e:	0f 5f       	subi	r16, 0xFF	; 255
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	07 30       	cpi	r16, 0x07	; 7
     464:	11 05       	cpc	r17, r1
     466:	89 f7       	brne	.-30     	; 0x44a <SelfTest+0x14>
     468:	cc 24       	eor	r12, r12
     46a:	dd 24       	eor	r13, r13
     46c:	1d c0       	rjmp	.+58     	; 0x4a8 <SelfTest+0x72>
	}
	for(x = 0; x <= 7; x++)
	{
		for(y = 0; y <= 7; y++)
		{
			line(x, y, 0, x, y, 7);
     46e:	c6 01       	movw	r24, r12
     470:	be 01       	movw	r22, r28
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	96 01       	movw	r18, r12
     478:	8e 01       	movw	r16, r28
     47a:	e7 e0       	ldi	r30, 0x07	; 7
     47c:	ee 2e       	mov	r14, r30
     47e:	f1 2c       	mov	r15, r1
     480:	0e 94 30 07 	call	0xe60	; 0xe60 <line>
			delay_ms(1000);
     484:	88 ee       	ldi	r24, 0xE8	; 232
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			fill(0);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
		delay_ms(1000);	
		clrplane_z(i);
	}
	for(x = 0; x <= 7; x++)
	{
		for(y = 0; y <= 7; y++)
     492:	21 96       	adiw	r28, 0x01	; 1
     494:	c8 30       	cpi	r28, 0x08	; 8
     496:	d1 05       	cpc	r29, r1
     498:	51 f7       	brne	.-44     	; 0x46e <SelfTest+0x38>
	{
		setplane_z(i);
		delay_ms(1000);	
		clrplane_z(i);
	}
	for(x = 0; x <= 7; x++)
     49a:	08 94       	sec
     49c:	c1 1c       	adc	r12, r1
     49e:	d1 1c       	adc	r13, r1
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	c8 16       	cp	r12, r24
     4a4:	d1 04       	cpc	r13, r1
     4a6:	19 f0       	breq	.+6      	; 0x4ae <SelfTest+0x78>
     4a8:	c0 e0       	ldi	r28, 0x00	; 0
     4aa:	d0 e0       	ldi	r29, 0x00	; 0
     4ac:	e0 cf       	rjmp	.-64     	; 0x46e <SelfTest+0x38>
			line(x, y, 0, x, y, 7);
			delay_ms(1000);
			fill(0);
		}
	}
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	08 95       	ret

000004c0 <__vector_10>:
 * 2: Sends tick to the delay functions.
 * This function is called by an interrupt generated by timer 0.
 * 
*/
ISR(TIMER0_COMP_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
	DelayTick();
     4e2:	0e 94 0a 20 	call	0x4014	; 0x4014 <DelayTick>

	DebugTick();
     4e6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <DebugTick>
}
     4ea:	ff 91       	pop	r31
     4ec:	ef 91       	pop	r30
     4ee:	bf 91       	pop	r27
     4f0:	af 91       	pop	r26
     4f2:	9f 91       	pop	r25
     4f4:	8f 91       	pop	r24
     4f6:	7f 91       	pop	r23
     4f8:	6f 91       	pop	r22
     4fa:	5f 91       	pop	r21
     4fc:	4f 91       	pop	r20
     4fe:	3f 91       	pop	r19
     500:	2f 91       	pop	r18
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <main>:
#include "util.h"

// Main loop
// the AVR enters this function at boot time
int main (void)
{
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
	// This function initiates IO ports, timers, interrupts and
    // serial communications
	ioinit();
     514:	0e 94 c5 01 	call	0x38a	; 0x38a <ioinit>

	InitDebug();
     518:	0e 94 ed 02 	call	0x5da	; 0x5da <InitDebug>

	InitUtil();
     51c:	0e 94 04 20 	call	0x4008	; 0x4008 <InitUtil>

	//FDEV_SETUP_STREAM(
	m_override_delay = 2;
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	80 93 1b 01 	sts	0x011B, r24
	
    // This variable specifies which layer is currently being drawn by the
	// cube interrupt routine. We assign a value to it to make sure it's not >7.
	current_layer = 7;
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	80 93 1e 01 	sts	0x011E, r24
	//Binary mode
	//binary_mode = 0;

	// This gets the value saved in eeprom to be used as seed for
	// the pseudo-random generator.
	uint32_t random_value = eeprom_read_dword(RandomSeed_ptr);
     52c:	80 91 00 00 	lds	r24, 0x0000
     530:	90 91 01 00 	lds	r25, 0x0001
     534:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <__eerd_dword_m32>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22

	srand(random_value);
     53c:	0e 94 cf 23 	call	0x479e	; 0x479e <srand>

	// Enable interrupts
	// This starts the routine that draws the cube content
	sei();
     540:	78 94       	sei

	// Main loop, does awesome shit forever!
	while (1)
	{
		if(self_test == 0)
     542:	80 91 20 01 	lds	r24, 0x0120
     546:	88 23       	and	r24, r24
     548:	e1 f4       	brne	.+56     	; 0x582 <main+0x76>
		{


			// Show the effects in a random order.

			random_value = rand();
     54a:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
     54e:	7c 01       	movw	r14, r24
     550:	00 27       	eor	r16, r16
     552:	f7 fc       	sbrc	r15, 7
     554:	00 95       	com	r16
     556:	10 2f       	mov	r17, r16
			// This writes the random number to eeprom so that 
			// we can use it as a seed next time the cube restarts
			eeprom_write_dword(RandomSeed_ptr, random_value);
     558:	80 91 00 00 	lds	r24, 0x0000
     55c:	90 91 01 00 	lds	r25, 0x0001
     560:	b8 01       	movw	r22, r16
     562:	a7 01       	movw	r20, r14
     564:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <__eewr_dword_m32>
			launch_effect(random_value%EFFECTS_TOTAL);
     568:	c8 01       	movw	r24, r16
     56a:	b7 01       	movw	r22, r14
     56c:	2b e1       	ldi	r18, 0x1B	; 27
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	0e 94 43 23 	call	0x4686	; 0x4686 <__udivmodsi4>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <launch_effect>
     580:	e0 cf       	rjmp	.-64     	; 0x542 <main+0x36>
		}
		else
		{
			OverrideDelay(0);
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 39 20 	call	0x4072	; 0x4072 <OverrideDelay>
			self_test = 0;
     588:	10 92 20 01 	sts	0x0120, r1

			SelfTest();
     58c:	0e 94 1b 02 	call	0x436	; 0x436 <SelfTest>
     590:	d8 cf       	rjmp	.-80     	; 0x542 <main+0x36>

00000592 <ReadAndExecute>:
uint8_t current_pos = 0;
//uint8_t


void ReadAndExecute()
{
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	0f 92       	push	r0
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	char tempChar; 
	while(HasChars())
	{
		ReceiveChar(&tempChar);
     5a2:	8e 01       	movw	r16, r28
     5a4:	0f 5f       	subi	r16, 0xFF	; 255
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
		data[current_pos] = tempChar;

		if(tempChar = '\r')
     5a8:	8d e0       	ldi	r24, 0x0D	; 13
     5aa:	f8 2e       	mov	r15, r24
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <ReadAndExecute+0x32>
void ReadAndExecute()
{
	char tempChar; 
	while(HasChars())
	{
		ReceiveChar(&tempChar);
     5ae:	c8 01       	movw	r24, r16
     5b0:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <ReceiveChar>
		data[current_pos] = tempChar;
     5b4:	e0 91 98 00 	lds	r30, 0x0098
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	e0 55       	subi	r30, 0x50	; 80
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	80 83       	st	Z, r24

		if(tempChar = '\r')
     5c2:	f9 82       	std	Y+1, r15	; 0x01


void ReadAndExecute()
{
	char tempChar; 
	while(HasChars())
     5c4:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <HasChars>
     5c8:	88 23       	and	r24, r24
     5ca:	89 f7       	brne	.-30     	; 0x5ae <ReadAndExecute+0x1c>
		if(tempChar = '\r')
		{

		}
	}
     5cc:	0f 90       	pop	r0
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	08 95       	ret

000005da <InitDebug>:
#include "uart.h"

void InitDebug()
{
	// This variable specifies whether or not debug leds are active
	debug_active = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	80 93 1d 01 	sts	0x011D, r24

	// This variable specifies what the last debug mode was, in order to show debug mode on
	// the debug leds
	last_debug_mode = 1;
     5e0:	80 93 22 01 	sts	0x0122, r24
}
     5e4:	08 95       	ret

000005e6 <ChangeDebugMode>:


void ChangeDebugMode()
{
	debug_mode = (debug_mode + 1) % NO_OF_DEBUG_MODES;
     5e6:	80 91 1c 01 	lds	r24, 0x011C
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	83 70       	andi	r24, 0x03	; 3
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	80 93 1c 01 	sts	0x011C, r24
}
     5f6:	08 95       	ret

000005f8 <DebugTick>:

void DebugTick()
{
	// If debug mode changed
	if(debug_mode != last_debug_mode)
     5f8:	90 91 1c 01 	lds	r25, 0x011C
     5fc:	80 91 22 01 	lds	r24, 0x0122
     600:	98 17       	cp	r25, r24
     602:	49 f0       	breq	.+18     	; 0x616 <DebugTick+0x1e>
	{
		// disable showing debug info
		debug_active = 0;
     604:	10 92 1d 01 	sts	0x011D, r1

		last_debug_mode = debug_mode;
     608:	80 91 1c 01 	lds	r24, 0x011C
     60c:	80 93 22 01 	sts	0x0122, r24

		// Restart debug_mode_counter
		debug_mode_counter = DEBUG_MODE_COUNTER_START;
     610:	80 ed       	ldi	r24, 0xD0	; 208
     612:	80 93 1a 01 	sts	0x011A, r24
		//Set the leds to show current debug mode
		//LED_PORT = (debug_mode + 1) << LED_START;
	}

	// If currently showing debug mode instead of debug info
	if(debug_active == 0)
     616:	80 91 1d 01 	lds	r24, 0x011D
     61a:	88 23       	and	r24, r24
     61c:	61 f4       	brne	.+24     	; 0x636 <DebugTick+0x3e>
	{
		debug_mode_counter--;
     61e:	80 91 1a 01 	lds	r24, 0x011A
     622:	81 50       	subi	r24, 0x01	; 1
     624:	80 93 1a 01 	sts	0x011A, r24
		// If we're done showing debug mode
		if(debug_mode_counter == 0)
     628:	80 91 1a 01 	lds	r24, 0x011A
     62c:	88 23       	and	r24, r24
     62e:	19 f4       	brne	.+6      	; 0x636 <DebugTick+0x3e>
		{
			// Show debug info instead of debug_mode
			debug_active = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 1d 01 	sts	0x011D, r24
     636:	08 95       	ret

00000638 <DebugBlink>:
}

void DebugBlink(uint8_t LEDS)
{

     638:	08 95       	ret

0000063a <SendDebugInfo>:
	}
}

void SendDebugInfo(const char * data, uint8_t prgMem)
{
	SendString(data, prgMem);
     63a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <SendString>
}
     63e:	08 95       	ret

00000640 <inrange>:
}

// This function validates that we are drawing inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x >= 0 && x < CUBE_SIZE && y >= 0 && y < CUBE_SIZE && z >= 0 && z < CUBE_SIZE)
     640:	08 97       	sbiw	r24, 0x08	; 8
     642:	78 f4       	brcc	.+30     	; 0x662 <inrange+0x22>
     644:	77 fd       	sbrc	r23, 7
     646:	0d c0       	rjmp	.+26     	; 0x662 <inrange+0x22>
     648:	68 30       	cpi	r22, 0x08	; 8
     64a:	71 05       	cpc	r23, r1
     64c:	54 f4       	brge	.+20     	; 0x662 <inrange+0x22>
     64e:	57 fd       	sbrc	r21, 7
     650:	08 c0       	rjmp	.+16     	; 0x662 <inrange+0x22>
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	48 30       	cpi	r20, 0x08	; 8
     656:	51 05       	cpc	r21, r1
     658:	0c f0       	brlt	.+2      	; 0x65c <inrange+0x1c>
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	98 27       	eor	r25, r24
     660:	01 c0       	rjmp	.+2      	; 0x664 <inrange+0x24>
     662:	90 e0       	ldi	r25, 0x00	; 0
	} else
	{
		// One of the coordinates was outside the cube.
		return 0;
	}
}
     664:	89 2f       	mov	r24, r25
     666:	08 95       	ret

00000668 <tmpclrvoxel>:
		cube[z][y] &= ~(1 << x);
}

// Set a single voxel to OFF
void tmpclrvoxel(int x, int y, int z)
{
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	f8 2e       	mov	r15, r24
     674:	8b 01       	movw	r16, r22
     676:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     678:	0e 94 20 03 	call	0x640	; 0x640 <inrange>
     67c:	88 23       	and	r24, r24
     67e:	a9 f0       	breq	.+42     	; 0x6aa <tmpclrvoxel+0x42>
		fb[z][y] &= ~(1 << x);
     680:	fe 01       	movw	r30, r28
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	8a 95       	dec	r24
     68a:	e1 f7       	brne	.-8      	; 0x684 <tmpclrvoxel+0x1c>
     68c:	e0 0f       	add	r30, r16
     68e:	f1 1f       	adc	r31, r17
     690:	e6 56       	subi	r30, 0x66	; 102
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	20 81       	ld	r18, Z
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <tmpclrvoxel+0x38>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	fa 94       	dec	r15
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <tmpclrvoxel+0x34>
     6a4:	80 95       	com	r24
     6a6:	82 23       	and	r24, r18
     6a8:	80 83       	st	Z, r24
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	08 95       	ret

000006b6 <clrvoxel>:
		fb[z][y] |= (1 << x);
}

// Set a single voxel to OFF
void clrvoxel(int x, int y, int z)
{
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	f8 2e       	mov	r15, r24
     6c2:	8b 01       	movw	r16, r22
     6c4:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     6c6:	0e 94 20 03 	call	0x640	; 0x640 <inrange>
     6ca:	88 23       	and	r24, r24
     6cc:	a9 f0       	breq	.+42     	; 0x6f8 <clrvoxel+0x42>
		cube[z][y] &= ~(1 << x);
     6ce:	fe 01       	movw	r30, r28
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	9a 95       	dec	r25
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <clrvoxel+0x1c>
     6da:	e0 0f       	add	r30, r16
     6dc:	f1 1f       	adc	r31, r17
     6de:	e6 52       	subi	r30, 0x26	; 38
     6e0:	ff 4f       	sbci	r31, 0xFF	; 255
     6e2:	20 81       	ld	r18, Z
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <clrvoxel+0x38>
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	fa 94       	dec	r15
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <clrvoxel+0x34>
     6f2:	80 95       	com	r24
     6f4:	82 23       	and	r24, r18
     6f6:	80 83       	st	Z, r24
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	08 95       	ret

00000704 <tmpsetvoxel>:
		cube[z][y] |= (1 << x);
}

// Set a single voxel in the temporary cube buffer to ON
void tmpsetvoxel(int x, int y, int z)
{
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	f8 2e       	mov	r15, r24
     710:	8b 01       	movw	r16, r22
     712:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     714:	0e 94 20 03 	call	0x640	; 0x640 <inrange>
     718:	88 23       	and	r24, r24
     71a:	a1 f0       	breq	.+40     	; 0x744 <tmpsetvoxel+0x40>
		fb[z][y] |= (1 << x);
     71c:	fe 01       	movw	r30, r28
     71e:	23 e0       	ldi	r18, 0x03	; 3
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	2a 95       	dec	r18
     726:	e1 f7       	brne	.-8      	; 0x720 <tmpsetvoxel+0x1c>
     728:	e0 0f       	add	r30, r16
     72a:	f1 1f       	adc	r31, r17
     72c:	e6 56       	subi	r30, 0x66	; 102
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	20 81       	ld	r18, Z
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	02 c0       	rjmp	.+4      	; 0x73c <tmpsetvoxel+0x38>
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	fa 94       	dec	r15
     73e:	e2 f7       	brpl	.-8      	; 0x738 <tmpsetvoxel+0x34>
     740:	28 2b       	or	r18, r24
     742:	20 83       	st	Z, r18
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	08 95       	ret

00000750 <setvoxel>:
#include "draw.h"
#include "string.h"

// Set a single voxel to ON
void setvoxel(int x, int y, int z)
{
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	f8 2e       	mov	r15, r24
     75c:	8b 01       	movw	r16, r22
     75e:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     760:	0e 94 20 03 	call	0x640	; 0x640 <inrange>
     764:	88 23       	and	r24, r24
     766:	a1 f0       	breq	.+40     	; 0x790 <setvoxel+0x40>
		cube[z][y] |= (1 << x);
     768:	fe 01       	movw	r30, r28
     76a:	33 e0       	ldi	r19, 0x03	; 3
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	3a 95       	dec	r19
     772:	e1 f7       	brne	.-8      	; 0x76c <setvoxel+0x1c>
     774:	e0 0f       	add	r30, r16
     776:	f1 1f       	adc	r31, r17
     778:	e6 52       	subi	r30, 0x26	; 38
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	20 81       	ld	r18, Z
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <setvoxel+0x38>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	fa 94       	dec	r15
     78a:	e2 f7       	brpl	.-8      	; 0x784 <setvoxel+0x34>
     78c:	28 2b       	or	r18, r24
     78e:	20 83       	st	Z, r18
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	08 95       	ret

0000079c <getvoxel>:
	}
}

// Get the current status of a voxel
unsigned char getvoxel(int x, int y, int z)
{
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	f8 2e       	mov	r15, r24
     7a8:	8b 01       	movw	r16, r22
     7aa:	ea 01       	movw	r28, r20
	if (inrange(x,y,z))
     7ac:	0e 94 20 03 	call	0x640	; 0x640 <inrange>
     7b0:	88 23       	and	r24, r24
     7b2:	89 f0       	breq	.+34     	; 0x7d6 <getvoxel+0x3a>
	{
		if (cube[z][y] & (1 << x))
     7b4:	43 e0       	ldi	r20, 0x03	; 3
     7b6:	cc 0f       	add	r28, r28
     7b8:	dd 1f       	adc	r29, r29
     7ba:	4a 95       	dec	r20
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <getvoxel+0x1a>
     7be:	c0 0f       	add	r28, r16
     7c0:	d1 1f       	adc	r29, r17
     7c2:	c6 52       	subi	r28, 0x26	; 38
     7c4:	df 4f       	sbci	r29, 0xFF	; 255
     7c6:	88 81       	ld	r24, Y
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <getvoxel+0x34>
     7cc:	95 95       	asr	r25
     7ce:	87 95       	ror	r24
     7d0:	fa 94       	dec	r15
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <getvoxel+0x30>
     7d4:	81 70       	andi	r24, 0x01	; 1
		}
	} else
	{
		return 0;
	}
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	08 95       	ret

000007e2 <altervoxel>:

// In some effect we want to just take bool and write it to a voxel
// this function calls the apropriate voxel manipulation function.
void altervoxel(int x, int y, int z, int state)
{
	if (state == 1)
     7e2:	21 30       	cpi	r18, 0x01	; 1
     7e4:	31 05       	cpc	r19, r1
     7e6:	19 f4       	brne	.+6      	; 0x7ee <altervoxel+0xc>
	{
		setvoxel(x,y,z);
     7e8:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
     7ec:	08 95       	ret
	} else
	{
		clrvoxel(x,y,z);
     7ee:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
     7f2:	08 95       	ret

000007f4 <flpvoxel>:
}

// Flip the state of a voxel.
// If the voxel is 1, its turned into a 0, and vice versa.
void flpvoxel(int x, int y, int z)
{
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	f8 2e       	mov	r15, r24
     800:	8b 01       	movw	r16, r22
     802:	ea 01       	movw	r28, r20
	if (inrange(x, y, z))
     804:	0e 94 20 03 	call	0x640	; 0x640 <inrange>
     808:	88 23       	and	r24, r24
     80a:	a1 f0       	breq	.+40     	; 0x834 <flpvoxel+0x40>
		cube[z][y] ^= (1 << x);
     80c:	fe 01       	movw	r30, r28
     80e:	53 e0       	ldi	r21, 0x03	; 3
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	5a 95       	dec	r21
     816:	e1 f7       	brne	.-8      	; 0x810 <flpvoxel+0x1c>
     818:	e0 0f       	add	r30, r16
     81a:	f1 1f       	adc	r31, r17
     81c:	e6 52       	subi	r30, 0x26	; 38
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	20 81       	ld	r18, Z
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <flpvoxel+0x38>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	fa 94       	dec	r15
     82e:	e2 f7       	brpl	.-8      	; 0x828 <flpvoxel+0x34>
     830:	28 27       	eor	r18, r24
     832:	20 83       	st	Z, r18
}
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	08 95       	ret

00000840 <argorder>:

// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	fc 01       	movw	r30, r24
     846:	da 01       	movw	r26, r20
     848:	e9 01       	movw	r28, r18
	if (ix1 > ix2)
     84a:	68 17       	cp	r22, r24
     84c:	79 07       	cpc	r23, r25
     84e:	1c f4       	brge	.+6      	; 0x856 <argorder+0x16>
     850:	cb 01       	movw	r24, r22
     852:	bf 01       	movw	r22, r30
     854:	fc 01       	movw	r30, r24
		int tmp;
		tmp = ix1;
		ix1= ix2;
		ix2 = tmp;
	}
	*ox1 = ix1;
     856:	ed 93       	st	X+, r30
     858:	fc 93       	st	X, r31
	*ox2 = ix2;
     85a:	79 83       	std	Y+1, r23	; 0x01
     85c:	68 83       	st	Y, r22
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <setplane_z>:
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z >= 0 && z < CUBE_SIZE)
     864:	88 30       	cpi	r24, 0x08	; 8
     866:	91 05       	cpc	r25, r1
     868:	98 f4       	brcc	.+38     	; 0x890 <setplane_z+0x2c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i = 0; i < CUBE_SIZE; i++)
		{
			cube[z][i] = 0xff;
     86e:	63 e0       	ldi	r22, 0x03	; 3
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	6a 95       	dec	r22
     876:	e1 f7       	brne	.-8      	; 0x870 <setplane_z+0xc>
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	fc 01       	movw	r30, r24
     87c:	e2 0f       	add	r30, r18
     87e:	f3 1f       	adc	r31, r19
     880:	e6 52       	subi	r30, 0x26	; 38
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	40 83       	st	Z, r20
void setplane_z (int z)
{
	int i;
	if (z >= 0 && z < CUBE_SIZE)
	{
		for (i = 0; i < CUBE_SIZE; i++)
     886:	2f 5f       	subi	r18, 0xFF	; 255
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	28 30       	cpi	r18, 0x08	; 8
     88c:	31 05       	cpc	r19, r1
     88e:	a9 f7       	brne	.-22     	; 0x87a <setplane_z+0x16>
     890:	08 95       	ret

00000892 <clrplane_z>:

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     892:	88 30       	cpi	r24, 0x08	; 8
     894:	91 05       	cpc	r25, r1
     896:	90 f4       	brcc	.+36     	; 0x8bc <clrplane_z+0x2a>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
     89c:	73 e0       	ldi	r23, 0x03	; 3
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	7a 95       	dec	r23
     8a4:	e1 f7       	brne	.-8      	; 0x89e <clrplane_z+0xc>
     8a6:	fc 01       	movw	r30, r24
     8a8:	e2 0f       	add	r30, r18
     8aa:	f3 1f       	adc	r31, r19
     8ac:	e6 52       	subi	r30, 0x26	; 38
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	10 82       	st	Z, r1
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     8b2:	2f 5f       	subi	r18, 0xFF	; 255
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	28 30       	cpi	r18, 0x08	; 8
     8b8:	31 05       	cpc	r19, r1
     8ba:	a9 f7       	brne	.-22     	; 0x8a6 <clrplane_z+0x14>
     8bc:	08 95       	ret

000008be <setplane_x>:
			cube[z][i] = 0x00;
	}
}

void setplane_x (int x)
{
     8be:	9c 01       	movw	r18, r24
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     8c0:	88 30       	cpi	r24, 0x08	; 8
     8c2:	91 05       	cpc	r25, r1
     8c4:	30 f5       	brcc	.+76     	; 0x912 <setplane_x+0x54>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <setplane_x+0x12>
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	2a 95       	dec	r18
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <setplane_x+0xe>
     8d4:	98 2f       	mov	r25, r24
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	12 c0       	rjmp	.+36     	; 0x900 <setplane_x+0x42>
     8dc:	fb 01       	movw	r30, r22
     8de:	e2 0f       	add	r30, r18
     8e0:	f3 1f       	adc	r31, r19
     8e2:	e6 52       	subi	r30, 0x26	; 38
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	80 81       	ld	r24, Z
     8e8:	89 2b       	or	r24, r25
     8ea:	80 83       	st	Z, r24
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     8ec:	2f 5f       	subi	r18, 0xFF	; 255
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	28 30       	cpi	r18, 0x08	; 8
     8f2:	31 05       	cpc	r19, r1
     8f4:	99 f7       	brne	.-26     	; 0x8dc <setplane_x+0x1e>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     8f6:	4f 5f       	subi	r20, 0xFF	; 255
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	48 30       	cpi	r20, 0x08	; 8
     8fc:	51 05       	cpc	r21, r1
     8fe:	49 f0       	breq	.+18     	; 0x912 <setplane_x+0x54>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] |= (1 << x);
     904:	ba 01       	movw	r22, r20
     906:	e3 e0       	ldi	r30, 0x03	; 3
     908:	66 0f       	add	r22, r22
     90a:	77 1f       	adc	r23, r23
     90c:	ea 95       	dec	r30
     90e:	e1 f7       	brne	.-8      	; 0x908 <setplane_x+0x4a>
     910:	e5 cf       	rjmp	.-54     	; 0x8dc <setplane_x+0x1e>
     912:	08 95       	ret

00000914 <clrplane_x>:
		}
	}
}

void clrplane_x (int x)
{
     914:	9c 01       	movw	r18, r24
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
     916:	88 30       	cpi	r24, 0x08	; 8
     918:	91 05       	cpc	r25, r1
     91a:	38 f5       	brcc	.+78     	; 0x96a <clrplane_x+0x56>
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <clrplane_x+0x12>
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	2a 95       	dec	r18
     928:	e2 f7       	brpl	.-8      	; 0x922 <clrplane_x+0xe>
     92a:	98 2f       	mov	r25, r24
     92c:	90 95       	com	r25
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	12 c0       	rjmp	.+36     	; 0x958 <clrplane_x+0x44>
     934:	fb 01       	movw	r30, r22
     936:	e2 0f       	add	r30, r18
     938:	f3 1f       	adc	r31, r19
     93a:	e6 52       	subi	r30, 0x26	; 38
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	89 23       	and	r24, r25
     942:	80 83       	st	Z, r24
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
			for (y=0;y<CUBE_SIZE;y++)
     944:	2f 5f       	subi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	28 30       	cpi	r18, 0x08	; 8
     94a:	31 05       	cpc	r19, r1
     94c:	99 f7       	brne	.-26     	; 0x934 <clrplane_x+0x20>
{
	int z;
	int y;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     94e:	4f 5f       	subi	r20, 0xFF	; 255
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	48 30       	cpi	r20, 0x08	; 8
     954:	51 05       	cpc	r21, r1
     956:	49 f0       	breq	.+18     	; 0x96a <clrplane_x+0x56>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (y=0;y<CUBE_SIZE;y++)
			{
				cube[z][y] &= ~(1 << x);
     95c:	ba 01       	movw	r22, r20
     95e:	f3 e0       	ldi	r31, 0x03	; 3
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	fa 95       	dec	r31
     966:	e1 f7       	brne	.-8      	; 0x960 <clrplane_x+0x4c>
     968:	e5 cf       	rjmp	.-54     	; 0x934 <clrplane_x+0x20>
     96a:	08 95       	ret

0000096c <setplane_y>:
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     96c:	88 30       	cpi	r24, 0x08	; 8
     96e:	91 05       	cpc	r25, r1
     970:	98 f4       	brcc	.+38     	; 0x998 <setplane_y+0x2c>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
     976:	4f ef       	ldi	r20, 0xFF	; 255
     978:	f9 01       	movw	r30, r18
     97a:	a3 e0       	ldi	r26, 0x03	; 3
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	aa 95       	dec	r26
     982:	e1 f7       	brne	.-8      	; 0x97c <setplane_y+0x10>
     984:	e8 0f       	add	r30, r24
     986:	f9 1f       	adc	r31, r25
     988:	e6 52       	subi	r30, 0x26	; 38
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	40 83       	st	Z, r20
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     98e:	2f 5f       	subi	r18, 0xFF	; 255
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	28 30       	cpi	r18, 0x08	; 8
     994:	31 05       	cpc	r19, r1
     996:	81 f7       	brne	.-32     	; 0x978 <setplane_y+0xc>
     998:	08 95       	ret

0000099a <clrplane_y>:
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     99a:	88 30       	cpi	r24, 0x08	; 8
     99c:	91 05       	cpc	r25, r1
     99e:	90 f4       	brcc	.+36     	; 0x9c4 <clrplane_y+0x2a>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
     9a4:	f9 01       	movw	r30, r18
     9a6:	b3 e0       	ldi	r27, 0x03	; 3
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	ba 95       	dec	r27
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <clrplane_y+0xe>
     9b0:	e8 0f       	add	r30, r24
     9b2:	f9 1f       	adc	r31, r25
     9b4:	e6 52       	subi	r30, 0x26	; 38
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	10 82       	st	Z, r1
void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     9ba:	2f 5f       	subi	r18, 0xFF	; 255
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
     9be:	28 30       	cpi	r18, 0x08	; 8
     9c0:	31 05       	cpc	r19, r1
     9c2:	81 f7       	brne	.-32     	; 0x9a4 <clrplane_y+0xa>
     9c4:	08 95       	ret

000009c6 <setplane>:
	}
}

void setplane (char axis, unsigned char i)
{
    switch (axis)
     9c6:	89 37       	cpi	r24, 0x79	; 121
     9c8:	49 f0       	breq	.+18     	; 0x9dc <setplane+0x16>
     9ca:	8a 37       	cpi	r24, 0x7A	; 122
     9cc:	f9 f0       	breq	.+62     	; 0xa0c <setplane+0x46>
     9ce:	88 37       	cpi	r24, 0x78	; 120
     9d0:	a1 f5       	brne	.+104    	; 0xa3a <setplane+0x74>
    {
        case AXIS_X:
            setplane_x(i);
     9d2:	86 2f       	mov	r24, r22
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 5f 04 	call	0x8be	; 0x8be <setplane_x>
     9da:	08 95       	ret
            break;
        
       case AXIS_Y:
            setplane_y(i);
     9dc:	70 e0       	ldi	r23, 0x00	; 0
}

void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     9de:	68 30       	cpi	r22, 0x08	; 8
     9e0:	71 05       	cpc	r23, r1
     9e2:	58 f5       	brcc	.+86     	; 0xa3a <setplane+0x74>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0xff;
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	f9 01       	movw	r30, r18
     9ec:	93 e0       	ldi	r25, 0x03	; 3
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	9a 95       	dec	r25
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <setplane+0x28>
     9f6:	e6 0f       	add	r30, r22
     9f8:	f7 1f       	adc	r31, r23
     9fa:	e6 52       	subi	r30, 0x26	; 38
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	80 83       	st	Z, r24
void setplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     a00:	2f 5f       	subi	r18, 0xFF	; 255
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	28 30       	cpi	r18, 0x08	; 8
     a06:	31 05       	cpc	r19, r1
     a08:	81 f7       	brne	.-32     	; 0x9ea <setplane+0x24>
     a0a:	08 95       	ret
       case AXIS_Y:
            setplane_y(i);
            break;

       case AXIS_Z:
            setplane_z(i);
     a0c:	70 e0       	ldi	r23, 0x00	; 0
// Sets all voxels along a X/Y plane at a given point
// on axis Z
void setplane_z (int z)
{
	int i;
	if (z >= 0 && z < CUBE_SIZE)
     a0e:	68 30       	cpi	r22, 0x08	; 8
     a10:	71 05       	cpc	r23, r1
     a12:	98 f4       	brcc	.+38     	; 0xa3a <setplane+0x74>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i = 0; i < CUBE_SIZE; i++)
		{
			cube[z][i] = 0xff;
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	8a 95       	dec	r24
     a20:	e1 f7       	brne	.-8      	; 0xa1a <setplane+0x54>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	fb 01       	movw	r30, r22
     a26:	e2 0f       	add	r30, r18
     a28:	f3 1f       	adc	r31, r19
     a2a:	e6 52       	subi	r30, 0x26	; 38
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	80 83       	st	Z, r24
void setplane_z (int z)
{
	int i;
	if (z >= 0 && z < CUBE_SIZE)
	{
		for (i = 0; i < CUBE_SIZE; i++)
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	28 30       	cpi	r18, 0x08	; 8
     a36:	31 05       	cpc	r19, r1
     a38:	a9 f7       	brne	.-22     	; 0xa24 <setplane+0x5e>
     a3a:	08 95       	ret

00000a3c <clrplane>:
    }
}

void clrplane (char axis, unsigned char i)
{
    switch (axis)
     a3c:	89 37       	cpi	r24, 0x79	; 121
     a3e:	49 f0       	breq	.+18     	; 0xa52 <clrplane+0x16>
     a40:	8a 37       	cpi	r24, 0x7A	; 122
     a42:	f1 f0       	breq	.+60     	; 0xa80 <clrplane+0x44>
     a44:	88 37       	cpi	r24, 0x78	; 120
     a46:	91 f5       	brne	.+100    	; 0xaac <clrplane+0x70>
    {
        case AXIS_X:
            clrplane_x(i);
     a48:	86 2f       	mov	r24, r22
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 8a 04 	call	0x914	; 0x914 <clrplane_x>
     a50:	08 95       	ret
            break;
        
       case AXIS_Y:
            clrplane_y(i);
     a52:	70 e0       	ldi	r23, 0x00	; 0
}

void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     a54:	68 30       	cpi	r22, 0x08	; 8
     a56:	71 05       	cpc	r23, r1
     a58:	48 f5       	brcc	.+82     	; 0xaac <clrplane+0x70>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0;z<CUBE_SIZE;z++)
			cube[z][y] = 0x00; 
     a5e:	f9 01       	movw	r30, r18
     a60:	53 e0       	ldi	r21, 0x03	; 3
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	5a 95       	dec	r21
     a68:	e1 f7       	brne	.-8      	; 0xa62 <clrplane+0x26>
     a6a:	e6 0f       	add	r30, r22
     a6c:	f7 1f       	adc	r31, r23
     a6e:	e6 52       	subi	r30, 0x26	; 38
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	10 82       	st	Z, r1
void clrplane_y (int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0;z<CUBE_SIZE;z++)
     a74:	2f 5f       	subi	r18, 0xFF	; 255
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	28 30       	cpi	r18, 0x08	; 8
     a7a:	31 05       	cpc	r19, r1
     a7c:	81 f7       	brne	.-32     	; 0xa5e <clrplane+0x22>
     a7e:	08 95       	ret
       case AXIS_Y:
            clrplane_y(i);
            break;

       case AXIS_Z:
            clrplane_z(i);
     a80:	70 e0       	ldi	r23, 0x00	; 0

// Clears voxels in the same manner as above
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
     a82:	68 30       	cpi	r22, 0x08	; 8
     a84:	71 05       	cpc	r23, r1
     a86:	90 f4       	brcc	.+36     	; 0xaac <clrplane+0x70>
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (i=0;i<CUBE_SIZE;i++)
			cube[z][i] = 0x00;
     a8c:	43 e0       	ldi	r20, 0x03	; 3
     a8e:	66 0f       	add	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	4a 95       	dec	r20
     a94:	e1 f7       	brne	.-8      	; 0xa8e <clrplane+0x52>
     a96:	fb 01       	movw	r30, r22
     a98:	e2 0f       	add	r30, r18
     a9a:	f3 1f       	adc	r31, r19
     a9c:	e6 52       	subi	r30, 0x26	; 38
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	10 82       	st	Z, r1
void clrplane_z (int z)
{
	int i;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (i=0;i<CUBE_SIZE;i++)
     aa2:	2f 5f       	subi	r18, 0xFF	; 255
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	28 30       	cpi	r18, 0x08	; 8
     aa8:	31 05       	cpc	r19, r1
     aaa:	a9 f7       	brne	.-22     	; 0xa96 <clrplane+0x5a>
     aac:	08 95       	ret

00000aae <fill>:

// Fill a value into all 64 byts of the cube buffer
// Mostly used for clearing. fill(0x00)
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	10 c0       	rjmp	.+32     	; 0xad4 <fill+0x26>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     ab4:	fb 01       	movw	r30, r22
     ab6:	e2 0f       	add	r30, r18
     ab8:	f3 1f       	adc	r31, r19
     aba:	e6 52       	subi	r30, 0x26	; 38
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	28 30       	cpi	r18, 0x08	; 8
     ac6:	31 05       	cpc	r19, r1
     ac8:	a9 f7       	brne	.-22     	; 0xab4 <fill+0x6>
// or setting all on. fill(0xff)
void fill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     aca:	4f 5f       	subi	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	48 30       	cpi	r20, 0x08	; 8
     ad0:	51 05       	cpc	r21, r1
     ad2:	49 f0       	breq	.+18     	; 0xae6 <fill+0x38>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			cube[z][y] = pattern;
     ad8:	ba 01       	movw	r22, r20
     ada:	e3 e0       	ldi	r30, 0x03	; 3
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	ea 95       	dec	r30
     ae2:	e1 f7       	brne	.-8      	; 0xadc <fill+0x2e>
     ae4:	e7 cf       	rjmp	.-50     	; 0xab4 <fill+0x6>
     ae6:	08 95       	ret

00000ae8 <tmpfill>:
		}
	}
}

void tmpfill (unsigned char pattern)
{
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	10 c0       	rjmp	.+32     	; 0xb0e <tmpfill+0x26>
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
     aee:	fb 01       	movw	r30, r22
     af0:	e2 0f       	add	r30, r18
     af2:	f3 1f       	adc	r31, r19
     af4:	e6 56       	subi	r30, 0x66	; 102
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	80 83       	st	Z, r24
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
	{
		for (y=0;y<CUBE_SIZE;y++)
     afa:	2f 5f       	subi	r18, 0xFF	; 255
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	28 30       	cpi	r18, 0x08	; 8
     b00:	31 05       	cpc	r19, r1
     b02:	a9 f7       	brne	.-22     	; 0xaee <tmpfill+0x6>

void tmpfill (unsigned char pattern)
{
	int z;
	int y;
	for (z=0;z<CUBE_SIZE;z++)
     b04:	4f 5f       	subi	r20, 0xFF	; 255
     b06:	5f 4f       	sbci	r21, 0xFF	; 255
     b08:	48 30       	cpi	r20, 0x08	; 8
     b0a:	51 05       	cpc	r21, r1
     b0c:	49 f0       	breq	.+18     	; 0xb20 <tmpfill+0x38>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			fb[z][y] = pattern;
     b12:	ba 01       	movw	r22, r20
     b14:	f3 e0       	ldi	r31, 0x03	; 3
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	fa 95       	dec	r31
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <tmpfill+0x2e>
     b1e:	e7 cf       	rjmp	.-50     	; 0xaee <tmpfill+0x6>
     b20:	08 95       	ret

00000b22 <box_filled>:
	}
}

// Draw a box with all walls drawn and all voxels inside set
void box_filled(int x1, int y1, int z1, int x2, int y2, int z2)
{
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	dc 01       	movw	r26, r24
     b30:	eb 01       	movw	r28, r22
     b32:	f9 01       	movw	r30, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	14 f4       	brge	.+4      	; 0xb3e <box_filled+0x1c>
     b3a:	d9 01       	movw	r26, r18
     b3c:	fc 01       	movw	r30, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     b3e:	0c 17       	cp	r16, r28
     b40:	1d 07       	cpc	r17, r29
     b42:	1c f4       	brge	.+6      	; 0xb4a <box_filled+0x28>
     b44:	ce 01       	movw	r24, r28
     b46:	e8 01       	movw	r28, r16
     b48:	8c 01       	movw	r16, r24
     b4a:	e4 16       	cp	r14, r20
     b4c:	f5 06       	cpc	r15, r21
     b4e:	1c f4       	brge	.+6      	; 0xb56 <box_filled+0x34>
     b50:	ca 01       	movw	r24, r20
     b52:	a7 01       	movw	r20, r14
     b54:	7c 01       	movw	r14, r24
     b56:	31 96       	adiw	r30, 0x01	; 1
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	9c 01       	movw	r18, r24
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <box_filled+0x42>
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	ea 95       	dec	r30
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <box_filled+0x3e>
     b68:	20 95       	com	r18
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <box_filled+0x4e>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	aa 95       	dec	r26
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <box_filled+0x4a>
     b74:	28 23       	and	r18, r24
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <box_filled+0x72>

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
     b78:	fb 01       	movw	r30, r22
     b7a:	ea 0f       	add	r30, r26
     b7c:	fb 1f       	adc	r31, r27
     b7e:	e6 52       	subi	r30, 0x26	; 38
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	82 2b       	or	r24, r18
     b86:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
     b88:	11 96       	adiw	r26, 0x01	; 1
     b8a:	0a 17       	cp	r16, r26
     b8c:	1b 07       	cpc	r17, r27
     b8e:	a4 f7       	brge	.-24     	; 0xb78 <box_filled+0x56>

	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     b90:	4f 5f       	subi	r20, 0xFF	; 255
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	e4 16       	cp	r14, r20
     b96:	f5 06       	cpc	r15, r21
     b98:	44 f0       	brlt	.+16     	; 0xbaa <box_filled+0x88>
     b9a:	de 01       	movw	r26, r28
	{
		for (iy=y1;iy<=y2;iy++)
		{
			cube[iz][iy] |= byteline(x1,x2);
     b9c:	ba 01       	movw	r22, r20
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	8a 95       	dec	r24
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <box_filled+0x7e>
     ba8:	f0 cf       	rjmp	.-32     	; 0xb8a <box_filled+0x68>
		}
	}

}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	08 95       	ret

00000bb8 <box_walls>:

// Darw a hollow box with side walls.
void box_walls(int x1, int y1, int z1, int x2, int y2, int z2)
{
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	dc 01       	movw	r26, r24
     bca:	f9 01       	movw	r30, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     bcc:	28 17       	cp	r18, r24
     bce:	39 07       	cpc	r19, r25
     bd0:	14 f4       	brge	.+4      	; 0xbd6 <box_walls+0x1e>
     bd2:	d9 01       	movw	r26, r18
     bd4:	fc 01       	movw	r30, r24
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     bd6:	06 17       	cp	r16, r22
     bd8:	17 07       	cpc	r17, r23
     bda:	1c f4       	brge	.+6      	; 0xbe2 <box_walls+0x2a>
     bdc:	cb 01       	movw	r24, r22
     bde:	b8 01       	movw	r22, r16
     be0:	8c 01       	movw	r16, r24
     be2:	e4 16       	cp	r14, r20
     be4:	f5 06       	cpc	r15, r21
     be6:	1c f4       	brge	.+6      	; 0xbee <box_walls+0x36>
     be8:	ca 01       	movw	r24, r20
     bea:	a7 01       	movw	r20, r14
     bec:	7c 01       	movw	r14, r24
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	9c 01       	movw	r18, r24
     bf4:	0e 2e       	mov	r0, r30
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <box_walls+0x44>
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <box_walls+0x40>
     c00:	0a 2e       	mov	r0, r26
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <box_walls+0x50>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <box_walls+0x4c>
     c0c:	c2 2e       	mov	r12, r18
     c0e:	c8 2a       	or	r12, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     c10:	31 96       	adiw	r30, 0x01	; 1
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9c 01       	movw	r18, r24
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <box_walls+0x66>
     c1a:	22 0f       	add	r18, r18
     c1c:	33 1f       	adc	r19, r19
     c1e:	ea 95       	dec	r30
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <box_walls+0x62>
     c22:	d2 2e       	mov	r13, r18
     c24:	d0 94       	com	r13
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <box_walls+0x74>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	aa 95       	dec	r26
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <box_walls+0x70>
     c30:	d8 22       	and	r13, r24
     c32:	9a 01       	movw	r18, r20
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <box_walls+0xc0>

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
     c36:	a6 17       	cp	r26, r22
     c38:	b7 07       	cpc	r27, r23
     c3a:	49 f0       	breq	.+18     	; 0xc4e <box_walls+0x96>
     c3c:	a0 17       	cp	r26, r16
     c3e:	b1 07       	cpc	r27, r17
     c40:	31 f0       	breq	.+12     	; 0xc4e <box_walls+0x96>
     c42:	24 17       	cp	r18, r20
     c44:	35 07       	cpc	r19, r21
     c46:	19 f0       	breq	.+6      	; 0xc4e <box_walls+0x96>
     c48:	2e 15       	cp	r18, r14
     c4a:	3f 05       	cpc	r19, r15
     c4c:	39 f4       	brne	.+14     	; 0xc5c <box_walls+0xa4>
			{
				cube[iz][iy] = byteline(x1,x2);
     c4e:	fe 01       	movw	r30, r28
     c50:	ea 0f       	add	r30, r26
     c52:	fb 1f       	adc	r31, r27
     c54:	e6 52       	subi	r30, 0x26	; 38
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	d0 82       	st	Z, r13
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <box_walls+0xb4>
			} else
			{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     c5c:	fe 01       	movw	r30, r28
     c5e:	ea 0f       	add	r30, r26
     c60:	fb 1f       	adc	r31, r27
     c62:	e6 52       	subi	r30, 0x26	; 38
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	80 81       	ld	r24, Z
     c68:	8c 29       	or	r24, r12
     c6a:	80 83       	st	Z, r24
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
	{
		for (iy=y1;iy<=y2;iy++)
     c6c:	11 96       	adiw	r26, 0x01	; 1
     c6e:	0a 17       	cp	r16, r26
     c70:	1b 07       	cpc	r17, r27
     c72:	0c f7       	brge	.-62     	; 0xc36 <box_walls+0x7e>
	
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	for (iz=z1;iz<=z2;iz++)
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	e2 16       	cp	r14, r18
     c7a:	f3 06       	cpc	r15, r19
     c7c:	44 f0       	brlt	.+16     	; 0xc8e <box_walls+0xd6>
     c7e:	db 01       	movw	r26, r22
	{
		for (iy=y1;iy<=y2;iy++)
		{	
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2)
			{
				cube[iz][iy] = byteline(x1,x2);
     c80:	e9 01       	movw	r28, r18
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	cc 0f       	add	r28, r28
     c86:	dd 1f       	adc	r29, r29
     c88:	9a 95       	dec	r25
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <box_walls+0xcc>
     c8c:	f0 cf       	rjmp	.-32     	; 0xc6e <box_walls+0xb6>
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
			}
		}
	}

}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	08 95       	ret

00000ca0 <box_wireframe>:

// Draw a wireframe box. This only draws the corners and edges,
// no walls.
void box_wireframe(int x1, int y1, int z1, int x2, int y2, int z2)
{
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	8f 92       	push	r8
     ca6:	9f 92       	push	r9
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	3c 01       	movw	r6, r24
     cbe:	4b 01       	movw	r8, r22
     cc0:	5a 01       	movw	r10, r20
     cc2:	69 01       	movw	r12, r18
// Makes sure x1 is alwas smaller than x2
// This is usefull for functions that uses for loops,
// to avoid infinite loops
void argorder(int ix1, int ix2, int *ox1, int *ox2)
{
	if (ix1 > ix2)
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	14 f4       	brge	.+4      	; 0xcce <box_wireframe+0x2e>
     cca:	39 01       	movw	r6, r18
     ccc:	6c 01       	movw	r12, r24

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
	return ((0xff<<start) & ~(0xff<<(end+1)));
     cce:	08 15       	cp	r16, r8
     cd0:	19 05       	cpc	r17, r9
     cd2:	1c f4       	brge	.+6      	; 0xcda <box_wireframe+0x3a>
     cd4:	c4 01       	movw	r24, r8
     cd6:	48 01       	movw	r8, r16
     cd8:	8c 01       	movw	r16, r24
     cda:	ea 14       	cp	r14, r10
     cdc:	fb 04       	cpc	r15, r11
     cde:	1c f4       	brge	.+6      	; 0xce6 <box_wireframe+0x46>
     ce0:	c5 01       	movw	r24, r10
     ce2:	57 01       	movw	r10, r14
     ce4:	7c 01       	movw	r14, r24
     ce6:	08 94       	sec
     ce8:	c1 1c       	adc	r12, r1
     cea:	d1 1c       	adc	r13, r1
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9c 01       	movw	r18, r24
     cf2:	0c 2c       	mov	r0, r12
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <box_wireframe+0x5a>
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	0a 94       	dec	r0
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <box_wireframe+0x56>
     cfe:	08 94       	sec
     d00:	c1 08       	sbc	r12, r1
     d02:	d1 08       	sbc	r13, r1
     d04:	20 95       	com	r18
     d06:	06 2c       	mov	r0, r6
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <box_wireframe+0x6e>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <box_wireframe+0x6a>
     d12:	28 23       	and	r18, r24
	argorder(x1, x2, &x1, &x2);
	argorder(y1, y2, &y1, &y2);
	argorder(z1, z2, &z1, &z2);

	// Lines along X axis
	cube[z1][y1] = byteline(x1,x2);
     d14:	d5 01       	movw	r26, r10
     d16:	43 e0       	ldi	r20, 0x03	; 3
     d18:	aa 0f       	add	r26, r26
     d1a:	bb 1f       	adc	r27, r27
     d1c:	4a 95       	dec	r20
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <box_wireframe+0x78>
     d20:	fd 01       	movw	r30, r26
     d22:	e8 0d       	add	r30, r8
     d24:	f9 1d       	adc	r31, r9
     d26:	e6 52       	subi	r30, 0x26	; 38
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	20 83       	st	Z, r18
	cube[z1][y2] = byteline(x1,x2);
     d2c:	a0 0f       	add	r26, r16
     d2e:	b1 1f       	adc	r27, r17
     d30:	a6 52       	subi	r26, 0x26	; 38
     d32:	bf 4f       	sbci	r27, 0xFF	; 255
     d34:	2c 93       	st	X, r18
	cube[z2][y1] = byteline(x1,x2);
     d36:	d7 01       	movw	r26, r14
     d38:	33 e0       	ldi	r19, 0x03	; 3
     d3a:	aa 0f       	add	r26, r26
     d3c:	bb 1f       	adc	r27, r27
     d3e:	3a 95       	dec	r19
     d40:	e1 f7       	brne	.-8      	; 0xd3a <box_wireframe+0x9a>
     d42:	fd 01       	movw	r30, r26
     d44:	e8 0d       	add	r30, r8
     d46:	f9 1d       	adc	r31, r9
     d48:	e6 52       	subi	r30, 0x26	; 38
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	20 83       	st	Z, r18
	cube[z2][y2] = byteline(x1,x2);
     d4e:	a0 0f       	add	r26, r16
     d50:	b1 1f       	adc	r27, r17
     d52:	a6 52       	subi	r26, 0x26	; 38
     d54:	bf 4f       	sbci	r27, 0xFF	; 255
     d56:	2c 93       	st	X, r18
     d58:	e4 01       	movw	r28, r8
     d5a:	15 c0       	rjmp	.+42     	; 0xd86 <box_wireframe+0xe6>

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
	{
		setvoxel(x1,iy,z1);
     d5c:	c3 01       	movw	r24, r6
     d5e:	be 01       	movw	r22, r28
     d60:	a5 01       	movw	r20, r10
     d62:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x1,iy,z2);
     d66:	c3 01       	movw	r24, r6
     d68:	be 01       	movw	r22, r28
     d6a:	a7 01       	movw	r20, r14
     d6c:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x2,iy,z1);
     d70:	c6 01       	movw	r24, r12
     d72:	be 01       	movw	r22, r28
     d74:	a5 01       	movw	r20, r10
     d76:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x2,iy,z2);
     d7a:	c6 01       	movw	r24, r12
     d7c:	be 01       	movw	r22, r28
     d7e:	a7 01       	movw	r20, r14
     d80:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
	cube[z1][y2] = byteline(x1,x2);
	cube[z2][y1] = byteline(x1,x2);
	cube[z2][y2] = byteline(x1,x2);

	// Lines along Y axis
	for (iy=y1;iy<=y2;iy++)
     d84:	21 96       	adiw	r28, 0x01	; 1
     d86:	0c 17       	cp	r16, r28
     d88:	1d 07       	cpc	r17, r29
     d8a:	44 f7       	brge	.-48     	; 0xd5c <box_wireframe+0xbc>
     d8c:	e5 01       	movw	r28, r10
     d8e:	15 c0       	rjmp	.+42     	; 0xdba <box_wireframe+0x11a>
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
	{
		setvoxel(x1,y1,iz);
     d90:	c3 01       	movw	r24, r6
     d92:	b4 01       	movw	r22, r8
     d94:	ae 01       	movw	r20, r28
     d96:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x1,y2,iz);
     d9a:	c3 01       	movw	r24, r6
     d9c:	b8 01       	movw	r22, r16
     d9e:	ae 01       	movw	r20, r28
     da0:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x2,y1,iz);
     da4:	c6 01       	movw	r24, r12
     da6:	b4 01       	movw	r22, r8
     da8:	ae 01       	movw	r20, r28
     daa:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x2,y2,iz);
     dae:	c6 01       	movw	r24, r12
     db0:	b8 01       	movw	r22, r16
     db2:	ae 01       	movw	r20, r28
     db4:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x2,iy,z1);
		setvoxel(x2,iy,z2);
	}

	// Lines along Z axis
	for (iz=z1;iz<=z2;iz++)
     db8:	21 96       	adiw	r28, 0x01	; 1
     dba:	ec 16       	cp	r14, r28
     dbc:	fd 06       	cpc	r15, r29
     dbe:	44 f7       	brge	.-48     	; 0xd90 <box_wireframe+0xf0>
		setvoxel(x1,y2,iz);
		setvoxel(x2,y1,iz);
		setvoxel(x2,y2,iz);
	}

}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	08 95       	ret

00000dde <byteline>:

// Returns a byte with a row of 1's drawn in it.
// byteline(2,5) gives 0b00111100
char byteline (int start, int end)
{
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	a9 01       	movw	r20, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <byteline+0x10>
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	6a 95       	dec	r22
     df0:	e2 f7       	brpl	.-8      	; 0xdea <byteline+0xc>
     df2:	ba 01       	movw	r22, r20
     df4:	60 95       	com	r22
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <byteline+0x1e>
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	8a 95       	dec	r24
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <byteline+0x1a>
	return ((0xff<<start) & ~(0xff<<(end+1)));
}
     e00:	86 2f       	mov	r24, r22
     e02:	82 23       	and	r24, r18
     e04:	08 95       	ret

00000e06 <flipbyte>:

// Flips a byte 180 degrees.
// MSB becomes LSB, LSB becomes MSB.
char flipbyte (char byte)
{
     e06:	48 2f       	mov	r20, r24

	flop = (flop & 0b11111110) | (0b00000001 & (byte >> 7));
	flop = (flop & 0b11111101) | (0b00000010 & (byte >> 5));
	flop = (flop & 0b11111011) | (0b00000100 & (byte >> 3));
	flop = (flop & 0b11110111) | (0b00001000 & (byte >> 1));
	flop = (flop & 0b11101111) | (0b00010000 & (byte << 1));
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	82 95       	swap	r24
     e0e:	86 95       	lsr	r24
     e10:	82 70       	andi	r24, 0x02	; 2
     e12:	94 2f       	mov	r25, r20
     e14:	99 1f       	adc	r25, r25
     e16:	99 27       	eor	r25, r25
     e18:	99 1f       	adc	r25, r25
     e1a:	89 2b       	or	r24, r25
     e1c:	94 2f       	mov	r25, r20
     e1e:	96 95       	lsr	r25
     e20:	96 95       	lsr	r25
     e22:	96 95       	lsr	r25
     e24:	94 70       	andi	r25, 0x04	; 4
     e26:	89 2b       	or	r24, r25
     e28:	46 95       	lsr	r20
     e2a:	48 70       	andi	r20, 0x08	; 8
     e2c:	84 2b       	or	r24, r20
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	92 2f       	mov	r25, r18
     e34:	90 71       	andi	r25, 0x10	; 16
     e36:	89 2b       	or	r24, r25
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	92 2f       	mov	r25, r18
     e42:	90 72       	andi	r25, 0x20	; 32
     e44:	89 2b       	or	r24, r25
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	92 2f       	mov	r25, r18
     e50:	90 74       	andi	r25, 0x40	; 64
     e52:	89 2b       	or	r24, r25
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	22 0f       	add	r18, r18
     e5a:	33 1f       	adc	r19, r19
	flop = (flop & 0b11011111) | (0b00100000 & (byte << 3));
	flop = (flop & 0b10111111) | (0b01000000 & (byte << 5));
	flop = (flop & 0b01111111) | (0b10000000 & (byte << 7));
	return flop;
}
     e5c:	82 2b       	or	r24, r18
     e5e:	08 95       	ret

00000e60 <line>:

// Draw a line between any coordinates in 3d space.
// Uses integer values for input, so dont expect smooth animations.
void line(int x1, int y1, int z1, int x2, int y2, int z2)
{
     e60:	2f 92       	push	r2
     e62:	3f 92       	push	r3
     e64:	4f 92       	push	r4
     e66:	5f 92       	push	r5
     e68:	6f 92       	push	r6
     e6a:	7f 92       	push	r7
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	66 97       	sbiw	r28, 0x16	; 22
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	2c 01       	movw	r4, r24
     e96:	5b 01       	movw	r10, r22
     e98:	4a 01       	movw	r8, r20
     e9a:	19 01       	movw	r2, r18
     e9c:	67 01       	movw	r12, r14
	unsigned char x,y,z;
	unsigned char lasty,lastz;

	// We always want to draw the line from x=0 to x=7.
	// If x1 is bigget than x2, we need to flip all the values.
	if (x1>x2)
     e9e:	28 17       	cp	r18, r24
     ea0:	39 07       	cpc	r19, r25
     ea2:	3c f4       	brge	.+14     	; 0xeb2 <line+0x52>
     ea4:	12 01       	movw	r2, r4
     ea6:	29 01       	movw	r4, r18
     ea8:	c8 01       	movw	r24, r16
     eaa:	8b 01       	movw	r16, r22
     eac:	5c 01       	movw	r10, r24
     eae:	6a 01       	movw	r12, r20
     eb0:	47 01       	movw	r8, r14
     eb2:	31 01       	movw	r6, r2
     eb4:	64 18       	sub	r6, r4
     eb6:	75 08       	sbc	r7, r5
		tmp = y2; y2 = y1; y1 = tmp;
		tmp = z2; z2 = z1; z1 = tmp;
	}

	
	if (y1>y2)
     eb8:	0a 15       	cp	r16, r10
     eba:	1b 05       	cpc	r17, r11
     ebc:	44 f4       	brge	.+16     	; 0xece <line+0x6e>
	{
		xy = (float)(y1-y2)/(float)(x2-x1);
     ebe:	b5 01       	movw	r22, r10
     ec0:	60 1b       	sub	r22, r16
     ec2:	71 0b       	sbc	r23, r17
     ec4:	88 27       	eor	r24, r24
     ec6:	77 fd       	sbrc	r23, 7
     ec8:	80 95       	com	r24
     eca:	98 2f       	mov	r25, r24
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <line+0x7c>
		lasty = y2;
	} else
	{
		xy = (float)(y2-y1)/(float)(x2-x1);
     ece:	0a 19       	sub	r16, r10
     ed0:	1b 09       	sbc	r17, r11
     ed2:	b8 01       	movw	r22, r16
     ed4:	88 27       	eor	r24, r24
     ed6:	77 fd       	sbrc	r23, 7
     ed8:	80 95       	com	r24
     eda:	98 2f       	mov	r25, r24
     edc:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     ee0:	7b 01       	movw	r14, r22
     ee2:	8c 01       	movw	r16, r24
     ee4:	b3 01       	movw	r22, r6
     ee6:	88 27       	eor	r24, r24
     ee8:	77 fd       	sbrc	r23, 7
     eea:	80 95       	com	r24
     eec:	98 2f       	mov	r25, r24
     eee:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     ef2:	9b 01       	movw	r18, r22
     ef4:	ac 01       	movw	r20, r24
     ef6:	c8 01       	movw	r24, r16
     ef8:	b7 01       	movw	r22, r14
     efa:	0e 94 23 21 	call	0x4246	; 0x4246 <__divsf3>
     efe:	6d 83       	std	Y+5, r22	; 0x05
     f00:	7e 83       	std	Y+6, r23	; 0x06
     f02:	8f 83       	std	Y+7, r24	; 0x07
     f04:	98 87       	std	Y+8, r25	; 0x08
     f06:	31 01       	movw	r6, r2
     f08:	64 18       	sub	r6, r4
     f0a:	75 08       	sbc	r7, r5
		lasty = y1;
	}

	if (z1>z2)
     f0c:	c8 14       	cp	r12, r8
     f0e:	d9 04       	cpc	r13, r9
     f10:	44 f4       	brge	.+16     	; 0xf22 <line+0xc2>
	{
		xz = (float)(z1-z2)/(float)(x2-x1);
     f12:	b4 01       	movw	r22, r8
     f14:	6c 19       	sub	r22, r12
     f16:	7d 09       	sbc	r23, r13
     f18:	88 27       	eor	r24, r24
     f1a:	77 fd       	sbrc	r23, 7
     f1c:	80 95       	com	r24
     f1e:	98 2f       	mov	r25, r24
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <line+0xd0>
		lastz = z2;
	} else
	{
		xz = (float)(z2-z1)/(float)(x2-x1);
     f22:	c8 18       	sub	r12, r8
     f24:	d9 08       	sbc	r13, r9
     f26:	b6 01       	movw	r22, r12
     f28:	88 27       	eor	r24, r24
     f2a:	77 fd       	sbrc	r23, 7
     f2c:	80 95       	com	r24
     f2e:	98 2f       	mov	r25, r24
     f30:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     f34:	7b 01       	movw	r14, r22
     f36:	8c 01       	movw	r16, r24
     f38:	b3 01       	movw	r22, r6
     f3a:	88 27       	eor	r24, r24
     f3c:	77 fd       	sbrc	r23, 7
     f3e:	80 95       	com	r24
     f40:	98 2f       	mov	r25, r24
     f42:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     f46:	9b 01       	movw	r18, r22
     f48:	ac 01       	movw	r20, r24
     f4a:	c8 01       	movw	r24, r16
     f4c:	b7 01       	movw	r22, r14
     f4e:	0e 94 23 21 	call	0x4246	; 0x4246 <__divsf3>
     f52:	69 83       	std	Y+1, r22	; 0x01
     f54:	7a 83       	std	Y+2, r23	; 0x02
     f56:	8b 83       	std	Y+3, r24	; 0x03
     f58:	9c 83       	std	Y+4, r25	; 0x04
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
     f5a:	64 2c       	mov	r6, r4
	{
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
     f5c:	c5 01       	movw	r24, r10
     f5e:	aa 27       	eor	r26, r26
     f60:	97 fd       	sbrc	r25, 7
     f62:	a0 95       	com	r26
     f64:	ba 2f       	mov	r27, r26
     f66:	8d 87       	std	Y+13, r24	; 0x0d
     f68:	9e 87       	std	Y+14, r25	; 0x0e
     f6a:	af 87       	std	Y+15, r26	; 0x0f
     f6c:	b8 8b       	std	Y+16, r27	; 0x10
     f6e:	c4 01       	movw	r24, r8
     f70:	aa 27       	eor	r26, r26
     f72:	97 fd       	sbrc	r25, 7
     f74:	a0 95       	com	r26
     f76:	ba 2f       	mov	r27, r26
     f78:	89 8b       	std	Y+17, r24	; 0x11
     f7a:	9a 8b       	std	Y+18, r25	; 0x12
     f7c:	ab 8b       	std	Y+19, r26	; 0x13
     f7e:	bc 8b       	std	Y+20, r27	; 0x14
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <line+0x1b8>


	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
	{
		y = (xy*(x-x1))+y1;
     f82:	6d 89       	ldd	r22, Y+21	; 0x15
     f84:	7e 89       	ldd	r23, Y+22	; 0x16
     f86:	64 19       	sub	r22, r4
     f88:	75 09       	sbc	r23, r5
     f8a:	88 27       	eor	r24, r24
     f8c:	77 fd       	sbrc	r23, 7
     f8e:	80 95       	com	r24
     f90:	98 2f       	mov	r25, r24
     f92:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     f96:	5b 01       	movw	r10, r22
     f98:	6c 01       	movw	r12, r24
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
     f9a:	6d 81       	ldd	r22, Y+5	; 0x05
     f9c:	7e 81       	ldd	r23, Y+6	; 0x06
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	98 85       	ldd	r25, Y+8	; 0x08
     fa2:	a6 01       	movw	r20, r12
     fa4:	95 01       	movw	r18, r10
     fa6:	0e 94 83 22 	call	0x4506	; 0x4506 <__mulsf3>
     faa:	7b 01       	movw	r14, r22
     fac:	8c 01       	movw	r16, r24
     fae:	6d 85       	ldd	r22, Y+13	; 0x0d
     fb0:	7e 85       	ldd	r23, Y+14	; 0x0e
     fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb4:	98 89       	ldd	r25, Y+16	; 0x10
     fb6:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     fba:	9b 01       	movw	r18, r22
     fbc:	ac 01       	movw	r20, r24
     fbe:	c8 01       	movw	r24, r16
     fc0:	b7 01       	movw	r22, r14
     fc2:	0e 94 bc 20 	call	0x4178	; 0x4178 <__addsf3>
     fc6:	0e 94 90 21 	call	0x4320	; 0x4320 <__fixunssfsi>
     fca:	69 87       	std	Y+9, r22	; 0x09
     fcc:	7a 87       	std	Y+10, r23	; 0x0a
     fce:	8b 87       	std	Y+11, r24	; 0x0b
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	69 81       	ldd	r22, Y+1	; 0x01
     fd4:	7a 81       	ldd	r23, Y+2	; 0x02
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	a6 01       	movw	r20, r12
     fdc:	95 01       	movw	r18, r10
     fde:	0e 94 83 22 	call	0x4506	; 0x4506 <__mulsf3>
     fe2:	7b 01       	movw	r14, r22
     fe4:	8c 01       	movw	r16, r24
     fe6:	69 89       	ldd	r22, Y+17	; 0x11
     fe8:	7a 89       	ldd	r23, Y+18	; 0x12
     fea:	8b 89       	ldd	r24, Y+19	; 0x13
     fec:	9c 89       	ldd	r25, Y+20	; 0x14
     fee:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	c8 01       	movw	r24, r16
     ff8:	b7 01       	movw	r22, r14
     ffa:	0e 94 bc 20 	call	0x4178	; 0x4178 <__addsf3>
     ffe:	0e 94 90 21 	call	0x4320	; 0x4320 <__fixunssfsi>
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	8d 89       	ldd	r24, Y+21	; 0x15
    1008:	9e 89       	ldd	r25, Y+22	; 0x16
    100a:	69 85       	ldd	r22, Y+9	; 0x09
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	42 2f       	mov	r20, r18
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
	}



	// For each step of x, y increments by:
	for (x = x1; x<=x2;x++)
    1016:	63 94       	inc	r6
    1018:	a6 2d       	mov	r26, r6
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	be 8b       	std	Y+22, r27	; 0x16
    101e:	ad 8b       	std	Y+21, r26	; 0x15
    1020:	2a 16       	cp	r2, r26
    1022:	3b 06       	cpc	r3, r27
    1024:	0c f0       	brlt	.+2      	; 0x1028 <line+0x1c8>
    1026:	ad cf       	rjmp	.-166    	; 0xf82 <line+0x122>
		y = (xy*(x-x1))+y1;
		z = (xz*(x-x1))+z1;
		setvoxel(x,y,z);
	}
	
}
    1028:	66 96       	adiw	r28, 0x16	; 22
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	3f 90       	pop	r3
    1056:	2f 90       	pop	r2
    1058:	08 95       	ret

0000105a <shift>:
// Shift the entire contents of the cube along an axis
// This is great for effects where you want to draw something
// on one side of the cube and have it flow towards the other
// side. Like rain flowing down the Z axiz.
void shift (char axis, int direction)
{
    105a:	2f 92       	push	r2
    105c:	3f 92       	push	r3
    105e:	4f 92       	push	r4
    1060:	5f 92       	push	r5
    1062:	6f 92       	push	r6
    1064:	7f 92       	push	r7
    1066:	9f 92       	push	r9
    1068:	af 92       	push	r10
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	98 2e       	mov	r9, r24
    107e:	5b 01       	movw	r10, r22
    1080:	cc 24       	eor	r12, r12
    1082:	dd 24       	eor	r13, r13
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
    1084:	a7 e0       	ldi	r26, 0x07	; 7
    1086:	2a 2e       	mov	r2, r26
    1088:	31 2c       	mov	r3, r1
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	a8 16       	cp	r10, r24
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	b8 06       	cpc	r11, r24
    1092:	11 f4       	brne	.+4      	; 0x1098 <shift+0x3e>
    1094:	76 01       	movw	r14, r12
    1096:	03 c0       	rjmp	.+6      	; 0x109e <shift+0x44>
    1098:	71 01       	movw	r14, r2
    109a:	ec 18       	sub	r14, r12
    109c:	fd 08       	sbc	r15, r13
    109e:	00 e0       	ldi	r16, 0x00	; 0
    10a0:	10 e0       	ldi	r17, 0x00	; 0
				if (direction == -1)
				{
					iii = ii+1;
				} else
				{
					iii = ii-1;
    10a2:	27 01       	movw	r4, r14
    10a4:	08 94       	sec
    10a6:	41 08       	sbc	r4, r1
    10a8:	51 08       	sbc	r5, r1
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
    10aa:	37 01       	movw	r6, r14
    10ac:	08 94       	sec
    10ae:	61 1c       	adc	r6, r1
    10b0:	71 1c       	adc	r7, r1
    10b2:	3a c0       	rjmp	.+116    	; 0x1128 <shift+0xce>
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	a8 16       	cp	r10, r24
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	b8 06       	cpc	r11, r24
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <shift+0x68>
				{
					iii = ii+1;
    10be:	c3 01       	movw	r24, r6
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <shift+0x6a>
				} else
				{
					iii = ii-1;
    10c2:	c2 01       	movw	r24, r4
    10c4:	ac 01       	movw	r20, r24
				}
				
				if (axis == AXIS_Z)
    10c6:	8a e7       	ldi	r24, 0x7A	; 122
    10c8:	98 16       	cp	r9, r24
    10ca:	49 f4       	brne	.+18     	; 0x10de <shift+0x84>
				{
					state = getvoxel(x,y,iii);
    10cc:	c8 01       	movw	r24, r16
    10ce:	be 01       	movw	r22, r28
    10d0:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    10d4:	28 2f       	mov	r18, r24
					altervoxel(x,y,ii,state);
    10d6:	c8 01       	movw	r24, r16
    10d8:	be 01       	movw	r22, r28
    10da:	a7 01       	movw	r20, r14
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <shift+0xb6>
				}
				
				if (axis == AXIS_Y)
    10de:	89 e7       	ldi	r24, 0x79	; 121
    10e0:	98 16       	cp	r9, r24
    10e2:	51 f4       	brne	.+20     	; 0x10f8 <shift+0x9e>
				{
					state = getvoxel(x,iii,y);
    10e4:	c8 01       	movw	r24, r16
    10e6:	ba 01       	movw	r22, r20
    10e8:	ae 01       	movw	r20, r28
    10ea:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    10ee:	28 2f       	mov	r18, r24
					altervoxel(x,ii,y,state);
    10f0:	c8 01       	movw	r24, r16
    10f2:	b7 01       	movw	r22, r14
    10f4:	ae 01       	movw	r20, r28
    10f6:	0c c0       	rjmp	.+24     	; 0x1110 <shift+0xb6>
				}
				
				if (axis == AXIS_X)
    10f8:	88 e7       	ldi	r24, 0x78	; 120
    10fa:	98 16       	cp	r9, r24
    10fc:	61 f4       	brne	.+24     	; 0x1116 <shift+0xbc>
				{
					state = getvoxel(iii,y,x);
    10fe:	ca 01       	movw	r24, r20
    1100:	be 01       	movw	r22, r28
    1102:	a8 01       	movw	r20, r16
    1104:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    1108:	28 2f       	mov	r18, r24
					altervoxel(ii,y,x,state);
    110a:	c7 01       	movw	r24, r14
    110c:	be 01       	movw	r22, r28
    110e:	a8 01       	movw	r20, r16
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
    1116:	21 96       	adiw	r28, 0x01	; 1
    1118:	c8 30       	cpi	r28, 0x08	; 8
    111a:	d1 05       	cpc	r29, r1
    111c:	59 f6       	brne	.-106    	; 0x10b4 <shift+0x5a>
		{
			ii = (7-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
    111e:	0f 5f       	subi	r16, 0xFF	; 255
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	08 30       	cpi	r16, 0x08	; 8
    1124:	11 05       	cpc	r17, r1
    1126:	19 f0       	breq	.+6      	; 0x112e <shift+0xd4>
    1128:	c0 e0       	ldi	r28, 0x00	; 0
    112a:	d0 e0       	ldi	r29, 0x00	; 0
    112c:	c3 cf       	rjmp	.-122    	; 0x10b4 <shift+0x5a>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
    112e:	08 94       	sec
    1130:	c1 1c       	adc	r12, r1
    1132:	d1 1c       	adc	r13, r1
    1134:	88 e0       	ldi	r24, 0x08	; 8
    1136:	c8 16       	cp	r12, r24
    1138:	d1 04       	cpc	r13, r1
    113a:	09 f0       	breq	.+2      	; 0x113e <shift+0xe4>
    113c:	a6 cf       	rjmp	.-180    	; 0x108a <shift+0x30>
				}
			}
		}
	}
	
	if (direction == -1)
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	a8 16       	cp	r10, r24
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	b8 06       	cpc	r11, r24
    1146:	19 f0       	breq	.+6      	; 0x114e <shift+0xf4>
    1148:	ee 24       	eor	r14, r14
    114a:	ff 24       	eor	r15, r15
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <shift+0xfa>
    114e:	f7 e0       	ldi	r31, 0x07	; 7
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 2c       	mov	r15, r1
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	1f c0       	rjmp	.+62     	; 0x1198 <shift+0x13e>
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
    115a:	8a e7       	ldi	r24, 0x7A	; 122
    115c:	98 16       	cp	r9, r24
    115e:	21 f4       	brne	.+8      	; 0x1168 <shift+0x10e>
				clrvoxel(x,y,i);
    1160:	c8 01       	movw	r24, r16
    1162:	be 01       	movw	r22, r28
    1164:	a7 01       	movw	r20, r14
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <shift+0x128>
				
			if (axis == AXIS_Y)
    1168:	89 e7       	ldi	r24, 0x79	; 121
    116a:	98 16       	cp	r9, r24
    116c:	21 f4       	brne	.+8      	; 0x1176 <shift+0x11c>
				clrvoxel(x,i,y);
    116e:	c8 01       	movw	r24, r16
    1170:	b7 01       	movw	r22, r14
    1172:	ae 01       	movw	r20, r28
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <shift+0x128>
			
			if (axis == AXIS_X)
    1176:	88 e7       	ldi	r24, 0x78	; 120
    1178:	98 16       	cp	r9, r24
    117a:	29 f4       	brne	.+10     	; 0x1186 <shift+0x12c>
				clrvoxel(i,y,x);
    117c:	c7 01       	movw	r24, r14
    117e:	be 01       	movw	r22, r28
    1180:	a8 01       	movw	r20, r16
    1182:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
    1186:	21 96       	adiw	r28, 0x01	; 1
    1188:	c8 30       	cpi	r28, 0x08	; 8
    118a:	d1 05       	cpc	r29, r1
    118c:	31 f7       	brne	.-52     	; 0x115a <shift+0x100>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
    118e:	0f 5f       	subi	r16, 0xFF	; 255
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	08 30       	cpi	r16, 0x08	; 8
    1194:	11 05       	cpc	r17, r1
    1196:	19 f0       	breq	.+6      	; 0x119e <shift+0x144>
    1198:	c0 e0       	ldi	r28, 0x00	; 0
    119a:	d0 e0       	ldi	r29, 0x00	; 0
    119c:	de cf       	rjmp	.-68     	; 0x115a <shift+0x100>
			
			if (axis == AXIS_X)
				clrvoxel(i,y,x);
		}
	}
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	3f 90       	pop	r3
    11be:	2f 90       	pop	r2
    11c0:	08 95       	ret

000011c2 <mirror_z>:
    }
}

// flip the cube 180 degrees along the z axis
void mirror_z (void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	c0 54       	subi	r28, 0x40	; 64
    11cc:	d0 40       	sbci	r29, 0x00	; 0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    11d8:	de 01       	movw	r26, r28
    11da:	11 96       	adiw	r26, 0x01	; 1
    11dc:	ea ed       	ldi	r30, 0xDA	; 218
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 e4       	ldi	r24, 0x40	; 64
    11e2:	01 90       	ld	r0, Z+
    11e4:	0d 92       	st	X+, r0
    11e6:	81 50       	subi	r24, 0x01	; 1
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <mirror_z+0x20>
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0

    for (y=0; y<CUBE_SIZE; y++)
    11ee:	be 01       	movw	r22, r28
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	18 c0       	rjmp	.+48     	; 0x1226 <mirror_z+0x64>
    {
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
    11f6:	8c 91       	ld	r24, X
    11f8:	f9 01       	movw	r30, r18
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	9a 95       	dec	r25
    1202:	e1 f7       	brne	.-8      	; 0x11fc <mirror_z+0x3a>
    1204:	e4 0f       	add	r30, r20
    1206:	f5 1f       	adc	r31, r21
    1208:	e6 52       	subi	r30, 0x26	; 38
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 83       	st	Z, r24
    120e:	18 96       	adiw	r26, 0x08	; 8
    1210:	21 50       	subi	r18, 0x01	; 1
    1212:	30 40       	sbci	r19, 0x00	; 0

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    {
        for (z=0; z<CUBE_SIZE; z++)
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	2f 3f       	cpi	r18, 0xFF	; 255
    1218:	38 07       	cpc	r19, r24
    121a:	69 f7       	brne	.-38     	; 0x11f6 <mirror_z+0x34>
    121c:	4f 5f       	subi	r20, 0xFF	; 255
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char z, y;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    for (y=0; y<CUBE_SIZE; y++)
    1220:	48 30       	cpi	r20, 0x08	; 8
    1222:	51 05       	cpc	r21, r1
    1224:	31 f0       	breq	.+12     	; 0x1232 <mirror_z+0x70>
    1226:	db 01       	movw	r26, r22
    1228:	a4 0f       	add	r26, r20
    122a:	b5 1f       	adc	r27, r21
    122c:	27 e0       	ldi	r18, 0x07	; 7
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	e2 cf       	rjmp	.-60     	; 0x11f6 <mirror_z+0x34>
        for (z=0; z<CUBE_SIZE; z++)
        {
            cube[CUBE_SIZE-1-z][y] = buffer[z][y];
        }
    }
}
    1232:	c0 5c       	subi	r28, 0xC0	; 192
    1234:	df 4f       	sbci	r29, 0xFF	; 255
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <mirror_x>:

}

// Flip the cube 180 degrees along the x axis
void mirror_x (void)
{
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	c0 54       	subi	r28, 0x40	; 64
    1264:	d0 40       	sbci	r29, 0x00	; 0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    1270:	de 01       	movw	r26, r28
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	ea ed       	ldi	r30, 0xDA	; 218
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 e4       	ldi	r24, 0x40	; 64
    127a:	01 90       	ld	r0, Z+
    127c:	0d 92       	st	X+, r0
    127e:	81 50       	subi	r24, 0x01	; 1
    1280:	e1 f7       	brne	.-8      	; 0x127a <mirror_x+0x34>

    fill(0x00);
    1282:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    1286:	ee 24       	eor	r14, r14
    1288:	ff 24       	eor	r15, r15
    
    for (z=0; z<CUBE_SIZE; z++)
    128a:	4e 01       	movw	r8, r28
    128c:	08 94       	sec
    128e:	81 1c       	adc	r8, r1
    1290:	91 1c       	adc	r9, r1
    1292:	17 c0       	rjmp	.+46     	; 0x12c2 <mirror_x+0x7c>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    1294:	f6 01       	movw	r30, r12
    1296:	81 91       	ld	r24, Z+
    1298:	6f 01       	movw	r12, r30
    129a:	0e 94 03 07 	call	0xe06	; 0xe06 <flipbyte>
    129e:	f5 01       	movw	r30, r10
    12a0:	e0 0f       	add	r30, r16
    12a2:	f1 1f       	adc	r31, r17
    12a4:	e6 52       	subi	r30, 0x26	; 38
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 83       	st	Z, r24
    12aa:	0f 5f       	subi	r16, 0xFF	; 255
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    12ae:	08 30       	cpi	r16, 0x08	; 8
    12b0:	11 05       	cpc	r17, r1
    12b2:	81 f7       	brne	.-32     	; 0x1294 <mirror_x+0x4e>
    12b4:	08 94       	sec
    12b6:	e1 1c       	adc	r14, r1
    12b8:	f1 1c       	adc	r15, r1

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    
    for (z=0; z<CUBE_SIZE; z++)
    12ba:	f8 e0       	ldi	r31, 0x08	; 8
    12bc:	ef 16       	cp	r14, r31
    12be:	f1 04       	cpc	r15, r1
    12c0:	69 f0       	breq	.+26     	; 0x12dc <mirror_x+0x96>
    12c2:	c7 01       	movw	r24, r14
    12c4:	23 e0       	ldi	r18, 0x03	; 3
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	2a 95       	dec	r18
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <mirror_x+0x80>
    12ce:	64 01       	movw	r12, r8
    12d0:	c8 0e       	add	r12, r24
    12d2:	d9 1e       	adc	r13, r25
    12d4:	00 e0       	ldi	r16, 0x00	; 0
    12d6:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            // This will break with different buffer sizes..
            cube[z][y] = flipbyte(buffer[z][y]);
    12d8:	5c 01       	movw	r10, r24
    12da:	dc cf       	rjmp	.-72     	; 0x1294 <mirror_x+0x4e>
        }
    }
}
    12dc:	c0 5c       	subi	r28, 0xC0	; 192
    12de:	df 4f       	sbci	r29, 0xFF	; 255
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	8f 90       	pop	r8
    1302:	08 95       	ret

00001304 <mirror_y>:
	}
}

// Flip the cube 180 degrees along the y axis.
void mirror_y (void)
{
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	c0 54       	subi	r28, 0x40	; 64
    1322:	d0 40       	sbci	r29, 0x00	; 0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[CUBE_SIZE][CUBE_SIZE];
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.
    132e:	de 01       	movw	r26, r28
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	ea ed       	ldi	r30, 0xDA	; 218
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 e4       	ldi	r24, 0x40	; 64
    1338:	01 90       	ld	r0, Z+
    133a:	0d 92       	st	X+, r0
    133c:	81 50       	subi	r24, 0x01	; 1
    133e:	e1 f7       	brne	.-8      	; 0x1338 <mirror_y+0x34>

    fill(0x00);
    1340:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    1344:	aa 24       	eor	r10, r10
    1346:	bb 24       	eor	r11, r11
    for (z=0; z<CUBE_SIZE; z++)
    1348:	4e 01       	movw	r8, r28
    134a:	08 94       	sec
    134c:	81 1c       	adc	r8, r1
    134e:	91 1c       	adc	r9, r1
    1350:	2a c0       	rjmp	.+84     	; 0x13a6 <mirror_y+0xa2>
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
            {
                if (buffer[z][y] & (0x01 << x))
    1352:	f7 01       	movw	r30, r14
    1354:	80 81       	ld	r24, Z
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	00 2e       	mov	r0, r16
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <mirror_y+0x5c>
    135c:	95 95       	asr	r25
    135e:	87 95       	ror	r24
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <mirror_y+0x58>
    1364:	80 ff       	sbrs	r24, 0
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <mirror_y+0x6e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
    1368:	c8 01       	movw	r24, r16
    136a:	b6 01       	movw	r22, r12
    136c:	a5 01       	movw	r20, r10
    136e:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    1372:	0f 5f       	subi	r16, 0xFF	; 255
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
        {
            for (x=0; x<CUBE_SIZE; x++)
    1376:	08 30       	cpi	r16, 0x08	; 8
    1378:	11 05       	cpc	r17, r1
    137a:	59 f7       	brne	.-42     	; 0x1352 <mirror_y+0x4e>
    137c:	08 94       	sec
    137e:	e1 1c       	adc	r14, r1
    1380:	f1 1c       	adc	r15, r1
    1382:	08 94       	sec
    1384:	c1 08       	sbc	r12, r1
    1386:	d1 08       	sbc	r13, r1
    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    {
        for (y=0; y<CUBE_SIZE; y++)
    1388:	ff ef       	ldi	r31, 0xFF	; 255
    138a:	cf 16       	cp	r12, r31
    138c:	ff ef       	ldi	r31, 0xFF	; 255
    138e:	df 06       	cpc	r13, r31
    1390:	19 f0       	breq	.+6      	; 0x1398 <mirror_y+0x94>
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	dd cf       	rjmp	.-70     	; 0x1352 <mirror_y+0x4e>
    1398:	08 94       	sec
    139a:	a1 1c       	adc	r10, r1
    139c:	b1 1c       	adc	r11, r1
    unsigned char x,y,z;

    memcpy(buffer, cube, CUBE_BYTES); // copy the current cube into a buffer.

    fill(0x00);
    for (z=0; z<CUBE_SIZE; z++)
    139e:	88 e0       	ldi	r24, 0x08	; 8
    13a0:	a8 16       	cp	r10, r24
    13a2:	b1 04       	cpc	r11, r1
    13a4:	61 f0       	breq	.+24     	; 0x13be <mirror_y+0xba>
    13a6:	75 01       	movw	r14, r10
    13a8:	43 e0       	ldi	r20, 0x03	; 3
    13aa:	ee 0c       	add	r14, r14
    13ac:	ff 1c       	adc	r15, r15
    13ae:	4a 95       	dec	r20
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <mirror_y+0xa6>
    13b2:	e8 0c       	add	r14, r8
    13b4:	f9 1c       	adc	r15, r9
    13b6:	37 e0       	ldi	r19, 0x07	; 7
    13b8:	c3 2e       	mov	r12, r19
    13ba:	d1 2c       	mov	r13, r1
    13bc:	ea cf       	rjmp	.-44     	; 0x1392 <mirror_y+0x8e>
                    setvoxel(x,CUBE_SIZE-1-y,z);
            }
        }
    }

}
    13be:	c0 5c       	subi	r28, 0xC0	; 192
    13c0:	df 4f       	sbci	r29, 0xFF	; 255
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	08 95       	ret

000013e6 <tmp2cube>:
}
*/
// Copies the contents of fb (temp cube buffer) into the rendering buffer
void tmp2cube (void)
{	
    memcpy(cube, fb, 64); // copy the current cube into a buffer.
    13e6:	aa ed       	ldi	r26, 0xDA	; 218
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e9       	ldi	r30, 0x9A	; 154
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 e4       	ldi	r24, 0x40	; 64
    13f0:	01 90       	ld	r0, Z+
    13f2:	0d 92       	st	X+, r0
    13f4:	81 50       	subi	r24, 0x01	; 1
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <tmp2cube+0xa>
}
    13f8:	08 95       	ret

000013fa <effect_telcstairs_do>:
	}
	
}

int effect_telcstairs_do(int x, int val, int delay)
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
    1400:	dc 01       	movw	r26, r24
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <effect_telcstairs_do+0x36>
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
	{
		if(x < CUBE_SIZE && y < CUBE_SIZE)
    1408:	a8 30       	cpi	r26, 0x08	; 8
    140a:	b1 05       	cpc	r27, r1
    140c:	74 f4       	brge	.+28     	; 0x142a <effect_telcstairs_do+0x30>
    140e:	28 30       	cpi	r18, 0x08	; 8
    1410:	31 05       	cpc	r19, r1
    1412:	5c f4       	brge	.+22     	; 0x142a <effect_telcstairs_do+0x30>
		{
			cube[x][y] = val;
    1414:	fd 01       	movw	r30, r26
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	8a 95       	dec	r24
    141e:	e1 f7       	brne	.-8      	; 0x1418 <effect_telcstairs_do+0x1e>
    1420:	e2 0f       	add	r30, r18
    1422:	f3 1f       	adc	r31, r19
    1424:	e6 52       	subi	r30, 0x26	; 38
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	60 83       	st	Z, r22

int effect_telcstairs_do(int x, int val, int delay)
{
	int y,z;

	for(y = 0, z = x; y <= z; y++, x--)
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	11 97       	sbiw	r26, 0x01	; 1
    1430:	c2 17       	cp	r28, r18
    1432:	d3 07       	cpc	r29, r19
    1434:	4c f7       	brge	.-46     	; 0x1408 <effect_telcstairs_do+0xe>
		if(x < CUBE_SIZE && y < CUBE_SIZE)
		{
			cube[x][y] = val;
		}
	}
	delay_ms(delay);
    1436:	ca 01       	movw	r24, r20
    1438:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
	return z;
}
    143c:	ce 01       	movw	r24, r28
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <effect_telcstairs>:

void effect_telcstairs (int invert, int delay, int val)
{
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	8b 01       	movw	r16, r22
    144e:	ea 01       	movw	r28, r20
	int x;

	if(invert)
    1450:	89 2b       	or	r24, r25
    1452:	51 f0       	breq	.+20     	; 0x1468 <effect_telcstairs+0x24>
    1454:	80 e1       	ldi	r24, 0x10	; 16
    1456:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
		{
			x = effect_telcstairs_do(x,val,delay);
    1458:	be 01       	movw	r22, r28
    145a:	a8 01       	movw	r20, r16
    145c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <effect_telcstairs_do>
{
	int x;

	if(invert)
	{
		for(x = CUBE_SIZE*2; x >= 0; x--)
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	97 ff       	sbrs	r25, 7
    1464:	f9 cf       	rjmp	.-14     	; 0x1458 <effect_telcstairs+0x14>
    1466:	0a c0       	rjmp	.+20     	; 0x147c <effect_telcstairs+0x38>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
		{
			x = effect_telcstairs_do(x,val,delay);
    146c:	be 01       	movw	r22, r28
    146e:	a8 01       	movw	r20, r16
    1470:	0e 94 fd 09 	call	0x13fa	; 0x13fa <effect_telcstairs_do>
			x = effect_telcstairs_do(x,val,delay);
		}
	}
	else
	{
		for(x = 0; x < CUBE_SIZE*2; x++)
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	80 31       	cpi	r24, 0x10	; 16
    1478:	91 05       	cpc	r25, r1
    147a:	c4 f3       	brlt	.-16     	; 0x146c <effect_telcstairs+0x28>
		{
			x = effect_telcstairs_do(x,val,delay);
		}
	}
}
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <sendvoxel_z>:


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
    1486:	7f 92       	push	r7
    1488:	8f 92       	push	r8
    148a:	9f 92       	push	r9
    148c:	af 92       	push	r10
    148e:	bf 92       	push	r11
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	e8 2e       	mov	r14, r24
    14a2:	f6 2e       	mov	r15, r22
    14a4:	74 2e       	mov	r7, r20
    14a6:	69 01       	movw	r12, r18
    14a8:	c0 e0       	ldi	r28, 0x00	; 0
    14aa:	d0 e0       	ldi	r29, 0x00	; 0
    14ac:	27 e0       	ldi	r18, 0x07	; 7
    14ae:	82 2e       	mov	r8, r18
    14b0:	91 2c       	mov	r9, r1
	for (i=0; i<8; i++)
	{
		if (z == 7)
		{
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    14b2:	98 e0       	ldi	r25, 0x08	; 8
    14b4:	a9 2e       	mov	r10, r25
    14b6:	b1 2c       	mov	r11, r1
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
	{
		if (z == 7)
    14b8:	87 e0       	ldi	r24, 0x07	; 7
    14ba:	78 16       	cp	r7, r24
    14bc:	69 f4       	brne	.+26     	; 0x14d8 <sendvoxel_z+0x52>


// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
    14be:	84 01       	movw	r16, r8
    14c0:	0c 1b       	sub	r16, r28
    14c2:	1d 0b       	sbc	r17, r29
	for (i=0; i<8; i++)
	{
		if (z == 7)
		{
			ii = 7-i;
			clrvoxel(x,y,ii+1);
    14c4:	a5 01       	movw	r20, r10
    14c6:	4c 1b       	sub	r20, r28
    14c8:	5d 0b       	sbc	r21, r29
    14ca:	8e 2d       	mov	r24, r14
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	6f 2d       	mov	r22, r15
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
    14d6:	0a c0       	rjmp	.+20     	; 0x14ec <sendvoxel_z+0x66>
		} else
		{
			ii = i;
			clrvoxel(x,y,ii-1);
    14d8:	ae 01       	movw	r20, r28
    14da:	41 50       	subi	r20, 0x01	; 1
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	8e 2d       	mov	r24, r14
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	6f 2d       	mov	r22, r15
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
    14ea:	8e 01       	movw	r16, r28
		}
		setvoxel(x,y,ii);
    14ec:	8e 2d       	mov	r24, r14
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	6f 2d       	mov	r22, r15
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	a8 01       	movw	r20, r16
    14f6:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		delay_ms(delay);
    14fa:	c6 01       	movw	r24, r12
    14fc:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<8; i++)
    1500:	21 96       	adiw	r28, 0x01	; 1
    1502:	c8 30       	cpi	r28, 0x08	; 8
    1504:	d1 05       	cpc	r29, r1
    1506:	c1 f6       	brne	.-80     	; 0x14b8 <sendvoxel_z+0x32>
			clrvoxel(x,y,ii-1);
		}
		setvoxel(x,y,ii);
		delay_ms(delay);
	}
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
    151c:	9f 90       	pop	r9
    151e:	8f 90       	pop	r8
    1520:	7f 90       	pop	r7
    1522:	08 95       	ret

00001524 <effect_pathmove>:
	}
}


void effect_pathmove (const unsigned char *path, int length)
{
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	6c 01       	movw	r12, r24
	int i,z;
	unsigned char state;
	
	for (i= (length - 1); i >= 1; i--)
    1536:	7b 01       	movw	r14, r22
    1538:	08 94       	sec
    153a:	e1 08       	sbc	r14, r1
    153c:	f1 08       	sbc	r15, r1
    153e:	8b 01       	movw	r16, r22
    1540:	02 50       	subi	r16, 0x02	; 2
    1542:	10 40       	sbci	r17, 0x00	; 0
    1544:	08 0f       	add	r16, r24
    1546:	19 1f       	adc	r17, r25
    1548:	25 c0       	rjmp	.+74     	; 0x1594 <effect_pathmove+0x70>
    154a:	c0 e0       	ldi	r28, 0x00	; 0
    154c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (z = 0; z < 8; z++)
		{
			state = getvoxel(((path[(i - 1)] >> 4) & 0x0f), (path[(i - 1)] & 0x0f), z);
    154e:	f8 01       	movw	r30, r16
    1550:	80 81       	ld	r24, Z
    1552:	68 2f       	mov	r22, r24
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	6f 70       	andi	r22, 0x0F	; 15
    1558:	70 70       	andi	r23, 0x00	; 0
    155a:	82 95       	swap	r24
    155c:	8f 70       	andi	r24, 0x0F	; 15
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	ae 01       	movw	r20, r28
    1562:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    1566:	28 2f       	mov	r18, r24
			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
    1568:	f8 01       	movw	r30, r16
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	68 2f       	mov	r22, r24
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	6f 70       	andi	r22, 0x0F	; 15
    1572:	70 70       	andi	r23, 0x00	; 0
    1574:	82 95       	swap	r24
    1576:	8f 70       	andi	r24, 0x0F	; 15
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	ae 01       	movw	r20, r28
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <altervoxel>
	int i,z;
	unsigned char state;
	
	for (i= (length - 1); i >= 1; i--)
	{
		for (z = 0; z < 8; z++)
    1582:	21 96       	adiw	r28, 0x01	; 1
    1584:	c8 30       	cpi	r28, 0x08	; 8
    1586:	d1 05       	cpc	r29, r1
    1588:	11 f7       	brne	.-60     	; 0x154e <effect_pathmove+0x2a>
void effect_pathmove (const unsigned char *path, int length)
{
	int i,z;
	unsigned char state;
	
	for (i= (length - 1); i >= 1; i--)
    158a:	08 94       	sec
    158c:	e1 08       	sbc	r14, r1
    158e:	f1 08       	sbc	r15, r1
    1590:	01 50       	subi	r16, 0x01	; 1
    1592:	10 40       	sbci	r17, 0x00	; 0
    1594:	1e 14       	cp	r1, r14
    1596:	1f 04       	cpc	r1, r15
    1598:	c4 f2       	brlt	.-80     	; 0x154a <effect_pathmove+0x26>
    159a:	c0 e0       	ldi	r28, 0x00	; 0
    159c:	d0 e0       	ldi	r29, 0x00	; 0
			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i = 0;i < 8; i++)
	{
		clrvoxel(((path[0] >> 4) & 0x0f), (path[0] & 0x0f), i);
    159e:	f6 01       	movw	r30, r12
    15a0:	80 81       	ld	r24, Z
    15a2:	68 2f       	mov	r22, r24
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	6f 70       	andi	r22, 0x0F	; 15
    15a8:	70 70       	andi	r23, 0x00	; 0
    15aa:	82 95       	swap	r24
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	ae 01       	movw	r20, r28
    15b2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
		{
			state = getvoxel(((path[(i - 1)] >> 4) & 0x0f), (path[(i - 1)] & 0x0f), z);
			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i = 0;i < 8; i++)
    15b6:	21 96       	adiw	r28, 0x01	; 1
    15b8:	c8 30       	cpi	r28, 0x08	; 8
    15ba:	d1 05       	cpc	r29, r1
    15bc:	81 f7       	brne	.-32     	; 0x159e <effect_pathmove+0x7a>
	{
		clrvoxel(((path[0] >> 4) & 0x0f), (path[0] & 0x0f), i);
	}
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	08 95       	ret

000015d0 <effect_path_bitmap>:
		delay_ms(delay);
	}
}

void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    15d0:	5f 92       	push	r5
    15d2:	6f 92       	push	r6
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	6c 97       	sbiw	r28, 0x1c	; 28
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	4c 01       	movw	r8, r24
    1600:	56 2e       	mov	r5, r22
    1602:	3a 01       	movw	r6, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	5e 01       	movw	r10, r28
    1608:	08 94       	sec
    160a:	a1 1c       	adc	r10, r1
    160c:	b1 1c       	adc	r11, r1
    160e:	b5 01       	movw	r22, r10
    1610:	4c e1       	ldi	r20, 0x1C	; 28
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <font_getpath>
    1618:	cc 24       	eor	r12, r12
    161a:	dd 24       	eor	r13, r13
    161c:	3f c0       	rjmp	.+126    	; 0x169c <effect_path_bitmap+0xcc>
	{	
		for (ii = 0; ii < 8; ii++)
		{		
			for (z = 0; z < 8; z++)
			{
				if (font_getbitmappixel(bitmap, (7 - z), ii))
    161e:	85 2d       	mov	r24, r5
    1620:	6f 2d       	mov	r22, r15
    1622:	4e 2d       	mov	r20, r14
    1624:	0e 94 ed 19 	call	0x33da	; 0x33da <font_getbitmappixel>
    1628:	88 23       	and	r24, r24
    162a:	41 f0       	breq	.+16     	; 0x163c <effect_path_bitmap+0x6c>
				{
					setvoxel(0, 7, z);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	67 e0       	ldi	r22, 0x07	; 7
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	a8 01       	movw	r20, r16
    1636:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    163a:	07 c0       	rjmp	.+14     	; 0x164a <effect_path_bitmap+0x7a>
				}
				else
				{
					clrvoxel(0, 7, z);
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	67 e0       	ldi	r22, 0x07	; 7
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	a8 01       	movw	r20, r16
    1646:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
	
	for (i=0; i < iterations; i++)
	{	
		for (ii = 0; ii < 8; ii++)
		{		
			for (z = 0; z < 8; z++)
    164a:	0f 5f       	subi	r16, 0xFF	; 255
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	fa 94       	dec	r15
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	f8 16       	cp	r15, r24
    1654:	21 f7       	brne	.-56     	; 0x161e <effect_path_bitmap+0x4e>
				{
					clrvoxel(0, 7, z);
				}
				
			}
			delay_ms(delay);
    1656:	c4 01       	movw	r24, r8
    1658:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			effect_pathmove(path, 28);
    165c:	c5 01       	movw	r24, r10
    165e:	6c e1       	ldi	r22, 0x1C	; 28
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
    1666:	e3 94       	inc	r14
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii = 0; ii < 8; ii++)
    1668:	88 e0       	ldi	r24, 0x08	; 8
    166a:	e8 16       	cp	r14, r24
    166c:	29 f0       	breq	.+10     	; 0x1678 <effect_path_bitmap+0xa8>
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	37 e0       	ldi	r19, 0x07	; 7
    1674:	f3 2e       	mov	r15, r19
    1676:	d3 cf       	rjmp	.-90     	; 0x161e <effect_path_bitmap+0x4e>
    1678:	00 e0       	ldi	r16, 0x00	; 0
    167a:	10 e0       	ldi	r17, 0x00	; 0
			effect_pathmove(path, 28);
		}
	
		for (ii = 0; ii < 20; ii++)
		{
			delay_ms(delay);
    167c:	c4 01       	movw	r24, r8
    167e:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			effect_pathmove(path, 28);
    1682:	c5 01       	movw	r24, r10
    1684:	6c e1       	ldi	r22, 0x1C	; 28
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
			}
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	
		for (ii = 0; ii < 20; ii++)
    168c:	0f 5f       	subi	r16, 0xFF	; 255
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	04 31       	cpi	r16, 0x14	; 20
    1692:	11 05       	cpc	r17, r1
    1694:	99 f7       	brne	.-26     	; 0x167c <effect_path_bitmap+0xac>
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0,path,28);
	
	for (i=0; i < iterations; i++)
    1696:	08 94       	sec
    1698:	c1 1c       	adc	r12, r1
    169a:	d1 1c       	adc	r13, r1
    169c:	c6 14       	cp	r12, r6
    169e:	d7 04       	cpc	r13, r7
    16a0:	14 f4       	brge	.+4      	; 0x16a6 <effect_path_bitmap+0xd6>
    16a2:	ee 24       	eor	r14, r14
    16a4:	e4 cf       	rjmp	.-56     	; 0x166e <effect_path_bitmap+0x9e>
    16a6:	00 e0       	ldi	r16, 0x00	; 0
    16a8:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	for (ii = 0; ii < 10; ii++)
	{
		delay_ms(delay);
		effect_pathmove(path, 28);
    16aa:	7e 01       	movw	r14, r28
    16ac:	08 94       	sec
    16ae:	e1 1c       	adc	r14, r1
    16b0:	f1 1c       	adc	r15, r1
			effect_pathmove(path, 28);
		}
	}
	for (ii = 0; ii < 10; ii++)
	{
		delay_ms(delay);
    16b2:	c4 01       	movw	r24, r8
    16b4:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		effect_pathmove(path, 28);
    16b8:	c7 01       	movw	r24, r14
    16ba:	6c e1       	ldi	r22, 0x1C	; 28
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
		{
			delay_ms(delay);
			effect_pathmove(path, 28);
		}
	}
	for (ii = 0; ii < 10; ii++)
    16c2:	0f 5f       	subi	r16, 0xFF	; 255
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	0a 30       	cpi	r16, 0x0A	; 10
    16c8:	11 05       	cpc	r17, r1
    16ca:	99 f7       	brne	.-26     	; 0x16b2 <effect_path_bitmap+0xe2>
	{
		delay_ms(delay);
		effect_pathmove(path, 28);
	}
    16cc:	6c 96       	adiw	r28, 0x1c	; 28
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	08 95       	ret

000016f8 <effect_path_text>:
		
	}
}

void effect_path_text (int delay, const char *str, unsigned char prgMem)
{
    16f8:	2f 92       	push	r2
    16fa:	3f 92       	push	r3
    16fc:	4f 92       	push	r4
    16fe:	5f 92       	push	r5
    1700:	6f 92       	push	r6
    1702:	7f 92       	push	r7
    1704:	8f 92       	push	r8
    1706:	9f 92       	push	r9
    1708:	af 92       	push	r10
    170a:	bf 92       	push	r11
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	a1 97       	sbiw	r28, 0x21	; 33
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	78 2e       	mov	r7, r24
    172e:	a9 2e       	mov	r10, r25
    1730:	2b 01       	movw	r4, r22
    1732:	64 2e       	mov	r6, r20
	int z, i, ii;
	z = 4;
	unsigned char path[28];
	font_getpath(0, path, 28);
    1734:	56 e0       	ldi	r21, 0x06	; 6
    1736:	85 2e       	mov	r8, r21
    1738:	91 2c       	mov	r9, r1
    173a:	8c 0e       	add	r8, r28
    173c:	9d 1e       	adc	r9, r29
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	b4 01       	movw	r22, r8
    1742:	4c e1       	ldi	r20, 0x1C	; 28
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <font_getpath>
	
	unsigned char chr[5];
	unsigned char stripe;

	unsigned char tempChar = GetChar(str, prgMem);
    174a:	c2 01       	movw	r24, r4
    174c:	66 2d       	mov	r22, r6
    174e:	0e 94 3c 20 	call	0x4078	; 0x4078 <GetChar>
    1752:	bb 24       	eor	r11, r11
				{
					clrvoxel(0, 7, z);
				}
				
			}
			effect_pathmove(path, 28);
    1754:	14 01       	movw	r2, r8
    1756:	4e c0       	rjmp	.+156    	; 0x17f4 <effect_path_text+0xfc>
	unsigned char tempChar = GetChar(str, prgMem);
	uint8_t pos = 0;
	
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
    1758:	be 01       	movw	r22, r28
    175a:	6f 5f       	subi	r22, 0xFF	; 255
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	0e 94 2a 1a 	call	0x3454	; 0x3454 <font_getchar>
    1762:	7e 01       	movw	r14, r28
    1764:	08 94       	sec
    1766:	e1 1c       	adc	r14, r1
    1768:	f1 1c       	adc	r15, r1
		
		for (ii = 0; ii < 5; ii++)
		{
			stripe = chr[ii];
    176a:	f7 01       	movw	r30, r14
    176c:	80 81       	ld	r24, Z
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	10 e0       	ldi	r17, 0x00	; 0
			
			for (z = 0; z < 8; z++)
			{
				if ((stripe >> (7 - z)) & 0x01)
    1772:	c8 2e       	mov	r12, r24
    1774:	dd 24       	eor	r13, r13
    1776:	87 e0       	ldi	r24, 0x07	; 7
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	80 1b       	sub	r24, r16
    177c:	91 0b       	sbc	r25, r17
    177e:	96 01       	movw	r18, r12
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <effect_path_text+0x8e>
    1782:	35 95       	asr	r19
    1784:	27 95       	ror	r18
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <effect_path_text+0x8a>
    178a:	20 ff       	sbrs	r18, 0
    178c:	08 c0       	rjmp	.+16     	; 0x179e <effect_path_text+0xa6>
				{
					setvoxel(0, 7, z);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	67 e0       	ldi	r22, 0x07	; 7
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	a8 01       	movw	r20, r16
    1798:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <effect_path_text+0xb4>
				} 
				else
				{
					clrvoxel(0, 7, z);
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	67 e0       	ldi	r22, 0x07	; 7
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	a8 01       	movw	r20, r16
    17a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
		
		for (ii = 0; ii < 5; ii++)
		{
			stripe = chr[ii];
			
			for (z = 0; z < 8; z++)
    17ac:	0f 5f       	subi	r16, 0xFF	; 255
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	08 30       	cpi	r16, 0x08	; 8
    17b2:	11 05       	cpc	r17, r1
    17b4:	01 f7       	brne	.-64     	; 0x1776 <effect_path_text+0x7e>
				{
					clrvoxel(0, 7, z);
				}
				
			}
			effect_pathmove(path, 28);
    17b6:	c4 01       	movw	r24, r8
    17b8:	6c e1       	ldi	r22, 0x1C	; 28
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
			delay_ms(delay);
    17c0:	87 2d       	mov	r24, r7
    17c2:	9a 2d       	mov	r25, r10
    17c4:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    17c8:	08 94       	sec
    17ca:	e1 1c       	adc	r14, r1
    17cc:	f1 1c       	adc	r15, r1
	
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
		
		for (ii = 0; ii < 5; ii++)
    17ce:	e2 14       	cp	r14, r2
    17d0:	f3 04       	cpc	r15, r3
    17d2:	59 f6       	brne	.-106    	; 0x176a <effect_path_text+0x72>
			}
			effect_pathmove(path, 28);
			delay_ms(delay);
		}
	
		effect_pathmove(path, 28);
    17d4:	c1 01       	movw	r24, r2
    17d6:	6c e1       	ldi	r22, 0x1C	; 28
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
		delay_ms(delay);
    17de:	87 2d       	mov	r24, r7
    17e0:	9a 2d       	mov	r25, r10
    17e2:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>

		pos++;
    17e6:	b3 94       	inc	r11
		tempChar = GetChar(&(str[pos]), prgMem);
    17e8:	c2 01       	movw	r24, r4
    17ea:	8b 0d       	add	r24, r11
    17ec:	91 1d       	adc	r25, r1
    17ee:	66 2d       	mov	r22, r6
    17f0:	0e 94 3c 20 	call	0x4078	; 0x4078 <GetChar>
	unsigned char stripe;

	unsigned char tempChar = GetChar(str, prgMem);
	uint8_t pos = 0;
	
	while (tempChar != 0)
    17f4:	88 23       	and	r24, r24
    17f6:	09 f0       	breq	.+2      	; 0x17fa <effect_path_text+0x102>
    17f8:	af cf       	rjmp	.-162    	; 0x1758 <effect_path_text+0x60>
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	10 e0       	ldi	r17, 0x00	; 0
		tempChar = GetChar(&(str[pos]), prgMem);
	}

	for (i = 0; i < 28; i++)
	{
		effect_pathmove(path, 28);
    17fe:	46 e0       	ldi	r20, 0x06	; 6
    1800:	e4 2e       	mov	r14, r20
    1802:	f1 2c       	mov	r15, r1
    1804:	ec 0e       	add	r14, r28
    1806:	fd 1e       	adc	r15, r29
    1808:	c7 01       	movw	r24, r14
    180a:	6c e1       	ldi	r22, 0x1C	; 28
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
		delay_ms(delay);
    1812:	87 2d       	mov	r24, r7
    1814:	9a 2d       	mov	r25, r10
    1816:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>

		pos++;
		tempChar = GetChar(&(str[pos]), prgMem);
	}

	for (i = 0; i < 28; i++)
    181a:	0f 5f       	subi	r16, 0xFF	; 255
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	0c 31       	cpi	r16, 0x1C	; 28
    1820:	11 05       	cpc	r17, r1
    1822:	91 f7       	brne	.-28     	; 0x1808 <effect_path_text+0x110>
	{
		effect_pathmove(path, 28);
		delay_ms(delay);
	}
}
    1824:	a1 96       	adiw	r28, 0x21	; 33
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	8f 90       	pop	r8
    1848:	7f 90       	pop	r7
    184a:	6f 90       	pop	r6
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	3f 90       	pop	r3
    1852:	2f 90       	pop	r2
    1854:	08 95       	ret

00001856 <effect_pathspiral>:
		delay_ms(delay);
	}
}

void effect_pathspiral (int iterations, int delay)
{
    1856:	9f 92       	push	r9
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	60 97       	sbiw	r28, 0x10	; 16
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	5c 01       	movw	r10, r24
    187e:	6b 01       	movw	r12, r22
	int z, i;
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	8e 01       	movw	r16, r28
    1884:	0f 5f       	subi	r16, 0xFF	; 255
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	b8 01       	movw	r22, r16
    188a:	40 e1       	ldi	r20, 0x10	; 16
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <font_getpath>
    1892:	ee 24       	eor	r14, r14
    1894:	ff 24       	eor	r15, r15
	
	for (i = 0; i < iterations; i++)
	{
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
    1896:	90 2e       	mov	r9, r16
    1898:	01 2f       	mov	r16, r17
    189a:	15 c0       	rjmp	.+42     	; 0x18c6 <effect_pathspiral+0x70>
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
	{
		setvoxel(4,0,i%8);
    189c:	a7 01       	movw	r20, r14
    189e:	47 70       	andi	r20, 0x07	; 7
    18a0:	50 70       	andi	r21, 0x00	; 0
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		delay_ms(delay);
    18ae:	c6 01       	movw	r24, r12
    18b0:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		effect_pathmove(path, 28);
    18b4:	89 2d       	mov	r24, r9
    18b6:	90 2f       	mov	r25, r16
    18b8:	6c e1       	ldi	r22, 0x1C	; 28
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
    18c0:	08 94       	sec
    18c2:	e1 1c       	adc	r14, r1
    18c4:	f1 1c       	adc	r15, r1
    18c6:	ea 14       	cp	r14, r10
    18c8:	fb 04       	cpc	r15, r11
    18ca:	44 f3       	brlt	.-48     	; 0x189c <effect_pathspiral+0x46>
		setvoxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
		
	}
}
    18cc:	60 96       	adiw	r28, 0x10	; 16
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	df 90       	pop	r13
    18e6:	cf 90       	pop	r12
    18e8:	bf 90       	pop	r11
    18ea:	af 90       	pop	r10
    18ec:	9f 90       	pop	r9
    18ee:	08 95       	ret

000018f0 <effect_rand_patharound>:
		clrvoxel(((path[0] >> 4) & 0x0f), (path[0] & 0x0f), i);
	}
}

void effect_rand_patharound (int iterations, int delay)
{
    18f0:	7f 92       	push	r7
    18f2:	8f 92       	push	r8
    18f4:	9f 92       	push	r9
    18f6:	af 92       	push	r10
    18f8:	bf 92       	push	r11
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	6c 97       	sbiw	r28, 0x1c	; 28
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	4c 01       	movw	r8, r24
    191c:	5b 01       	movw	r10, r22
	int z, dz, i;
	z = 4;
	unsigned char path[28];
	
	font_getpath(0, path, 28);
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	8e 01       	movw	r16, r28
    1922:	0f 5f       	subi	r16, 0xFF	; 255
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	b8 01       	movw	r22, r16
    1928:	4c e1       	ldi	r20, 0x1C	; 28
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <font_getpath>
    1930:	74 e0       	ldi	r23, 0x04	; 4
    1932:	e7 2e       	mov	r14, r23
    1934:	f1 2c       	mov	r15, r1
    1936:	cc 24       	eor	r12, r12
    1938:	dd 24       	eor	r13, r13
		if (z < 0)
		{
			z = 0;
		}
		
		effect_pathmove(path, 28);
    193a:	70 2e       	mov	r7, r16
    193c:	01 2f       	mov	r16, r17
    193e:	2a c0       	rjmp	.+84     	; 0x1994 <effect_rand_patharound+0xa4>
	
	font_getpath(0, path, 28);
	
	for (i = 0; i < iterations; i++)
	{
		dz = ((rand() % 3) - 1);
    1940:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    1944:	08 94       	sec
    1946:	e1 08       	sbc	r14, r1
    1948:	f1 08       	sbc	r15, r1
		z += dz;
    194a:	63 e0       	ldi	r22, 0x03	; 3
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    1952:	e8 0e       	add	r14, r24
    1954:	f9 1e       	adc	r15, r25
		
		if (z > 7)
    1956:	88 e0       	ldi	r24, 0x08	; 8
    1958:	e8 16       	cp	r14, r24
    195a:	f1 04       	cpc	r15, r1
    195c:	24 f0       	brlt	.+8      	; 0x1966 <effect_rand_patharound+0x76>
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	e6 2e       	mov	r14, r22
    1962:	f1 2c       	mov	r15, r1
    1964:	04 c0       	rjmp	.+8      	; 0x196e <effect_rand_patharound+0x7e>
		{
			z = 7;
		}
			
		if (z < 0)
    1966:	f7 fe       	sbrs	r15, 7
    1968:	02 c0       	rjmp	.+4      	; 0x196e <effect_rand_patharound+0x7e>
    196a:	ee 24       	eor	r14, r14
    196c:	ff 24       	eor	r15, r15
		{
			z = 0;
		}
		
		effect_pathmove(path, 28);
    196e:	87 2d       	mov	r24, r7
    1970:	90 2f       	mov	r25, r16
    1972:	6c e1       	ldi	r22, 0x1C	; 28
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	0e 94 92 0a 	call	0x1524	; 0x1524 <effect_pathmove>
		setvoxel(0, 7, z);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	67 e0       	ldi	r22, 0x07	; 7
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	a7 01       	movw	r20, r14
    1984:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		delay_ms(delay);
    1988:	c5 01       	movw	r24, r10
    198a:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
	z = 4;
	unsigned char path[28];
	
	font_getpath(0, path, 28);
	
	for (i = 0; i < iterations; i++)
    198e:	08 94       	sec
    1990:	c1 1c       	adc	r12, r1
    1992:	d1 1c       	adc	r13, r1
    1994:	c8 14       	cp	r12, r8
    1996:	d9 04       	cpc	r13, r9
    1998:	9c f2       	brlt	.-90     	; 0x1940 <effect_rand_patharound+0x50>
		
		effect_pathmove(path, 28);
		setvoxel(0, 7, z);
		delay_ms(delay);
	}
}
    199a:	6c 96       	adiw	r28, 0x1c	; 28
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	7f 90       	pop	r7
    19c0:	08 95       	ret

000019c2 <effect_smileyspin>:
		delay_ms(delay);
	}
}

void effect_smileyspin (int count, int delay, char bitmap)
{
    19c2:	2f 92       	push	r2
    19c4:	3f 92       	push	r3
    19c6:	4f 92       	push	r4
    19c8:	5f 92       	push	r5
    19ca:	6f 92       	push	r6
    19cc:	7f 92       	push	r7
    19ce:	8f 92       	push	r8
    19d0:	9f 92       	push	r9
    19d2:	af 92       	push	r10
    19d4:	bf 92       	push	r11
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	ec 97       	sbiw	r28, 0x3c	; 60
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	9f a7       	std	Y+47, r25	; 0x2f
    19f8:	8e a7       	std	Y+46, r24	; 0x2e
    19fa:	69 ab       	std	Y+49, r22	; 0x31
    19fc:	7a ab       	std	Y+50, r23	; 0x32
    19fe:	48 ab       	std	Y+48, r20	; 0x30
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
    1a00:	de 01       	movw	r26, r28
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	e0 e7       	ldi	r30, 0x70	; 112
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	01 90       	ld	r0, Z+
    1a0c:	0d 92       	st	X+, r0
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	e1 f7       	brne	.-8      	; 0x1a0a <effect_smileyspin+0x48>
    1a12:	1d a6       	std	Y+45, r1	; 0x2d
    1a14:	1c a6       	std	Y+44, r1	; 0x2c
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1a16:	9e 01       	movw	r18, r28
    1a18:	2f 5f       	subi	r18, 0xFF	; 255
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	3c af       	std	Y+60, r19	; 0x3c
    1a1e:	2b af       	std	Y+59, r18	; 0x3b
    1a20:	ce c1       	rjmp	.+924    	; 0x1dbe <effect_smileyspin+0x3fc>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    1a22:	22 24       	eor	r2, r2
    1a24:	33 24       	eor	r3, r3
    1a26:	44 24       	eor	r4, r4
    1a28:	55 24       	eor	r5, r5
    1a2a:	88 24       	eor	r8, r8
    1a2c:	99 24       	eor	r9, r9
    1a2e:	c4 01       	movw	r24, r8
    1a30:	01 96       	adiw	r24, 0x01	; 1
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
			if(!flip){
    1a32:	21 14       	cp	r2, r1
    1a34:	31 04       	cpc	r3, r1
    1a36:	51 f4       	brne	.+20     	; 0x1a4c <effect_smileyspin+0x8a>
				off++;
    1a38:	4c 01       	movw	r8, r24
				if (off == 4){
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	39 f4       	brne	.+14     	; 0x1a4e <effect_smileyspin+0x8c>
    1a40:	51 e0       	ldi	r21, 0x01	; 1
    1a42:	25 2e       	mov	r2, r21
    1a44:	31 2c       	mov	r3, r1
    1a46:	88 24       	eor	r8, r8
    1a48:	99 24       	eor	r9, r9
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <effect_smileyspin+0x8c>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    1a4c:	4c 01       	movw	r8, r24
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    1a4e:	c4 01       	movw	r24, r8
    1a50:	43 e0       	ldi	r20, 0x03	; 3
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	4a 95       	dec	r20
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <effect_smileyspin+0x90>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    1a5a:	6b ac       	ldd	r6, Y+59	; 0x3b
    1a5c:	7c ac       	ldd	r7, Y+60	; 0x3c
    1a5e:	68 1a       	sub	r6, r24
    1a60:	79 0a       	sbc	r7, r25
    1a62:	aa 24       	eor	r10, r10
    1a64:	bb 24       	eor	r11, r11
    1a66:	e7 e0       	ldi	r30, 0x07	; 7
    1a68:	eb a3       	std	Y+35, r30	; 0x23
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1a6a:	2f e1       	ldi	r18, 0x1F	; 31
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	62 0e       	add	r6, r18
    1a70:	73 1e       	adc	r7, r19
    1a72:	e1 e0       	ldi	r30, 0x01	; 1
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	ec 0f       	add	r30, r28
    1a78:	fd 1f       	adc	r31, r29
    1a7a:	e8 0f       	add	r30, r24
    1a7c:	f9 1f       	adc	r31, r25
    1a7e:	fa af       	std	Y+58, r31	; 0x3a
    1a80:	e9 af       	std	Y+57, r30	; 0x39
    1a82:	26 c0       	rjmp	.+76     	; 0x1ad0 <effect_smileyspin+0x10e>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    1a84:	88 a9       	ldd	r24, Y+48	; 0x30
    1a86:	6b a1       	ldd	r22, Y+35	; 0x23
    1a88:	40 2f       	mov	r20, r16
    1a8a:	0e 94 ed 19 	call	0x33da	; 0x33da <font_getbitmappixel>
    1a8e:	88 23       	and	r24, r24
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <effect_smileyspin+0xe8>
						if (!flip)
    1a92:	21 14       	cp	r2, r1
    1a94:	31 04       	cpc	r3, r1
    1a96:	11 f4       	brne	.+4      	; 0x1a9c <effect_smileyspin+0xda>
							setvoxel(y,dybde[8 * off + d++],x);
    1a98:	f7 01       	movw	r30, r14
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <effect_smileyspin+0xdc>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    1a9c:	f6 01       	movw	r30, r12
    1a9e:	60 81       	ld	r22, Z
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	a5 01       	movw	r20, r10
    1aa6:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    1aaa:	0f 5f       	subi	r16, 0xFF	; 255
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	08 94       	sec
    1ab0:	c1 08       	sbc	r12, r1
    1ab2:	d1 08       	sbc	r13, r1
    1ab4:	08 94       	sec
    1ab6:	e1 1c       	adc	r14, r1
    1ab8:	f1 1c       	adc	r15, r1
    1aba:	08 30       	cpi	r16, 0x08	; 8
    1abc:	11 05       	cpc	r17, r1
    1abe:	11 f7       	brne	.-60     	; 0x1a84 <effect_smileyspin+0xc2>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1ac0:	08 94       	sec
    1ac2:	a1 1c       	adc	r10, r1
    1ac4:	b1 1c       	adc	r11, r1
    1ac6:	fb a1       	ldd	r31, Y+35	; 0x23
    1ac8:	f1 50       	subi	r31, 0x01	; 1
    1aca:	fb a3       	std	Y+35, r31	; 0x23
    1acc:	ff 3f       	cpi	r31, 0xFF	; 255
    1ace:	31 f0       	breq	.+12     	; 0x1adc <effect_smileyspin+0x11a>
    1ad0:	63 01       	movw	r12, r6
    1ad2:	e9 ac       	ldd	r14, Y+57	; 0x39
    1ad4:	fa ac       	ldd	r15, Y+58	; 0x3a
    1ad6:	00 e0       	ldi	r16, 0x00	; 0
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	d4 cf       	rjmp	.-88     	; 0x1a84 <effect_smileyspin+0xc2>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    1adc:	89 a9       	ldd	r24, Y+49	; 0x31
    1ade:	9a a9       	ldd	r25, Y+50	; 0x32
    1ae0:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			fill(0x00);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
	{
		flip = 0;
		d = 0;
		off = 0;
		// front:
		for (int s=0;s<7;s++){
    1aea:	08 94       	sec
    1aec:	41 1c       	adc	r4, r1
    1aee:	51 1c       	adc	r5, r1
    1af0:	27 e0       	ldi	r18, 0x07	; 7
    1af2:	42 16       	cp	r4, r18
    1af4:	51 04       	cpc	r5, r1
    1af6:	09 f0       	breq	.+2      	; 0x1afa <effect_smileyspin+0x138>
    1af8:	9a cf       	rjmp	.-204    	; 0x1a2e <effect_smileyspin+0x6c>
    1afa:	22 24       	eor	r2, r2
    1afc:	33 24       	eor	r3, r3
    1afe:	1b a6       	std	Y+43, r1	; 0x2b
    1b00:	1a a6       	std	Y+42, r1	; 0x2a
    1b02:	66 24       	eor	r6, r6
    1b04:	77 24       	eor	r7, r7
    1b06:	c3 01       	movw	r24, r6
    1b08:	01 96       	adiw	r24, 0x01	; 1
		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    1b0a:	21 14       	cp	r2, r1
    1b0c:	31 04       	cpc	r3, r1
    1b0e:	51 f4       	brne	.+20     	; 0x1b24 <effect_smileyspin+0x162>
				off++;
    1b10:	3c 01       	movw	r6, r24
				if (off == 4){
    1b12:	84 30       	cpi	r24, 0x04	; 4
    1b14:	91 05       	cpc	r25, r1
    1b16:	39 f4       	brne	.+14     	; 0x1b26 <effect_smileyspin+0x164>
    1b18:	31 e0       	ldi	r19, 0x01	; 1
    1b1a:	23 2e       	mov	r2, r19
    1b1c:	31 2c       	mov	r3, r1
    1b1e:	66 24       	eor	r6, r6
    1b20:	77 24       	eor	r7, r7
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <effect_smileyspin+0x164>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    1b24:	3c 01       	movw	r6, r24
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    1b26:	c3 01       	movw	r24, r6
    1b28:	23 e0       	ldi	r18, 0x03	; 3
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	2a 95       	dec	r18
    1b30:	e1 f7       	brne	.-8      	; 0x1b2a <effect_smileyspin+0x168>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    1b32:	4b ac       	ldd	r4, Y+59	; 0x3b
    1b34:	5c ac       	ldd	r5, Y+60	; 0x3c
    1b36:	48 1a       	sub	r4, r24
    1b38:	59 0a       	sbc	r5, r25
    1b3a:	88 24       	eor	r8, r8
    1b3c:	99 24       	eor	r9, r9
    1b3e:	e7 e0       	ldi	r30, 0x07	; 7
    1b40:	ec a3       	std	Y+36, r30	; 0x24
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1b42:	2f e1       	ldi	r18, 0x1F	; 31
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	42 0e       	add	r4, r18
    1b48:	53 1e       	adc	r5, r19
    1b4a:	e1 e0       	ldi	r30, 0x01	; 1
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	ec 0f       	add	r30, r28
    1b50:	fd 1f       	adc	r31, r29
    1b52:	e8 0f       	add	r30, r24
    1b54:	f9 1f       	adc	r31, r25
    1b56:	f8 af       	std	Y+56, r31	; 0x38
    1b58:	ef ab       	std	Y+55, r30	; 0x37
    1b5a:	2b c0       	rjmp	.+86     	; 0x1bb2 <effect_smileyspin+0x1f0>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, y)){
    1b5c:	4e 2d       	mov	r20, r14
    1b5e:	41 50       	subi	r20, 0x01	; 1
    1b60:	88 a9       	ldd	r24, Y+48	; 0x30
    1b62:	6c a1       	ldd	r22, Y+36	; 0x24
    1b64:	0e 94 ed 19 	call	0x33da	; 0x33da <font_getbitmappixel>
    1b68:	88 23       	and	r24, r24
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <effect_smileyspin+0x1c2>
						if (!flip)
    1b6c:	21 14       	cp	r2, r1
    1b6e:	31 04       	cpc	r3, r1
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <effect_smileyspin+0x1b4>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    1b72:	f6 01       	movw	r30, r12
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <effect_smileyspin+0x1b6>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    1b76:	f5 01       	movw	r30, r10
    1b78:	80 81       	ld	r24, Z
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	b8 01       	movw	r22, r16
    1b7e:	a4 01       	movw	r20, r8
    1b80:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    1b84:	08 94       	sec
    1b86:	e1 1c       	adc	r14, r1
    1b88:	f1 1c       	adc	r15, r1
    1b8a:	01 50       	subi	r16, 0x01	; 1
    1b8c:	10 40       	sbci	r17, 0x00	; 0
    1b8e:	08 94       	sec
    1b90:	a1 08       	sbc	r10, r1
    1b92:	b1 08       	sbc	r11, r1
    1b94:	08 94       	sec
    1b96:	c1 1c       	adc	r12, r1
    1b98:	d1 1c       	adc	r13, r1
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    1b9a:	f9 e0       	ldi	r31, 0x09	; 9
    1b9c:	ef 16       	cp	r14, r31
    1b9e:	f1 04       	cpc	r15, r1
    1ba0:	e9 f6       	brne	.-70     	; 0x1b5c <effect_smileyspin+0x19a>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1ba2:	08 94       	sec
    1ba4:	81 1c       	adc	r8, r1
    1ba6:	91 1c       	adc	r9, r1
    1ba8:	2c a1       	ldd	r18, Y+36	; 0x24
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	2c a3       	std	Y+36, r18	; 0x24
    1bae:	2f 3f       	cpi	r18, 0xFF	; 255
    1bb0:	49 f0       	breq	.+18     	; 0x1bc4 <effect_smileyspin+0x202>
    1bb2:	52 01       	movw	r10, r4
    1bb4:	cf a8       	ldd	r12, Y+55	; 0x37
    1bb6:	d8 ac       	ldd	r13, Y+56	; 0x38
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	e8 2e       	mov	r14, r24
    1bbc:	f1 2c       	mov	r15, r1
    1bbe:	07 e0       	ldi	r16, 0x07	; 7
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	cc cf       	rjmp	.-104    	; 0x1b5c <effect_smileyspin+0x19a>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    1bc4:	89 a9       	ldd	r24, Y+49	; 0x31
    1bc6:	9a a9       	ldd	r25, Y+50	; 0x32
    1bc8:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			fill(0x00);
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	0e 94 57 05 	call	0xaae	; 0xaae <fill>

		// side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    1bd2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1bd4:	9b a5       	ldd	r25, Y+43	; 0x2b
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	9b a7       	std	Y+43, r25	; 0x2b
    1bda:	8a a7       	std	Y+42, r24	; 0x2a
    1bdc:	07 97       	sbiw	r24, 0x07	; 7
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <effect_smileyspin+0x220>
    1be0:	92 cf       	rjmp	.-220    	; 0x1b06 <effect_smileyspin+0x144>
    1be2:	1a a2       	std	Y+34, r1	; 0x22
    1be4:	19 a2       	std	Y+33, r1	; 0x21
    1be6:	19 a6       	std	Y+41, r1	; 0x29
    1be8:	18 a6       	std	Y+40, r1	; 0x28
    1bea:	aa 24       	eor	r10, r10
    1bec:	bb 24       	eor	r11, r11
    1bee:	c5 01       	movw	r24, r10
    1bf0:	01 96       	adiw	r24, 0x01	; 1
		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
			if(!flip){
    1bf2:	e9 a1       	ldd	r30, Y+33	; 0x21
    1bf4:	fa a1       	ldd	r31, Y+34	; 0x22
    1bf6:	ef 2b       	or	r30, r31
    1bf8:	59 f4       	brne	.+22     	; 0x1c10 <effect_smileyspin+0x24e>
				off++;
    1bfa:	5c 01       	movw	r10, r24
				if (off == 4){
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	91 05       	cpc	r25, r1
    1c00:	41 f4       	brne	.+16     	; 0x1c12 <effect_smileyspin+0x250>
    1c02:	21 e0       	ldi	r18, 0x01	; 1
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3a a3       	std	Y+34, r19	; 0x22
    1c08:	29 a3       	std	Y+33, r18	; 0x21
    1c0a:	aa 24       	eor	r10, r10
    1c0c:	bb 24       	eor	r11, r11
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <effect_smileyspin+0x250>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    1c10:	5c 01       	movw	r10, r24
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
    1c12:	c5 01       	movw	r24, r10
    1c14:	03 e0       	ldi	r16, 0x03	; 3
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 95       	dec	r16
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <effect_smileyspin+0x254>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    1c1e:	4b ac       	ldd	r4, Y+59	; 0x3b
    1c20:	5c ac       	ldd	r5, Y+60	; 0x3c
    1c22:	48 1a       	sub	r4, r24
    1c24:	59 0a       	sbc	r5, r25
    1c26:	88 24       	eor	r8, r8
    1c28:	99 24       	eor	r9, r9
    1c2a:	17 e0       	ldi	r17, 0x07	; 7
    1c2c:	21 2e       	mov	r2, r17
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1c2e:	ef e1       	ldi	r30, 0x1F	; 31
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	4e 0e       	add	r4, r30
    1c34:	5f 1e       	adc	r5, r31
    1c36:	21 e0       	ldi	r18, 0x01	; 1
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	2c 0f       	add	r18, r28
    1c3c:	3d 1f       	adc	r19, r29
    1c3e:	28 0f       	add	r18, r24
    1c40:	39 1f       	adc	r19, r25
    1c42:	3e ab       	std	Y+54, r19	; 0x36
    1c44:	2d ab       	std	Y+53, r18	; 0x35
    1c46:	2a c0       	rjmp	.+84     	; 0x1c9c <effect_smileyspin+0x2da>
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(y,dybde[8 * off + d++],x);
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    1c48:	38 01       	movw	r6, r16
    1c4a:	08 94       	sec
    1c4c:	61 08       	sbc	r6, r1
    1c4e:	71 08       	sbc	r7, r1
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    1c50:	88 a9       	ldd	r24, Y+48	; 0x30
    1c52:	62 2d       	mov	r22, r2
    1c54:	43 2d       	mov	r20, r3
    1c56:	0e 94 ed 19 	call	0x33da	; 0x33da <font_getbitmappixel>
    1c5a:	88 23       	and	r24, r24
    1c5c:	69 f0       	breq	.+26     	; 0x1c78 <effect_smileyspin+0x2b6>
						if (!flip)
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	89 2b       	or	r24, r25
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <effect_smileyspin+0x2a8>
							setvoxel(y,dybde[8 * off + d++],x);
    1c66:	f7 01       	movw	r30, r14
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <effect_smileyspin+0x2aa>
						else
							setvoxel(y,dybde[31 - 8 * off - d++],x);
    1c6a:	f6 01       	movw	r30, r12
    1c6c:	60 81       	ld	r22, Z
    1c6e:	c3 01       	movw	r24, r6
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	a4 01       	movw	r20, r8
    1c74:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    1c78:	0f 5f       	subi	r16, 0xFF	; 255
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	3a 94       	dec	r3
    1c7e:	08 94       	sec
    1c80:	c1 08       	sbc	r12, r1
    1c82:	d1 08       	sbc	r13, r1
    1c84:	08 94       	sec
    1c86:	e1 1c       	adc	r14, r1
    1c88:	f1 1c       	adc	r15, r1
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    1c8a:	ff ef       	ldi	r31, 0xFF	; 255
    1c8c:	3f 16       	cp	r3, r31
    1c8e:	e1 f6       	brne	.-72     	; 0x1c48 <effect_smileyspin+0x286>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1c90:	08 94       	sec
    1c92:	81 1c       	adc	r8, r1
    1c94:	91 1c       	adc	r9, r1
    1c96:	2a 94       	dec	r2
    1c98:	2f 16       	cp	r2, r31
    1c9a:	41 f0       	breq	.+16     	; 0x1cac <effect_smileyspin+0x2ea>
    1c9c:	62 01       	movw	r12, r4
    1c9e:	ed a8       	ldd	r14, Y+53	; 0x35
    1ca0:	fe a8       	ldd	r15, Y+54	; 0x36
    1ca2:	01 e0       	ldi	r16, 0x01	; 1
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	b7 e0       	ldi	r27, 0x07	; 7
    1ca8:	3b 2e       	mov	r3, r27
    1caa:	ce cf       	rjmp	.-100    	; 0x1c48 <effect_smileyspin+0x286>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    1cac:	89 a9       	ldd	r24, Y+49	; 0x31
    1cae:	9a a9       	ldd	r25, Y+50	; 0x32
    1cb0:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			fill(0x00);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	0e 94 57 05 	call	0xaae	; 0xaae <fill>

		flip = 0;
		d = 0;
		off = 0;
		// back:
		for (int s=0;s<7;s++){
    1cba:	28 a5       	ldd	r18, Y+40	; 0x28
    1cbc:	39 a5       	ldd	r19, Y+41	; 0x29
    1cbe:	2f 5f       	subi	r18, 0xFF	; 255
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	39 a7       	std	Y+41, r19	; 0x29
    1cc4:	28 a7       	std	Y+40, r18	; 0x28
    1cc6:	27 30       	cpi	r18, 0x07	; 7
    1cc8:	31 05       	cpc	r19, r1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <effect_smileyspin+0x30c>
    1ccc:	90 cf       	rjmp	.-224    	; 0x1bee <effect_smileyspin+0x22c>
    1cce:	22 24       	eor	r2, r2
    1cd0:	33 24       	eor	r3, r3
    1cd2:	1f a2       	std	Y+39, r1	; 0x27
    1cd4:	1e a2       	std	Y+38, r1	; 0x26
    1cd6:	66 24       	eor	r6, r6
    1cd8:	77 24       	eor	r7, r7
    1cda:	c3 01       	movw	r24, r6
    1cdc:	01 96       	adiw	r24, 0x01	; 1
		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
			if(!flip){
    1cde:	21 14       	cp	r2, r1
    1ce0:	31 04       	cpc	r3, r1
    1ce2:	51 f4       	brne	.+20     	; 0x1cf8 <effect_smileyspin+0x336>
				off++;
    1ce4:	3c 01       	movw	r6, r24
				if (off == 4){
    1ce6:	84 30       	cpi	r24, 0x04	; 4
    1ce8:	91 05       	cpc	r25, r1
    1cea:	39 f4       	brne	.+14     	; 0x1cfa <effect_smileyspin+0x338>
    1cec:	a1 e0       	ldi	r26, 0x01	; 1
    1cee:	2a 2e       	mov	r2, r26
    1cf0:	31 2c       	mov	r3, r1
    1cf2:	66 24       	eor	r6, r6
    1cf4:	77 24       	eor	r7, r7
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <effect_smileyspin+0x338>
					flip = 1;
					off = 0;
				}
			} else {
				off++;
    1cf8:	3c 01       	movw	r6, r24
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
						if (!flip)
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    1cfa:	c3 01       	movw	r24, r6
    1cfc:	f3 e0       	ldi	r31, 0x03	; 3
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	fa 95       	dec	r31
    1d04:	e1 f7       	brne	.-8      	; 0x1cfe <effect_smileyspin+0x33c>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    1d06:	4b ac       	ldd	r4, Y+59	; 0x3b
    1d08:	5c ac       	ldd	r5, Y+60	; 0x3c
    1d0a:	48 1a       	sub	r4, r24
    1d0c:	59 0a       	sbc	r5, r25
    1d0e:	88 24       	eor	r8, r8
    1d10:	99 24       	eor	r9, r9
    1d12:	e7 e0       	ldi	r30, 0x07	; 7
    1d14:	ed a3       	std	Y+37, r30	; 0x25
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1d16:	2f e1       	ldi	r18, 0x1F	; 31
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	42 0e       	add	r4, r18
    1d1c:	53 1e       	adc	r5, r19
    1d1e:	e1 e0       	ldi	r30, 0x01	; 1
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	ec 0f       	add	r30, r28
    1d24:	fd 1f       	adc	r31, r29
    1d26:	e8 0f       	add	r30, r24
    1d28:	f9 1f       	adc	r31, r25
    1d2a:	fc ab       	std	Y+52, r31	; 0x34
    1d2c:	eb ab       	std	Y+51, r30	; 0x33
    1d2e:	2a c0       	rjmp	.+84     	; 0x1d84 <effect_smileyspin+0x3c2>
        		{
				d = 0;
                		for (y=0; y<8; y++)
	                	{
					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
    1d30:	88 a9       	ldd	r24, Y+48	; 0x30
    1d32:	6d a1       	ldd	r22, Y+37	; 0x25
    1d34:	40 2f       	mov	r20, r16
    1d36:	0e 94 ed 19 	call	0x33da	; 0x33da <font_getbitmappixel>
    1d3a:	88 23       	and	r24, r24
    1d3c:	61 f0       	breq	.+24     	; 0x1d56 <effect_smileyspin+0x394>
						if (!flip)
    1d3e:	21 14       	cp	r2, r1
    1d40:	31 04       	cpc	r3, r1
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <effect_smileyspin+0x386>
							setvoxel(dybde[8 * off + d++], 7 - y,x);
    1d44:	f6 01       	movw	r30, r12
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <effect_smileyspin+0x388>
						else
							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
    1d48:	f5 01       	movw	r30, r10
    1d4a:	80 81       	ld	r24, Z
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	b8 01       	movw	r22, r16
    1d50:	a4 01       	movw	r20, r8
    1d52:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    1d56:	08 94       	sec
    1d58:	e1 1c       	adc	r14, r1
    1d5a:	f1 1c       	adc	r15, r1
    1d5c:	01 50       	subi	r16, 0x01	; 1
    1d5e:	10 40       	sbci	r17, 0x00	; 0
    1d60:	08 94       	sec
    1d62:	a1 08       	sbc	r10, r1
    1d64:	b1 08       	sbc	r11, r1
    1d66:	08 94       	sec
    1d68:	c1 1c       	adc	r12, r1
    1d6a:	d1 1c       	adc	r13, r1
				off++;
			}
		        for (x=0; x<8; x++)
        		{
				d = 0;
                		for (y=0; y<8; y++)
    1d6c:	f9 e0       	ldi	r31, 0x09	; 9
    1d6e:	ef 16       	cp	r14, r31
    1d70:	f1 04       	cpc	r15, r1
    1d72:	f1 f6       	brne	.-68     	; 0x1d30 <effect_smileyspin+0x36e>
					off = 0;
				}
			} else {
				off++;
			}
		        for (x=0; x<8; x++)
    1d74:	08 94       	sec
    1d76:	81 1c       	adc	r8, r1
    1d78:	91 1c       	adc	r9, r1
    1d7a:	2d a1       	ldd	r18, Y+37	; 0x25
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	2d a3       	std	Y+37, r18	; 0x25
    1d80:	2f 3f       	cpi	r18, 0xFF	; 255
    1d82:	49 f0       	breq	.+18     	; 0x1d96 <effect_smileyspin+0x3d4>
    1d84:	52 01       	movw	r10, r4
    1d86:	cb a8       	ldd	r12, Y+51	; 0x33
    1d88:	dc a8       	ldd	r13, Y+52	; 0x34
    1d8a:	e1 e0       	ldi	r30, 0x01	; 1
    1d8c:	ee 2e       	mov	r14, r30
    1d8e:	f1 2c       	mov	r15, r1
    1d90:	07 e0       	ldi	r16, 0x07	; 7
    1d92:	10 e0       	ldi	r17, 0x00	; 0
    1d94:	cd cf       	rjmp	.-102    	; 0x1d30 <effect_smileyspin+0x36e>
					} else {
						d++;
					}
				}
			}
			delay_ms(delay);
    1d96:	89 a9       	ldd	r24, Y+49	; 0x31
    1d98:	9a a9       	ldd	r25, Y+50	; 0x32
    1d9a:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			fill(0x00);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	0e 94 57 05 	call	0xaae	; 0xaae <fill>

		// other side:
		off = 0;
		flip = 0;
		d = 0;
		for (int s=0;s<7;s++){
    1da4:	8e a1       	ldd	r24, Y+38	; 0x26
    1da6:	9f a1       	ldd	r25, Y+39	; 0x27
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	9f a3       	std	Y+39, r25	; 0x27
    1dac:	8e a3       	std	Y+38, r24	; 0x26
    1dae:	07 97       	sbiw	r24, 0x07	; 7
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <effect_smileyspin+0x3f2>
    1db2:	93 cf       	rjmp	.-218    	; 0x1cda <effect_smileyspin+0x318>
{
	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
	int d = 0;
	int flip = 0;
	int x, y, off;
	for(int i = 0; i<count; i++)
    1db4:	ec a5       	ldd	r30, Y+44	; 0x2c
    1db6:	fd a5       	ldd	r31, Y+45	; 0x2d
    1db8:	31 96       	adiw	r30, 0x01	; 1
    1dba:	fd a7       	std	Y+45, r31	; 0x2d
    1dbc:	ec a7       	std	Y+44, r30	; 0x2c
    1dbe:	2c a5       	ldd	r18, Y+44	; 0x2c
    1dc0:	3d a5       	ldd	r19, Y+45	; 0x2d
    1dc2:	8e a5       	ldd	r24, Y+46	; 0x2e
    1dc4:	9f a5       	ldd	r25, Y+47	; 0x2f
    1dc6:	28 17       	cp	r18, r24
    1dc8:	39 07       	cpc	r19, r25
    1dca:	0c f4       	brge	.+2      	; 0x1dce <effect_smileyspin+0x40c>
    1dcc:	2a ce       	rjmp	.-940    	; 0x1a22 <effect_smileyspin+0x60>
			delay_ms(delay);
			fill(0x00);
		}

	}
}
    1dce:	ec 96       	adiw	r28, 0x3c	; 60
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	9f 90       	pop	r9
    1df0:	8f 90       	pop	r8
    1df2:	7f 90       	pop	r7
    1df4:	6f 90       	pop	r6
    1df6:	5f 90       	pop	r5
    1df8:	4f 90       	pop	r4
    1dfa:	3f 90       	pop	r3
    1dfc:	2f 90       	pop	r2
    1dfe:	08 95       	ret

00001e00 <effect_random_sparkle_flash>:
}


// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
    1e00:	6f 92       	push	r6
    1e02:	7f 92       	push	r7
    1e04:	8f 92       	push	r8
    1e06:	9f 92       	push	r9
    1e08:	af 92       	push	r10
    1e0a:	bf 92       	push	r11
    1e0c:	cf 92       	push	r12
    1e0e:	df 92       	push	r13
    1e10:	ef 92       	push	r14
    1e12:	ff 92       	push	r15
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	3c 01       	movw	r6, r24
    1e1e:	4b 01       	movw	r8, r22
    1e20:	5a 01       	movw	r10, r20
    1e22:	cc 24       	eor	r12, r12
    1e24:	dd 24       	eor	r13, r13
    1e26:	2c c0       	rjmp	.+88     	; 0x1e80 <effect_random_sparkle_flash+0x80>
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v = 0; v <= voxels; v++)
		{
			setvoxel(rand() % 8, rand() % 8, rand() % 8);
    1e28:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    1e2c:	8c 01       	movw	r16, r24
    1e2e:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    1e32:	7c 01       	movw	r14, r24
    1e34:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    1e38:	fc 01       	movw	r30, r24
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	68 e0       	ldi	r22, 0x08	; 8
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    1e44:	8c 01       	movw	r16, r24
    1e46:	c7 01       	movw	r24, r14
    1e48:	68 e0       	ldi	r22, 0x08	; 8
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    1e50:	9c 01       	movw	r18, r24
    1e52:	cf 01       	movw	r24, r30
    1e54:	68 e0       	ldi	r22, 0x08	; 8
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	c8 01       	movw	r24, r16
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
	{
		for (v = 0; v <= voxels; v++)
    1e66:	21 96       	adiw	r28, 0x01	; 1
    1e68:	8c 16       	cp	r8, r28
    1e6a:	9d 06       	cpc	r9, r29
    1e6c:	ec f6       	brge	.-70     	; 0x1e28 <effect_random_sparkle_flash+0x28>
		{
			setvoxel(rand() % 8, rand() % 8, rand() % 8);
		}
			
		delay_ms(delay);
    1e6e:	c5 01       	movw	r24, r10
    1e70:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		fill(0x00);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
// Set n number of voxels at random positions
void effect_random_sparkle_flash (int iterations, int voxels, int delay)
{
	int i;
	int v;
	for (i = 0; i < iterations; i++)
    1e7a:	08 94       	sec
    1e7c:	c1 1c       	adc	r12, r1
    1e7e:	d1 1c       	adc	r13, r1
    1e80:	c6 14       	cp	r12, r6
    1e82:	d7 04       	cpc	r13, r7
    1e84:	1c f4       	brge	.+6      	; 0x1e8c <effect_random_sparkle_flash+0x8c>
    1e86:	c0 e0       	ldi	r28, 0x00	; 0
    1e88:	d0 e0       	ldi	r29, 0x00	; 0
    1e8a:	ee cf       	rjmp	.-36     	; 0x1e68 <effect_random_sparkle_flash+0x68>
		}
			
		delay_ms(delay);
		fill(0x00);
	}
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	08 95       	ret

00001eaa <effect_random_sparkle>:

// blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
// and back to 1 again.
void effect_random_sparkle (void)
{
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	c1 e0       	ldi	r28, 0x01	; 1
    1eb0:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	
	for (i = 1; i < 20; i++)
	{
		effect_random_sparkle_flash(5, i, 200);
    1eb2:	85 e0       	ldi	r24, 0x05	; 5
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	be 01       	movw	r22, r28
    1eb8:	48 ec       	ldi	r20, 0xC8	; 200
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <effect_random_sparkle_flash>
// and back to 1 again.
void effect_random_sparkle (void)
{
	int i;
	
	for (i = 1; i < 20; i++)
    1ec0:	21 96       	adiw	r28, 0x01	; 1
    1ec2:	c4 31       	cpi	r28, 0x14	; 20
    1ec4:	d1 05       	cpc	r29, r1
    1ec6:	a9 f7       	brne	.-22     	; 0x1eb2 <effect_random_sparkle+0x8>
		effect_random_sparkle_flash(5, i, 200);
	}
	
	for (i = 20; i >= 1; i--)
	{
		effect_random_sparkle_flash(5, i, 200);
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	be 01       	movw	r22, r28
    1ece:	48 ec       	ldi	r20, 0xC8	; 200
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <effect_random_sparkle_flash>
	for (i = 1; i < 20; i++)
	{
		effect_random_sparkle_flash(5, i, 200);
	}
	
	for (i = 20; i >= 1; i--)
    1ed6:	21 97       	sbiw	r28, 0x01	; 1
    1ed8:	b9 f7       	brne	.-18     	; 0x1ec8 <effect_random_sparkle+0x1e>
	{
		effect_random_sparkle_flash(5, i, 200);
	}
	
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <effect_loadbar>:


// Light all leds layer by layer,
// then unset layer by layer
void effect_loadbar(int delay)
{
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	8c 01       	movw	r16, r24
	fill(0x00);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    1ef6:	c0 e0       	ldi	r28, 0x00	; 0
    1ef8:	d0 e0       	ldi	r29, 0x00	; 0
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1efa:	dd 24       	eor	r13, r13
    1efc:	da 94       	dec	r13
			
		delay_ms(delay);
    1efe:	78 01       	movw	r14, r16
    1f00:	11 c0       	rjmp	.+34     	; 0x1f24 <effect_loadbar+0x44>
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1f02:	f9 01       	movw	r30, r18
    1f04:	e8 0f       	add	r30, r24
    1f06:	f9 1f       	adc	r31, r25
    1f08:	e6 52       	subi	r30, 0x26	; 38
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	d0 82       	st	Z, r13
	
	int z,y;
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    1f0e:	01 96       	adiw	r24, 0x01	; 1
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	91 05       	cpc	r25, r1
    1f14:	b1 f7       	brne	.-20     	; 0x1f02 <effect_loadbar+0x22>
			cube[z][y] = 0xff;
			
		delay_ms(delay);
    1f16:	c7 01       	movw	r24, r14
    1f18:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
{
	fill(0x00);
	
	int z,y;
	
	for (z=0;z<8;z++)
    1f1c:	21 96       	adiw	r28, 0x01	; 1
    1f1e:	c8 30       	cpi	r28, 0x08	; 8
    1f20:	d1 05       	cpc	r29, r1
    1f22:	49 f0       	breq	.+18     	; 0x1f36 <effect_loadbar+0x56>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0xff;
    1f28:	9e 01       	movw	r18, r28
    1f2a:	e3 e0       	ldi	r30, 0x03	; 3
    1f2c:	22 0f       	add	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	ea 95       	dec	r30
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <effect_loadbar+0x4c>
    1f34:	e6 cf       	rjmp	.-52     	; 0x1f02 <effect_loadbar+0x22>
			
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
    1f36:	c8 01       	movw	r24, r16
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	80 0f       	add	r24, r16
    1f3e:	91 1f       	adc	r25, r17
    1f40:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    1f44:	c0 e0       	ldi	r28, 0x00	; 0
    1f46:	d0 e0       	ldi	r29, 0x00	; 0
    1f48:	11 c0       	rjmp	.+34     	; 0x1f6c <effect_loadbar+0x8c>
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	e8 0f       	add	r30, r24
    1f4e:	f9 1f       	adc	r31, r25
    1f50:	e6 52       	subi	r30, 0x26	; 38
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	10 82       	st	Z, r1
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
	{
		for (y=0;y<8;y++)
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	88 30       	cpi	r24, 0x08	; 8
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	b1 f7       	brne	.-20     	; 0x1f4a <effect_loadbar+0x6a>
			cube[z][y] = 0x00;
			
		delay_ms(delay);
    1f5e:	c7 01       	movw	r24, r14
    1f60:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		delay_ms(delay);
	}
	
	delay_ms(delay*3);
	
	for (z=0;z<8;z++)
    1f64:	21 96       	adiw	r28, 0x01	; 1
    1f66:	c8 30       	cpi	r28, 0x08	; 8
    1f68:	d1 05       	cpc	r29, r1
    1f6a:	49 f0       	breq	.+18     	; 0x1f7e <effect_loadbar+0x9e>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (y=0;y<8;y++)
			cube[z][y] = 0x00;
    1f70:	9e 01       	movw	r18, r28
    1f72:	63 e0       	ldi	r22, 0x03	; 3
    1f74:	22 0f       	add	r18, r18
    1f76:	33 1f       	adc	r19, r19
    1f78:	6a 95       	dec	r22
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <effect_loadbar+0x94>
    1f7c:	e6 cf       	rjmp	.-52     	; 0x1f4a <effect_loadbar+0x6a>
			
		delay_ms(delay);
	}
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	08 95       	ret

00001f8e <draw_positions_axis>:
		delay_ms(delay);
	}
}

void draw_positions_axis (char axis, const unsigned char positions[64], int invert)
{
    1f8e:	4f 92       	push	r4
    1f90:	5f 92       	push	r5
    1f92:	6f 92       	push	r6
    1f94:	7f 92       	push	r7
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	98 2e       	mov	r9, r24
    1fae:	16 2f       	mov	r17, r22
    1fb0:	07 2f       	mov	r16, r23
    1fb2:	3a 01       	movw	r6, r20
	int x, y, p;
	
	fill(0x00);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    1fba:	21 2f       	mov	r18, r17
    1fbc:	30 2f       	mov	r19, r16
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	6c 01       	movw	r12, r24
    1fc2:	c0 e0       	ldi	r28, 0x00	; 0
    1fc4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0; y<8; y++)
		{
			if (invert)
			{
				p = (7 - positions[(x * 8) + y]);
    1fc6:	f7 e0       	ldi	r31, 0x07	; 7
    1fc8:	4f 2e       	mov	r4, r31
    1fca:	51 2c       	mov	r5, r1
    1fcc:	35 c0       	rjmp	.+106    	; 0x2038 <draw_positions_axis+0xaa>
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
		{
			if (invert)
    1fce:	61 14       	cp	r6, r1
    1fd0:	71 04       	cpc	r7, r1
    1fd2:	31 f0       	breq	.+12     	; 0x1fe0 <draw_positions_axis+0x52>
			{
				p = (7 - positions[(x * 8) + y]);
    1fd4:	f5 01       	movw	r30, r10
    1fd6:	80 81       	ld	r24, Z
    1fd8:	a2 01       	movw	r20, r4
    1fda:	48 1b       	sub	r20, r24
    1fdc:	51 09       	sbc	r21, r1
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <draw_positions_axis+0x5a>
			}
			else
			{
				p = positions[(x * 8) + y];
    1fe0:	f7 01       	movw	r30, r14
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
			}
		
			if (axis == AXIS_Z)
    1fe8:	fa e7       	ldi	r31, 0x7A	; 122
    1fea:	9f 16       	cp	r9, r31
    1fec:	19 f4       	brne	.+6      	; 0x1ff4 <draw_positions_axis+0x66>
			{
				setvoxel(x, y, p);
    1fee:	ce 01       	movw	r24, r28
    1ff0:	b8 01       	movw	r22, r16
    1ff2:	0d c0       	rjmp	.+26     	; 0x200e <draw_positions_axis+0x80>
			}
			else if (axis == AXIS_Y)
    1ff4:	89 e7       	ldi	r24, 0x79	; 121
    1ff6:	98 16       	cp	r9, r24
    1ff8:	21 f4       	brne	.+8      	; 0x2002 <draw_positions_axis+0x74>
			{
				setvoxel(x, p, y);
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	ba 01       	movw	r22, r20
    1ffe:	a8 01       	movw	r20, r16
    2000:	06 c0       	rjmp	.+12     	; 0x200e <draw_positions_axis+0x80>
			}
			else if (axis == AXIS_X)
    2002:	98 e7       	ldi	r25, 0x78	; 120
    2004:	99 16       	cp	r9, r25
    2006:	29 f4       	brne	.+10     	; 0x2012 <draw_positions_axis+0x84>
			{
				setvoxel(p, y, x);
    2008:	ca 01       	movw	r24, r20
    200a:	b8 01       	movw	r22, r16
    200c:	ae 01       	movw	r20, r28
    200e:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
	
	fill(0x00);
	
	for (x=0; x<8; x++)
	{
		for (y=0; y<8; y++)
    2012:	0f 5f       	subi	r16, 0xFF	; 255
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	08 94       	sec
    2018:	a1 1c       	adc	r10, r1
    201a:	b1 1c       	adc	r11, r1
    201c:	08 94       	sec
    201e:	e1 1c       	adc	r14, r1
    2020:	f1 1c       	adc	r15, r1
    2022:	08 30       	cpi	r16, 0x08	; 8
    2024:	11 05       	cpc	r17, r1
    2026:	99 f6       	brne	.-90     	; 0x1fce <draw_positions_axis+0x40>
{
	int x, y, p;
	
	fill(0x00);
	
	for (x=0; x<8; x++)
    2028:	21 96       	adiw	r28, 0x01	; 1
    202a:	e8 e0       	ldi	r30, 0x08	; 8
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	ce 0e       	add	r12, r30
    2030:	df 1e       	adc	r13, r31
    2032:	c8 30       	cpi	r28, 0x08	; 8
    2034:	d1 05       	cpc	r29, r1
    2036:	29 f0       	breq	.+10     	; 0x2042 <draw_positions_axis+0xb4>
    2038:	56 01       	movw	r10, r12
    203a:	76 01       	movw	r14, r12
    203c:	00 e0       	ldi	r16, 0x00	; 0
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	c6 cf       	rjmp	.-116    	; 0x1fce <draw_positions_axis+0x40>
				setvoxel(p, y, x);
			}
		}
	}
	
}
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	cf 90       	pop	r12
    2052:	bf 90       	pop	r11
    2054:	af 90       	pop	r10
    2056:	9f 90       	pop	r9
    2058:	7f 90       	pop	r7
    205a:	6f 90       	pop	r6
    205c:	5f 90       	pop	r5
    205e:	4f 90       	pop	r4
    2060:	08 95       	ret

00002062 <effect_axis_updown_randsuspend>:
		
	draw_positions_axis (AXIS_Z, positions,0);
}

void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
{
    2062:	3f 92       	push	r3
    2064:	4f 92       	push	r4
    2066:	5f 92       	push	r5
    2068:	6f 92       	push	r6
    206a:	7f 92       	push	r7
    206c:	8f 92       	push	r8
    206e:	9f 92       	push	r9
    2070:	af 92       	push	r10
    2072:	bf 92       	push	r11
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	c0 58       	subi	r28, 0x80	; 128
    208a:	d0 40       	sbci	r29, 0x00	; 0
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	38 2e       	mov	r3, r24
    2098:	2b 01       	movw	r4, r22
    209a:	4a 01       	movw	r8, r20
    209c:	39 01       	movw	r6, r18
    209e:	00 e0       	ldi	r16, 0x00	; 0
    20a0:	10 e0       	ldi	r17, 0x00	; 0
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    20a2:	6e 01       	movw	r12, r28
    20a4:	08 94       	sec
    20a6:	c1 1c       	adc	r12, r1
    20a8:	d1 1c       	adc	r13, r1
		destinations[i] = rand()%8;
    20aa:	b1 e4       	ldi	r27, 0x41	; 65
    20ac:	eb 2e       	mov	r14, r27
    20ae:	f1 2c       	mov	r15, r1
    20b0:	ec 0e       	add	r14, r28
    20b2:	fd 1e       	adc	r15, r29
	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
	{
		positions[i] = 0; // Set all starting positions to 0
    20b4:	f6 01       	movw	r30, r12
    20b6:	e0 0f       	add	r30, r16
    20b8:	f1 1f       	adc	r31, r17
    20ba:	10 82       	st	Z, r1
		destinations[i] = rand()%8;
    20bc:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    20c0:	f7 01       	movw	r30, r14
    20c2:	e0 0f       	add	r30, r16
    20c4:	f1 1f       	adc	r31, r17
    20c6:	68 e0       	ldi	r22, 0x08	; 8
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    20ce:	80 83       	st	Z, r24
	unsigned char destinations[64];

	int i,px;
	
    // Set 64 random positions
	for (i=0; i<64; i++)
    20d0:	0f 5f       	subi	r16, 0xFF	; 255
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	00 34       	cpi	r16, 0x40	; 64
    20d6:	11 05       	cpc	r17, r1
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <effect_axis_updown_randsuspend+0x52>
    20da:	ee 24       	eor	r14, r14
    20dc:	ff 24       	eor	r15, r15
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    20de:	5e 01       	movw	r10, r28
    20e0:	08 94       	sec
    20e2:	a1 1c       	adc	r10, r1
    20e4:	b1 1c       	adc	r11, r1
    20e6:	a1 e4       	ldi	r26, 0x41	; 65
    20e8:	ca 2e       	mov	r12, r26
    20ea:	d1 2c       	mov	r13, r1
    20ec:	cc 0e       	add	r12, r28
    20ee:	dd 1e       	adc	r13, r29
    20f0:	1c c0       	rjmp	.+56     	; 0x212a <effect_axis_updown_randsuspend+0xc8>
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    20f2:	d8 01       	movw	r26, r16
    20f4:	9c 91       	ld	r25, X
    20f6:	80 81       	ld	r24, Z
    20f8:	98 17       	cp	r25, r24
    20fa:	10 f4       	brcc	.+4      	; 0x2100 <effect_axis_updown_randsuspend+0x9e>
			{
				positions[px]++;
    20fc:	9f 5f       	subi	r25, 0xFF	; 255
    20fe:	9c 93       	st	X, r25
    2100:	0f 5f       	subi	r16, 0xFF	; 255
    2102:	1f 4f       	sbci	r17, 0xFF	; 255
    2104:	31 96       	adiw	r30, 0x01	; 1

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
	{
        // For every iteration, move all position one step closer to their destination
		for (px=0; px<64; px++)
    2106:	0c 15       	cp	r16, r12
    2108:	1d 05       	cpc	r17, r13
    210a:	99 f7       	brne	.-26     	; 0x20f2 <effect_axis_updown_randsuspend+0x90>
			{
				positions[px]++;
			}
		}
        // Draw the positions and take a nap
		draw_positions_axis (axis, positions,invert);
    210c:	83 2d       	mov	r24, r3
    210e:	b5 01       	movw	r22, r10
    2110:	a3 01       	movw	r20, r6
    2112:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <draw_positions_axis>
		delay_ms(delay);
    2116:	c2 01       	movw	r24, r4
    2118:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		positions[i] = 0; // Set all starting positions to 0
		destinations[i] = rand()%8;
	}

    // Loop 8 times to allow destination 7 to reach all the way
	for (i=0; i<8; i++)
    211c:	08 94       	sec
    211e:	e1 1c       	adc	r14, r1
    2120:	f1 1c       	adc	r15, r1
    2122:	b8 e0       	ldi	r27, 0x08	; 8
    2124:	eb 16       	cp	r14, r27
    2126:	f1 04       	cpc	r15, r1
    2128:	19 f0       	breq	.+6      	; 0x2130 <effect_axis_updown_randsuspend+0xce>
    212a:	85 01       	movw	r16, r10
    212c:	f6 01       	movw	r30, r12
    212e:	e1 cf       	rjmp	.-62     	; 0x20f2 <effect_axis_updown_randsuspend+0x90>
    2130:	f8 01       	movw	r30, r16
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
	{
		destinations[i] = 7;
    2132:	27 e0       	ldi	r18, 0x07	; 7
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    2134:	ce 01       	movw	r24, r28
    2136:	8f 57       	subi	r24, 0x7F	; 127
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
	{
		destinations[i] = 7;
    213a:	21 93       	st	Z+, r18
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
	
    // Set all destinations to 7 (opposite from the side they started out)
	for (i=0; i<64; i++)
    213c:	e8 17       	cp	r30, r24
    213e:	f9 07       	cpc	r31, r25
    2140:	e1 f7       	brne	.-8      	; 0x213a <effect_axis_updown_randsuspend+0xd8>
	{
		destinations[i] = 7;
	}
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
    2142:	c4 01       	movw	r24, r8
    2144:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    2148:	ee 24       	eor	r14, r14
    214a:	ff 24       	eor	r15, r15
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    214c:	4e 01       	movw	r8, r28
    214e:	08 94       	sec
    2150:	81 1c       	adc	r8, r1
    2152:	91 1c       	adc	r9, r1
    2154:	1f c0       	rjmp	.+62     	; 0x2194 <effect_axis_updown_randsuspend+0x132>
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
		{
			if (positions[px]<destinations[px])
    2156:	80 81       	ld	r24, Z
    2158:	9c 91       	ld	r25, X
    215a:	89 17       	cp	r24, r25
    215c:	10 f4       	brcc	.+4      	; 0x2162 <effect_axis_updown_randsuspend+0x100>
			{
				positions[px]++;
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	80 83       	st	Z, r24
			}
			if (positions[px]>destinations[px])
    2162:	80 81       	ld	r24, Z
    2164:	98 17       	cp	r25, r24
    2166:	10 f4       	brcc	.+4      	; 0x216c <effect_axis_updown_randsuspend+0x10a>
			{
				positions[px]--;
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	80 83       	st	Z, r24
    216c:	31 96       	adiw	r30, 0x01	; 1
    216e:	11 96       	adiw	r26, 0x01	; 1
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
	{
		for (px=0; px<64; px++)
    2170:	e0 17       	cp	r30, r16
    2172:	f1 07       	cpc	r31, r17
    2174:	81 f7       	brne	.-32     	; 0x2156 <effect_axis_updown_randsuspend+0xf4>
			if (positions[px]>destinations[px])
			{
				positions[px]--;
			}
		}
		draw_positions_axis (axis, positions,invert);
    2176:	83 2d       	mov	r24, r3
    2178:	b4 01       	movw	r22, r8
    217a:	a3 01       	movw	r20, r6
    217c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <draw_positions_axis>
		delay_ms(delay);
    2180:	c2 01       	movw	r24, r4
    2182:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
	
    // Suspend the positions in mid-air for a while
	delay_ms(sleep);
	
    // Then do the same thing one more time
	for (i=0; i<8; i++)
    2186:	08 94       	sec
    2188:	e1 1c       	adc	r14, r1
    218a:	f1 1c       	adc	r15, r1
    218c:	88 e0       	ldi	r24, 0x08	; 8
    218e:	e8 16       	cp	r14, r24
    2190:	f1 04       	cpc	r15, r1
    2192:	19 f0       	breq	.+6      	; 0x219a <effect_axis_updown_randsuspend+0x138>
    2194:	f5 01       	movw	r30, r10
    2196:	d6 01       	movw	r26, r12
    2198:	de cf       	rjmp	.-68     	; 0x2156 <effect_axis_updown_randsuspend+0xf4>
			}
		}
		draw_positions_axis (axis, positions,invert);
		delay_ms(delay);
	}
}
    219a:	c0 58       	subi	r28, 0x80	; 128
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	cf 90       	pop	r12
    21b8:	bf 90       	pop	r11
    21ba:	af 90       	pop	r10
    21bc:	9f 90       	pop	r9
    21be:	8f 90       	pop	r8
    21c0:	7f 90       	pop	r7
    21c2:	6f 90       	pop	r6
    21c4:	5f 90       	pop	r5
    21c6:	4f 90       	pop	r4
    21c8:	3f 90       	pop	r3
    21ca:	08 95       	ret

000021cc <effect_z_updown_move>:
	}

}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
    21cc:	ac 01       	movw	r20, r24
    21ce:	dc 01       	movw	r26, r24
    21d0:	fb 01       	movw	r30, r22
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
	int px;
	for (px=0; px<64; px++)
	{
		if (positions[px]<destinations[px])
    21d6:	9c 91       	ld	r25, X
    21d8:	80 81       	ld	r24, Z
    21da:	98 17       	cp	r25, r24
    21dc:	10 f4       	brcc	.+4      	; 0x21e2 <effect_z_updown_move+0x16>
		{
			positions[px]++;
    21de:	9f 5f       	subi	r25, 0xFF	; 255
    21e0:	9c 93       	st	X, r25
		}
		if (positions[px]>destinations[px])
    21e2:	9c 91       	ld	r25, X
    21e4:	80 81       	ld	r24, Z
    21e6:	89 17       	cp	r24, r25
    21e8:	10 f4       	brcc	.+4      	; 0x21ee <effect_z_updown_move+0x22>
		{
			positions[px]--;
    21ea:	91 50       	subi	r25, 0x01	; 1
    21ec:	9c 93       	st	X, r25
}

void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
{
	int px;
	for (px=0; px<64; px++)
    21ee:	2f 5f       	subi	r18, 0xFF	; 255
    21f0:	3f 4f       	sbci	r19, 0xFF	; 255
    21f2:	11 96       	adiw	r26, 0x01	; 1
    21f4:	31 96       	adiw	r30, 0x01	; 1
    21f6:	20 34       	cpi	r18, 0x40	; 64
    21f8:	31 05       	cpc	r19, r1
    21fa:	69 f7       	brne	.-38     	; 0x21d6 <effect_z_updown_move+0xa>
		{
			positions[px]--;
		}
	}
		
	draw_positions_axis (AXIS_Z, positions,0);
    21fc:	8a e7       	ldi	r24, 0x7A	; 122
    21fe:	ba 01       	movw	r22, r20
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <draw_positions_axis>
}
    2208:	08 95       	ret

0000220a <effect_z_updown>:
		shift(AXIS_Z,-1);
	}
}

void effect_z_updown (int iterations, int delay)
{
    220a:	2f 92       	push	r2
    220c:	3f 92       	push	r3
    220e:	4f 92       	push	r4
    2210:	5f 92       	push	r5
    2212:	6f 92       	push	r6
    2214:	7f 92       	push	r7
    2216:	8f 92       	push	r8
    2218:	9f 92       	push	r9
    221a:	af 92       	push	r10
    221c:	bf 92       	push	r11
    221e:	cf 92       	push	r12
    2220:	df 92       	push	r13
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	c0 58       	subi	r28, 0x80	; 128
    2234:	d0 40       	sbci	r29, 0x00	; 0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	2c 01       	movw	r4, r24
    2242:	7b 01       	movw	r14, r22
    2244:	00 e0       	ldi	r16, 0x00	; 0
    2246:	10 e0       	ldi	r17, 0x00	; 0

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    2248:	5e 01       	movw	r10, r28
    224a:	08 94       	sec
    224c:	a1 1c       	adc	r10, r1
    224e:	b1 1c       	adc	r11, r1
    2250:	24 e0       	ldi	r18, 0x04	; 4
    2252:	92 2e       	mov	r9, r18
		destinations[i] = rand()%8;
    2254:	91 e4       	ldi	r25, 0x41	; 65
    2256:	c9 2e       	mov	r12, r25
    2258:	d1 2c       	mov	r13, r1
    225a:	cc 0e       	add	r12, r28
    225c:	dd 1e       	adc	r13, r29

	int i,y,move;
	
	for (i=0; i<64; i++)
	{
		positions[i] = 4;
    225e:	f5 01       	movw	r30, r10
    2260:	e0 0f       	add	r30, r16
    2262:	f1 1f       	adc	r31, r17
    2264:	90 82       	st	Z, r9
		destinations[i] = rand()%8;
    2266:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    226a:	f6 01       	movw	r30, r12
    226c:	e0 0f       	add	r30, r16
    226e:	f1 1f       	adc	r31, r17
    2270:	68 e0       	ldi	r22, 0x08	; 8
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2278:	80 83       	st	Z, r24
	unsigned char positions[64];
	unsigned char destinations[64];

	int i,y,move;
	
	for (i=0; i<64; i++)
    227a:	0f 5f       	subi	r16, 0xFF	; 255
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	00 34       	cpi	r16, 0x40	; 64
    2280:	11 05       	cpc	r17, r1
    2282:	69 f7       	brne	.-38     	; 0x225e <effect_z_updown+0x54>
    2284:	00 e0       	ldi	r16, 0x00	; 0
    2286:	10 e0       	ldi	r17, 0x00	; 0
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    2288:	81 e4       	ldi	r24, 0x41	; 65
    228a:	a8 2e       	mov	r10, r24
    228c:	b1 2c       	mov	r11, r1
    228e:	ac 0e       	add	r10, r28
    2290:	bd 1e       	adc	r11, r29
    2292:	6e 01       	movw	r12, r28
    2294:	08 94       	sec
    2296:	c1 1c       	adc	r12, r1
    2298:	d1 1c       	adc	r13, r1
		delay_ms(delay);
    229a:	37 01       	movw	r6, r14
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
    229c:	c6 01       	movw	r24, r12
    229e:	b5 01       	movw	r22, r10
    22a0:	4a e7       	ldi	r20, 0x7A	; 122
    22a2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <effect_z_updown_move>
		delay_ms(delay);
    22a6:	c3 01       	movw	r24, r6
    22a8:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
	{
		positions[i] = 4;
		destinations[i] = rand()%8;
	}

	for (i=0; i<8; i++)
    22ac:	0f 5f       	subi	r16, 0xFF	; 255
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	08 30       	cpi	r16, 0x08	; 8
    22b2:	11 05       	cpc	r17, r1
    22b4:	99 f7       	brne	.-26     	; 0x229c <effect_z_updown+0x92>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    22b6:	57 01       	movw	r10, r14
    22b8:	aa 0c       	add	r10, r10
    22ba:	bb 1c       	adc	r11, r11
    22bc:	aa 0c       	add	r10, r10
    22be:	bb 1c       	adc	r11, r11
    22c0:	cc 24       	eor	r12, r12
    22c2:	dd 24       	eor	r13, r13
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    22c4:	11 e4       	ldi	r17, 0x41	; 65
    22c6:	81 2e       	mov	r8, r17
    22c8:	91 2c       	mov	r9, r1
    22ca:	8c 0e       	add	r8, r28
    22cc:	9d 1e       	adc	r9, r29
    22ce:	1e 01       	movw	r2, r28
    22d0:	08 94       	sec
    22d2:	21 1c       	adc	r2, r1
    22d4:	31 1c       	adc	r3, r1
    22d6:	32 c0       	rjmp	.+100    	; 0x233c <effect_z_updown+0x132>
			delay_ms(delay);
		}

		delay_ms(delay*4);
    22d8:	00 e0       	ldi	r16, 0x00	; 0
    22da:	10 e0       	ldi	r17, 0x00	; 0
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
    22dc:	c1 01       	movw	r24, r2
    22de:	b4 01       	movw	r22, r8
    22e0:	4a e7       	ldi	r20, 0x7A	; 122
    22e2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <effect_z_updown_move>
			delay_ms(delay);
    22e6:	c3 01       	movw	r24, r6
    22e8:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
	{
		for (move=0;move<8;move++)
    22ec:	0f 5f       	subi	r16, 0xFF	; 255
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	08 30       	cpi	r16, 0x08	; 8
    22f2:	11 05       	cpc	r17, r1
    22f4:	99 f7       	brne	.-26     	; 0x22dc <effect_z_updown+0xd2>
		{
			effect_z_updown_move(positions, destinations, AXIS_Z);
			delay_ms(delay);
		}

		delay_ms(delay*4);
    22f6:	c5 01       	movw	r24, r10
    22f8:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    22fc:	ee 24       	eor	r14, r14
    22fe:	ff 24       	eor	r15, r15


		for (y=0;y<32;y++)
		{
				destinations[rand()%64] = rand()%8;
    2300:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2304:	8c 01       	movw	r16, r24
    2306:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    230a:	9c 01       	movw	r18, r24
    230c:	c8 01       	movw	r24, r16
    230e:	60 e4       	ldi	r22, 0x40	; 64
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2316:	f4 01       	movw	r30, r8
    2318:	e8 0f       	add	r30, r24
    231a:	f9 1f       	adc	r31, r25
    231c:	c9 01       	movw	r24, r18
    231e:	68 e0       	ldi	r22, 0x08	; 8
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2326:	80 83       	st	Z, r24
		}

		delay_ms(delay*4);


		for (y=0;y<32;y++)
    2328:	08 94       	sec
    232a:	e1 1c       	adc	r14, r1
    232c:	f1 1c       	adc	r15, r1
    232e:	80 e2       	ldi	r24, 0x20	; 32
    2330:	e8 16       	cp	r14, r24
    2332:	f1 04       	cpc	r15, r1
    2334:	29 f7       	brne	.-54     	; 0x2300 <effect_z_updown+0xf6>
	{
		effect_z_updown_move(positions, destinations, AXIS_Z);
		delay_ms(delay);
	}
	
	for (i=0;i<iterations;i++)
    2336:	08 94       	sec
    2338:	c1 1c       	adc	r12, r1
    233a:	d1 1c       	adc	r13, r1
    233c:	c4 14       	cp	r12, r4
    233e:	d5 04       	cpc	r13, r5
    2340:	5c f2       	brlt	.-106    	; 0x22d8 <effect_z_updown+0xce>
				destinations[rand()%64] = rand()%8;
		}
		
	}

}
    2342:	c0 58       	subi	r28, 0x80	; 128
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	bf 90       	pop	r11
    2362:	af 90       	pop	r10
    2364:	9f 90       	pop	r9
    2366:	8f 90       	pop	r8
    2368:	7f 90       	pop	r7
    236a:	6f 90       	pop	r6
    236c:	5f 90       	pop	r5
    236e:	4f 90       	pop	r4
    2370:	3f 90       	pop	r3
    2372:	2f 90       	pop	r2
    2374:	08 95       	ret

00002376 <effect_random_filler>:
	}
}

// Set or clear exactly 512 voxels in a random order.
void effect_random_filler (int delay, int state)
{
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	4c 01       	movw	r8, r24
    2390:	8b 01       	movw	r16, r22
	int x,y,z;
	int loop = 0;
	
	
	if (state == 1)
    2392:	61 30       	cpi	r22, 0x01	; 1
    2394:	71 05       	cpc	r23, r1
    2396:	11 f4       	brne	.+4      	; 0x239c <effect_random_filler+0x26>
	{
		fill(0x00);
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	01 c0       	rjmp	.+2      	; 0x239e <effect_random_filler+0x28>
	} else
	{
		fill(0xff);
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    23a2:	c0 e0       	ldi	r28, 0x00	; 0
    23a4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	while (loop<511)
	{
		x = rand()%8;
    23a6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    23aa:	68 e0       	ldi	r22, 0x08	; 8
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    23b2:	b8 2e       	mov	r11, r24
    23b4:	a9 2e       	mov	r10, r25
		y = rand()%8;
    23b6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    23ba:	68 e0       	ldi	r22, 0x08	; 8
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    23c2:	d8 2e       	mov	r13, r24
    23c4:	c9 2e       	mov	r12, r25
		z = rand()%8;
    23c6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    23ca:	68 e0       	ldi	r22, 0x08	; 8
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    23d2:	f8 2e       	mov	r15, r24
    23d4:	e9 2e       	mov	r14, r25

		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
    23d6:	01 15       	cp	r16, r1
    23d8:	11 05       	cpc	r17, r1
    23da:	59 f4       	brne	.+22     	; 0x23f2 <effect_random_filler+0x7c>
    23dc:	8b 2d       	mov	r24, r11
    23de:	9a 2d       	mov	r25, r10
    23e0:	6d 2d       	mov	r22, r13
    23e2:	7c 2d       	mov	r23, r12
    23e4:	4f 2d       	mov	r20, r15
    23e6:	5e 2d       	mov	r21, r14
    23e8:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    23ec:	81 30       	cpi	r24, 0x01	; 1
    23ee:	d9 f4       	brne	.+54     	; 0x2426 <effect_random_filler+0xb0>
    23f0:	0d c0       	rjmp	.+26     	; 0x240c <effect_random_filler+0x96>
    23f2:	01 30       	cpi	r16, 0x01	; 1
    23f4:	11 05       	cpc	r17, r1
    23f6:	b9 f4       	brne	.+46     	; 0x2426 <effect_random_filler+0xb0>
    23f8:	8b 2d       	mov	r24, r11
    23fa:	9a 2d       	mov	r25, r10
    23fc:	6d 2d       	mov	r22, r13
    23fe:	7c 2d       	mov	r23, r12
    2400:	4f 2d       	mov	r20, r15
    2402:	5e 2d       	mov	r21, r14
    2404:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    2408:	88 23       	and	r24, r24
    240a:	69 f4       	brne	.+26     	; 0x2426 <effect_random_filler+0xb0>
		{
			altervoxel(x,y,z,state);
    240c:	8b 2d       	mov	r24, r11
    240e:	9a 2d       	mov	r25, r10
    2410:	6d 2d       	mov	r22, r13
    2412:	7c 2d       	mov	r23, r12
    2414:	4f 2d       	mov	r20, r15
    2416:	5e 2d       	mov	r21, r14
    2418:	98 01       	movw	r18, r16
    241a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <altervoxel>
			delay_ms(delay);
    241e:	c4 01       	movw	r24, r8
    2420:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			loop++;
    2424:	21 96       	adiw	r28, 0x01	; 1
	} else
	{
		fill(0xff);
	}
	
	while (loop<511)
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	cf 3f       	cpi	r28, 0xFF	; 255
    242a:	d8 07       	cpc	r29, r24
    242c:	0c f4       	brge	.+2      	; 0x2430 <effect_random_filler+0xba>
    242e:	bb cf       	rjmp	.-138    	; 0x23a6 <effect_random_filler+0x30>
			altervoxel(x,y,z,state);
			delay_ms(delay);
			loop++;
		}	
	}
}
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	df 90       	pop	r13
    243e:	cf 90       	pop	r12
    2440:	bf 90       	pop	r11
    2442:	af 90       	pop	r10
    2444:	9f 90       	pop	r9
    2446:	8f 90       	pop	r8
    2448:	08 95       	ret

0000244a <sendvoxels_rand_z>:
}

// For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
// for n iterations, a random voxel is sent to the opposite side of where it was.
void sendvoxels_rand_z (int iterations, int delay, int wait)
{
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	3c 01       	movw	r6, r24
    2466:	5b 01       	movw	r10, r22
    2468:	4a 01       	movw	r8, r20
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    2470:	00 e0       	ldi	r16, 0x00	; 0
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	1f c0       	rjmp	.+62     	; 0x24b4 <sendvoxels_rand_z+0x6a>
	{
		for (y=0;y<8;y++)
		{
			// Then set a voxel either at the top or at the bottom
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
    2476:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    247a:	62 e0       	ldi	r22, 0x02	; 2
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2482:	ac 01       	movw	r20, r24
    2484:	33 e0       	ldi	r19, 0x03	; 3
    2486:	44 0f       	add	r20, r20
    2488:	55 1f       	adc	r21, r21
    248a:	3a 95       	dec	r19
    248c:	e1 f7       	brne	.-8      	; 0x2486 <sendvoxels_rand_z+0x3c>
    248e:	48 1b       	sub	r20, r24
    2490:	59 0b       	sbc	r21, r25
    2492:	c8 01       	movw	r24, r16
    2494:	be 01       	movw	r22, r28
    2496:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    249a:	21 96       	adiw	r28, 0x01	; 1
	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
	{
		for (y=0;y<8;y++)
    249c:	c8 30       	cpi	r28, 0x08	; 8
    249e:	d1 05       	cpc	r29, r1
    24a0:	51 f7       	brne	.-44     	; 0x2476 <sendvoxels_rand_z+0x2c>
    24a2:	0f 5f       	subi	r16, 0xFF	; 255
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char x, y, last_x = 0, last_y = 0, i;

	fill(0x00);

	// Loop through all the X and Y coordinates
	for (x=0;x<8;x++)
    24a6:	08 30       	cpi	r16, 0x08	; 8
    24a8:	11 05       	cpc	r17, r1
    24aa:	21 f4       	brne	.+8      	; 0x24b4 <sendvoxels_rand_z+0x6a>
    24ac:	dd 24       	eor	r13, r13
    24ae:	ee 24       	eor	r14, r14
    24b0:	ff 24       	eor	r15, r15
    24b2:	30 c0       	rjmp	.+96     	; 0x2514 <sendvoxels_rand_z+0xca>
    24b4:	c0 e0       	ldi	r28, 0x00	; 0
    24b6:	d0 e0       	ldi	r29, 0x00	; 0
    24b8:	de cf       	rjmp	.-68     	; 0x2476 <sendvoxels_rand_z+0x2c>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    24ba:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    24be:	ec 01       	movw	r28, r24
		y = rand()%8;
    24c0:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    24c4:	68 e0       	ldi	r22, 0x08	; 8
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    24cc:	08 2f       	mov	r16, r24
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    24ce:	8e 15       	cp	r24, r14
    24d0:	01 f1       	breq	.+64     	; 0x2512 <sendvoxels_rand_z+0xc8>
	}

	for (i=0;i<iterations;i++)
	{
		// Pick a random x,y position
		x = rand()%8;
    24d2:	ce 01       	movw	r24, r28
    24d4:	68 e0       	ldi	r22, 0x08	; 8
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    24dc:	18 2f       	mov	r17, r24
		y = rand()%8;
		// but not the sameone twice in a row
		if (y != last_y && x != last_x)
    24de:	8d 15       	cp	r24, r13
    24e0:	c1 f0       	breq	.+48     	; 0x2512 <sendvoxels_rand_z+0xc8>
		{
			// If the voxel at this x,y is at the bottom
			if (getvoxel(x,y,0))
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	60 2f       	mov	r22, r16
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	50 e0       	ldi	r21, 0x00	; 0
    24ec:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    24f0:	88 23       	and	r24, r24
    24f2:	21 f0       	breq	.+8      	; 0x24fc <sendvoxels_rand_z+0xb2>
			{
				// send it to the top
				sendvoxel_z(x,y,0,delay);
    24f4:	81 2f       	mov	r24, r17
    24f6:	60 2f       	mov	r22, r16
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <sendvoxels_rand_z+0xb8>
			} else
			{
				// if its at the top, send it to the bottom
				sendvoxel_z(x,y,7,delay);
    24fc:	81 2f       	mov	r24, r17
    24fe:	60 2f       	mov	r22, r16
    2500:	47 e0       	ldi	r20, 0x07	; 7
    2502:	95 01       	movw	r18, r10
    2504:	0e 94 43 0a 	call	0x1486	; 0x1486 <sendvoxel_z>
			}
			delay_ms(wait);
    2508:	c4 01       	movw	r24, r8
    250a:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    250e:	d1 2e       	mov	r13, r17
    2510:	e0 2e       	mov	r14, r16
            // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
            setvoxel(x,y,((rand()%2)*7));
		}
	}

	for (i=0;i<iterations;i++)
    2512:	f3 94       	inc	r15
    2514:	8f 2d       	mov	r24, r15
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	86 15       	cp	r24, r6
    251a:	97 05       	cpc	r25, r7
    251c:	74 f2       	brlt	.-100    	; 0x24ba <sendvoxels_rand_z+0x70>
			last_y = y;
			last_x = x;
		}
	}

}
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	ef 90       	pop	r14
    252a:	df 90       	pop	r13
    252c:	bf 90       	pop	r11
    252e:	af 90       	pop	r10
    2530:	9f 90       	pop	r9
    2532:	8f 90       	pop	r8
    2534:	7f 90       	pop	r7
    2536:	6f 90       	pop	r6
    2538:	08 95       	ret

0000253a <effect_blinky2>:
		delay_ms(speed);
	}
}

void effect_blinky2()
{
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
	int i,r;
	fill(0x00);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    254c:	00 e0       	ldi	r16, 0x00	; 0
    254e:	10 e0       	ldi	r17, 0x00	; 0
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
			delay_ms(751-i);
    2550:	4f ee       	ldi	r20, 0xEF	; 239
    2552:	e4 2e       	mov	r14, r20
    2554:	42 e0       	ldi	r20, 0x02	; 2
    2556:	f4 2e       	mov	r15, r20
    2558:	47 c0       	rjmp	.+142    	; 0x25e8 <effect_blinky2+0xae>
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
		{
			fill(0x00);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
			delay_ms(i);
    2560:	ce 01       	movw	r24, r28
    2562:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			
			fill(0xff);
    2566:	8f ef       	ldi	r24, 0xFF	; 255
    2568:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
			delay_ms(100);
    256c:	84 e6       	ldi	r24, 0x64	; 100
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    2574:	ce 01       	movw	r24, r28
    2576:	66 ef       	ldi	r22, 0xF6	; 246
    2578:	7f ef       	ldi	r23, 0xFF	; 255
    257a:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    257e:	88 ee       	ldi	r24, 0xE8	; 232
    2580:	93 e0       	ldi	r25, 0x03	; 3
    2582:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2586:	6f 50       	subi	r22, 0x0F	; 15
    2588:	70 40       	sbci	r23, 0x00	; 0
    258a:	c6 0f       	add	r28, r22
    258c:	d7 1f       	adc	r29, r23
	fill(0x00);
	
	for (r=0;r<2;r++)
	{
		i = 750;
		while (i>0)
    258e:	1c 16       	cp	r1, r28
    2590:	1d 06       	cpc	r1, r29
    2592:	1c f3       	brlt	.-58     	; 0x255a <effect_blinky2+0x20>
			delay_ms(100);
			
			i = i - (15+(1000/(i/10)));
		}
		
		delay_ms(1000);
    2594:	88 ee       	ldi	r24, 0xE8	; 232
    2596:	93 e0       	ldi	r25, 0x03	; 3
    2598:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    259c:	ce ee       	ldi	r28, 0xEE	; 238
    259e:	d2 e0       	ldi	r29, 0x02	; 2
		
		i = 750;
		while (i>0)
		{
			fill(0x00);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
			delay_ms(751-i);
    25a6:	c7 01       	movw	r24, r14
    25a8:	8c 1b       	sub	r24, r28
    25aa:	9d 0b       	sbc	r25, r29
    25ac:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			
			fill(0xff);
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
			delay_ms(100);
    25b6:	84 e6       	ldi	r24, 0x64	; 100
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			
			i = i - (15+(1000/(i/10)));
    25be:	ce 01       	movw	r24, r28
    25c0:	66 ef       	ldi	r22, 0xF6	; 246
    25c2:	7f ef       	ldi	r23, 0xFF	; 255
    25c4:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    25c8:	88 ee       	ldi	r24, 0xE8	; 232
    25ca:	93 e0       	ldi	r25, 0x03	; 3
    25cc:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    25d0:	6f 50       	subi	r22, 0x0F	; 15
    25d2:	70 40       	sbci	r23, 0x00	; 0
    25d4:	c6 0f       	add	r28, r22
    25d6:	d7 1f       	adc	r29, r23
		}
		
		delay_ms(1000);
		
		i = 750;
		while (i>0)
    25d8:	1c 16       	cp	r1, r28
    25da:	1d 06       	cpc	r1, r29
    25dc:	0c f3       	brlt	.-62     	; 0x25a0 <effect_blinky2+0x66>
void effect_blinky2()
{
	int i,r;
	fill(0x00);
	
	for (r=0;r<2;r++)
    25de:	0f 5f       	subi	r16, 0xFF	; 255
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	02 30       	cpi	r16, 0x02	; 2
    25e4:	11 05       	cpc	r17, r1
    25e6:	19 f0       	breq	.+6      	; 0x25ee <effect_blinky2+0xb4>
    25e8:	ce ee       	ldi	r28, 0xEE	; 238
    25ea:	d2 e0       	ldi	r29, 0x02	; 2
    25ec:	b6 cf       	rjmp	.-148    	; 0x255a <effect_blinky2+0x20>
			
			i = i - (15+(1000/(i/10)));
		}
	}

}
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	08 95       	ret

000025fc <effect_wormsqueeze>:
		}
	}
}

void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
{
    25fc:	2f 92       	push	r2
    25fe:	3f 92       	push	r3
    2600:	4f 92       	push	r4
    2602:	5f 92       	push	r5
    2604:	6f 92       	push	r6
    2606:	7f 92       	push	r7
    2608:	8f 92       	push	r8
    260a:	9f 92       	push	r9
    260c:	af 92       	push	r10
    260e:	bf 92       	push	r11
    2610:	cf 92       	push	r12
    2612:	df 92       	push	r13
    2614:	ef 92       	push	r14
    2616:	ff 92       	push	r15
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	2e 97       	sbiw	r28, 0x0e	; 14
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	7c 83       	std	Y+4, r23	; 0x04
    2636:	6b 83       	std	Y+3, r22	; 0x03
    2638:	5e 83       	std	Y+6, r21	; 0x06
    263a:	4d 83       	std	Y+5, r20	; 0x05
    263c:	38 87       	std	Y+8, r19	; 0x08
    263e:	2f 83       	std	Y+7, r18	; 0x07
    2640:	1a 87       	std	Y+10, r17	; 0x0a
    2642:	09 87       	std	Y+9, r16	; 0x09
	int x, y, i,j,k, dx, dy;
	int cube_size;
	int origin = 0;
	
	if (direction == -1)
    2644:	4f 5f       	subi	r20, 0xFF	; 255
    2646:	5f 4f       	sbci	r21, 0xFF	; 255
    2648:	21 f4       	brne	.+8      	; 0x2652 <effect_wormsqueeze+0x56>
    264a:	67 e0       	ldi	r22, 0x07	; 7
    264c:	26 2e       	mov	r2, r22
    264e:	31 2c       	mov	r3, r1
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <effect_wormsqueeze+0x5a>
    2652:	22 24       	eor	r2, r2
    2654:	33 24       	eor	r3, r3
		origin = 7;
	
	cube_size = 8-(size-1);
    2656:	59 e0       	ldi	r21, 0x09	; 9
    2658:	65 2e       	mov	r6, r21
    265a:	71 2c       	mov	r7, r1
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	68 1a       	sub	r6, r24
    2662:	79 0a       	sbc	r7, r25
	
	x = rand()%cube_size;
    2664:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2668:	b3 01       	movw	r22, r6
    266a:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    266e:	6c 01       	movw	r12, r24
	y = rand()%cube_size;
    2670:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2674:	b3 01       	movw	r22, r6
    2676:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    267a:	7c 01       	movw	r14, r24
    267c:	44 24       	eor	r4, r4
    267e:	55 24       	eor	r5, r5
    2680:	7c c0       	rjmp	.+248    	; 0x277a <effect_wormsqueeze+0x17e>
	
	for (i=0; i<iterations; i++)
	{
		dx = ((rand()%3)-1);
    2682:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2686:	8c 01       	movw	r16, r24
		dy = ((rand()%3)-1);
    2688:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    268c:	9c 01       	movw	r18, r24
	
		if ((x+dx) > 0 && (x+dx) < cube_size)
    268e:	c8 01       	movw	r24, r16
    2690:	63 e0       	ldi	r22, 0x03	; 3
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	8c 0d       	add	r24, r12
    269c:	9d 1d       	adc	r25, r13
    269e:	9e 87       	std	Y+14, r25	; 0x0e
    26a0:	8d 87       	std	Y+13, r24	; 0x0d
    26a2:	18 16       	cp	r1, r24
    26a4:	19 06       	cpc	r1, r25
    26a6:	1c f4       	brge	.+6      	; 0x26ae <effect_wormsqueeze+0xb2>
    26a8:	86 15       	cp	r24, r6
    26aa:	97 05       	cpc	r25, r7
    26ac:	14 f0       	brlt	.+4      	; 0x26b2 <effect_wormsqueeze+0xb6>
    26ae:	de 86       	std	Y+14, r13	; 0x0e
    26b0:	cd 86       	std	Y+13, r12	; 0x0d
			x += dx;
			
		if ((y+dy) > 0 && (y+dy) < cube_size)
    26b2:	c9 01       	movw	r24, r18
    26b4:	63 e0       	ldi	r22, 0x03	; 3
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    26bc:	8c 01       	movw	r16, r24
    26be:	01 50       	subi	r16, 0x01	; 1
    26c0:	10 40       	sbci	r17, 0x00	; 0
    26c2:	0e 0d       	add	r16, r14
    26c4:	1f 1d       	adc	r17, r15
    26c6:	10 16       	cp	r1, r16
    26c8:	11 06       	cpc	r1, r17
    26ca:	1c f4       	brge	.+6      	; 0x26d2 <effect_wormsqueeze+0xd6>
    26cc:	06 15       	cp	r16, r6
    26ce:	17 05       	cpc	r17, r7
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <effect_wormsqueeze+0xd8>
    26d2:	87 01       	movw	r16, r14
			y += dy;
	
		shift(axis, direction);
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	6d 81       	ldd	r22, Y+5	; 0x05
    26d8:	7e 81       	ldd	r23, Y+6	; 0x06
    26da:	0e 94 2d 08 	call	0x105a	; 0x105a <shift>
    26de:	8d 84       	ldd	r8, Y+13	; 0x0d
    26e0:	9e 84       	ldd	r9, Y+14	; 0x0e
    26e2:	aa 24       	eor	r10, r10
    26e4:	bb 24       	eor	r11, r11
    26e6:	31 c0       	rjmp	.+98     	; 0x274a <effect_wormsqueeze+0x14e>

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
			{
				if (axis == AXIS_Z)
    26e8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ea:	fc 81       	ldd	r31, Y+4	; 0x04
    26ec:	ea 37       	cpi	r30, 0x7A	; 122
    26ee:	f1 05       	cpc	r31, r1
    26f0:	21 f4       	brne	.+8      	; 0x26fa <effect_wormsqueeze+0xfe>
					setvoxel(x+j,y+k,origin);
    26f2:	c4 01       	movw	r24, r8
    26f4:	b6 01       	movw	r22, r12
    26f6:	a1 01       	movw	r20, r2
    26f8:	15 c0       	rjmp	.+42     	; 0x2724 <effect_wormsqueeze+0x128>
					
				if (axis == AXIS_Y)
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	89 37       	cpi	r24, 0x79	; 121
    2700:	91 05       	cpc	r25, r1
    2702:	21 f4       	brne	.+8      	; 0x270c <effect_wormsqueeze+0x110>
					setvoxel(x+j,origin,y+k);
    2704:	c4 01       	movw	r24, r8
    2706:	b1 01       	movw	r22, r2
    2708:	a6 01       	movw	r20, r12
    270a:	0c c0       	rjmp	.+24     	; 0x2724 <effect_wormsqueeze+0x128>
					
				if (axis == AXIS_X)
    270c:	eb 81       	ldd	r30, Y+3	; 0x03
    270e:	fc 81       	ldd	r31, Y+4	; 0x04
    2710:	e8 37       	cpi	r30, 0x78	; 120
    2712:	f1 05       	cpc	r31, r1
    2714:	49 f4       	brne	.+18     	; 0x2728 <effect_wormsqueeze+0x12c>
					setvoxel(origin,y+j,x+k);
    2716:	4d 85       	ldd	r20, Y+13	; 0x0d
    2718:	5e 85       	ldd	r21, Y+14	; 0x0e
    271a:	4e 0d       	add	r20, r14
    271c:	5f 1d       	adc	r21, r15
    271e:	c1 01       	movw	r24, r2
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		shift(axis, direction);
		

		for (j=0; j<size;j++)
		{
			for (k=0; k<size;k++)
    2728:	08 94       	sec
    272a:	e1 1c       	adc	r14, r1
    272c:	f1 1c       	adc	r15, r1
    272e:	08 94       	sec
    2730:	c1 1c       	adc	r12, r1
    2732:	d1 1c       	adc	r13, r1
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	e8 16       	cp	r14, r24
    273a:	f9 06       	cpc	r15, r25
    273c:	ac f2       	brlt	.-86     	; 0x26e8 <effect_wormsqueeze+0xec>
			y += dy;
	
		shift(axis, direction);
		

		for (j=0; j<size;j++)
    273e:	08 94       	sec
    2740:	a1 1c       	adc	r10, r1
    2742:	b1 1c       	adc	r11, r1
    2744:	08 94       	sec
    2746:	81 1c       	adc	r8, r1
    2748:	91 1c       	adc	r9, r1
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	ae 16       	cp	r10, r30
    2750:	bf 06       	cpc	r11, r31
    2752:	4c f4       	brge	.+18     	; 0x2766 <effect_wormsqueeze+0x16a>
    2754:	68 01       	movw	r12, r16
    2756:	ee 24       	eor	r14, r14
    2758:	ff 24       	eor	r15, r15
					
				if (axis == AXIS_Y)
					setvoxel(x+j,origin,y+k);
					
				if (axis == AXIS_X)
					setvoxel(origin,y+j,x+k);
    275a:	c5 01       	movw	r24, r10
    275c:	80 0f       	add	r24, r16
    275e:	91 1f       	adc	r25, r17
    2760:	9c 87       	std	Y+12, r25	; 0x0c
    2762:	8b 87       	std	Y+11, r24	; 0x0b
    2764:	e7 cf       	rjmp	.-50     	; 0x2734 <effect_wormsqueeze+0x138>
			}
		}
		
		delay_ms(delay);
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
	cube_size = 8-(size-1);
	
	x = rand()%cube_size;
	y = rand()%cube_size;
	
	for (i=0; i<iterations; i++)
    276e:	08 94       	sec
    2770:	41 1c       	adc	r4, r1
    2772:	51 1c       	adc	r5, r1
    2774:	cd 84       	ldd	r12, Y+13	; 0x0d
    2776:	de 84       	ldd	r13, Y+14	; 0x0e
    2778:	78 01       	movw	r14, r16
    277a:	ef 81       	ldd	r30, Y+7	; 0x07
    277c:	f8 85       	ldd	r31, Y+8	; 0x08
    277e:	4e 16       	cp	r4, r30
    2780:	5f 06       	cpc	r5, r31
    2782:	0c f4       	brge	.+2      	; 0x2786 <effect_wormsqueeze+0x18a>
    2784:	7e cf       	rjmp	.-260    	; 0x2682 <effect_wormsqueeze+0x86>
			}
		}
		
		delay_ms(delay);
	}
}
    2786:	2e 96       	adiw	r28, 0x0e	; 14
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	df 90       	pop	r13
    27a0:	cf 90       	pop	r12
    27a2:	bf 90       	pop	r11
    27a4:	af 90       	pop	r10
    27a6:	9f 90       	pop	r9
    27a8:	8f 90       	pop	r8
    27aa:	7f 90       	pop	r7
    27ac:	6f 90       	pop	r6
    27ae:	5f 90       	pop	r5
    27b0:	4f 90       	pop	r4
    27b2:	3f 90       	pop	r3
    27b4:	2f 90       	pop	r2
    27b6:	08 95       	ret

000027b8 <effect_rain>:
	}
}


void effect_rain (int iterations)
{
    27b8:	af 92       	push	r10
    27ba:	bf 92       	push	r11
    27bc:	cf 92       	push	r12
    27be:	df 92       	push	r13
    27c0:	ef 92       	push	r14
    27c2:	ff 92       	push	r15
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	5c 01       	movw	r10, r24
    27ce:	cc 24       	eor	r12, r12
    27d0:	dd 24       	eor	r13, r13
    27d2:	33 c0       	rjmp	.+102    	; 0x283a <effect_rain+0x82>
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
    27d4:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    27d8:	64 e0       	ldi	r22, 0x04	; 4
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    27e0:	ec 01       	movw	r28, r24
    27e2:	ee 24       	eor	r14, r14
    27e4:	ff 24       	eor	r15, r15
    27e6:	1a c0       	rjmp	.+52     	; 0x281c <effect_rain+0x64>
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%8;
    27e8:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    27ec:	8c 01       	movw	r16, r24
			rnd_y = rand()%8;
    27ee:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    27f2:	9c 01       	movw	r18, r24
			setvoxel(rnd_x,rnd_y,7);
    27f4:	c8 01       	movw	r24, r16
    27f6:	68 e0       	ldi	r22, 0x08	; 8
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    27fe:	fc 01       	movw	r30, r24
    2800:	c9 01       	movw	r24, r18
    2802:	68 e0       	ldi	r22, 0x08	; 8
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    280a:	bc 01       	movw	r22, r24
    280c:	cf 01       	movw	r24, r30
    280e:	47 e0       	ldi	r20, 0x07	; 7
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
    2816:	08 94       	sec
    2818:	e1 1c       	adc	r14, r1
    281a:	f1 1c       	adc	r15, r1
    281c:	ec 16       	cp	r14, r28
    281e:	fd 06       	cpc	r15, r29
    2820:	1c f3       	brlt	.-58     	; 0x27e8 <effect_rain+0x30>
			rnd_x = rand()%8;
			rnd_y = rand()%8;
			setvoxel(rnd_x,rnd_y,7);
		}
		
		delay_ms(1000);
    2822:	88 ee       	ldi	r24, 0xE8	; 232
    2824:	93 e0       	ldi	r25, 0x03	; 3
    2826:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		shift(AXIS_Z,-1);
    282a:	8a e7       	ldi	r24, 0x7A	; 122
    282c:	6f ef       	ldi	r22, 0xFF	; 255
    282e:	7f ef       	ldi	r23, 0xFF	; 255
    2830:	0e 94 2d 08 	call	0x105a	; 0x105a <shift>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
    2834:	08 94       	sec
    2836:	c1 1c       	adc	r12, r1
    2838:	d1 1c       	adc	r13, r1
    283a:	ca 14       	cp	r12, r10
    283c:	db 04       	cpc	r13, r11
    283e:	54 f2       	brlt	.-108    	; 0x27d4 <effect_rain+0x1c>
		}
		
		delay_ms(1000);
		shift(AXIS_Z,-1);
	}
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	08 95       	ret

00002856 <effect_stringfly2>:

}


void effect_stringfly2(const char * str, unsigned char prgMem)
{
    2856:	2f 92       	push	r2
    2858:	3f 92       	push	r3
    285a:	5f 92       	push	r5
    285c:	6f 92       	push	r6
    285e:	7f 92       	push	r7
    2860:	8f 92       	push	r8
    2862:	9f 92       	push	r9
    2864:	af 92       	push	r10
    2866:	bf 92       	push	r11
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	00 d0       	rcall	.+0      	; 0x287a <effect_stringfly2+0x24>
    287a:	00 d0       	rcall	.+0      	; 0x287c <effect_stringfly2+0x26>
    287c:	0f 92       	push	r0
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	6c 01       	movw	r12, r24
    2884:	56 2e       	mov	r5, r22
	int x, y, i;
	unsigned char chr[5];
	
	unsigned char tempChar = GetChar(str, prgMem);
    2886:	0e 94 3c 20 	call	0x4078	; 0x4078 <GetChar>

	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
    288a:	3e 01       	movw	r6, r28
    288c:	08 94       	sec
    288e:	61 1c       	adc	r6, r1
    2890:	71 1c       	adc	r7, r1
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80 >> y)))
    2892:	e0 e8       	ldi	r30, 0x80	; 128
    2894:	2e 2e       	mov	r2, r30
    2896:	31 2c       	mov	r3, r1
    2898:	48 c0       	rjmp	.+144    	; 0x292a <effect_stringfly2+0xd4>
	
	unsigned char tempChar = GetChar(str, prgMem);

	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
    289a:	b3 01       	movw	r22, r6
    289c:	0e 94 2a 1a 	call	0x3454	; 0x3454 <font_getchar>
    28a0:	ee 24       	eor	r14, r14
    28a2:	ff 24       	eor	r15, r15
    28a4:	20 c0       	rjmp	.+64     	; 0x28e6 <effect_stringfly2+0x90>
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80 >> y)))
    28a6:	91 01       	movw	r18, r2
    28a8:	00 2e       	mov	r0, r16
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <effect_stringfly2+0x5a>
    28ac:	35 95       	asr	r19
    28ae:	27 95       	ror	r18
    28b0:	0a 94       	dec	r0
    28b2:	e2 f7       	brpl	.-8      	; 0x28ac <effect_stringfly2+0x56>
    28b4:	f4 01       	movw	r30, r8
    28b6:	80 81       	ld	r24, Z
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	28 23       	and	r18, r24
    28bc:	39 23       	and	r19, r25
    28be:	23 2b       	or	r18, r19
    28c0:	31 f0       	breq	.+12     	; 0x28ce <effect_stringfly2+0x78>
				{
					setvoxel(7, x + 2,y);
    28c2:	87 e0       	ldi	r24, 0x07	; 7
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	b5 01       	movw	r22, r10
    28c8:	a8 01       	movw	r20, r16
    28ca:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		font_getchar(tempChar, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (y = 0; y < 8; y++)
    28ce:	0f 5f       	subi	r16, 0xFF	; 255
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	08 30       	cpi	r16, 0x08	; 8
    28d4:	11 05       	cpc	r17, r1
    28d6:	39 f7       	brne	.-50     	; 0x28a6 <effect_stringfly2+0x50>
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    28d8:	08 94       	sec
    28da:	e1 1c       	adc	r14, r1
    28dc:	f1 1c       	adc	r15, r1
    28de:	f5 e0       	ldi	r31, 0x05	; 5
    28e0:	ef 16       	cp	r14, r31
    28e2:	f1 04       	cpc	r15, r1
    28e4:	59 f0       	breq	.+22     	; 0x28fc <effect_stringfly2+0xa6>
    28e6:	00 e0       	ldi	r16, 0x00	; 0
    28e8:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (y = 0; y < 8; y++)
			{
				if ((chr[x] & (0x80 >> y)))
    28ea:	43 01       	movw	r8, r6
    28ec:	8e 0c       	add	r8, r14
    28ee:	9f 1c       	adc	r9, r15
				{
					setvoxel(7, x + 2,y);
    28f0:	72 e0       	ldi	r23, 0x02	; 2
    28f2:	a7 2e       	mov	r10, r23
    28f4:	b1 2c       	mov	r11, r1
    28f6:	ae 0c       	add	r10, r14
    28f8:	bf 1c       	adc	r11, r15
    28fa:	d5 cf       	rjmp	.-86     	; 0x28a6 <effect_stringfly2+0x50>
	while (tempChar != 0)
	{
		font_getchar(tempChar, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    28fc:	00 e0       	ldi	r16, 0x00	; 0
    28fe:	10 e0       	ldi	r17, 0x00	; 0
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i < 6; i++)
		{
			delay_ms(1000);
    2900:	88 ee       	ldi	r24, 0xE8	; 232
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
            shift(AXIS_X,-1);
    2908:	88 e7       	ldi	r24, 0x78	; 120
    290a:	6f ef       	ldi	r22, 0xFF	; 255
    290c:	7f ef       	ldi	r23, 0xFF	; 255
    290e:	0e 94 2d 08 	call	0x105a	; 0x105a <shift>
			}
		}
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i < 6; i++)
    2912:	0f 5f       	subi	r16, 0xFF	; 255
    2914:	1f 4f       	sbci	r17, 0xFF	; 255
    2916:	06 30       	cpi	r16, 0x06	; 6
    2918:	11 05       	cpc	r17, r1
    291a:	91 f7       	brne	.-28     	; 0x2900 <effect_stringfly2+0xaa>
		{
			delay_ms(1000);
            shift(AXIS_X,-1);
		}

		*str++;
    291c:	08 94       	sec
    291e:	c1 1c       	adc	r12, r1
    2920:	d1 1c       	adc	r13, r1
		tempChar = GetChar(str, prgMem);
    2922:	c6 01       	movw	r24, r12
    2924:	65 2d       	mov	r22, r5
    2926:	0e 94 3c 20 	call	0x4078	; 0x4078 <GetChar>
	int x, y, i;
	unsigned char chr[5];
	
	unsigned char tempChar = GetChar(str, prgMem);

	while (tempChar != 0)
    292a:	88 23       	and	r24, r24
    292c:	09 f0       	breq	.+2      	; 0x2930 <effect_stringfly2+0xda>
    292e:	b5 cf       	rjmp	.-150    	; 0x289a <effect_stringfly2+0x44>
    2930:	00 e0       	ldi	r16, 0x00	; 0
    2932:	10 e0       	ldi	r17, 0x00	; 0
		tempChar = GetChar(str, prgMem);
	}
    // Shift the last character out of the cube.
	for (i = 0; i < 8; i++)
	{
		delay_ms(1000);
    2934:	88 ee       	ldi	r24, 0xE8	; 232
    2936:	93 e0       	ldi	r25, 0x03	; 3
    2938:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
        shift(AXIS_X,-1);
    293c:	88 e7       	ldi	r24, 0x78	; 120
    293e:	6f ef       	ldi	r22, 0xFF	; 255
    2940:	7f ef       	ldi	r23, 0xFF	; 255
    2942:	0e 94 2d 08 	call	0x105a	; 0x105a <shift>

		*str++;
		tempChar = GetChar(str, prgMem);
	}
    // Shift the last character out of the cube.
	for (i = 0; i < 8; i++)
    2946:	0f 5f       	subi	r16, 0xFF	; 255
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	08 30       	cpi	r16, 0x08	; 8
    294c:	11 05       	cpc	r17, r1
    294e:	91 f7       	brne	.-28     	; 0x2934 <effect_stringfly2+0xde>
	{
		delay_ms(1000);
        shift(AXIS_X,-1);
	}
	
}
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	df 90       	pop	r13
    2968:	cf 90       	pop	r12
    296a:	bf 90       	pop	r11
    296c:	af 90       	pop	r10
    296e:	9f 90       	pop	r9
    2970:	8f 90       	pop	r8
    2972:	7f 90       	pop	r7
    2974:	6f 90       	pop	r6
    2976:	5f 90       	pop	r5
    2978:	3f 90       	pop	r3
    297a:	2f 90       	pop	r2
    297c:	08 95       	ret

0000297e <effect_boxside_randsend_parallel>:
	
}


void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
{
    297e:	2f 92       	push	r2
    2980:	3f 92       	push	r3
    2982:	4f 92       	push	r4
    2984:	5f 92       	push	r5
    2986:	6f 92       	push	r6
    2988:	7f 92       	push	r7
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	c1 58       	subi	r28, 0x81	; 129
    29a8:	d0 40       	sbci	r29, 0x00	; 0
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 57       	subi	r28, 0x7F	; 127
    29b6:	df 4f       	sbci	r29, 0xFF	; 255
    29b8:	88 83       	st	Y, r24
    29ba:	c1 58       	subi	r28, 0x81	; 129
    29bc:	d0 40       	sbci	r29, 0x00	; 0
    29be:	2b 01       	movw	r4, r22
    29c0:	3a 01       	movw	r6, r20
    29c2:	49 01       	movw	r8, r18
    29c4:	b1 e4       	ldi	r27, 0x41	; 65
    29c6:	ab 2e       	mov	r10, r27
    29c8:	b1 2c       	mov	r11, r1
    29ca:	ac 0e       	add	r10, r28
    29cc:	bd 1e       	adc	r11, r29
    29ce:	f5 01       	movw	r30, r10
    29d0:	a1 e8       	ldi	r26, 0x81	; 129
    29d2:	ca 2e       	mov	r12, r26
    29d4:	d1 2c       	mov	r13, r1
    29d6:	cc 0e       	add	r12, r28
    29d8:	dd 1e       	adc	r13, r29
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
    29da:	11 92       	st	Z+, r1
	unsigned char pos[64];
	int notdone = 1;
	int notdone2 = 1;
	int sent = 0;
	
	for (i=0;i<64;i++)
    29dc:	ec 15       	cp	r30, r12
    29de:	fd 05       	cpc	r31, r13
    29e0:	e1 f7       	brne	.-8      	; 0x29da <effect_boxside_randsend_parallel+0x5c>
    29e2:	00 e0       	ldi	r16, 0x00	; 0
    29e4:	10 e0       	ldi	r17, 0x00	; 0
				sent++;
			}
		}
		
		done = 0;
		for (i = 0; i < 64; i++)
    29e6:	1e 01       	movw	r2, r28
    29e8:	08 94       	sec
    29ea:	21 1c       	adc	r2, r1
    29ec:	31 1c       	adc	r3, r1
		pos[i] = 0;
	}
	
	while (notdone)
	{
		if (mode == 1)
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	88 16       	cp	r8, r24
    29f2:	91 04       	cpc	r9, r1
    29f4:	c9 f4       	brne	.+50     	; 0x2a28 <effect_boxside_randsend_parallel+0xaa>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <effect_boxside_randsend_parallel+0xa2>
		{
			notdone2 = 1;
			while (notdone2 && sent < 64)
			{
				i = rand() % 64;
    29f8:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    29fc:	60 e4       	ldi	r22, 0x40	; 64
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
				if (pos[i] == 0)
    2a04:	e1 e4       	ldi	r30, 0x41	; 65
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	ec 0f       	add	r30, r28
    2a0a:	fd 1f       	adc	r31, r29
    2a0c:	e8 0f       	add	r30, r24
    2a0e:	f9 1f       	adc	r31, r25
    2a10:	80 81       	ld	r24, Z
    2a12:	88 23       	and	r24, r24
    2a14:	89 f7       	brne	.-30     	; 0x29f8 <effect_boxside_randsend_parallel+0x7a>
				{
					sent++;
    2a16:	0f 5f       	subi	r16, 0xFF	; 255
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
					pos[i] += 1;
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	90 83       	st	Z, r25
    2a1e:	16 c0       	rjmp	.+44     	; 0x2a4c <effect_boxside_randsend_parallel+0xce>
	while (notdone)
	{
		if (mode == 1)
		{
			notdone2 = 1;
			while (notdone2 && sent < 64)
    2a20:	00 34       	cpi	r16, 0x40	; 64
    2a22:	11 05       	cpc	r17, r1
    2a24:	4c f3       	brlt	.-46     	; 0x29f8 <effect_boxside_randsend_parallel+0x7a>
    2a26:	12 c0       	rjmp	.+36     	; 0x2a4c <effect_boxside_randsend_parallel+0xce>
					pos[i] += 1;
					notdone2 = 0;
				}
			}
		} 
		else if (mode == 2)
    2a28:	82 e0       	ldi	r24, 0x02	; 2
    2a2a:	88 16       	cp	r8, r24
    2a2c:	91 04       	cpc	r9, r1
    2a2e:	71 f4       	brne	.+28     	; 0x2a4c <effect_boxside_randsend_parallel+0xce>
		{
			if (sent < 64)
    2a30:	00 34       	cpi	r16, 0x40	; 64
    2a32:	11 05       	cpc	r17, r1
    2a34:	5c f4       	brge	.+22     	; 0x2a4c <effect_boxside_randsend_parallel+0xce>
			{
				pos[sent] += 1;
    2a36:	e1 e4       	ldi	r30, 0x41	; 65
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	ec 0f       	add	r30, r28
    2a3c:	fd 1f       	adc	r31, r29
    2a3e:	e0 0f       	add	r30, r16
    2a40:	f1 1f       	adc	r31, r17
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
				sent++;
    2a48:	0f 5f       	subi	r16, 0xFF	; 255
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	f5 01       	movw	r30, r10
    2a4e:	ee 24       	eor	r14, r14
    2a50:	ff 24       	eor	r15, r15
		}
		
		done = 0;
		for (i = 0; i < 64; i++)
		{
			if (pos[i] > 0 && pos[i] <7)
    2a52:	90 81       	ld	r25, Z
    2a54:	89 2f       	mov	r24, r25
    2a56:	81 50       	subi	r24, 0x01	; 1
    2a58:	86 30       	cpi	r24, 0x06	; 6
    2a5a:	10 f4       	brcc	.+4      	; 0x2a60 <effect_boxside_randsend_parallel+0xe2>
			{
				pos[i] += 1;
    2a5c:	9f 5f       	subi	r25, 0xFF	; 255
    2a5e:	90 83       	st	Z, r25
			}
				
			if (pos[i] == 7)
    2a60:	80 81       	ld	r24, Z
    2a62:	87 30       	cpi	r24, 0x07	; 7
    2a64:	19 f4       	brne	.+6      	; 0x2a6c <effect_boxside_randsend_parallel+0xee>
			{
				done++;
    2a66:	08 94       	sec
    2a68:	e1 1c       	adc	r14, r1
    2a6a:	f1 1c       	adc	r15, r1
    2a6c:	31 96       	adiw	r30, 0x01	; 1
				sent++;
			}
		}
		
		done = 0;
		for (i = 0; i < 64; i++)
    2a6e:	ec 15       	cp	r30, r12
    2a70:	fd 05       	cpc	r31, r13
    2a72:	79 f7       	brne	.-34     	; 0x2a52 <effect_boxside_randsend_parallel+0xd4>
    2a74:	d1 01       	movw	r26, r2
    2a76:	f5 01       	movw	r30, r10
    2a78:	80 81       	ld	r24, Z
			notdone = 0;
		}
		
		for (i=0;i<64;i++)
		{
			if (origin == 0)
    2a7a:	41 14       	cp	r4, r1
    2a7c:	51 04       	cpc	r5, r1
    2a7e:	19 f0       	breq	.+6      	; 0x2a86 <effect_boxside_randsend_parallel+0x108>
			{
				cubepos[i] = pos[i];
			}
			else
			{
				cubepos[i] = (7-pos[i]);
    2a80:	97 e0       	ldi	r25, 0x07	; 7
    2a82:	98 1b       	sub	r25, r24
    2a84:	89 2f       	mov	r24, r25
    2a86:	8c 93       	st	X, r24
    2a88:	31 96       	adiw	r30, 0x01	; 1
    2a8a:	11 96       	adiw	r26, 0x01	; 1
		if (done == 64)
		{
			notdone = 0;
		}
		
		for (i=0;i<64;i++)
    2a8c:	ec 15       	cp	r30, r12
    2a8e:	fd 05       	cpc	r31, r13
    2a90:	99 f7       	brne	.-26     	; 0x2a78 <effect_boxside_randsend_parallel+0xfa>
				cubepos[i] = (7-pos[i]);
			}
		}
		
		
		delay_ms(delay);
    2a92:	c3 01       	movw	r24, r6
    2a94:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		draw_positions_axis(axis, cubepos, 0);
    2a98:	cf 57       	subi	r28, 0x7F	; 127
    2a9a:	df 4f       	sbci	r29, 0xFF	; 255
    2a9c:	88 81       	ld	r24, Y
    2a9e:	c1 58       	subi	r28, 0x81	; 129
    2aa0:	d0 40       	sbci	r29, 0x00	; 0
    2aa2:	b1 01       	movw	r22, r2
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <draw_positions_axis>
		DebugBlink(LED_RED);
    2aac:	80 e1       	ldi	r24, 0x10	; 16
    2aae:	0e 94 1c 03 	call	0x638	; 0x638 <DebugBlink>
	for (i=0;i<64;i++)
	{
		pos[i] = 0;
	}
	
	while (notdone)
    2ab2:	80 e4       	ldi	r24, 0x40	; 64
    2ab4:	e8 16       	cp	r14, r24
    2ab6:	f1 04       	cpc	r15, r1
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <effect_boxside_randsend_parallel+0x13e>
    2aba:	99 cf       	rjmp	.-206    	; 0x29ee <effect_boxside_randsend_parallel+0x70>
		delay_ms(delay);
		draw_positions_axis(axis, cubepos, 0);
		DebugBlink(LED_RED);
	}
	
}
    2abc:	cf 57       	subi	r28, 0x7F	; 127
    2abe:	df 4f       	sbci	r29, 0xFF	; 255
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	bf 90       	pop	r11
    2adc:	af 90       	pop	r10
    2ade:	9f 90       	pop	r9
    2ae0:	8f 90       	pop	r8
    2ae2:	7f 90       	pop	r7
    2ae4:	6f 90       	pop	r6
    2ae6:	5f 90       	pop	r5
    2ae8:	4f 90       	pop	r4
    2aea:	3f 90       	pop	r3
    2aec:	2f 90       	pop	r2
    2aee:	08 95       	ret

00002af0 <boingboing>:
}


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    2af0:	2f 92       	push	r2
    2af2:	3f 92       	push	r3
    2af4:	4f 92       	push	r4
    2af6:	5f 92       	push	r5
    2af8:	6f 92       	push	r6
    2afa:	7f 92       	push	r7
    2afc:	8f 92       	push	r8
    2afe:	9f 92       	push	r9
    2b00:	af 92       	push	r10
    2b02:	bf 92       	push	r11
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	e8 97       	sbiw	r28, 0x38	; 56
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	9a ab       	std	Y+50, r25	; 0x32
    2b26:	89 ab       	std	Y+49, r24	; 0x31
    2b28:	7c ab       	std	Y+52, r23	; 0x34
    2b2a:	6b ab       	std	Y+51, r22	; 0x33
    2b2c:	22 2e       	mov	r2, r18
	fill(0x00);		// Blank the cube
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
	int x, y, z;		// Current coordinates for the point
	int dx, dy, dz;	// Direction of movement
	int lol, i;		// lol?
	unsigned char crash_x, crash_y, crash_z;

	y = rand()%8;
    2b34:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2b38:	68 e0       	ldi	r22, 0x08	; 8
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2b40:	7c 01       	movw	r14, r24
    2b42:	3c 01       	movw	r6, r24
	x = rand()%8;
    2b44:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2b48:	68 e0       	ldi	r22, 0x08	; 8
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2b50:	8c 01       	movw	r16, r24
    2b52:	2c 01       	movw	r4, r24
	z = rand()%8;
    2b54:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2b58:	68 e0       	ldi	r22, 0x08	; 8
    2b5a:	70 e0       	ldi	r23, 0x00	; 0
    2b5c:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2b60:	38 2f       	mov	r19, r24
    2b62:	29 2f       	mov	r18, r25
    2b64:	6c 01       	movw	r12, r24
    2b66:	fe 01       	movw	r30, r28
    2b68:	31 96       	adiw	r30, 0x01	; 1
}


// Big ugly function :p but it looks pretty
void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
{
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	c1 96       	adiw	r24, 0x31	; 49
    2b6e:	9e ab       	std	Y+54, r25	; 0x36
    2b70:	8d ab       	std	Y+53, r24	; 0x35

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
	{
		snake[i][0] = x;
    2b72:	00 83       	st	Z, r16
    2b74:	11 83       	std	Z+1, r17	; 0x01
		snake[i][1] = y;
    2b76:	e2 82       	std	Z+2, r14	; 0x02
    2b78:	f3 82       	std	Z+3, r15	; 0x03
		snake[i][2] = z;
    2b7a:	34 83       	std	Z+4, r19	; 0x04
    2b7c:	25 83       	std	Z+5, r18	; 0x05
    2b7e:	36 96       	adiw	r30, 0x06	; 6
	x = rand()%8;
	z = rand()%8;

	// Coordinate array for the snake.
	int snake[8][3];
	for (i=0;i<8;i++)
    2b80:	8d a9       	ldd	r24, Y+53	; 0x35
    2b82:	9e a9       	ldd	r25, Y+54	; 0x36
    2b84:	e8 17       	cp	r30, r24
    2b86:	f9 07       	cpc	r31, r25
    2b88:	a1 f7       	brne	.-24     	; 0x2b72 <boingboing+0x82>
    2b8a:	11 e0       	ldi	r17, 0x01	; 1
    2b8c:	e1 2e       	mov	r14, r17
    2b8e:	f1 2c       	mov	r15, r1
    2b90:	b1 e0       	ldi	r27, 0x01	; 1
    2b92:	8b 2e       	mov	r8, r27
    2b94:	91 2c       	mov	r9, r1
    2b96:	a1 e0       	ldi	r26, 0x01	; 1
    2b98:	aa 2e       	mov	r10, r26
    2b9a:	b1 2c       	mov	r11, r1
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	3b 97       	sbiw	r30, 0x0b	; 11
    2ba0:	f8 af       	std	Y+56, r31	; 0x38
    2ba2:	ef ab       	std	Y+55, r30	; 0x37
    2ba4:	4b c2       	rjmp	.+1174   	; 0x303c <boingboing+0x54c>
		crash_y = 0;
		crash_z = 0;
	

		// Let's mix things up a little:
		if (rand()%3 == 0)
    2ba6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2baa:	63 e0       	ldi	r22, 0x03	; 3
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2bb2:	89 2b       	or	r24, r25
    2bb4:	71 f5       	brne	.+92     	; 0x2c12 <boingboing+0x122>
		{
			// Pick a random axis, and set the speed to a random number.
			lol = rand()%3;
    2bb6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2bba:	63 e0       	ldi	r22, 0x03	; 3
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
			if (lol == 0)
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	59 f4       	brne	.+22     	; 0x2bdc <boingboing+0xec>
				dx = rand()%3 - 1;
    2bc6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2bca:	63 e0       	ldi	r22, 0x03	; 3
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2bd2:	7c 01       	movw	r14, r24
    2bd4:	08 94       	sec
    2bd6:	e1 08       	sbc	r14, r1
    2bd8:	f1 08       	sbc	r15, r1
    2bda:	1b c0       	rjmp	.+54     	; 0x2c12 <boingboing+0x122>
			
			if (lol == 1)
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	91 05       	cpc	r25, r1
    2be0:	59 f4       	brne	.+22     	; 0x2bf8 <boingboing+0x108>
				dy = rand()%3 - 1;
    2be2:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2be6:	63 e0       	ldi	r22, 0x03	; 3
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2bee:	4c 01       	movw	r8, r24
    2bf0:	08 94       	sec
    2bf2:	81 08       	sbc	r8, r1
    2bf4:	91 08       	sbc	r9, r1
    2bf6:	0d c0       	rjmp	.+26     	; 0x2c12 <boingboing+0x122>
				
			if (lol == 2)
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	51 f4       	brne	.+20     	; 0x2c12 <boingboing+0x122>
				dz = rand()%3 - 1;
    2bfe:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2c02:	63 e0       	ldi	r22, 0x03	; 3
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2c0a:	5c 01       	movw	r10, r24
    2c0c:	08 94       	sec
    2c0e:	a1 08       	sbc	r10, r1
    2c10:	b1 08       	sbc	r11, r1
		}

	    // The point has reached 0 on the x-axis and is trying to go to -1
        // aka a crash
		if (dx == -1 && x == 0)
    2c12:	ff ef       	ldi	r31, 0xFF	; 255
    2c14:	ef 16       	cp	r14, r31
    2c16:	ff ef       	ldi	r31, 0xFF	; 255
    2c18:	ff 06       	cpc	r15, r31
    2c1a:	99 f4       	brne	.+38     	; 0x2c42 <boingboing+0x152>
    2c1c:	41 14       	cp	r4, r1
    2c1e:	51 04       	cpc	r5, r1
    2c20:	81 f4       	brne	.+32     	; 0x2c42 <boingboing+0x152>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    2c22:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2c26:	63 e0       	ldi	r22, 0x03	; 3
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <boingboing+0x148>
    2c32:	ee 24       	eor	r14, r14
    2c34:	ff 24       	eor	r15, r15
    2c36:	03 c0       	rjmp	.+6      	; 0x2c3e <boingboing+0x14e>
    2c38:	f1 e0       	ldi	r31, 0x01	; 1
    2c3a:	ef 2e       	mov	r14, r31
    2c3c:	f1 2c       	mov	r15, r1
    2c3e:	11 e0       	ldi	r17, 0x01	; 1
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <boingboing+0x154>
    2c42:	10 e0       	ldi	r17, 0x00	; 0
				dx = 0;
			}
		}
		
        // y axis 0 crash
		if (dy == -1 && y == 0)
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	88 16       	cp	r8, r24
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	98 06       	cpc	r9, r24
    2c4c:	99 f4       	brne	.+38     	; 0x2c74 <boingboing+0x184>
    2c4e:	61 14       	cp	r6, r1
    2c50:	71 04       	cpc	r7, r1
    2c52:	81 f4       	brne	.+32     	; 0x2c74 <boingboing+0x184>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    2c54:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2c58:	63 e0       	ldi	r22, 0x03	; 3
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	19 f0       	breq	.+6      	; 0x2c6a <boingboing+0x17a>
    2c64:	88 24       	eor	r8, r8
    2c66:	99 24       	eor	r9, r9
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <boingboing+0x180>
    2c6a:	e1 e0       	ldi	r30, 0x01	; 1
    2c6c:	8e 2e       	mov	r8, r30
    2c6e:	91 2c       	mov	r9, r1
    2c70:	01 e0       	ldi	r16, 0x01	; 1
    2c72:	01 c0       	rjmp	.+2      	; 0x2c76 <boingboing+0x186>
    2c74:	00 e0       	ldi	r16, 0x00	; 0
				dy = 0;
			}
		}
		
        // z axis 0 crash
		if (dz == -1 && z == 0)
    2c76:	9f ef       	ldi	r25, 0xFF	; 255
    2c78:	a9 16       	cp	r10, r25
    2c7a:	9f ef       	ldi	r25, 0xFF	; 255
    2c7c:	b9 06       	cpc	r11, r25
    2c7e:	a1 f4       	brne	.+40     	; 0x2ca8 <boingboing+0x1b8>
    2c80:	c1 14       	cp	r12, r1
    2c82:	d1 04       	cpc	r13, r1
    2c84:	89 f4       	brne	.+34     	; 0x2ca8 <boingboing+0x1b8>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    2c86:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2c8a:	63 e0       	ldi	r22, 0x03	; 3
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	19 f0       	breq	.+6      	; 0x2c9c <boingboing+0x1ac>
    2c96:	aa 24       	eor	r10, r10
    2c98:	bb 24       	eor	r11, r11
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <boingboing+0x1b2>
    2c9c:	71 e0       	ldi	r23, 0x01	; 1
    2c9e:	a7 2e       	mov	r10, r23
    2ca0:	b1 2c       	mov	r11, r1
    2ca2:	33 24       	eor	r3, r3
    2ca4:	33 94       	inc	r3
    2ca6:	01 c0       	rjmp	.+2      	; 0x2caa <boingboing+0x1ba>
    2ca8:	33 24       	eor	r3, r3
				dz = 0;
			}
		}
	    
        // x axis 7 crash
		if (dx == 1 && x == 7)
    2caa:	e1 e0       	ldi	r30, 0x01	; 1
    2cac:	ee 16       	cp	r14, r30
    2cae:	f1 04       	cpc	r15, r1
    2cb0:	99 f4       	brne	.+38     	; 0x2cd8 <boingboing+0x1e8>
    2cb2:	f7 e0       	ldi	r31, 0x07	; 7
    2cb4:	4f 16       	cp	r4, r31
    2cb6:	51 04       	cpc	r5, r1
    2cb8:	79 f4       	brne	.+30     	; 0x2cd8 <boingboing+0x1e8>
		{
			crash_x = 0x01;
			if (rand()%3 == 1)
    2cba:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2cbe:	63 e0       	ldi	r22, 0x03	; 3
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <boingboing+0x1e0>
    2cca:	ee 24       	eor	r14, r14
    2ccc:	ff 24       	eor	r15, r15
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <boingboing+0x1e6>
    2cd0:	ee 24       	eor	r14, r14
    2cd2:	ea 94       	dec	r14
    2cd4:	fe 2c       	mov	r15, r14
    2cd6:	11 e0       	ldi	r17, 0x01	; 1
				dx = 0;
			}
		}
		
        // y axis 7 crash
		if (dy == 1 && y == 7)
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	88 16       	cp	r8, r24
    2cdc:	91 04       	cpc	r9, r1
    2cde:	99 f4       	brne	.+38     	; 0x2d06 <boingboing+0x216>
    2ce0:	97 e0       	ldi	r25, 0x07	; 7
    2ce2:	69 16       	cp	r6, r25
    2ce4:	71 04       	cpc	r7, r1
    2ce6:	79 f4       	brne	.+30     	; 0x2d06 <boingboing+0x216>
		{
			crash_y = 0x01;
			if (rand()%3 == 1)
    2ce8:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2cec:	63 e0       	ldi	r22, 0x03	; 3
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	19 f0       	breq	.+6      	; 0x2cfe <boingboing+0x20e>
    2cf8:	88 24       	eor	r8, r8
    2cfa:	99 24       	eor	r9, r9
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <boingboing+0x214>
    2cfe:	88 24       	eor	r8, r8
    2d00:	8a 94       	dec	r8
    2d02:	98 2c       	mov	r9, r8
    2d04:	01 e0       	ldi	r16, 0x01	; 1
				dy = 0;
			}
		}
		
        // z azis 7 crash
		if (dz == 1 && z == 7)
    2d06:	e1 e0       	ldi	r30, 0x01	; 1
    2d08:	ae 16       	cp	r10, r30
    2d0a:	b1 04       	cpc	r11, r1
    2d0c:	a1 f4       	brne	.+40     	; 0x2d36 <boingboing+0x246>
    2d0e:	f7 e0       	ldi	r31, 0x07	; 7
    2d10:	cf 16       	cp	r12, r31
    2d12:	d1 04       	cpc	r13, r1
    2d14:	81 f4       	brne	.+32     	; 0x2d36 <boingboing+0x246>
		{
			crash_z = 0x01;
			if (rand()%3 == 1)
    2d16:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2d1a:	63 e0       	ldi	r22, 0x03	; 3
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <boingboing+0x23c>
    2d26:	aa 24       	eor	r10, r10
    2d28:	bb 24       	eor	r11, r11
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <boingboing+0x242>
    2d2c:	aa 24       	eor	r10, r10
    2d2e:	aa 94       	dec	r10
    2d30:	ba 2c       	mov	r11, r10
    2d32:	33 24       	eor	r3, r3
    2d34:	33 94       	inc	r3
		}
		
		// mode bit 0 sets crash action enable
		if (mode | 0x01)
		{
			if (crash_x)
    2d36:	11 23       	and	r17, r17
    2d38:	51 f1       	breq	.+84     	; 0x2d8e <boingboing+0x29e>
			{
				if (dy == 0)
    2d3a:	81 14       	cp	r8, r1
    2d3c:	91 04       	cpc	r9, r1
    2d3e:	91 f4       	brne	.+36     	; 0x2d64 <boingboing+0x274>
				{
					if (y == 7)
    2d40:	87 e0       	ldi	r24, 0x07	; 7
    2d42:	68 16       	cp	r6, r24
    2d44:	71 04       	cpc	r7, r1
    2d46:	39 f0       	breq	.+14     	; 0x2d56 <boingboing+0x266>
					{
						dy = -1;
					} else if (y == 0)
    2d48:	61 14       	cp	r6, r1
    2d4a:	71 04       	cpc	r7, r1
    2d4c:	41 f0       	breq	.+16     	; 0x2d5e <boingboing+0x26e>
					{
						dy = +1;
					} else
					{
						if (rand()%2 == 0)
    2d4e:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2d52:	80 fd       	sbrc	r24, 0
    2d54:	04 c0       	rjmp	.+8      	; 0x2d5e <boingboing+0x26e>
    2d56:	88 24       	eor	r8, r8
    2d58:	8a 94       	dec	r8
    2d5a:	98 2c       	mov	r9, r8
    2d5c:	03 c0       	rjmp	.+6      	; 0x2d64 <boingboing+0x274>
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	86 2e       	mov	r8, r22
    2d62:	91 2c       	mov	r9, r1
						{
							dy = 1;
						}
					}
				}
				if (dz == 0)
    2d64:	a1 14       	cp	r10, r1
    2d66:	b1 04       	cpc	r11, r1
    2d68:	91 f4       	brne	.+36     	; 0x2d8e <boingboing+0x29e>
				{
					if (z == 7)
    2d6a:	97 e0       	ldi	r25, 0x07	; 7
    2d6c:	c9 16       	cp	r12, r25
    2d6e:	d1 04       	cpc	r13, r1
    2d70:	39 f0       	breq	.+14     	; 0x2d80 <boingboing+0x290>
					{
						dz = -1;
					} else if (z == 0)
    2d72:	c1 14       	cp	r12, r1
    2d74:	d1 04       	cpc	r13, r1
    2d76:	41 f0       	breq	.+16     	; 0x2d88 <boingboing+0x298>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    2d78:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2d7c:	80 fd       	sbrc	r24, 0
    2d7e:	04 c0       	rjmp	.+8      	; 0x2d88 <boingboing+0x298>
    2d80:	aa 24       	eor	r10, r10
    2d82:	aa 94       	dec	r10
    2d84:	ba 2c       	mov	r11, r10
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <boingboing+0x29e>
    2d88:	51 e0       	ldi	r21, 0x01	; 1
    2d8a:	a5 2e       	mov	r10, r21
    2d8c:	b1 2c       	mov	r11, r1
						}
					}	
				}
			}
			
			if (crash_y)
    2d8e:	00 23       	and	r16, r16
    2d90:	51 f1       	breq	.+84     	; 0x2de6 <boingboing+0x2f6>
			{
				if (dx == 0)
    2d92:	e1 14       	cp	r14, r1
    2d94:	f1 04       	cpc	r15, r1
    2d96:	91 f4       	brne	.+36     	; 0x2dbc <boingboing+0x2cc>
				{
					if (x == 7)
    2d98:	e7 e0       	ldi	r30, 0x07	; 7
    2d9a:	4e 16       	cp	r4, r30
    2d9c:	51 04       	cpc	r5, r1
    2d9e:	39 f0       	breq	.+14     	; 0x2dae <boingboing+0x2be>
					{
						dx = -1;
					} else if (x == 0)
    2da0:	41 14       	cp	r4, r1
    2da2:	51 04       	cpc	r5, r1
    2da4:	41 f0       	breq	.+16     	; 0x2db6 <boingboing+0x2c6>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    2da6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2daa:	80 fd       	sbrc	r24, 0
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <boingboing+0x2c6>
    2dae:	ee 24       	eor	r14, r14
    2db0:	ea 94       	dec	r14
    2db2:	fe 2c       	mov	r15, r14
    2db4:	03 c0       	rjmp	.+6      	; 0x2dbc <boingboing+0x2cc>
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	e4 2e       	mov	r14, r20
    2dba:	f1 2c       	mov	r15, r1
						{
							dx = 1;
						}
					}
				}
				if (dz == 0)
    2dbc:	a1 14       	cp	r10, r1
    2dbe:	b1 04       	cpc	r11, r1
    2dc0:	91 f4       	brne	.+36     	; 0x2de6 <boingboing+0x2f6>
				{
					if (z == 3)
    2dc2:	f3 e0       	ldi	r31, 0x03	; 3
    2dc4:	cf 16       	cp	r12, r31
    2dc6:	d1 04       	cpc	r13, r1
    2dc8:	39 f0       	breq	.+14     	; 0x2dd8 <boingboing+0x2e8>
					{
						dz = -1;
					} else if (z == 0)
    2dca:	c1 14       	cp	r12, r1
    2dcc:	d1 04       	cpc	r13, r1
    2dce:	41 f0       	breq	.+16     	; 0x2de0 <boingboing+0x2f0>
					{
						dz = 1;
					} else
					{
						if (rand()%2 == 0)
    2dd0:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2dd4:	80 fd       	sbrc	r24, 0
    2dd6:	04 c0       	rjmp	.+8      	; 0x2de0 <boingboing+0x2f0>
    2dd8:	aa 24       	eor	r10, r10
    2dda:	aa 94       	dec	r10
    2ddc:	ba 2c       	mov	r11, r10
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <boingboing+0x2f6>
    2de0:	31 e0       	ldi	r19, 0x01	; 1
    2de2:	a3 2e       	mov	r10, r19
    2de4:	b1 2c       	mov	r11, r1
						}
					}	
				}
			}
			
			if (crash_z)
    2de6:	33 20       	and	r3, r3
    2de8:	61 f1       	breq	.+88     	; 0x2e42 <boingboing+0x352>
			{
				if (dy == 0)
    2dea:	81 14       	cp	r8, r1
    2dec:	91 04       	cpc	r9, r1
    2dee:	91 f4       	brne	.+36     	; 0x2e14 <boingboing+0x324>
				{
					if (y == 7)
    2df0:	87 e0       	ldi	r24, 0x07	; 7
    2df2:	68 16       	cp	r6, r24
    2df4:	71 04       	cpc	r7, r1
    2df6:	39 f0       	breq	.+14     	; 0x2e06 <boingboing+0x316>
					{
						dy = -1;
					} else if (y == 0)
    2df8:	61 14       	cp	r6, r1
    2dfa:	71 04       	cpc	r7, r1
    2dfc:	41 f0       	breq	.+16     	; 0x2e0e <boingboing+0x31e>
					{
						dy = 1;
					} else
					{
						if (rand()%2 == 0)
    2dfe:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2e02:	80 fd       	sbrc	r24, 0
    2e04:	04 c0       	rjmp	.+8      	; 0x2e0e <boingboing+0x31e>
    2e06:	88 24       	eor	r8, r8
    2e08:	8a 94       	dec	r8
    2e0a:	98 2c       	mov	r9, r8
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <boingboing+0x324>
    2e0e:	21 e0       	ldi	r18, 0x01	; 1
    2e10:	82 2e       	mov	r8, r18
    2e12:	91 2c       	mov	r9, r1
						{
							dy = 1;
						}
					}	
				}
				if (dx == 0)
    2e14:	e1 14       	cp	r14, r1
    2e16:	f1 04       	cpc	r15, r1
    2e18:	a1 f4       	brne	.+40     	; 0x2e42 <boingboing+0x352>
				{
					if (x == 7)
    2e1a:	97 e0       	ldi	r25, 0x07	; 7
    2e1c:	49 16       	cp	r4, r25
    2e1e:	51 04       	cpc	r5, r1
    2e20:	21 f4       	brne	.+8      	; 0x2e2a <boingboing+0x33a>
    2e22:	ee 24       	eor	r14, r14
    2e24:	ea 94       	dec	r14
    2e26:	fe 2c       	mov	r15, r14
    2e28:	29 c0       	rjmp	.+82     	; 0x2e7c <boingboing+0x38c>
					{
						dx = -1;
					} else if (x == 0)
    2e2a:	41 14       	cp	r4, r1
    2e2c:	51 04       	cpc	r5, r1
    2e2e:	21 f4       	brne	.+8      	; 0x2e38 <boingboing+0x348>
    2e30:	91 e0       	ldi	r25, 0x01	; 1
    2e32:	e9 2e       	mov	r14, r25
    2e34:	f1 2c       	mov	r15, r1
    2e36:	08 c0       	rjmp	.+16     	; 0x2e48 <boingboing+0x358>
					{
						dx = 1;
					} else
					{
						if (rand()%2 == 0)
    2e38:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2e3c:	80 ff       	sbrs	r24, 0
    2e3e:	04 c1       	rjmp	.+520    	; 0x3048 <boingboing+0x558>
    2e40:	51 c0       	rjmp	.+162    	; 0x2ee4 <boingboing+0x3f4>
		}
		
		// mode bit 1 sets corner avoid enable
		if (mode | 0x02)
		{
			if (	// We are in one of 8 corner positions
    2e42:	41 14       	cp	r4, r1
    2e44:	51 04       	cpc	r5, r1
    2e46:	b1 f4       	brne	.+44     	; 0x2e74 <boingboing+0x384>
    2e48:	61 14       	cp	r6, r1
    2e4a:	71 04       	cpc	r7, r1
    2e4c:	41 f4       	brne	.+16     	; 0x2e5e <boingboing+0x36e>
    2e4e:	c1 14       	cp	r12, r1
    2e50:	d1 04       	cpc	r13, r1
    2e52:	51 f1       	breq	.+84     	; 0x2ea8 <boingboing+0x3b8>
    2e54:	e7 e0       	ldi	r30, 0x07	; 7
    2e56:	ce 16       	cp	r12, r30
    2e58:	d1 04       	cpc	r13, r1
    2e5a:	61 f4       	brne	.+24     	; 0x2e74 <boingboing+0x384>
    2e5c:	25 c0       	rjmp	.+74     	; 0x2ea8 <boingboing+0x3b8>
    2e5e:	f7 e0       	ldi	r31, 0x07	; 7
    2e60:	6f 16       	cp	r6, r31
    2e62:	71 04       	cpc	r7, r1
    2e64:	39 f4       	brne	.+14     	; 0x2e74 <boingboing+0x384>
    2e66:	c1 14       	cp	r12, r1
    2e68:	d1 04       	cpc	r13, r1
    2e6a:	f1 f0       	breq	.+60     	; 0x2ea8 <boingboing+0x3b8>
    2e6c:	87 e0       	ldi	r24, 0x07	; 7
    2e6e:	c8 16       	cp	r12, r24
    2e70:	d1 04       	cpc	r13, r1
    2e72:	d1 f0       	breq	.+52     	; 0x2ea8 <boingboing+0x3b8>
    2e74:	97 e0       	ldi	r25, 0x07	; 7
    2e76:	49 16       	cp	r4, r25
    2e78:	51 04       	cpc	r5, r1
    2e7a:	61 f5       	brne	.+88     	; 0x2ed4 <boingboing+0x3e4>
    2e7c:	61 14       	cp	r6, r1
    2e7e:	71 04       	cpc	r7, r1
    2e80:	41 f4       	brne	.+16     	; 0x2e92 <boingboing+0x3a2>
    2e82:	c1 14       	cp	r12, r1
    2e84:	d1 04       	cpc	r13, r1
    2e86:	81 f0       	breq	.+32     	; 0x2ea8 <boingboing+0x3b8>
    2e88:	e7 e0       	ldi	r30, 0x07	; 7
    2e8a:	ce 16       	cp	r12, r30
    2e8c:	d1 04       	cpc	r13, r1
    2e8e:	11 f5       	brne	.+68     	; 0x2ed4 <boingboing+0x3e4>
    2e90:	0b c0       	rjmp	.+22     	; 0x2ea8 <boingboing+0x3b8>
    2e92:	f7 e0       	ldi	r31, 0x07	; 7
    2e94:	6f 16       	cp	r6, r31
    2e96:	71 04       	cpc	r7, r1
    2e98:	e9 f4       	brne	.+58     	; 0x2ed4 <boingboing+0x3e4>
    2e9a:	c1 14       	cp	r12, r1
    2e9c:	d1 04       	cpc	r13, r1
    2e9e:	21 f0       	breq	.+8      	; 0x2ea8 <boingboing+0x3b8>
    2ea0:	87 e0       	ldi	r24, 0x07	; 7
    2ea2:	c8 16       	cp	r12, r24
    2ea4:	d1 04       	cpc	r13, r1
    2ea6:	b1 f4       	brne	.+44     	; 0x2ed4 <boingboing+0x3e4>
				// and the exact opposite corner
				// We don't want that!
			
				// So we alter the trajectory a bit,
				// to avoid corner stickyness
				lol = rand()%3;
    2ea8:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    2eac:	63 e0       	ldi	r22, 0x03	; 3
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
				if (lol == 0)
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	19 f4       	brne	.+6      	; 0x2ebe <boingboing+0x3ce>
    2eb8:	ee 24       	eor	r14, r14
    2eba:	ff 24       	eor	r15, r15
    2ebc:	0b c0       	rjmp	.+22     	; 0x2ed4 <boingboing+0x3e4>
					dx = 0;
				
				if (lol == 1)
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	19 f4       	brne	.+6      	; 0x2eca <boingboing+0x3da>
    2ec4:	88 24       	eor	r8, r8
    2ec6:	99 24       	eor	r9, r9
    2ec8:	05 c0       	rjmp	.+10     	; 0x2ed4 <boingboing+0x3e4>
					dy = 0;
					
				if (lol == 2)
    2eca:	82 30       	cpi	r24, 0x02	; 2
    2ecc:	91 05       	cpc	r25, r1
    2ece:	11 f4       	brne	.+4      	; 0x2ed4 <boingboing+0x3e4>
    2ed0:	aa 24       	eor	r10, r10
    2ed2:	bb 24       	eor	r11, r11
					dz = 0;
			}
		}

        // one last sanity check
        if (x == 0 && dx == -1)
    2ed4:	41 14       	cp	r4, r1
    2ed6:	51 04       	cpc	r5, r1
    2ed8:	41 f4       	brne	.+16     	; 0x2eea <boingboing+0x3fa>
    2eda:	9f ef       	ldi	r25, 0xFF	; 255
    2edc:	e9 16       	cp	r14, r25
    2ede:	9f ef       	ldi	r25, 0xFF	; 255
    2ee0:	f9 06       	cpc	r15, r25
    2ee2:	19 f4       	brne	.+6      	; 0x2eea <boingboing+0x3fa>
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	e8 2e       	mov	r14, r24
    2ee8:	f1 2c       	mov	r15, r1
            dx = 1;
	
        if (y == 0 && dy == -1)
    2eea:	61 14       	cp	r6, r1
    2eec:	71 04       	cpc	r7, r1
    2eee:	41 f4       	brne	.+16     	; 0x2f00 <boingboing+0x410>
    2ef0:	ef ef       	ldi	r30, 0xFF	; 255
    2ef2:	8e 16       	cp	r8, r30
    2ef4:	ef ef       	ldi	r30, 0xFF	; 255
    2ef6:	9e 06       	cpc	r9, r30
    2ef8:	19 f4       	brne	.+6      	; 0x2f00 <boingboing+0x410>
    2efa:	01 e0       	ldi	r16, 0x01	; 1
    2efc:	80 2e       	mov	r8, r16
    2efe:	91 2c       	mov	r9, r1
            dy = 1;
	
        if (z == 0 && dz == -1)
    2f00:	c1 14       	cp	r12, r1
    2f02:	d1 04       	cpc	r13, r1
    2f04:	41 f4       	brne	.+16     	; 0x2f16 <boingboing+0x426>
    2f06:	ff ef       	ldi	r31, 0xFF	; 255
    2f08:	af 16       	cp	r10, r31
    2f0a:	ff ef       	ldi	r31, 0xFF	; 255
    2f0c:	bf 06       	cpc	r11, r31
    2f0e:	19 f4       	brne	.+6      	; 0x2f16 <boingboing+0x426>
    2f10:	11 e0       	ldi	r17, 0x01	; 1
    2f12:	a1 2e       	mov	r10, r17
    2f14:	b1 2c       	mov	r11, r1
            dz = 1;
	
        if (x == 7 && dx == 1)
    2f16:	87 e0       	ldi	r24, 0x07	; 7
    2f18:	48 16       	cp	r4, r24
    2f1a:	51 04       	cpc	r5, r1
    2f1c:	39 f4       	brne	.+14     	; 0x2f2c <boingboing+0x43c>
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	e9 16       	cp	r14, r25
    2f22:	f1 04       	cpc	r15, r1
    2f24:	19 f4       	brne	.+6      	; 0x2f2c <boingboing+0x43c>
    2f26:	ee 24       	eor	r14, r14
    2f28:	ea 94       	dec	r14
    2f2a:	fe 2c       	mov	r15, r14
            dx = -1;
	
        if (y == 7 && dy == 1)
    2f2c:	e7 e0       	ldi	r30, 0x07	; 7
    2f2e:	6e 16       	cp	r6, r30
    2f30:	71 04       	cpc	r7, r1
    2f32:	39 f4       	brne	.+14     	; 0x2f42 <boingboing+0x452>
    2f34:	f1 e0       	ldi	r31, 0x01	; 1
    2f36:	8f 16       	cp	r8, r31
    2f38:	91 04       	cpc	r9, r1
    2f3a:	19 f4       	brne	.+6      	; 0x2f42 <boingboing+0x452>
    2f3c:	88 24       	eor	r8, r8
    2f3e:	8a 94       	dec	r8
    2f40:	98 2c       	mov	r9, r8
            dy = -1;
	
        if (z == 7 && dz == 1)
    2f42:	87 e0       	ldi	r24, 0x07	; 7
    2f44:	c8 16       	cp	r12, r24
    2f46:	d1 04       	cpc	r13, r1
    2f48:	39 f4       	brne	.+14     	; 0x2f58 <boingboing+0x468>
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	a9 16       	cp	r10, r25
    2f4e:	b1 04       	cpc	r11, r1
    2f50:	19 f4       	brne	.+6      	; 0x2f58 <boingboing+0x468>
    2f52:	aa 24       	eor	r10, r10
    2f54:	aa 94       	dec	r10
    2f56:	ba 2c       	mov	r11, r10
            dz = -1;
	
	
		// Finally, move the voxel.
		x = x + dx;
    2f58:	4e 0c       	add	r4, r14
    2f5a:	5f 1c       	adc	r5, r15
		y = y + dy;
    2f5c:	68 0c       	add	r6, r8
    2f5e:	79 1c       	adc	r7, r9
		z = z + dz;
    2f60:	ca 0c       	add	r12, r10
    2f62:	db 1c       	adc	r13, r11
		
		if (drawmode == 0x01) // show one voxel at time
    2f64:	e1 e0       	ldi	r30, 0x01	; 1
    2f66:	2e 16       	cp	r2, r30
    2f68:	79 f4       	brne	.+30     	; 0x2f88 <boingboing+0x498>
		{
			setvoxel(x,y,z);
    2f6a:	c2 01       	movw	r24, r4
    2f6c:	b3 01       	movw	r22, r6
    2f6e:	a6 01       	movw	r20, r12
    2f70:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
			delay_ms(delay);
    2f74:	8b a9       	ldd	r24, Y+51	; 0x33
    2f76:	9c a9       	ldd	r25, Y+52	; 0x34
    2f78:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			clrvoxel(x,y,z);	
    2f7c:	c2 01       	movw	r24, r4
    2f7e:	b3 01       	movw	r22, r6
    2f80:	a6 01       	movw	r20, r12
    2f82:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
    2f86:	55 c0       	rjmp	.+170    	; 0x3032 <boingboing+0x542>
		} else if (drawmode == 0x02) // flip the voxel in question
    2f88:	f2 e0       	ldi	r31, 0x02	; 2
    2f8a:	2f 16       	cp	r2, r31
    2f8c:	51 f4       	brne	.+20     	; 0x2fa2 <boingboing+0x4b2>
		{
			flpvoxel(x,y,z);
    2f8e:	c2 01       	movw	r24, r4
    2f90:	b3 01       	movw	r22, r6
    2f92:	a6 01       	movw	r20, r12
    2f94:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <flpvoxel>
			delay_ms(delay);
    2f98:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f9c:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    2fa0:	48 c0       	rjmp	.+144    	; 0x3032 <boingboing+0x542>
		} if (drawmode == 0x03) // draw a snake
    2fa2:	83 e0       	ldi	r24, 0x03	; 3
    2fa4:	28 16       	cp	r2, r24
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <boingboing+0x4ba>
    2fa8:	44 c0       	rjmp	.+136    	; 0x3032 <boingboing+0x542>
    2faa:	fe 01       	movw	r30, r28
    2fac:	b5 96       	adiw	r30, 0x25	; 37
		{
			for (i=7;i>=0;i--)
			{
				snake[i][0] = snake[i-1][0];
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	97 83       	std	Z+7, r25	; 0x07
    2fb4:	86 83       	std	Z+6, r24	; 0x06
				snake[i][1] = snake[i-1][1];
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	91 87       	std	Z+9, r25	; 0x09
    2fbc:	80 87       	std	Z+8, r24	; 0x08
				snake[i][2] = snake[i-1][2];
    2fbe:	84 81       	ldd	r24, Z+4	; 0x04
    2fc0:	95 81       	ldd	r25, Z+5	; 0x05
    2fc2:	93 87       	std	Z+11, r25	; 0x0b
    2fc4:	82 87       	std	Z+10, r24	; 0x0a
    2fc6:	36 97       	sbiw	r30, 0x06	; 6
		{
			flpvoxel(x,y,z);
			delay_ms(delay);
		} if (drawmode == 0x03) // draw a snake
		{
			for (i=7;i>=0;i--)
    2fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    2fca:	98 ad       	ldd	r25, Y+56	; 0x38
    2fcc:	e8 17       	cp	r30, r24
    2fce:	f9 07       	cpc	r31, r25
    2fd0:	71 f7       	brne	.-36     	; 0x2fae <boingboing+0x4be>
			{
				snake[i][0] = snake[i-1][0];
				snake[i][1] = snake[i-1][1];
				snake[i][2] = snake[i-1][2];
			}
			snake[0][0] = x;
    2fd2:	5a 82       	std	Y+2, r5	; 0x02
    2fd4:	49 82       	std	Y+1, r4	; 0x01
			snake[0][1] = y;
    2fd6:	7c 82       	std	Y+4, r7	; 0x04
    2fd8:	6b 82       	std	Y+3, r6	; 0x03
			snake[0][2] = z;
    2fda:	de 82       	std	Y+6, r13	; 0x06
    2fdc:	cd 82       	std	Y+5, r12	; 0x05
    2fde:	8e 01       	movw	r16, r28
    2fe0:	0f 5f       	subi	r16, 0xFF	; 255
    2fe2:	1f 4f       	sbci	r17, 0xFF	; 255
				
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	62 81       	ldd	r22, Z+2	; 0x02
    2fe8:	73 81       	ldd	r23, Z+3	; 0x03
    2fea:	44 81       	ldd	r20, Z+4	; 0x04
    2fec:	55 81       	ldd	r21, Z+5	; 0x05
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
    2ff6:	0a 5f       	subi	r16, 0xFA	; 250
    2ff8:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			snake[0][0] = x;
			snake[0][1] = y;
			snake[0][2] = z;
				
			for (i=0;i<8;i++)
    2ffa:	8d a9       	ldd	r24, Y+53	; 0x35
    2ffc:	9e a9       	ldd	r25, Y+54	; 0x36
    2ffe:	08 17       	cp	r16, r24
    3000:	19 07       	cpc	r17, r25
    3002:	81 f7       	brne	.-32     	; 0x2fe4 <boingboing+0x4f4>
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
    3004:	8b a9       	ldd	r24, Y+51	; 0x33
    3006:	9c a9       	ldd	r25, Y+52	; 0x34
    3008:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    300c:	8e 01       	movw	r16, r28
    300e:	0f 5f       	subi	r16, 0xFF	; 255
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
    3012:	f8 01       	movw	r30, r16
    3014:	62 81       	ldd	r22, Z+2	; 0x02
    3016:	73 81       	ldd	r23, Z+3	; 0x03
    3018:	44 81       	ldd	r20, Z+4	; 0x04
    301a:	55 81       	ldd	r21, Z+5	; 0x05
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <clrvoxel>
    3024:	0a 5f       	subi	r16, 0xFA	; 250
    3026:	1f 4f       	sbci	r17, 0xFF	; 255
			for (i=0;i<8;i++)
			{
				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
			delay_ms(delay);
			for (i=0;i<8;i++)
    3028:	8d a9       	ldd	r24, Y+53	; 0x35
    302a:	9e a9       	ldd	r25, Y+54	; 0x36
    302c:	08 17       	cp	r16, r24
    302e:	19 07       	cpc	r17, r25
    3030:	81 f7       	brne	.-32     	; 0x3012 <boingboing+0x522>
				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
			}
		}
		
	
		iterations--;
    3032:	e9 a9       	ldd	r30, Y+49	; 0x31
    3034:	fa a9       	ldd	r31, Y+50	; 0x32
    3036:	31 97       	sbiw	r30, 0x01	; 1
    3038:	fa ab       	std	Y+50, r31	; 0x32
    303a:	e9 ab       	std	Y+49, r30	; 0x31
	
	dx = 1;
	dy = 1;
	dz = 1;
	
	while(iterations)
    303c:	89 a9       	ldd	r24, Y+49	; 0x31
    303e:	9a a9       	ldd	r25, Y+50	; 0x32
    3040:	89 2b       	or	r24, r25
    3042:	09 f0       	breq	.+2      	; 0x3046 <boingboing+0x556>
    3044:	b0 cd       	rjmp	.-1184   	; 0x2ba6 <boingboing+0xb6>
    3046:	04 c0       	rjmp	.+8      	; 0x3050 <boingboing+0x560>
		}
		
	
		iterations--;
	}
}
    3048:	ee 24       	eor	r14, r14
    304a:	ea 94       	dec	r14
    304c:	fe 2c       	mov	r15, r14
    304e:	4d cf       	rjmp	.-358    	; 0x2eea <boingboing+0x3fa>
    3050:	e8 96       	adiw	r28, 0x38	; 56
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	df 90       	pop	r13
    306a:	cf 90       	pop	r12
    306c:	bf 90       	pop	r11
    306e:	af 90       	pop	r10
    3070:	9f 90       	pop	r9
    3072:	8f 90       	pop	r8
    3074:	7f 90       	pop	r7
    3076:	6f 90       	pop	r6
    3078:	5f 90       	pop	r5
    307a:	4f 90       	pop	r4
    307c:	3f 90       	pop	r3
    307e:	2f 90       	pop	r2
    3080:	08 95       	ret

00003082 <sendplane_rand_z>:

// Send all the voxels from one side of the cube to the other
// Start at z and send to the opposite side.
// Sends in random order.
void sendplane_rand_z (unsigned char z, int delay, int wait)
{
    3082:	cf 92       	push	r12
    3084:	df 92       	push	r13
    3086:	ef 92       	push	r14
    3088:	ff 92       	push	r15
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	f8 2e       	mov	r15, r24
    3094:	6b 01       	movw	r12, r22
    3096:	ea 01       	movw	r28, r20
	unsigned char loop = 16;
	unsigned char x, y;

	fill(0x00);
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	0e 94 57 05 	call	0xaae	; 0xaae <fill>

	setplane_z(z);
    309e:	8f 2d       	mov	r24, r15
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	0e 94 32 04 	call	0x864	; 0x864 <setplane_z>
    30a6:	10 e1       	ldi	r17, 0x10	; 16
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
	{
		x = rand()%4;
    30a8:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    30ac:	64 e0       	ldi	r22, 0x04	; 4
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    30b4:	e8 2e       	mov	r14, r24
		y = rand()%4;
    30b6:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    30ba:	64 e0       	ldi	r22, 0x04	; 4
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    30c2:	08 2f       	mov	r16, r24
		if (getvoxel(x,y,z))
    30c4:	8e 2d       	mov	r24, r14
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	60 2f       	mov	r22, r16
    30ca:	70 e0       	ldi	r23, 0x00	; 0
    30cc:	4f 2d       	mov	r20, r15
    30ce:	50 e0       	ldi	r21, 0x00	; 0
    30d0:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    30d4:	88 23       	and	r24, r24
    30d6:	41 f3       	breq	.-48     	; 0x30a8 <sendplane_rand_z+0x26>
		{
			// Send the voxel flying
			sendvoxel_z(x,y,z,delay);
    30d8:	8e 2d       	mov	r24, r14
    30da:	60 2f       	mov	r22, r16
    30dc:	4f 2d       	mov	r20, r15
    30de:	96 01       	movw	r18, r12
    30e0:	0e 94 43 0a 	call	0x1486	; 0x1486 <sendvoxel_z>
			delay_ms(wait);
    30e4:	ce 01       	movw	r24, r28
    30e6:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
    30ea:	11 50       	subi	r17, 0x01	; 1
	fill(0x00);

	setplane_z(z);
	
	// Send voxels at random untill all 16 have crossed the cube.
	while(loop)
    30ec:	e9 f6       	brne	.-70     	; 0x30a8 <sendplane_rand_z+0x26>
			sendvoxel_z(x,y,z,delay);
			delay_ms(wait);
			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
		}
	}
}
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	ff 90       	pop	r15
    30f8:	ef 90       	pop	r14
    30fa:	df 90       	pop	r13
    30fc:	cf 90       	pop	r12
    30fe:	08 95       	ret

00003100 <effect_box_woopwoop>:
    }
}

// Creates a wireframe box that shrinks or grows out from the center of the cube.
void effect_box_woopwoop (int delay, int grow)
{
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	5c 01       	movw	r10, r24
    311a:	6b 01       	movw	r12, r22
	int i,ii;
	
	fill(0x00);
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    3122:	c0 e0       	ldi	r28, 0x00	; 0
    3124:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<4;i++)
	{
        ii = i;
        if (grow > 0)
    3126:	03 e0       	ldi	r16, 0x03	; 3
    3128:	80 2e       	mov	r8, r16
    312a:	91 2c       	mov	r9, r1
    312c:	1c 14       	cp	r1, r12
    312e:	1d 04       	cpc	r1, r13
    3130:	14 f0       	brlt	.+4      	; 0x3136 <effect_box_woopwoop+0x36>
    3132:	ce 01       	movw	r24, r28
    3134:	03 c0       	rjmp	.+6      	; 0x313c <effect_box_woopwoop+0x3c>
    3136:	c4 01       	movw	r24, r8
    3138:	8c 1b       	sub	r24, r28
    313a:	9d 0b       	sbc	r25, r29
            ii = 3-i;

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
    313c:	ac 01       	movw	r20, r24
    313e:	4c 5f       	subi	r20, 0xFC	; 252
    3140:	5f 4f       	sbci	r21, 0xFF	; 255
    3142:	74 01       	movw	r14, r8
    3144:	e8 1a       	sub	r14, r24
    3146:	f9 0a       	sbc	r15, r25
    3148:	ca 01       	movw	r24, r20
    314a:	ba 01       	movw	r22, r20
    314c:	97 01       	movw	r18, r14
    314e:	87 01       	movw	r16, r14
    3150:	0e 94 50 06 	call	0xca0	; 0xca0 <box_wireframe>
		delay_ms(delay);
    3154:	c5 01       	movw	r24, r10
    3156:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		fill(0x00);
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
void effect_box_woopwoop (int delay, int grow)
{
	int i,ii;
	
	fill(0x00);
	for (i=0;i<4;i++)
    3160:	21 96       	adiw	r28, 0x01	; 1
    3162:	c4 30       	cpi	r28, 0x04	; 4
    3164:	d1 05       	cpc	r29, r1
    3166:	11 f7       	brne	.-60     	; 0x312c <effect_box_woopwoop+0x2c>

		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
		delay_ms(delay);
		fill(0x00);
	}
}
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	08 95       	ret

00003182 <effect_box_shrink_grow>:
	}

}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
    3182:	2f 92       	push	r2
    3184:	3f 92       	push	r3
    3186:	4f 92       	push	r4
    3188:	5f 92       	push	r5
    318a:	6f 92       	push	r6
    318c:	7f 92       	push	r7
    318e:	8f 92       	push	r8
    3190:	9f 92       	push	r9
    3192:	af 92       	push	r10
    3194:	bf 92       	push	r11
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <effect_box_shrink_grow+0x26>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	4b 01       	movw	r8, r22
    31b2:	1a 01       	movw	r2, r20
    31b4:	29 01       	movw	r4, r18
    31b6:	aa 24       	eor	r10, r10
    31b8:	bb 24       	eor	r11, r11
                mirror_z();

            if (rot == 1 || rot == 3)
                mirror_y();

            if (rot == 2 || rot == 3)
    31ba:	2e ef       	ldi	r18, 0xFE	; 254
    31bc:	62 2e       	mov	r6, r18
    31be:	2f ef       	ldi	r18, 0xFF	; 255
    31c0:	72 2e       	mov	r7, r18
    31c2:	66 0e       	add	r6, r22
    31c4:	77 1e       	adc	r7, r23
    31c6:	4b c0       	rjmp	.+150    	; 0x325e <effect_box_shrink_grow+0xdc>
}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
    31c8:	cc 24       	eor	r12, r12
    31ca:	dd 24       	eor	r13, r13
	{
		for (i=0;i<16;i++)
		{
            xyz = 7-i; // This reverses counter i between 0 and 7.
            if (i > 7) 
    31cc:	88 e0       	ldi	r24, 0x08	; 8
    31ce:	c8 16       	cp	r12, r24
    31d0:	d1 04       	cpc	r13, r1
    31d2:	34 f4       	brge	.+12     	; 0x31e0 <effect_box_shrink_grow+0x5e>
    31d4:	97 e0       	ldi	r25, 0x07	; 7
    31d6:	e9 2e       	mov	r14, r25
    31d8:	f1 2c       	mov	r15, r1
    31da:	ec 18       	sub	r14, r12
    31dc:	fd 08       	sbc	r15, r13
    31de:	06 c0       	rjmp	.+12     	; 0x31ec <effect_box_shrink_grow+0x6a>
    31e0:	88 ef       	ldi	r24, 0xF8	; 248
    31e2:	e8 2e       	mov	r14, r24
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
    31e6:	f8 2e       	mov	r15, r24
    31e8:	ec 0c       	add	r14, r12
    31ea:	fd 1c       	adc	r15, r13
                xyz = i-8; // at i > 7, i 8-15 becomes xyz 0-7.
            
            fill(0x00); delay_ms(1);
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
            cli(); // disable interrupts while the cube is being rotated
    31fa:	f8 94       	cli
			box_wireframe(0,0,0,xyz,xyz,xyz);
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	97 01       	movw	r18, r14
    320a:	87 01       	movw	r16, r14
    320c:	0e 94 50 06 	call	0xca0	; 0xca0 <box_wireframe>

            if (flip > 0) // upside-down
    3210:	12 14       	cp	r1, r2
    3212:	13 04       	cpc	r1, r3
    3214:	14 f4       	brge	.+4      	; 0x321a <effect_box_shrink_grow+0x98>
                mirror_z();
    3216:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <mirror_z>

            if (rot == 1 || rot == 3)
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	89 16       	cp	r8, r25
    321e:	91 04       	cpc	r9, r1
    3220:	21 f0       	breq	.+8      	; 0x322a <effect_box_shrink_grow+0xa8>
    3222:	e3 e0       	ldi	r30, 0x03	; 3
    3224:	8e 16       	cp	r8, r30
    3226:	91 04       	cpc	r9, r1
    3228:	11 f4       	brne	.+4      	; 0x322e <effect_box_shrink_grow+0xac>
                mirror_y();
    322a:	0e 94 82 09 	call	0x1304	; 0x1304 <mirror_y>

            if (rot == 2 || rot == 3)
    322e:	f2 e0       	ldi	r31, 0x02	; 2
    3230:	6f 16       	cp	r6, r31
    3232:	71 04       	cpc	r7, r1
    3234:	10 f4       	brcc	.+4      	; 0x323a <effect_box_shrink_grow+0xb8>
                mirror_x();
    3236:	0e 94 23 09 	call	0x1246	; 0x1246 <mirror_x>
            
            sei(); // enable interrupts
    323a:	78 94       	sei
			delay_ms(delay);
    323c:	c2 01       	movw	r24, r4
    323e:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
	        fill(0x00);
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
	{
		for (i=0;i<16;i++)
    3248:	08 94       	sec
    324a:	c1 1c       	adc	r12, r1
    324c:	d1 1c       	adc	r13, r1
    324e:	80 e1       	ldi	r24, 0x10	; 16
    3250:	c8 16       	cp	r12, r24
    3252:	d1 04       	cpc	r13, r1
    3254:	09 f0       	breq	.+2      	; 0x3258 <effect_box_shrink_grow+0xd6>
    3256:	ba cf       	rjmp	.-140    	; 0x31cc <effect_box_shrink_grow+0x4a>
}

void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
{
	int x, i, xyz;
	for (x=0;x<iterations;x++)
    3258:	08 94       	sec
    325a:	a1 1c       	adc	r10, r1
    325c:	b1 1c       	adc	r11, r1
    325e:	e9 81       	ldd	r30, Y+1	; 0x01
    3260:	fa 81       	ldd	r31, Y+2	; 0x02
    3262:	ae 16       	cp	r10, r30
    3264:	bf 06       	cpc	r11, r31
    3266:	0c f4       	brge	.+2      	; 0x326a <effect_box_shrink_grow+0xe8>
    3268:	af cf       	rjmp	.-162    	; 0x31c8 <effect_box_shrink_grow+0x46>
            sei(); // enable interrupts
			delay_ms(delay);
	        fill(0x00);
        }
    }
}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	df 90       	pop	r13
    327c:	cf 90       	pop	r12
    327e:	bf 90       	pop	r11
    3280:	af 90       	pop	r10
    3282:	9f 90       	pop	r9
    3284:	8f 90       	pop	r8
    3286:	7f 90       	pop	r7
    3288:	6f 90       	pop	r6
    328a:	5f 90       	pop	r5
    328c:	4f 90       	pop	r4
    328e:	3f 90       	pop	r3
    3290:	2f 90       	pop	r2
    3292:	08 95       	ret

00003294 <effect_planboing>:
	
}

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	e8 2e       	mov	r14, r24
    329e:	f6 2e       	mov	r15, r22
    32a0:	07 2f       	mov	r16, r23
    32a2:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	for (i=0;i<8;i++)
	{
		fill(0x00);
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
        setplane(plane, i);
    32aa:	8e 2d       	mov	r24, r14
    32ac:	61 2f       	mov	r22, r17
    32ae:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <setplane>
		delay_ms(speed);
    32b2:	8f 2d       	mov	r24, r15
    32b4:	90 2f       	mov	r25, r16
    32b6:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    32ba:	1f 5f       	subi	r17, 0xFF	; 255

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
	int i;
	for (i=0;i<8;i++)
    32bc:	18 30       	cpi	r17, 0x08	; 8
    32be:	91 f7       	brne	.-28     	; 0x32a4 <effect_planboing+0x10>
    32c0:	17 e0       	ldi	r17, 0x07	; 7
		delay_ms(speed);
	}
	
	for (i=7;i>=0;i--)
	{
		fill(0x00);
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
        setplane(plane,i);
    32c8:	8e 2d       	mov	r24, r14
    32ca:	61 2f       	mov	r22, r17
    32cc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <setplane>
		delay_ms(speed);
    32d0:	8f 2d       	mov	r24, r15
    32d2:	90 2f       	mov	r25, r16
    32d4:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    32d8:	11 50       	subi	r17, 0x01	; 1
    32da:	98 f7       	brcc	.-26     	; 0x32c2 <effect_planboing+0x2e>
	}
}
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	08 95       	ret

000032e6 <effect_test>:

#include <math.h>
#include <avr/interrupt.h>

void effect_test (void)
{
    32e6:	af 92       	push	r10
    32e8:	bf 92       	push	r11
    32ea:	cf 92       	push	r12
    32ec:	df 92       	push	r13
    32ee:	ef 92       	push	r14
    32f0:	ff 92       	push	r15
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	c0 e0       	ldi	r28, 0x00	; 0
    32fc:	d0 e0       	ldi	r29, 0x00	; 0

	int x,y,i;

	for (i=0;i<1000;i++)
	{
		x = sin(i/8)*2+3.5;
    32fe:	be 01       	movw	r22, r28
    3300:	33 e0       	ldi	r19, 0x03	; 3
    3302:	75 95       	asr	r23
    3304:	67 95       	ror	r22
    3306:	3a 95       	dec	r19
    3308:	e1 f7       	brne	.-8      	; 0x3302 <effect_test+0x1c>
    330a:	88 27       	eor	r24, r24
    330c:	77 fd       	sbrc	r23, 7
    330e:	80 95       	com	r24
    3310:	98 2f       	mov	r25, r24
    3312:	0e 94 be 21 	call	0x437c	; 0x437c <__floatsisf>
    3316:	7b 01       	movw	r14, r22
    3318:	8c 01       	movw	r16, r24
    331a:	0e 94 e6 22 	call	0x45cc	; 0x45cc <sin>
    331e:	9b 01       	movw	r18, r22
    3320:	ac 01       	movw	r20, r24
    3322:	0e 94 bc 20 	call	0x4178	; 0x4178 <__addsf3>
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e6       	ldi	r20, 0x60	; 96
    332c:	50 e4       	ldi	r21, 0x40	; 64
    332e:	0e 94 bc 20 	call	0x4178	; 0x4178 <__addsf3>
    3332:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fixsfsi>
    3336:	5b 01       	movw	r10, r22
    3338:	6c 01       	movw	r12, r24
		y = cos(i/8)*2+3.5;
    333a:	c8 01       	movw	r24, r16
    333c:	b7 01       	movw	r22, r14
    333e:	0e 94 20 21 	call	0x4240	; 0x4240 <cos>
    3342:	9b 01       	movw	r18, r22
    3344:	ac 01       	movw	r20, r24
    3346:	0e 94 bc 20 	call	0x4178	; 0x4178 <__addsf3>
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e6       	ldi	r20, 0x60	; 96
    3350:	50 e4       	ldi	r21, 0x40	; 64
    3352:	0e 94 bc 20 	call	0x4178	; 0x4178 <__addsf3>
    3356:	0e 94 8b 21 	call	0x4316	; 0x4316 <__fixsfsi>
    335a:	7b 01       	movw	r14, r22
    335c:	8c 01       	movw	r16, r24

		setvoxel(x,y,1);
    335e:	c5 01       	movw	r24, r10
    3360:	b7 01       	movw	r22, r14
    3362:	41 e0       	ldi	r20, 0x01	; 1
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		setvoxel(x,y,1);
    336a:	c5 01       	movw	r24, r10
    336c:	b7 01       	movw	r22, r14
    336e:	41 e0       	ldi	r20, 0x01	; 1
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
		delay_ms(1000);
    3376:	88 ee       	ldi	r24, 0xE8	; 232
    3378:	93 e0       	ldi	r25, 0x03	; 3
    337a:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
		fill(0x00);
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	0e 94 57 05 	call	0xaae	; 0xaae <fill>
void effect_test (void)
{

	int x,y,i;

	for (i=0;i<1000;i++)
    3384:	21 96       	adiw	r28, 0x01	; 1
    3386:	83 e0       	ldi	r24, 0x03	; 3
    3388:	c8 3e       	cpi	r28, 0xE8	; 232
    338a:	d8 07       	cpc	r29, r24
    338c:	09 f0       	breq	.+2      	; 0x3390 <effect_test+0xaa>
    338e:	b7 cf       	rjmp	.-146    	; 0x32fe <effect_test+0x18>
		setvoxel(x,y,1);
		delay_ms(1000);
		fill(0x00);
	}

}
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	ff 90       	pop	r15
    339a:	ef 90       	pop	r14
    339c:	df 90       	pop	r13
    339e:	cf 90       	pop	r12
    33a0:	bf 90       	pop	r11
    33a2:	af 90       	pop	r10
    33a4:	08 95       	ret

000033a6 <font_getpath>:
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    33a6:	81 30       	cpi	r24, 0x01	; 1
    33a8:	19 f4       	brne	.+6      	; 0x33b0 <font_getpath+0xa>
    33aa:	8c e1       	ldi	r24, 0x1C	; 28
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <font_getpath+0xe>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	dc 01       	movw	r26, r24
    33b6:	a8 55       	subi	r26, 0x58	; 88
    33b8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	09 c0       	rjmp	.+18     	; 0x33d2 <font_getpath+0x2c>
		offset=28;
	
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
    33c0:	fd 01       	movw	r30, r26
    33c2:	84 91       	lpm	r24, Z+
    33c4:	fb 01       	movw	r30, r22
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	80 83       	st	Z, r24
	int offset = 0;
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
    33cc:	2f 5f       	subi	r18, 0xFF	; 255
    33ce:	3f 4f       	sbci	r19, 0xFF	; 255
    33d0:	11 96       	adiw	r26, 0x01	; 1
    33d2:	24 17       	cp	r18, r20
    33d4:	35 07       	cpc	r19, r21
    33d6:	a4 f3       	brlt	.-24     	; 0x33c0 <font_getpath+0x1a>
		destination[i] = pgm_read_byte(&paths[i+offset]);
}
    33d8:	08 95       	ret

000033da <font_getbitmappixel>:
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    33da:	1f 93       	push	r17
    33dc:	14 2f       	mov	r17, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	23 e0       	ldi	r18, 0x03	; 3
    33e2:	88 0f       	add	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	2a 95       	dec	r18
    33e8:	e1 f7       	brne	.-8      	; 0x33e2 <font_getbitmappixel+0x8>
    33ea:	86 0f       	add	r24, r22
    33ec:	91 1d       	adc	r25, r1
    33ee:	87 53       	subi	r24, 0x37	; 55
    33f0:	9e 4f       	sbci	r25, 0xFE	; 254
    33f2:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__eerd_byte_m32>
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <font_getbitmappixel+0x24>
    33fa:	95 95       	asr	r25
    33fc:	87 95       	ror	r24
    33fe:	1a 95       	dec	r17
    3400:	e2 f7       	brpl	.-8      	; 0x33fa <font_getbitmappixel+0x20>
	return (tmp >> y) & 0x01;
}
    3402:	81 70       	andi	r24, 0x01	; 1
    3404:	1f 91       	pop	r17
    3406:	08 95       	ret

00003408 <font_getbitmap>:
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}

void font_getbitmap (char bitmap, unsigned char dst[8])
{
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	7b 01       	movw	r14, r22
    3416:	c8 2f       	mov	r28, r24
    3418:	d0 e0       	ldi	r29, 0x00	; 0
    341a:	33 e0       	ldi	r19, 0x03	; 3
    341c:	cc 0f       	add	r28, r28
    341e:	dd 1f       	adc	r29, r29
    3420:	3a 95       	dec	r19
    3422:	e1 f7       	brne	.-8      	; 0x341c <font_getbitmap+0x14>
    3424:	c7 53       	subi	r28, 0x37	; 55
    3426:	de 4f       	sbci	r29, 0xFE	; 254
    3428:	00 e0       	ldi	r16, 0x00	; 0
    342a:	10 e0       	ldi	r17, 0x00	; 0
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    342c:	ce 01       	movw	r24, r28
    342e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__eerd_byte_m32>
    3432:	f7 01       	movw	r30, r14
    3434:	e0 0f       	add	r30, r16
    3436:	f1 1f       	adc	r31, r17
    3438:	80 83       	st	Z, r24

void font_getbitmap (char bitmap, unsigned char dst[8])
{
	int i;
	
    for (i = 0; i < 8; i++)
    343a:	0f 5f       	subi	r16, 0xFF	; 255
    343c:	1f 4f       	sbci	r17, 0xFF	; 255
    343e:	21 96       	adiw	r28, 0x01	; 1
    3440:	08 30       	cpi	r16, 0x08	; 8
    3442:	11 05       	cpc	r17, r1
    3444:	99 f7       	brne	.-26     	; 0x342c <font_getbitmap+0x24>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	08 95       	ret

00003454 <font_getchar>:
	for (i = 0; i < length; i++)
		destination[i] = pgm_read_byte(&paths[i+offset]);
}

void font_getchar (char chr, unsigned char dst[5])
{
    3454:	ef 92       	push	r14
    3456:	ff 92       	push	r15
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	7b 01       	movw	r14, r22
    3462:	80 52       	subi	r24, 0x20	; 32
    3464:	95 e0       	ldi	r25, 0x05	; 5
    3466:	89 9f       	mul	r24, r25
    3468:	80 01       	movw	r16, r0
    346a:	11 24       	eor	r1, r1
    346c:	0e 5f       	subi	r16, 0xFE	; 254
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	c0 e0       	ldi	r28, 0x00	; 0
    3472:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    3474:	c8 01       	movw	r24, r16
    3476:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__eerd_byte_m32>
    347a:	f7 01       	movw	r30, r14
    347c:	ec 0f       	add	r30, r28
    347e:	fd 1f       	adc	r31, r29
    3480:	80 83       	st	Z, r24
    3482:	21 96       	adiw	r28, 0x01	; 1
    3484:	0f 5f       	subi	r16, 0xFF	; 255
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
void font_getchar (char chr, unsigned char dst[5])
{
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    3488:	c5 30       	cpi	r28, 0x05	; 5
    348a:	d1 05       	cpc	r29, r1
    348c:	99 f7       	brne	.-26     	; 0x3474 <font_getchar+0x20>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	08 95       	ret

0000349c <gol_count_changes>:
	}
	return neigh;
}

int gol_count_changes (void)
{
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	18 c0       	rjmp	.+48     	; 0x34da <gol_count_changes+0x3e>
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    34aa:	fe 01       	movw	r30, r28
    34ac:	e2 0f       	add	r30, r18
    34ae:	f3 1f       	adc	r31, r19
    34b0:	df 01       	movw	r26, r30
    34b2:	a6 56       	subi	r26, 0x66	; 102
    34b4:	bf 4f       	sbci	r27, 0xFF	; 255
    34b6:	9c 91       	ld	r25, X
    34b8:	e6 52       	subi	r30, 0x26	; 38
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	98 17       	cp	r25, r24
    34c0:	11 f0       	breq	.+4      	; 0x34c6 <gol_count_changes+0x2a>
				i++;
    34c2:	6f 5f       	subi	r22, 0xFF	; 255
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    34c6:	2f 5f       	subi	r18, 0xFF	; 255
    34c8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ca:	28 30       	cpi	r18, 0x08	; 8
    34cc:	31 05       	cpc	r19, r1
    34ce:	69 f7       	brne	.-38     	; 0x34aa <gol_count_changes+0xe>
int gol_count_changes (void)
{
	int x,y;
	int i = 0;
	
	for (x = 0; x < GOL_X; x++)
    34d0:	4f 5f       	subi	r20, 0xFF	; 255
    34d2:	5f 4f       	sbci	r21, 0xFF	; 255
    34d4:	48 30       	cpi	r20, 0x08	; 8
    34d6:	51 05       	cpc	r21, r1
    34d8:	49 f0       	breq	.+18     	; 0x34ec <gol_count_changes+0x50>
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y = 0; y < GOL_Y; y++)
		{
			if (fb[x][y] != cube[x][y])
    34de:	ea 01       	movw	r28, r20
    34e0:	83 e0       	ldi	r24, 0x03	; 3
    34e2:	cc 0f       	add	r28, r28
    34e4:	dd 1f       	adc	r29, r29
    34e6:	8a 95       	dec	r24
    34e8:	e1 f7       	brne	.-8      	; 0x34e2 <gol_count_changes+0x46>
    34ea:	df cf       	rjmp	.-66     	; 0x34aa <gol_count_changes+0xe>
				i++;
		}
	}
	
	return i;
}
    34ec:	cb 01       	movw	r24, r22
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	08 95       	ret

000034f4 <gol_count_neighbors>:
		}
	}
}

unsigned char gol_count_neighbors (int x, int y, int z)
{
    34f4:	3f 92       	push	r3
    34f6:	4f 92       	push	r4
    34f8:	5f 92       	push	r5
    34fa:	6f 92       	push	r6
    34fc:	7f 92       	push	r7
    34fe:	8f 92       	push	r8
    3500:	9f 92       	push	r9
    3502:	af 92       	push	r10
    3504:	bf 92       	push	r11
    3506:	cf 92       	push	r12
    3508:	df 92       	push	r13
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	3c 01       	movw	r6, r24
    3518:	4b 01       	movw	r8, r22
    351a:	5a 01       	movw	r10, r20
    351c:	dd 24       	eor	r13, r13
    351e:	ee 24       	eor	r14, r14
    3520:	ea 94       	dec	r14
    3522:	fe 2c       	mov	r15, r14
    3524:	34 c0       	rjmp	.+104    	; 0x358e <gol_count_neighbors+0x9a>
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
			{
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
    3526:	e1 14       	cp	r14, r1
    3528:	f1 04       	cpc	r15, r1
    352a:	29 f4       	brne	.+10     	; 0x3536 <gol_count_neighbors+0x42>
    352c:	01 15       	cp	r16, r1
    352e:	11 05       	cpc	r17, r1
    3530:	11 f4       	brne	.+4      	; 0x3536 <gol_count_neighbors+0x42>
    3532:	20 97       	sbiw	r28, 0x00	; 0
    3534:	81 f0       	breq	.+32     	; 0x3556 <gol_count_neighbors+0x62>
						nx = x+ix;
						ny = y+iy;
						nz = z+iz;
					}
					
					if ( getvoxel(nx, ny, nz) )
    3536:	ce 01       	movw	r24, r28
    3538:	8a 0d       	add	r24, r10
    353a:	9b 1d       	adc	r25, r11
    353c:	68 e0       	ldi	r22, 0x08	; 8
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    3544:	ac 01       	movw	r20, r24
    3546:	83 2d       	mov	r24, r3
    3548:	94 2d       	mov	r25, r4
    354a:	65 2d       	mov	r22, r5
    354c:	7c 2d       	mov	r23, r12
    354e:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    3552:	81 11       	cpse	r24, r1
						neigh++;
    3554:	d3 94       	inc	r13
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
		{
			for (iz = -1; iz < 2; iz++)
    3556:	21 96       	adiw	r28, 0x01	; 1
    3558:	c2 30       	cpi	r28, 0x02	; 2
    355a:	d1 05       	cpc	r29, r1
    355c:	21 f7       	brne	.-56     	; 0x3526 <gol_count_neighbors+0x32>
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
	{
		for (iy = -1; iy < 2; iy++)
    355e:	0f 5f       	subi	r16, 0xFF	; 255
    3560:	1f 4f       	sbci	r17, 0xFF	; 255
    3562:	02 30       	cpi	r16, 0x02	; 2
    3564:	11 05       	cpc	r17, r1
    3566:	61 f0       	breq	.+24     	; 0x3580 <gol_count_neighbors+0x8c>
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
						ny = (y+iy)%GOL_Y;
    3568:	c8 01       	movw	r24, r16
    356a:	88 0d       	add	r24, r8
    356c:	99 1d       	adc	r25, r9
    356e:	68 e0       	ldi	r22, 0x08	; 8
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    3576:	58 2e       	mov	r5, r24
    3578:	c9 2e       	mov	r12, r25
    357a:	cf ef       	ldi	r28, 0xFF	; 255
    357c:	df ef       	ldi	r29, 0xFF	; 255
    357e:	d3 cf       	rjmp	.-90     	; 0x3526 <gol_count_neighbors+0x32>
	int ix, iy, iz; // offset 1 in each direction in each dimension
	int nx, ny, nz; // neighbours address.
	
	unsigned char neigh = 0; // number of alive neighbours.
	
	for (ix = -1; ix < 2; ix++)
    3580:	08 94       	sec
    3582:	e1 1c       	adc	r14, r1
    3584:	f1 1c       	adc	r15, r1
    3586:	82 e0       	ldi	r24, 0x02	; 2
    3588:	e8 16       	cp	r14, r24
    358a:	f1 04       	cpc	r15, r1
    358c:	61 f0       	breq	.+24     	; 0x35a6 <gol_count_neighbors+0xb2>
				// Your not your own neighbour, exclude 0,0,0, offset.
				if ( !(ix == 0 && iy == 0 && iz == 0) )
				{
					if (GOL_WRAP == 0x01)
					{
						nx = (x+ix)%GOL_X;
    358e:	c7 01       	movw	r24, r14
    3590:	86 0d       	add	r24, r6
    3592:	97 1d       	adc	r25, r7
    3594:	68 e0       	ldi	r22, 0x08	; 8
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    359c:	38 2e       	mov	r3, r24
    359e:	49 2e       	mov	r4, r25
    35a0:	0f ef       	ldi	r16, 0xFF	; 255
    35a2:	1f ef       	ldi	r17, 0xFF	; 255
    35a4:	e1 cf       	rjmp	.-62     	; 0x3568 <gol_count_neighbors+0x74>
				}
			}
		}
	}
	return neigh;
}
    35a6:	8d 2d       	mov	r24, r13
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    35b8:	bf 90       	pop	r11
    35ba:	af 90       	pop	r10
    35bc:	9f 90       	pop	r9
    35be:	8f 90       	pop	r8
    35c0:	7f 90       	pop	r7
    35c2:	6f 90       	pop	r6
    35c4:	5f 90       	pop	r5
    35c6:	4f 90       	pop	r4
    35c8:	3f 90       	pop	r3
    35ca:	08 95       	ret

000035cc <gol_nextgen>:
		//led_red(1);
	}
}

void gol_nextgen (void)
{
    35cc:	df 92       	push	r13
    35ce:	ef 92       	push	r14
    35d0:	ff 92       	push	r15
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
	int x,y,z;
	unsigned char neigh;
	
	tmpfill(0x00);
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	0e 94 74 05 	call	0xae8	; 0xae8 <tmpfill>
    35e0:	ee 24       	eor	r14, r14
    35e2:	ff 24       	eor	r15, r15
    35e4:	33 c0       	rjmp	.+102    	; 0x364c <gol_nextgen+0x80>
	{
		for (y = 0; y < GOL_Y; y++)
		{
			for (z = 0; z < GOL_Z; z++)
			{
				neigh = gol_count_neighbors(x, y, z);
    35e6:	c7 01       	movw	r24, r14
    35e8:	b8 01       	movw	r22, r16
    35ea:	ae 01       	movw	r20, r28
    35ec:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <gol_count_neighbors>
    35f0:	d8 2e       	mov	r13, r24
				
				// Current voxel is alive.
				if (getvoxel(x,y,z) == 0x01)
    35f2:	c7 01       	movw	r24, r14
    35f4:	b8 01       	movw	r22, r16
    35f6:	ae 01       	movw	r20, r28
    35f8:	0e 94 ce 03 	call	0x79c	; 0x79c <getvoxel>
    35fc:	81 30       	cpi	r24, 0x01	; 1
    35fe:	59 f4       	brne	.+22     	; 0x3616 <gol_nextgen+0x4a>
				{
					if (neigh <= GOL_TERMINATE_LONELY)
    3600:	8d 15       	cp	r24, r13
    3602:	18 f4       	brcc	.+6      	; 0x360a <gol_nextgen+0x3e>
					{
						tmpclrvoxel(x,y,z);
					} else if(neigh >= GOL_TERMINATE_CROWDED)
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	8d 15       	cp	r24, r13
    3608:	48 f4       	brcc	.+18     	; 0x361c <gol_nextgen+0x50>
					{
						tmpclrvoxel(x,y,z);
    360a:	c7 01       	movw	r24, r14
    360c:	b8 01       	movw	r22, r16
    360e:	ae 01       	movw	r20, r28
    3610:	0e 94 34 03 	call	0x668	; 0x668 <tmpclrvoxel>
    3614:	08 c0       	rjmp	.+16     	; 0x3626 <gol_nextgen+0x5a>
						tmpsetvoxel(x,y,z);
					}
				// Current voxel is dead.
				} else
				{
					if (neigh >= GOL_CREATE_MIN && neigh <= GOL_CREATE_MAX)
    3616:	83 e0       	ldi	r24, 0x03	; 3
    3618:	d8 16       	cp	r13, r24
    361a:	29 f4       	brne	.+10     	; 0x3626 <gol_nextgen+0x5a>
						tmpsetvoxel(x,y,z);
    361c:	c7 01       	movw	r24, r14
    361e:	b8 01       	movw	r22, r16
    3620:	ae 01       	movw	r20, r28
    3622:	0e 94 82 03 	call	0x704	; 0x704 <tmpsetvoxel>
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
		{
			for (z = 0; z < GOL_Z; z++)
    3626:	21 96       	adiw	r28, 0x01	; 1
    3628:	c8 30       	cpi	r28, 0x08	; 8
    362a:	d1 05       	cpc	r29, r1
    362c:	e1 f6       	brne	.-72     	; 0x35e6 <gol_nextgen+0x1a>
	
	tmpfill(0x00);
	
	for (x = 0; x < GOL_X; x++)
	{
		for (y = 0; y < GOL_Y; y++)
    362e:	0f 5f       	subi	r16, 0xFF	; 255
    3630:	1f 4f       	sbci	r17, 0xFF	; 255
    3632:	08 30       	cpi	r16, 0x08	; 8
    3634:	11 05       	cpc	r17, r1
    3636:	19 f0       	breq	.+6      	; 0x363e <gol_nextgen+0x72>
    3638:	c0 e0       	ldi	r28, 0x00	; 0
    363a:	d0 e0       	ldi	r29, 0x00	; 0
    363c:	d4 cf       	rjmp	.-88     	; 0x35e6 <gol_nextgen+0x1a>
	int x,y,z;
	unsigned char neigh;
	
	tmpfill(0x00);
	
	for (x = 0; x < GOL_X; x++)
    363e:	08 94       	sec
    3640:	e1 1c       	adc	r14, r1
    3642:	f1 1c       	adc	r15, r1
    3644:	88 e0       	ldi	r24, 0x08	; 8
    3646:	e8 16       	cp	r14, r24
    3648:	f1 04       	cpc	r15, r1
    364a:	19 f0       	breq	.+6      	; 0x3652 <gol_nextgen+0x86>
    364c:	00 e0       	ldi	r16, 0x00	; 0
    364e:	10 e0       	ldi	r17, 0x00	; 0
    3650:	f3 cf       	rjmp	.-26     	; 0x3638 <gol_nextgen+0x6c>
						tmpsetvoxel(x,y,z);
				}
			}
		}
	}
}
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	1f 91       	pop	r17
    3658:	0f 91       	pop	r16
    365a:	ff 90       	pop	r15
    365c:	ef 90       	pop	r14
    365e:	df 90       	pop	r13
    3660:	08 95       	ret

00003662 <gol_play>:
#define GOL_WRAP 0x01



void gol_play (int iterations, uint16_t delay)
{
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	7c 01       	movw	r14, r24
    3670:	8b 01       	movw	r16, r22
    3672:	c0 e0       	ldi	r28, 0x00	; 0
    3674:	d0 e0       	ldi	r29, 0x00	; 0
    3676:	0f c0       	rjmp	.+30     	; 0x3696 <gol_play+0x34>
	int i;
	
	for (i = 0; i < iterations; i++)
	{
		DebugBlink(LED_GREEN);
    3678:	80 e2       	ldi	r24, 0x20	; 32
    367a:	0e 94 1c 03 	call	0x638	; 0x638 <DebugBlink>
	
		gol_nextgen();
    367e:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <gol_nextgen>
		
		if (gol_count_changes() == 0)
    3682:	0e 94 4e 1a 	call	0x349c	; 0x349c <gol_count_changes>
    3686:	89 2b       	or	r24, r25
    3688:	49 f0       	breq	.+18     	; 0x369c <gol_play+0x3a>
			return;
		
		tmp2cube();
    368a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <tmp2cube>
		
		delay_ms(delay);
    368e:	c8 01       	movw	r24, r16
    3690:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>

void gol_play (int iterations, uint16_t delay)
{
	int i;
	
	for (i = 0; i < iterations; i++)
    3694:	21 96       	adiw	r28, 0x01	; 1
    3696:	ce 15       	cp	r28, r14
    3698:	df 05       	cpc	r29, r15
    369a:	74 f3       	brlt	.-36     	; 0x3678 <gol_play+0x16>
		
		delay_ms(delay);
		
		//led_red(1);
	}
}
    369c:	df 91       	pop	r29
    369e:	cf 91       	pop	r28
    36a0:	1f 91       	pop	r17
    36a2:	0f 91       	pop	r16
    36a4:	ff 90       	pop	r15
    36a6:	ef 90       	pop	r14
    36a8:	08 95       	ret

000036aa <launch_effect>:
#include "gameoflife.h"
#include "debug.h"
#include "util.h"

void launch_effect (int effect)
{
    36aa:	ef 92       	push	r14
    36ac:	ff 92       	push	r15
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
    36b6:	18 2f       	mov	r17, r24
    36b8:	09 2f       	mov	r16, r25
	int i;
    unsigned char ii;

	fill(0x00);
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	0e 94 57 05 	call	0xaae	; 0xaae <fill>

	switch (effect)
    36c0:	e1 2f       	mov	r30, r17
    36c2:	f0 2f       	mov	r31, r16
    36c4:	eb 31       	cpi	r30, 0x1B	; 27
    36c6:	f1 05       	cpc	r31, r1
    36c8:	08 f0       	brcs	.+2      	; 0x36cc <launch_effect+0x22>
    36ca:	58 c2       	rjmp	.+1200   	; 0x3b7c <launch_effect+0x4d2>
    36cc:	e6 5d       	subi	r30, 0xD6	; 214
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	ee 0f       	add	r30, r30
    36d2:	ff 1f       	adc	r31, r31
    36d4:	05 90       	lpm	r0, Z+
    36d6:	f4 91       	lpm	r31, Z+
    36d8:	e0 2d       	mov	r30, r0
    36da:	09 94       	ijmp
	{
		case 0x00:
			SendDebugInfo(PSTR("0: Rain\r\n"), 1);
    36dc:	87 eb       	ldi	r24, 0xB7	; 183
    36de:	92 e0       	ldi	r25, 0x02	; 2
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_rain(100);
    36e6:	84 e6       	ldi	r24, 0x64	; 100
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <effect_rain>
    36ee:	50 c2       	rjmp	.+1184   	; 0x3b90 <launch_effect+0x4e6>
			break;
		
			
		case 1:
			SendDebugInfo(PSTR("1: Random voxels\r\n"), 1);
    36f0:	84 ea       	ldi	r24, 0xA4	; 164
    36f2:	92 e0       	ldi	r25, 0x02	; 2
    36f4:	61 e0       	ldi	r22, 0x01	; 1
    36f6:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			sendvoxels_rand_z(20,220,2000);
    36fa:	84 e1       	ldi	r24, 0x14	; 20
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	6c ed       	ldi	r22, 0xDC	; 220
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	40 ed       	ldi	r20, 0xD0	; 208
    3704:	57 e0       	ldi	r21, 0x07	; 7
    3706:	0e 94 25 12 	call	0x244a	; 0x244a <sendvoxels_rand_z>
    370a:	42 c2       	rjmp	.+1156   	; 0x3b90 <launch_effect+0x4e6>
			break;
				
		case 2:
			SendDebugInfo(PSTR("2: Random filler\r\n"), 1);
    370c:	81 e9       	ldi	r24, 0x91	; 145
    370e:	92 e0       	ldi	r25, 0x02	; 2
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_random_filler(5,1);
    3716:	85 e0       	ldi	r24, 0x05	; 5
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	61 e0       	ldi	r22, 0x01	; 1
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	0e 94 bb 11 	call	0x2376	; 0x2376 <effect_random_filler>
			effect_random_filler(5,0);
    3722:	85 e0       	ldi	r24, 0x05	; 5
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	0e 94 bb 11 	call	0x2376	; 0x2376 <effect_random_filler>
			effect_random_filler(5,1);
    372e:	85 e0       	ldi	r24, 0x05	; 5
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	70 e0       	ldi	r23, 0x00	; 0
    3736:	0e 94 bb 11 	call	0x2376	; 0x2376 <effect_random_filler>
			effect_random_filler(5,0);
    373a:	85 e0       	ldi	r24, 0x05	; 5
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	70 e0       	ldi	r23, 0x00	; 0
    3742:	0e 94 bb 11 	call	0x2376	; 0x2376 <effect_random_filler>
    3746:	24 c2       	rjmp	.+1096   	; 0x3b90 <launch_effect+0x4e6>
			break;
				
		case 3:
			SendDebugInfo(PSTR("3: Z axis up/down\r\n"), 1);
    3748:	8d e7       	ldi	r24, 0x7D	; 125
    374a:	92 e0       	ldi	r25, 0x02	; 2
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_z_updown(20,1000);
    3752:	84 e1       	ldi	r24, 0x14	; 20
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	68 ee       	ldi	r22, 0xE8	; 232
    3758:	73 e0       	ldi	r23, 0x03	; 3
    375a:	0e 94 05 11 	call	0x220a	; 0x220a <effect_z_updown>
    375e:	18 c2       	rjmp	.+1072   	; 0x3b90 <launch_effect+0x4e6>
			break;
				
		case 4:
			SendDebugInfo(PSTR("4: Wormsqueeze\r\n"), 1);
    3760:	8c e6       	ldi	r24, 0x6C	; 108
    3762:	92 e0       	ldi	r25, 0x02	; 2
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_wormsqueeze (2, AXIS_Z, -1, 100, 1000);
    376a:	82 e0       	ldi	r24, 0x02	; 2
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	ed c1       	rjmp	.+986    	; 0x3b4a <launch_effect+0x4a0>
			break;
				
		case 5:
			SendDebugInfo(PSTR("5: Blinky\r\n"), 1);
    3770:	80 e6       	ldi	r24, 0x60	; 96
    3772:	92 e0       	ldi	r25, 0x02	; 2
    3774:	61 e0       	ldi	r22, 0x01	; 1
    3776:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_blinky2();
    377a:	0e 94 9d 12 	call	0x253a	; 0x253a <effect_blinky2>
    377e:	08 c2       	rjmp	.+1040   	; 0x3b90 <launch_effect+0x4e6>
			break;
				
		case 6: 
			SendDebugInfo(PSTR("6: Boxes\r\n"), 1);
    3780:	85 e5       	ldi	r24, 0x55	; 85
    3782:	92 e0       	ldi	r25, 0x02	; 2
    3784:	61 e0       	ldi	r22, 0x01	; 1
    3786:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
    378a:	00 e0       	ldi	r16, 0x00	; 0
    378c:	10 e0       	ldi	r17, 0x00	; 0
            for (ii=0;ii<8;ii++)
			{
				effect_box_shrink_grow (1, ii % 4, ii & 0x04, 450);
    378e:	b8 01       	movw	r22, r16
    3790:	63 70       	andi	r22, 0x03	; 3
    3792:	70 70       	andi	r23, 0x00	; 0
    3794:	a8 01       	movw	r20, r16
    3796:	44 70       	andi	r20, 0x04	; 4
    3798:	50 70       	andi	r21, 0x00	; 0
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	22 ec       	ldi	r18, 0xC2	; 194
    37a0:	31 e0       	ldi	r19, 0x01	; 1
    37a2:	0e 94 c1 18 	call	0x3182	; 0x3182 <effect_box_shrink_grow>
    37a6:	0f 5f       	subi	r16, 0xFF	; 255
    37a8:	1f 4f       	sbci	r17, 0xFF	; 255
			effect_blinky2();
			break;
				
		case 6: 
			SendDebugInfo(PSTR("6: Boxes\r\n"), 1);
            for (ii=0;ii<8;ii++)
    37aa:	08 30       	cpi	r16, 0x08	; 8
    37ac:	11 05       	cpc	r17, r1
    37ae:	79 f7       	brne	.-34     	; 0x378e <launch_effect+0xe4>
			{
				effect_box_shrink_grow (1, ii % 4, ii & 0x04, 450);
			}

			effect_box_woopwoop(800,0);
    37b0:	80 e2       	ldi	r24, 0x20	; 32
    37b2:	93 e0       	ldi	r25, 0x03	; 3
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	0e 94 80 18 	call	0x3100	; 0x3100 <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    37bc:	80 e2       	ldi	r24, 0x20	; 32
    37be:	93 e0       	ldi	r25, 0x03	; 3
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	0e 94 80 18 	call	0x3100	; 0x3100 <effect_box_woopwoop>
			effect_box_woopwoop(800,0);
    37c8:	80 e2       	ldi	r24, 0x20	; 32
    37ca:	93 e0       	ldi	r25, 0x03	; 3
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	0e 94 80 18 	call	0x3100	; 0x3100 <effect_box_woopwoop>
			effect_box_woopwoop(800,1);
    37d4:	80 e2       	ldi	r24, 0x20	; 32
    37d6:	93 e0       	ldi	r25, 0x03	; 3
    37d8:	61 e0       	ldi	r22, 0x01	; 1
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	0e 94 80 18 	call	0x3100	; 0x3100 <effect_box_woopwoop>
    37e0:	d7 c1       	rjmp	.+942    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 7:
			SendDebugInfo(PSTR("7: Planboing\r\n"), 1);
    37e2:	86 e4       	ldi	r24, 0x46	; 70
    37e4:	92 e0       	ldi	r25, 0x02	; 2
    37e6:	61 e0       	ldi	r22, 0x01	; 1
    37e8:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_planboing (AXIS_Z, 400);
    37ec:	8a e7       	ldi	r24, 0x7A	; 122
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	60 e9       	ldi	r22, 0x90	; 144
    37f2:	71 e0       	ldi	r23, 0x01	; 1
    37f4:	0e 94 4a 19 	call	0x3294	; 0x3294 <effect_planboing>
			effect_planboing (AXIS_X, 400);
    37f8:	88 e7       	ldi	r24, 0x78	; 120
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	60 e9       	ldi	r22, 0x90	; 144
    37fe:	71 e0       	ldi	r23, 0x01	; 1
    3800:	0e 94 4a 19 	call	0x3294	; 0x3294 <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    3804:	89 e7       	ldi	r24, 0x79	; 121
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	60 e9       	ldi	r22, 0x90	; 144
    380a:	71 e0       	ldi	r23, 0x01	; 1
    380c:	0e 94 4a 19 	call	0x3294	; 0x3294 <effect_planboing>
			effect_planboing (AXIS_Z, 400);
    3810:	8a e7       	ldi	r24, 0x7A	; 122
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	60 e9       	ldi	r22, 0x90	; 144
    3816:	71 e0       	ldi	r23, 0x01	; 1
    3818:	0e 94 4a 19 	call	0x3294	; 0x3294 <effect_planboing>
			effect_planboing (AXIS_X, 400);
    381c:	88 e7       	ldi	r24, 0x78	; 120
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	60 e9       	ldi	r22, 0x90	; 144
    3822:	71 e0       	ldi	r23, 0x01	; 1
    3824:	0e 94 4a 19 	call	0x3294	; 0x3294 <effect_planboing>
			effect_planboing (AXIS_Y, 400);
    3828:	89 e7       	ldi	r24, 0x79	; 121
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	60 e9       	ldi	r22, 0x90	; 144
    382e:	71 e0       	ldi	r23, 0x01	; 1
    3830:	0e 94 4a 19 	call	0x3294	; 0x3294 <effect_planboing>
    3834:	ad c1       	rjmp	.+858    	; 0x3b90 <launch_effect+0x4e6>
			break;
		
		case 8:
			SendDebugInfo(PSTR("8: Telc stairs\r\n"), 1);
    3836:	85 e3       	ldi	r24, 0x35	; 53
    3838:	92 e0       	ldi	r25, 0x02	; 2
    383a:	61 e0       	ldi	r22, 0x01	; 1
    383c:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_telcstairs(0,800,0xff);
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	60 e2       	ldi	r22, 0x20	; 32
    3846:	73 e0       	ldi	r23, 0x03	; 3
    3848:	4f ef       	ldi	r20, 0xFF	; 255
    384a:	50 e0       	ldi	r21, 0x00	; 0
    384c:	0e 94 22 0a 	call	0x1444	; 0x1444 <effect_telcstairs>
			effect_telcstairs(0,800,0x00);
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	60 e2       	ldi	r22, 0x20	; 32
    3856:	73 e0       	ldi	r23, 0x03	; 3
    3858:	40 e0       	ldi	r20, 0x00	; 0
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	0e 94 22 0a 	call	0x1444	; 0x1444 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	60 e2       	ldi	r22, 0x20	; 32
    3866:	73 e0       	ldi	r23, 0x03	; 3
    3868:	4f ef       	ldi	r20, 0xFF	; 255
    386a:	50 e0       	ldi	r21, 0x00	; 0
    386c:	0e 94 22 0a 	call	0x1444	; 0x1444 <effect_telcstairs>
			effect_telcstairs(1,800,0xff);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	60 e2       	ldi	r22, 0x20	; 32
    3876:	73 e0       	ldi	r23, 0x03	; 3
    3878:	4f ef       	ldi	r20, 0xFF	; 255
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	0e 94 22 0a 	call	0x1444	; 0x1444 <effect_telcstairs>
    3880:	87 c1       	rjmp	.+782    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 9:
			SendDebugInfo(PSTR("9: Suspend random\r\n"), 1);
    3882:	81 e2       	ldi	r24, 0x21	; 33
    3884:	92 e0       	ldi	r25, 0x02	; 2
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    388c:	8a e7       	ldi	r24, 0x7A	; 122
    388e:	66 e2       	ldi	r22, 0x26	; 38
    3890:	72 e0       	ldi	r23, 0x02	; 2
    3892:	48 e8       	ldi	r20, 0x88	; 136
    3894:	53 e1       	ldi	r21, 0x13	; 19
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    389e:	8a e7       	ldi	r24, 0x7A	; 122
    38a0:	66 e2       	ldi	r22, 0x26	; 38
    38a2:	72 e0       	ldi	r23, 0x02	; 2
    38a4:	48 e8       	ldi	r20, 0x88	; 136
    38a6:	53 e1       	ldi	r21, 0x13	; 19
    38a8:	21 e0       	ldi	r18, 0x01	; 1
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,0);
    38b0:	8a e7       	ldi	r24, 0x7A	; 122
    38b2:	66 e2       	ldi	r22, 0x26	; 38
    38b4:	72 e0       	ldi	r23, 0x02	; 2
    38b6:	48 e8       	ldi	r20, 0x88	; 136
    38b8:	53 e1       	ldi	r21, 0x13	; 19
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Z, 550,5000,1);
    38c2:	8a e7       	ldi	r24, 0x7A	; 122
    38c4:	66 e2       	ldi	r22, 0x26	; 38
    38c6:	72 e0       	ldi	r23, 0x02	; 2
    38c8:	48 e8       	ldi	r20, 0x88	; 136
    38ca:	53 e1       	ldi	r21, 0x13	; 19
    38cc:	21 e0       	ldi	r18, 0x01	; 1
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,0);
    38d4:	88 e7       	ldi	r24, 0x78	; 120
    38d6:	66 e2       	ldi	r22, 0x26	; 38
    38d8:	72 e0       	ldi	r23, 0x02	; 2
    38da:	48 e8       	ldi	r20, 0x88	; 136
    38dc:	53 e1       	ldi	r21, 0x13	; 19
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_X, 550,5000,1);
    38e6:	88 e7       	ldi	r24, 0x78	; 120
    38e8:	66 e2       	ldi	r22, 0x26	; 38
    38ea:	72 e0       	ldi	r23, 0x02	; 2
    38ec:	48 e8       	ldi	r20, 0x88	; 136
    38ee:	53 e1       	ldi	r21, 0x13	; 19
    38f0:	21 e0       	ldi	r18, 0x01	; 1
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,0);
    38f8:	89 e7       	ldi	r24, 0x79	; 121
    38fa:	66 e2       	ldi	r22, 0x26	; 38
    38fc:	72 e0       	ldi	r23, 0x02	; 2
    38fe:	48 e8       	ldi	r20, 0x88	; 136
    3900:	53 e1       	ldi	r21, 0x13	; 19
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
			effect_axis_updown_randsuspend(AXIS_Y, 550,5000,1);
    390a:	89 e7       	ldi	r24, 0x79	; 121
    390c:	66 e2       	ldi	r22, 0x26	; 38
    390e:	72 e0       	ldi	r23, 0x02	; 2
    3910:	48 e8       	ldi	r20, 0x88	; 136
    3912:	53 e1       	ldi	r21, 0x13	; 19
    3914:	21 e0       	ldi	r18, 0x01	; 1
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	0e 94 31 10 	call	0x2062	; 0x2062 <effect_axis_updown_randsuspend>
    391c:	39 c1       	rjmp	.+626    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 10:
			SendDebugInfo(PSTR("10: Load bar\r\n"), 1);
    391e:	82 e1       	ldi	r24, 0x12	; 18
    3920:	92 e0       	ldi	r25, 0x02	; 2
    3922:	61 e0       	ldi	r22, 0x01	; 1
    3924:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_loadbar(700);
    3928:	8c eb       	ldi	r24, 0xBC	; 188
    392a:	92 e0       	ldi	r25, 0x02	; 2
    392c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <effect_loadbar>
    3930:	2f c1       	rjmp	.+606    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 11:
			SendDebugInfo(PSTR("11: Worm squeeze\r\n"), 1);
    3932:	8f ef       	ldi	r24, 0xFF	; 255
    3934:	91 e0       	ldi	r25, 0x01	; 1
    3936:	61 e0       	ldi	r22, 0x01	; 1
    3938:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_wormsqueeze(1, AXIS_Z, 1, 100, 1000);
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	6a e7       	ldi	r22, 0x7A	; 122
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	41 e0       	ldi	r20, 0x01	; 1
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	04 c1       	rjmp	.+520    	; 0x3b52 <launch_effect+0x4a8>
			break;
			
			
		case 12:
			SendDebugInfo(PSTR("12: String fly\r\n"), 1);
    394a:	8e ee       	ldi	r24, 0xEE	; 238
    394c:	91 e0       	ldi	r25, 0x01	; 1
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_stringfly2(PSTR("INSTRUCTABLES"), 1);
    3954:	80 ee       	ldi	r24, 0xE0	; 224
    3956:	91 e0       	ldi	r25, 0x01	; 1
    3958:	18 c1       	rjmp	.+560    	; 0x3b8a <launch_effect+0x4e0>
			break;
			
		case 13:
			SendDebugInfo(PSTR("13: Game of Life\r\n"), 1);
    395a:	8d ec       	ldi	r24, 0xCD	; 205
    395c:	91 e0       	ldi	r25, 0x01	; 1
    395e:	61 e0       	ldi	r22, 0x01	; 1
    3960:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
    3964:	c0 e0       	ldi	r28, 0x00	; 0
    3966:	d0 e0       	ldi	r29, 0x00	; 0
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
    3968:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    396c:	8c 01       	movw	r16, r24
    396e:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    3972:	7c 01       	movw	r14, r24
    3974:	0e 94 ca 23 	call	0x4794	; 0x4794 <rand>
    3978:	fc 01       	movw	r30, r24
    397a:	c8 01       	movw	r24, r16
    397c:	64 e0       	ldi	r22, 0x04	; 4
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    3984:	8c 01       	movw	r16, r24
    3986:	c7 01       	movw	r24, r14
    3988:	64 e0       	ldi	r22, 0x04	; 4
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    3990:	9c 01       	movw	r18, r24
    3992:	cf 01       	movw	r24, r30
    3994:	64 e0       	ldi	r22, 0x04	; 4
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	0e 94 30 23 	call	0x4660	; 0x4660 <__divmodhi4>
    399c:	ac 01       	movw	r20, r24
    399e:	c8 01       	movw	r24, r16
    39a0:	b9 01       	movw	r22, r18
    39a2:	0e 94 a8 03 	call	0x750	; 0x750 <setvoxel>
			break;
			
		case 13:
			SendDebugInfo(PSTR("13: Game of Life\r\n"), 1);
            // Create a random starting point for the Game of Life effect.
			for (i = 0; i < 20;i++)
    39a6:	21 96       	adiw	r28, 0x01	; 1
    39a8:	c4 31       	cpi	r28, 0x14	; 20
    39aa:	d1 05       	cpc	r29, r1
    39ac:	e9 f6       	brne	.-70     	; 0x3968 <launch_effect+0x2be>
			{
				setvoxel(rand()%4,rand()%4,rand()%4);
			}
	
			gol_play(20, 400);
    39ae:	84 e1       	ldi	r24, 0x14	; 20
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	60 e9       	ldi	r22, 0x90	; 144
    39b4:	71 e0       	ldi	r23, 0x01	; 1
    39b6:	0e 94 31 1b 	call	0x3662	; 0x3662 <gol_play>
    39ba:	ea c0       	rjmp	.+468    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 14:
			SendDebugInfo(PSTR("14: Flying boxes?\r\n"), 1);
    39bc:	89 eb       	ldi	r24, 0xB9	; 185
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	61 e0       	ldi	r22, 0x01	; 1
    39c2:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200, 1);
    39c6:	8a e7       	ldi	r24, 0x7A	; 122
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	48 ec       	ldi	r20, 0xC8	; 200
    39ce:	50 e0       	ldi	r21, 0x00	; 0
    39d0:	21 e0       	ldi	r18, 0x01	; 1
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	0e 94 bf 14 	call	0x297e	; 0x297e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    39d8:	8c ed       	ldi	r24, 0xDC	; 220
    39da:	95 e0       	ldi	r25, 0x05	; 5
    39dc:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200, 1);
    39e0:	8a e7       	ldi	r24, 0x7A	; 122
    39e2:	61 e0       	ldi	r22, 0x01	; 1
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	48 ec       	ldi	r20, 0xC8	; 200
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	21 e0       	ldi	r18, 0x01	; 1
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	0e 94 bf 14 	call	0x297e	; 0x297e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    39f2:	8c ed       	ldi	r24, 0xDC	; 220
    39f4:	95 e0       	ldi	r25, 0x05	; 5
    39f6:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Z, 0 , 200, 2);
    39fa:	8a e7       	ldi	r24, 0x7A	; 122
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	48 ec       	ldi	r20, 0xC8	; 200
    3a02:	50 e0       	ldi	r21, 0x00	; 0
    3a04:	22 e0       	ldi	r18, 0x02	; 2
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	0e 94 bf 14 	call	0x297e	; 0x297e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a0c:	8c ed       	ldi	r24, 0xDC	; 220
    3a0e:	95 e0       	ldi	r25, 0x05	; 5
    3a10:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Z, 1 , 200, 2);
    3a14:	8a e7       	ldi	r24, 0x7A	; 122
    3a16:	61 e0       	ldi	r22, 0x01	; 1
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	48 ec       	ldi	r20, 0xC8	; 200
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	22 e0       	ldi	r18, 0x02	; 2
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	0e 94 bf 14 	call	0x297e	; 0x297e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a26:	8c ed       	ldi	r24, 0xDC	; 220
    3a28:	95 e0       	ldi	r25, 0x05	; 5
    3a2a:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			
			effect_boxside_randsend_parallel (AXIS_Y, 0 , 200, 1);
    3a2e:	89 e7       	ldi	r24, 0x79	; 121
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	48 ec       	ldi	r20, 0xC8	; 200
    3a36:	50 e0       	ldi	r21, 0x00	; 0
    3a38:	21 e0       	ldi	r18, 0x01	; 1
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	0e 94 bf 14 	call	0x297e	; 0x297e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a40:	8c ed       	ldi	r24, 0xDC	; 220
    3a42:	95 e0       	ldi	r25, 0x05	; 5
    3a44:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
			effect_boxside_randsend_parallel (AXIS_Y, 1 , 200, 1);
    3a48:	89 e7       	ldi	r24, 0x79	; 121
    3a4a:	61 e0       	ldi	r22, 0x01	; 1
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	48 ec       	ldi	r20, 0xC8	; 200
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	21 e0       	ldi	r18, 0x01	; 1
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	0e 94 bf 14 	call	0x297e	; 0x297e <effect_boxside_randsend_parallel>
			delay_ms(1500);
    3a5a:	8c ed       	ldi	r24, 0xDC	; 220
    3a5c:	95 e0       	ldi	r25, 0x05	; 5
    3a5e:	0e 94 23 20 	call	0x4046	; 0x4046 <delay_ms>
    3a62:	96 c0       	rjmp	.+300    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 15:
			SendDebugInfo(PSTR("15: Boing boing\r\n"), 1);
    3a64:	87 ea       	ldi	r24, 0xA7	; 167
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	61 e0       	ldi	r22, 0x01	; 1
    3a6a:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			boingboing(250, 600, 0x01, 0x02);
    3a6e:	8a ef       	ldi	r24, 0xFA	; 250
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	68 e5       	ldi	r22, 0x58	; 88
    3a74:	72 e0       	ldi	r23, 0x02	; 2
    3a76:	41 e0       	ldi	r20, 0x01	; 1
    3a78:	22 e0       	ldi	r18, 0x02	; 2
    3a7a:	7d c0       	rjmp	.+250    	; 0x3b76 <launch_effect+0x4cc>
			break;
			
		case 16:
			SendDebugInfo(PSTR("16: Smiley spin\r\n"), 1);
    3a7c:	85 e9       	ldi	r24, 0x95	; 149
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
    3a80:	61 e0       	ldi	r22, 0x01	; 1
    3a82:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_smileyspin(2,1000,0);
    3a86:	82 e0       	ldi	r24, 0x02	; 2
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	68 ee       	ldi	r22, 0xE8	; 232
    3a8c:	73 e0       	ldi	r23, 0x03	; 3
    3a8e:	40 e0       	ldi	r20, 0x00	; 0
    3a90:	4a c0       	rjmp	.+148    	; 0x3b26 <launch_effect+0x47c>
			break;
			
		case 17:
			SendDebugInfo(PSTR("17: Path spiral\r\n"), 1);
    3a92:	83 e8       	ldi	r24, 0x83	; 131
    3a94:	91 e0       	ldi	r25, 0x01	; 1
    3a96:	61 e0       	ldi	r22, 0x01	; 1
    3a98:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_pathspiral(100,500);
    3a9c:	84 e6       	ldi	r24, 0x64	; 100
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	64 ef       	ldi	r22, 0xF4	; 244
    3aa2:	71 e0       	ldi	r23, 0x01	; 1
    3aa4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <effect_pathspiral>
    3aa8:	73 c0       	rjmp	.+230    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 18:
			SendDebugInfo(PSTR("18: Path bitmap\r\n"), 1);
    3aaa:	81 e7       	ldi	r24, 0x71	; 113
    3aac:	91 e0       	ldi	r25, 0x01	; 1
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_path_bitmap(700,2,3);
    3ab4:	8c eb       	ldi	r24, 0xBC	; 188
    3ab6:	92 e0       	ldi	r25, 0x02	; 2
    3ab8:	62 e0       	ldi	r22, 0x02	; 2
    3aba:	43 e0       	ldi	r20, 0x03	; 3
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <effect_path_bitmap>
    3ac2:	66 c0       	rjmp	.+204    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 19:
			SendDebugInfo(PSTR("19: Smiley spin\r\n"), 1);
    3ac4:	8f e5       	ldi	r24, 0x5F	; 95
    3ac6:	91 e0       	ldi	r25, 0x01	; 1
    3ac8:	61 e0       	ldi	r22, 0x01	; 1
    3aca:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_smileyspin(2,1000,1);
    3ace:	82 e0       	ldi	r24, 0x02	; 2
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	68 ee       	ldi	r22, 0xE8	; 232
    3ad4:	73 e0       	ldi	r23, 0x03	; 3
    3ad6:	41 e0       	ldi	r20, 0x01	; 1
    3ad8:	26 c0       	rjmp	.+76     	; 0x3b26 <launch_effect+0x47c>
			break;
			
		case 20:
			SendDebugInfo(PSTR("20: Path text\r\n"), 1);
    3ada:	8f e4       	ldi	r24, 0x4F	; 79
    3adc:	91 e0       	ldi	r25, 0x01	; 1
    3ade:	61 e0       	ldi	r22, 0x01	; 1
    3ae0:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_path_text(1000, "TG", 0);
    3ae4:	88 ee       	ldi	r24, 0xE8	; 232
    3ae6:	93 e0       	ldi	r25, 0x03	; 3
    3ae8:	60 e9       	ldi	r22, 0x90	; 144
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	40 e0       	ldi	r20, 0x00	; 0
    3aee:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <effect_path_text>
    3af2:	4e c0       	rjmp	.+156    	; 0x3b90 <launch_effect+0x4e6>
			break;
	
		case 21:
			SendDebugInfo(PSTR("21: Path text\r\n"), 1);
    3af4:	8f e3       	ldi	r24, 0x3F	; 63
    3af6:	91 e0       	ldi	r25, 0x01	; 1
    3af8:	61 e0       	ldi	r22, 0x01	; 1
    3afa:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_rand_patharound(200,500);
    3afe:	88 ec       	ldi	r24, 0xC8	; 200
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	64 ef       	ldi	r22, 0xF4	; 244
    3b04:	71 e0       	ldi	r23, 0x01	; 1
    3b06:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <effect_rand_patharound>
    3b0a:	42 c0       	rjmp	.+132    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 22:
			SendDebugInfo(PSTR("22: Worm squeeze\r\n"), 1);
    3b0c:	8c e2       	ldi	r24, 0x2C	; 44
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	17 c0       	rjmp	.+46     	; 0x3b40 <launch_effect+0x496>
			effect_wormsqueeze(1, AXIS_Z, -1, 100, 1000);
			break;
			
		case 23:
			SendDebugInfo(PSTR("23: Smiley spin\r\n"), 1);
    3b12:	8a e1       	ldi	r24, 0x1A	; 26
    3b14:	91 e0       	ldi	r25, 0x01	; 1
    3b16:	61 e0       	ldi	r22, 0x01	; 1
    3b18:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_smileyspin(2,1000,2);
    3b1c:	82 e0       	ldi	r24, 0x02	; 2
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	68 ee       	ldi	r22, 0xE8	; 232
    3b22:	73 e0       	ldi	r23, 0x03	; 3
    3b24:	42 e0       	ldi	r20, 0x02	; 2
    3b26:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <effect_smileyspin>
    3b2a:	32 c0       	rjmp	.+100    	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 24:
			SendDebugInfo(PSTR("24: Random sparkle\r\n"), 1);
    3b2c:	85 e0       	ldi	r24, 0x05	; 5
    3b2e:	91 e0       	ldi	r25, 0x01	; 1
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_random_sparkle();
    3b36:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <effect_random_sparkle>
    3b3a:	2a c0       	rjmp	.+84     	; 0x3b90 <launch_effect+0x4e6>
			break;
			
		case 25:
			SendDebugInfo(PSTR("25: Worm squeeze\r\n"), 1);
    3b3c:	82 ef       	ldi	r24, 0xF2	; 242
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	61 e0       	ldi	r22, 0x01	; 1
    3b42:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_wormsqueeze(1, AXIS_Z, -1, 100, 1000);
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	6a e7       	ldi	r22, 0x7A	; 122
    3b4c:	70 e0       	ldi	r23, 0x00	; 0
    3b4e:	4f ef       	ldi	r20, 0xFF	; 255
    3b50:	5f ef       	ldi	r21, 0xFF	; 255
    3b52:	24 e6       	ldi	r18, 0x64	; 100
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	08 ee       	ldi	r16, 0xE8	; 232
    3b58:	13 e0       	ldi	r17, 0x03	; 3
    3b5a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <effect_wormsqueeze>
    3b5e:	18 c0       	rjmp	.+48     	; 0x3b90 <launch_effect+0x4e6>
			break;
		
		case 26:
			SendDebugInfo(PSTR("26: Boing boing\r\n"), 1);
    3b60:	80 ee       	ldi	r24, 0xE0	; 224
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	61 e0       	ldi	r22, 0x01	; 1
    3b66:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			boingboing(250, 600, 0x01, 0x03);
    3b6a:	8a ef       	ldi	r24, 0xFA	; 250
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	68 e5       	ldi	r22, 0x58	; 88
    3b70:	72 e0       	ldi	r23, 0x02	; 2
    3b72:	41 e0       	ldi	r20, 0x01	; 1
    3b74:	23 e0       	ldi	r18, 0x03	; 3
    3b76:	0e 94 78 15 	call	0x2af0	; 0x2af0 <boingboing>
    3b7a:	0a c0       	rjmp	.+20     	; 0x3b90 <launch_effect+0x4e6>
			break;
		
		// In case the effect number is out of range:
		default:
			SendDebugInfo(PSTR("Fail\r\n"), 1);
    3b7c:	89 ed       	ldi	r24, 0xD9	; 217
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	61 e0       	ldi	r22, 0x01	; 1
    3b82:	0e 94 1d 03 	call	0x63a	; 0x63a <SendDebugInfo>
			effect_stringfly2(PSTR("FAIL"), 1);
    3b86:	84 ed       	ldi	r24, 0xD4	; 212
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	61 e0       	ldi	r22, 0x01	; 1
    3b8c:	0e 94 2b 14 	call	0x2856	; 0x2856 <effect_stringfly2>
			break;
	}
}
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	ff 90       	pop	r15
    3b9a:	ef 90       	pop	r14
    3b9c:	08 95       	ret

00003b9e <USARTInit>:
#include <avr/io.h>
#include <util/atomic.h>

void USARTInit()
{
	RINGFIFO_RESET(RXFifo);
    3b9e:	10 92 f4 01 	sts	0x01F4, r1
    3ba2:	10 92 f5 01 	sts	0x01F5, r1
    3ba6:	10 92 f6 01 	sts	0x01F6, r1
    3baa:	10 92 f7 01 	sts	0x01F7, r1
    3bae:	10 92 f8 01 	sts	0x01F8, r1
    3bb2:	10 92 f9 01 	sts	0x01F9, r1
    3bb6:	10 92 fa 01 	sts	0x01FA, r1
    3bba:	10 92 fb 01 	sts	0x01FB, r1
	RINGFIFO_RESET(TXFifo);
    3bbe:	10 92 28 01 	sts	0x0128, r1
    3bc2:	10 92 29 01 	sts	0x0129, r1
    3bc6:	10 92 2a 01 	sts	0x012A, r1
    3bca:	10 92 2b 01 	sts	0x012B, r1
    3bce:	10 92 2c 01 	sts	0x012C, r1
    3bd2:	10 92 2d 01 	sts	0x012D, r1
    3bd6:	10 92 2e 01 	sts	0x012E, r1
    3bda:	10 92 2f 01 	sts	0x012F, r1

    // Initiate RS232
    // USART Baud rate is defined in MYUBRR
    UBRRH = (unsigned char)(MYUBRR >> 8);
    3bde:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char)(MYUBRR);
    3be0:	87 e0       	ldi	r24, 0x07	; 7
    3be2:	89 b9       	out	0x09, r24	; 9
    // bit 6		sync/ascyn 0 = async,  1 = sync
    // bit 5-4      parity 00 = disabled
    // bit 3        stop bits 0 = 1 bit  1 = 2 bits
    // bit 2-1      frame length 11 = 8
    // bit 0        clock polarity, should be 0 in asynch mode
    UCSRC  = 0b10000110;
    3be4:	86 e8       	ldi	r24, 0x86	; 134
    3be6:	80 bd       	out	0x20, r24	; 32
    // Enable RS232, rx, tx, Data Register empty interrupt and rx complete interrupt
    UCSRB = _BV(RXEN) | _BV(TXEN) | _BV(UDRIE) | _BV(RXCIE);
    3be8:	88 eb       	ldi	r24, 0xB8	; 184
    3bea:	8a b9       	out	0x0a, r24	; 10

	// Local echo on
	m_Echo = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	80 93 23 01 	sts	0x0123, r24
}
    3bf2:	08 95       	ret

00003bf4 <SendChar>:

int SendChar(char data)
{
    3bf4:	ef 92       	push	r14
    3bf6:	ff 92       	push	r15
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	68 2f       	mov	r22, r24
	if(!RINGFIFO_FULL(TXFifo))
    3bfe:	20 91 28 01 	lds	r18, 0x0128
    3c02:	30 91 29 01 	lds	r19, 0x0129
    3c06:	40 91 2a 01 	lds	r20, 0x012A
    3c0a:	50 91 2b 01 	lds	r21, 0x012B
    3c0e:	79 01       	movw	r14, r18
    3c10:	8a 01       	movw	r16, r20
    3c12:	08 94       	sec
    3c14:	e1 1c       	adc	r14, r1
    3c16:	f1 1c       	adc	r15, r1
    3c18:	01 1d       	adc	r16, r1
    3c1a:	11 1d       	adc	r17, r1
    3c1c:	80 91 2c 01 	lds	r24, 0x012C
    3c20:	90 91 2d 01 	lds	r25, 0x012D
    3c24:	a0 91 2e 01 	lds	r26, 0x012E
    3c28:	b0 91 2f 01 	lds	r27, 0x012F
    3c2c:	8e 25       	eor	r24, r14
    3c2e:	9f 25       	eor	r25, r15
    3c30:	a0 27       	eor	r26, r16
    3c32:	b1 27       	eor	r27, r17
    3c34:	8f 77       	andi	r24, 0x7F	; 127
    3c36:	90 70       	andi	r25, 0x00	; 0
    3c38:	a0 70       	andi	r26, 0x00	; 0
    3c3a:	b0 70       	andi	r27, 0x00	; 0
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	a1 05       	cpc	r26, r1
    3c40:	b1 05       	cpc	r27, r1
    3c42:	19 f4       	brne	.+6      	; 0x3c4a <SendChar+0x56>
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	13 c0       	rjmp	.+38     	; 0x3c70 <SendChar+0x7c>
	{
		RINGFIFO_WR(TXFifo, data);
    3c4a:	f9 01       	movw	r30, r18
    3c4c:	ef 77       	andi	r30, 0x7F	; 127
    3c4e:	f0 70       	andi	r31, 0x00	; 0
    3c50:	ec 5d       	subi	r30, 0xDC	; 220
    3c52:	fe 4f       	sbci	r31, 0xFE	; 254
    3c54:	64 87       	std	Z+12, r22	; 0x0c
    3c56:	e0 92 28 01 	sts	0x0128, r14
    3c5a:	f0 92 29 01 	sts	0x0129, r15
    3c5e:	00 93 2a 01 	sts	0x012A, r16
    3c62:	10 93 2b 01 	sts	0x012B, r17
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3c66:	f8 94       	cli

		//Ensure that no interrupts can fiddle with the UCSRB while we set the drie flag.
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			UCSRB |= _BV(UDRIE);
    3c68:	55 9a       	sbi	0x0a, 5	; 10
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3c6a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    3c6c:	21 e0       	ldi	r18, 0x01	; 1
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    3c70:	c9 01       	movw	r24, r18
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	08 95       	ret

00003c7c <SendString>:

int SendString(const char * data, uint8_t prgMem)
{
    3c7c:	6f 92       	push	r6
    3c7e:	7f 92       	push	r7
    3c80:	8f 92       	push	r8
    3c82:	9f 92       	push	r9
    3c84:	af 92       	push	r10
    3c86:	bf 92       	push	r11
    3c88:	cf 92       	push	r12
    3c8a:	df 92       	push	r13
    3c8c:	ef 92       	push	r14
    3c8e:	ff 92       	push	r15
    3c90:	0f 93       	push	r16
    3c92:	1f 93       	push	r17
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	6c 01       	movw	r12, r24
    3c9a:	76 2e       	mov	r7, r22
	int pos = 0;
	uint8_t tempChar;

	if(prgMem == 0)
    3c9c:	66 23       	and	r22, r22
    3c9e:	71 f4       	brne	.+28     	; 0x3cbc <SendString+0x40>
	{
		tempChar = data[pos];
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	6c 90       	ld	r6, X
	else
	{
		tempChar = pgm_read_byte(&(data[pos]));
	}
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3ca4:	80 90 2c 01 	lds	r8, 0x012C
    3ca8:	90 90 2d 01 	lds	r9, 0x012D
    3cac:	a0 90 2e 01 	lds	r10, 0x012E
    3cb0:	b0 90 2f 01 	lds	r11, 0x012F
    3cb4:	e6 01       	movw	r28, r12
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	1d c0       	rjmp	.+58     	; 0x3cf6 <SendString+0x7a>
	{
		tempChar = data[pos];
	}
	else
	{
		tempChar = pgm_read_byte(&(data[pos]));
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	64 90       	lpm	r6, Z+
    3cc0:	f1 cf       	rjmp	.-30     	; 0x3ca4 <SendString+0x28>
	}
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
	{
		RINGFIFO_WR(TXFifo, data[pos]);
    3cc2:	f9 01       	movw	r30, r18
    3cc4:	ef 77       	andi	r30, 0x7F	; 127
    3cc6:	f0 70       	andi	r31, 0x00	; 0
    3cc8:	ec 5d       	subi	r30, 0xDC	; 220
    3cca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ccc:	88 81       	ld	r24, Y
    3cce:	84 87       	std	Z+12, r24	; 0x0c
    3cd0:	e0 92 28 01 	sts	0x0128, r14
    3cd4:	f0 92 29 01 	sts	0x0129, r15
    3cd8:	00 93 2a 01 	sts	0x012A, r16
    3cdc:	10 93 2b 01 	sts	0x012B, r17
		pos++;
    3ce0:	6f 5f       	subi	r22, 0xFF	; 255
    3ce2:	7f 4f       	sbci	r23, 0xFF	; 255

		if(prgMem == 0)
    3ce4:	77 20       	and	r7, r7
    3ce6:	11 f4       	brne	.+4      	; 0x3cec <SendString+0x70>
		{
			tempChar = data[pos];
    3ce8:	69 80       	ldd	r6, Y+1	; 0x01
    3cea:	04 c0       	rjmp	.+8      	; 0x3cf4 <SendString+0x78>
		}
		else
		{
			tempChar = pgm_read_byte(&(data[pos]));
    3cec:	f6 01       	movw	r30, r12
    3cee:	e6 0f       	add	r30, r22
    3cf0:	f7 1f       	adc	r31, r23
    3cf2:	64 90       	lpm	r6, Z+
    3cf4:	21 96       	adiw	r28, 0x01	; 1
	else
	{
		tempChar = pgm_read_byte(&(data[pos]));
	}
	
	while(!RINGFIFO_FULL(TXFifo) && tempChar != 0)
    3cf6:	20 91 28 01 	lds	r18, 0x0128
    3cfa:	30 91 29 01 	lds	r19, 0x0129
    3cfe:	40 91 2a 01 	lds	r20, 0x012A
    3d02:	50 91 2b 01 	lds	r21, 0x012B
    3d06:	79 01       	movw	r14, r18
    3d08:	8a 01       	movw	r16, r20
    3d0a:	08 94       	sec
    3d0c:	e1 1c       	adc	r14, r1
    3d0e:	f1 1c       	adc	r15, r1
    3d10:	01 1d       	adc	r16, r1
    3d12:	11 1d       	adc	r17, r1
    3d14:	d8 01       	movw	r26, r16
    3d16:	c7 01       	movw	r24, r14
    3d18:	88 25       	eor	r24, r8
    3d1a:	99 25       	eor	r25, r9
    3d1c:	aa 25       	eor	r26, r10
    3d1e:	bb 25       	eor	r27, r11
    3d20:	8f 77       	andi	r24, 0x7F	; 127
    3d22:	90 70       	andi	r25, 0x00	; 0
    3d24:	a0 70       	andi	r26, 0x00	; 0
    3d26:	b0 70       	andi	r27, 0x00	; 0
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	a1 05       	cpc	r26, r1
    3d2c:	b1 05       	cpc	r27, r1
    3d2e:	11 f0       	breq	.+4      	; 0x3d34 <SendString+0xb8>
    3d30:	66 20       	and	r6, r6
    3d32:	39 f6       	brne	.-114    	; 0x3cc2 <SendString+0x46>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d34:	f8 94       	cli
	}

	//Ensure that no interrupts can fiddle with the UCSRB while we set the drie flag.
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UCSRB |= _BV(UDRIE);
    3d36:	55 9a       	sbi	0x0a, 5	; 10
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3d38:	78 94       	sei
	}

	return pos;
}
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	ff 90       	pop	r15
    3d46:	ef 90       	pop	r14
    3d48:	df 90       	pop	r13
    3d4a:	cf 90       	pop	r12
    3d4c:	bf 90       	pop	r11
    3d4e:	af 90       	pop	r10
    3d50:	9f 90       	pop	r9
    3d52:	8f 90       	pop	r8
    3d54:	7f 90       	pop	r7
    3d56:	6f 90       	pop	r6
    3d58:	08 95       	ret

00003d5a <ReceiveChar>:

// Receives a character from the SW buffer
int ReceiveChar(char *data)
{
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	ec 01       	movw	r28, r24
	char tempValue;
	if(!RINGFIFO_EMPTY(RXFifo))
    3d60:	20 91 f8 01 	lds	r18, 0x01F8
    3d64:	30 91 f9 01 	lds	r19, 0x01F9
    3d68:	40 91 fa 01 	lds	r20, 0x01FA
    3d6c:	50 91 fb 01 	lds	r21, 0x01FB
    3d70:	80 91 f4 01 	lds	r24, 0x01F4
    3d74:	90 91 f5 01 	lds	r25, 0x01F5
    3d78:	a0 91 f6 01 	lds	r26, 0x01F6
    3d7c:	b0 91 f7 01 	lds	r27, 0x01F7
    3d80:	28 17       	cp	r18, r24
    3d82:	39 07       	cpc	r19, r25
    3d84:	4a 07       	cpc	r20, r26
    3d86:	5b 07       	cpc	r21, r27
    3d88:	19 f4       	brne	.+6      	; 0x3d90 <ReceiveChar+0x36>
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	19 c0       	rjmp	.+50     	; 0x3dc2 <ReceiveChar+0x68>
	{
		RINGFIFO_RD(RXFifo, tempValue);
    3d90:	2f 5f       	subi	r18, 0xFF	; 255
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	4f 4f       	sbci	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	20 93 f8 01 	sts	0x01F8, r18
    3d9c:	30 93 f9 01 	sts	0x01F9, r19
    3da0:	40 93 fa 01 	sts	0x01FA, r20
    3da4:	50 93 fb 01 	sts	0x01FB, r21
    3da8:	21 50       	subi	r18, 0x01	; 1
    3daa:	30 40       	sbci	r19, 0x00	; 0
    3dac:	40 40       	sbci	r20, 0x00	; 0
    3dae:	50 40       	sbci	r21, 0x00	; 0
		data[0] = tempValue;
    3db0:	f9 01       	movw	r30, r18
    3db2:	ef 77       	andi	r30, 0x7F	; 127
    3db4:	f0 70       	andi	r31, 0x00	; 0
    3db6:	e0 51       	subi	r30, 0x10	; 16
    3db8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dba:	84 85       	ldd	r24, Z+12	; 0x0c
    3dbc:	88 83       	st	Y, r24
    3dbe:	21 e0       	ldi	r18, 0x01	; 1
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    3dc2:	c9 01       	movw	r24, r18
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	08 95       	ret

00003dca <ReceiveString>:

// Receives a string from the SW buffer, 
// data: Pointer to a 
// Return value is number of chars that were read from the buffer
int ReceiveString(char * data, uint8_t maxChars)
{
    3dca:	0f 93       	push	r16
    3dcc:	1f 93       	push	r17
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	8c 01       	movw	r16, r24
    3dd4:	c0 e0       	ldi	r28, 0x00	; 0
    3dd6:	d0 e0       	ldi	r29, 0x00	; 0
	char tempValue;
	int charsRead = 0;
	while(!RINGFIFO_EMPTY(RXFifo) && charsRead < maxChars)
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
    3dda:	1c c0       	rjmp	.+56     	; 0x3e14 <ReceiveString+0x4a>
	{
		RINGFIFO_RD(RXFifo, tempValue);
    3ddc:	2f 5f       	subi	r18, 0xFF	; 255
    3dde:	3f 4f       	sbci	r19, 0xFF	; 255
    3de0:	4f 4f       	sbci	r20, 0xFF	; 255
    3de2:	5f 4f       	sbci	r21, 0xFF	; 255
    3de4:	20 93 f8 01 	sts	0x01F8, r18
    3de8:	30 93 f9 01 	sts	0x01F9, r19
    3dec:	40 93 fa 01 	sts	0x01FA, r20
    3df0:	50 93 fb 01 	sts	0x01FB, r21
    3df4:	21 50       	subi	r18, 0x01	; 1
    3df6:	30 40       	sbci	r19, 0x00	; 0
    3df8:	40 40       	sbci	r20, 0x00	; 0
    3dfa:	50 40       	sbci	r21, 0x00	; 0
		data[charsRead] = tempValue;
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	ec 0f       	add	r30, r28
    3e00:	fd 1f       	adc	r31, r29
    3e02:	d9 01       	movw	r26, r18
    3e04:	af 77       	andi	r26, 0x7F	; 127
    3e06:	b0 70       	andi	r27, 0x00	; 0
    3e08:	a0 51       	subi	r26, 0x10	; 16
    3e0a:	be 4f       	sbci	r27, 0xFE	; 254
    3e0c:	1c 96       	adiw	r26, 0x0c	; 12
    3e0e:	8c 91       	ld	r24, X
    3e10:	80 83       	st	Z, r24
		charsRead++;
    3e12:	21 96       	adiw	r28, 0x01	; 1
// Return value is number of chars that were read from the buffer
int ReceiveString(char * data, uint8_t maxChars)
{
	char tempValue;
	int charsRead = 0;
	while(!RINGFIFO_EMPTY(RXFifo) && charsRead < maxChars)
    3e14:	20 91 f8 01 	lds	r18, 0x01F8
    3e18:	30 91 f9 01 	lds	r19, 0x01F9
    3e1c:	40 91 fa 01 	lds	r20, 0x01FA
    3e20:	50 91 fb 01 	lds	r21, 0x01FB
    3e24:	80 91 f4 01 	lds	r24, 0x01F4
    3e28:	90 91 f5 01 	lds	r25, 0x01F5
    3e2c:	a0 91 f6 01 	lds	r26, 0x01F6
    3e30:	b0 91 f7 01 	lds	r27, 0x01F7
    3e34:	28 17       	cp	r18, r24
    3e36:	39 07       	cpc	r19, r25
    3e38:	4a 07       	cpc	r20, r26
    3e3a:	5b 07       	cpc	r21, r27
    3e3c:	19 f0       	breq	.+6      	; 0x3e44 <ReceiveString+0x7a>
    3e3e:	c6 17       	cp	r28, r22
    3e40:	d7 07       	cpc	r29, r23
    3e42:	64 f2       	brlt	.-104    	; 0x3ddc <ReceiveString+0x12>
		data[charsRead] = tempValue;
		charsRead++;
	}

	return charsRead;
}
    3e44:	ce 01       	movw	r24, r28
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	1f 91       	pop	r17
    3e4c:	0f 91       	pop	r16
    3e4e:	08 95       	ret

00003e50 <SetEcho>:

// Set whether or not to echo received chars
void SetEcho(unsigned char echo)
{
	m_Echo = echo;
    3e50:	80 93 23 01 	sts	0x0123, r24
}
    3e54:	08 95       	ret

00003e56 <HasChars>:

uint8_t HasChars()
{
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	20 91 f8 01 	lds	r18, 0x01F8
    3e5c:	30 91 f9 01 	lds	r19, 0x01F9
    3e60:	40 91 fa 01 	lds	r20, 0x01FA
    3e64:	50 91 fb 01 	lds	r21, 0x01FB
    3e68:	80 91 f4 01 	lds	r24, 0x01F4
    3e6c:	90 91 f5 01 	lds	r25, 0x01F5
    3e70:	a0 91 f6 01 	lds	r26, 0x01F6
    3e74:	b0 91 f7 01 	lds	r27, 0x01F7
    3e78:	28 17       	cp	r18, r24
    3e7a:	39 07       	cpc	r19, r25
    3e7c:	4a 07       	cpc	r20, r26
    3e7e:	5b 07       	cpc	r21, r27
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <HasChars+0x2e>
    3e82:	61 e0       	ldi	r22, 0x01	; 1
	return !RINGFIFO_EMPTY(RXFifo);
}
    3e84:	86 2f       	mov	r24, r22
    3e86:	08 95       	ret

00003e88 <__vector_14>:

// Interrupt handler for the Data Register Empty Interrupt
// Transmits the first character in the SW Buffer
// and disables the interrupt if there are no more characters to send.
ISR(USART_UDRE_vect)
{
    3e88:	1f 92       	push	r1
    3e8a:	0f 92       	push	r0
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	0f 92       	push	r0
    3e90:	11 24       	eor	r1, r1
    3e92:	2f 93       	push	r18
    3e94:	3f 93       	push	r19
    3e96:	4f 93       	push	r20
    3e98:	5f 93       	push	r21
    3e9a:	8f 93       	push	r24
    3e9c:	9f 93       	push	r25
    3e9e:	af 93       	push	r26
    3ea0:	bf 93       	push	r27
    3ea2:	ef 93       	push	r30
    3ea4:	ff 93       	push	r31
	char tempValue;
	if(!RINGFIFO_EMPTY(TXFifo))
    3ea6:	80 91 2c 01 	lds	r24, 0x012C
    3eaa:	90 91 2d 01 	lds	r25, 0x012D
    3eae:	a0 91 2e 01 	lds	r26, 0x012E
    3eb2:	b0 91 2f 01 	lds	r27, 0x012F
    3eb6:	20 91 28 01 	lds	r18, 0x0128
    3eba:	30 91 29 01 	lds	r19, 0x0129
    3ebe:	40 91 2a 01 	lds	r20, 0x012A
    3ec2:	50 91 2b 01 	lds	r21, 0x012B
    3ec6:	82 17       	cp	r24, r18
    3ec8:	93 07       	cpc	r25, r19
    3eca:	a4 07       	cpc	r26, r20
    3ecc:	b5 07       	cpc	r27, r21
    3ece:	a9 f0       	breq	.+42     	; 0x3efa <__vector_14+0x72>
	{
		RINGFIFO_RD(TXFifo, tempValue);
    3ed0:	01 96       	adiw	r24, 0x01	; 1
    3ed2:	a1 1d       	adc	r26, r1
    3ed4:	b1 1d       	adc	r27, r1
    3ed6:	80 93 2c 01 	sts	0x012C, r24
    3eda:	90 93 2d 01 	sts	0x012D, r25
    3ede:	a0 93 2e 01 	sts	0x012E, r26
    3ee2:	b0 93 2f 01 	sts	0x012F, r27
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	a1 09       	sbc	r26, r1
    3eea:	b1 09       	sbc	r27, r1
    3eec:	fc 01       	movw	r30, r24
    3eee:	ef 77       	andi	r30, 0x7F	; 127
    3ef0:	f0 70       	andi	r31, 0x00	; 0
    3ef2:	ec 5d       	subi	r30, 0xDC	; 220
    3ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef6:	84 85       	ldd	r24, Z+12	; 0x0c
		UDR = tempValue;
    3ef8:	8c b9       	out	0x0c, r24	; 12
	}

	// Clear the Data register empty interrupt if there are no more data to be transmitted
	// This will be set by the sender functions once more data is loaded to the buffer.
	if(RINGFIFO_EMPTY(TXFifo))
    3efa:	80 91 2c 01 	lds	r24, 0x012C
    3efe:	90 91 2d 01 	lds	r25, 0x012D
    3f02:	a0 91 2e 01 	lds	r26, 0x012E
    3f06:	b0 91 2f 01 	lds	r27, 0x012F
    3f0a:	82 17       	cp	r24, r18
    3f0c:	93 07       	cpc	r25, r19
    3f0e:	a4 07       	cpc	r26, r20
    3f10:	b5 07       	cpc	r27, r21
    3f12:	09 f4       	brne	.+2      	; 0x3f16 <__vector_14+0x8e>
	{
		UCSRB &= ~_BV(UDRIE);
    3f14:	55 98       	cbi	0x0a, 5	; 10
	}
}
    3f16:	ff 91       	pop	r31
    3f18:	ef 91       	pop	r30
    3f1a:	bf 91       	pop	r27
    3f1c:	af 91       	pop	r26
    3f1e:	9f 91       	pop	r25
    3f20:	8f 91       	pop	r24
    3f22:	5f 91       	pop	r21
    3f24:	4f 91       	pop	r20
    3f26:	3f 91       	pop	r19
    3f28:	2f 91       	pop	r18
    3f2a:	0f 90       	pop	r0
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	0f 90       	pop	r0
    3f30:	1f 90       	pop	r1
    3f32:	18 95       	reti

00003f34 <__vector_13>:

// Interrupt handler for the Receive Completed interrupt
// Re
ISR(USART_RXC_vect)
{
    3f34:	1f 92       	push	r1
    3f36:	0f 92       	push	r0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	0f 92       	push	r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	ef 92       	push	r14
    3f40:	ff 92       	push	r15
    3f42:	0f 93       	push	r16
    3f44:	1f 93       	push	r17
    3f46:	2f 93       	push	r18
    3f48:	3f 93       	push	r19
    3f4a:	4f 93       	push	r20
    3f4c:	5f 93       	push	r21
    3f4e:	6f 93       	push	r22
    3f50:	7f 93       	push	r23
    3f52:	8f 93       	push	r24
    3f54:	9f 93       	push	r25
    3f56:	af 93       	push	r26
    3f58:	bf 93       	push	r27
    3f5a:	ef 93       	push	r30
    3f5c:	ff 93       	push	r31
	// Status must be read before data
	char Status = UCSRA;
    3f5e:	8b b1       	in	r24, 0x0b	; 11
	char tempValue = UDR;
    3f60:	6c b1       	in	r22, 0x0c	; 12
	// If there is no error when receiving
	if(!(Status & _BV(FE)) && !(Status & _BV(DOR)) && !(Status & _BV(PE)))
    3f62:	84 fd       	sbrc	r24, 4
    3f64:	3c c0       	rjmp	.+120    	; 0x3fde <__vector_13+0xaa>
    3f66:	83 fd       	sbrc	r24, 3
    3f68:	3a c0       	rjmp	.+116    	; 0x3fde <__vector_13+0xaa>
    3f6a:	82 fd       	sbrc	r24, 2
    3f6c:	38 c0       	rjmp	.+112    	; 0x3fde <__vector_13+0xaa>
	{
		// If there is room in the buffer
		if(!RINGFIFO_FULL(RXFifo))
    3f6e:	20 91 f4 01 	lds	r18, 0x01F4
    3f72:	30 91 f5 01 	lds	r19, 0x01F5
    3f76:	40 91 f6 01 	lds	r20, 0x01F6
    3f7a:	50 91 f7 01 	lds	r21, 0x01F7
    3f7e:	79 01       	movw	r14, r18
    3f80:	8a 01       	movw	r16, r20
    3f82:	08 94       	sec
    3f84:	e1 1c       	adc	r14, r1
    3f86:	f1 1c       	adc	r15, r1
    3f88:	01 1d       	adc	r16, r1
    3f8a:	11 1d       	adc	r17, r1
    3f8c:	80 91 f8 01 	lds	r24, 0x01F8
    3f90:	90 91 f9 01 	lds	r25, 0x01F9
    3f94:	a0 91 fa 01 	lds	r26, 0x01FA
    3f98:	b0 91 fb 01 	lds	r27, 0x01FB
    3f9c:	8e 25       	eor	r24, r14
    3f9e:	9f 25       	eor	r25, r15
    3fa0:	a0 27       	eor	r26, r16
    3fa2:	b1 27       	eor	r27, r17
    3fa4:	8f 77       	andi	r24, 0x7F	; 127
    3fa6:	90 70       	andi	r25, 0x00	; 0
    3fa8:	a0 70       	andi	r26, 0x00	; 0
    3faa:	b0 70       	andi	r27, 0x00	; 0
    3fac:	00 97       	sbiw	r24, 0x00	; 0
    3fae:	a1 05       	cpc	r26, r1
    3fb0:	b1 05       	cpc	r27, r1
    3fb2:	a9 f0       	breq	.+42     	; 0x3fde <__vector_13+0xaa>
		{
			RINGFIFO_WR(RXFifo, tempValue);
    3fb4:	f9 01       	movw	r30, r18
    3fb6:	ef 77       	andi	r30, 0x7F	; 127
    3fb8:	f0 70       	andi	r31, 0x00	; 0
    3fba:	e0 51       	subi	r30, 0x10	; 16
    3fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fbe:	64 87       	std	Z+12, r22	; 0x0c
    3fc0:	e0 92 f4 01 	sts	0x01F4, r14
    3fc4:	f0 92 f5 01 	sts	0x01F5, r15
    3fc8:	00 93 f6 01 	sts	0x01F6, r16
    3fcc:	10 93 f7 01 	sts	0x01F7, r17
			if(m_Echo != 0)
    3fd0:	80 91 23 01 	lds	r24, 0x0123
    3fd4:	88 23       	and	r24, r24
    3fd6:	19 f0       	breq	.+6      	; 0x3fde <__vector_13+0xaa>
			{
				SendChar(tempValue);
    3fd8:	86 2f       	mov	r24, r22
    3fda:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <SendChar>
			}
		}
	}
    3fde:	ff 91       	pop	r31
    3fe0:	ef 91       	pop	r30
    3fe2:	bf 91       	pop	r27
    3fe4:	af 91       	pop	r26
    3fe6:	9f 91       	pop	r25
    3fe8:	8f 91       	pop	r24
    3fea:	7f 91       	pop	r23
    3fec:	6f 91       	pop	r22
    3fee:	5f 91       	pop	r21
    3ff0:	4f 91       	pop	r20
    3ff2:	3f 91       	pop	r19
    3ff4:	2f 91       	pop	r18
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 90       	pop	r15
    3ffc:	ef 90       	pop	r14
    3ffe:	0f 90       	pop	r0
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	0f 90       	pop	r0
    4004:	1f 90       	pop	r1
    4006:	18 95       	reti

00004008 <InitUtil>:

void InitUtil()
{
	// Set up AD Converter
	// Sets prescaler to 128
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
    4008:	86 b1       	in	r24, 0x06	; 6
    400a:	87 60       	ori	r24, 0x07	; 7
    400c:	86 b9       	out	0x06, r24	; 6
	// Set to use VCC as reference
	ADMUX |= _BV(REFS0);
    400e:	3e 9a       	sbi	0x07, 6	; 7
	// Enables the ADC
	ADCSRA |= _BV(ADEN);
    4010:	37 9a       	sbi	0x06, 7	; 6
}
    4012:	08 95       	ret

00004014 <DelayTick>:

void DelayTick()
{
	if(m_override_delay == 1)
    4014:	80 91 1b 01 	lds	r24, 0x011B
    4018:	81 30       	cpi	r24, 0x01	; 1
    401a:	29 f4       	brne	.+10     	; 0x4026 <DelayTick+0x12>
	{
		m_current_delay = 0;
    401c:	10 92 7d 02 	sts	0x027D, r1
    4020:	10 92 7c 02 	sts	0x027C, r1
    4024:	08 95       	ret
	}
	else
	{
		// Count down if there is a delay started
		if(m_current_delay > 0)
    4026:	80 91 7c 02 	lds	r24, 0x027C
    402a:	90 91 7d 02 	lds	r25, 0x027D
    402e:	89 2b       	or	r24, r25
    4030:	49 f0       	breq	.+18     	; 0x4044 <DelayTick+0x30>
		{
			m_current_delay--;
    4032:	80 91 7c 02 	lds	r24, 0x027C
    4036:	90 91 7d 02 	lds	r25, 0x027D
    403a:	01 97       	sbiw	r24, 0x01	; 1
    403c:	90 93 7d 02 	sts	0x027D, r25
    4040:	80 93 7c 02 	sts	0x027C, r24
    4044:	08 95       	ret

00004046 <delay_ms>:
		}
	}
}

void delay_ms(uint16_t delay)
{
    4046:	9c 01       	movw	r18, r24
	if(m_override_delay == 0)
    4048:	80 91 1b 01 	lds	r24, 0x011B
    404c:	88 23       	and	r24, r24
    404e:	81 f4       	brne	.+32     	; 0x4070 <delay_ms+0x2a>
	{
		if(delay < UINT16_MAX)
    4050:	8f ef       	ldi	r24, 0xFF	; 255
    4052:	2f 3f       	cpi	r18, 0xFF	; 255
    4054:	38 07       	cpc	r19, r24
    4056:	31 f0       	breq	.+12     	; 0x4064 <delay_ms+0x1e>
		{
			// Adding 1 to ensure that the delay the wait time is at least "delay" ms.
			m_current_delay = delay + 1;
    4058:	2f 5f       	subi	r18, 0xFF	; 255
    405a:	3f 4f       	sbci	r19, 0xFF	; 255
    405c:	30 93 7d 02 	sts	0x027D, r19
    4060:	20 93 7c 02 	sts	0x027C, r18
		}
	
		while(m_current_delay != 0);
    4064:	80 91 7c 02 	lds	r24, 0x027C
    4068:	90 91 7d 02 	lds	r25, 0x027D
    406c:	89 2b       	or	r24, r25
    406e:	d1 f7       	brne	.-12     	; 0x4064 <delay_ms+0x1e>
    4070:	08 95       	ret

00004072 <OverrideDelay>:
	}
}

void OverrideDelay(uint8_t override_delay)
{
	m_override_delay = override_delay;
    4072:	80 93 1b 01 	sts	0x011B, r24
}
    4076:	08 95       	ret

00004078 <GetChar>:

uint8_t GetChar(const uint8_t * str_ptr, uint8_t prgMem)
{
    4078:	fc 01       	movw	r30, r24
	if(prgMem)
    407a:	66 23       	and	r22, r22
    407c:	11 f0       	breq	.+4      	; 0x4082 <GetChar+0xa>
	{
		return pgm_read_byte(str_ptr);
    407e:	84 91       	lpm	r24, Z+
    4080:	08 95       	ret
	}
	else
	{
		return *str_ptr;
    4082:	80 81       	ld	r24, Z
	}
}
    4084:	08 95       	ret

00004086 <ADC_Read>:

unsigned int ADC_Read(unsigned char portNo)
{
	unsigned int ad_value;
	// Clears the input 
	ADMUX &= ~MUX_INPUT_MASK;
    4086:	97 b1       	in	r25, 0x07	; 7
    4088:	90 7e       	andi	r25, 0xE0	; 224
    408a:	97 b9       	out	0x07, r25	; 7

	// Selects input
	ADMUX |= portNo;
    408c:	97 b1       	in	r25, 0x07	; 7
    408e:	98 2b       	or	r25, r24
    4090:	97 b9       	out	0x07, r25	; 7

	// Starts the conversion
	ADCSRA |= _BV(ADSC);
    4092:	36 9a       	sbi	0x06, 6	; 6

	// Waits until its don
	while(!(ADCSRA & ADIF));
    4094:	32 9b       	sbis	0x06, 2	; 6
    4096:	fe cf       	rjmp	.-4      	; 0x4094 <ADC_Read+0xe>

	// ADCL must be read before ADCH
	ad_value = ADCL;
    4098:	84 b1       	in	r24, 0x04	; 4
	ad_value = ADCH << 8;
    409a:	85 b1       	in	r24, 0x05	; 5

	return 0;
}
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	08 95       	ret

000040a2 <EQ_Read>:
// buffer_ptr should be an array of 14 unsigned ints.
// Values are entered with the left channel on the first 7 indices and the right on the last 7 indices
// Values are entered with the lowest frequency on index 0 and 7 respectively and going up.
// Frequencys are in ascending order: 63Hz, 160Hz, 400Hz, 1kHz, 2.5kHz, 6.25kHz and 16kHz.
void EQ_Read(unsigned int * buffer_ptr)
{
    40a2:	af 92       	push	r10
    40a4:	bf 92       	push	r11
    40a6:	cf 92       	push	r12
    40a8:	df 92       	push	r13
    40aa:	ef 92       	push	r14
    40ac:	ff 92       	push	r15
    40ae:	0f 93       	push	r16
    40b0:	1f 93       	push	r17
    40b2:	cf 93       	push	r28
    40b4:	df 93       	push	r29
	int i;

	// Resets the control port
	EQ_PORT |= EQ_RESET;
    40b6:	db 9a       	sbi	0x1b, 3	; 27
	// Inserts a couple of nops to ensure that the minimum reset time of 100ns is fulfilled
	asm volatile(" nop");
    40b8:	00 00       	nop
	asm volatile(" nop");
    40ba:	00 00       	nop
	EQ_PORT &= ~EQ_RESET;
    40bc:	db 98       	cbi	0x1b, 3	; 27
    40be:	ec 01       	movw	r28, r24
    40c0:	00 e0       	ldi	r16, 0x00	; 0
    40c2:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40c4:	2a e0       	ldi	r18, 0x0A	; 10
    40c6:	a2 2e       	mov	r10, r18
    40c8:	21 e0       	ldi	r18, 0x01	; 1
    40ca:	b2 2e       	mov	r11, r18
	for(i = 0; i < 7; i++)
	{
		// Delays to ensure that the Strobe to Strobe delay is fulfilled (and also the reset to strobe delay)
		_delay_loop_2(STROBE_TO_STROBE_DELAY);
		// Pulses the strobe
		EQ_PORT |= EQ_STROBE;
    40cc:	98 e9       	ldi	r25, 0x98	; 152
    40ce:	c9 2e       	mov	r12, r25
    40d0:	92 e0       	ldi	r25, 0x02	; 2
    40d2:	d9 2e       	mov	r13, r25
    40d4:	80 e3       	ldi	r24, 0x30	; 48
    40d6:	e8 2e       	mov	r14, r24
    40d8:	85 e0       	ldi	r24, 0x05	; 5
    40da:	f8 2e       	mov	r15, r24
    40dc:	c5 01       	movw	r24, r10
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	f1 f7       	brne	.-4      	; 0x40de <EQ_Read+0x3c>
    40e2:	da 9a       	sbi	0x1b, 2	; 27
    40e4:	c6 01       	movw	r24, r12
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <EQ_Read+0x44>
		// Delay to ensure that the minimum pulse width is fulfilled
		_delay_loop_2(STROBE_PULSE_WIDTH);
		EQ_PORT &= ~EQ_STROBE;
    40ea:	da 98       	cbi	0x1b, 2	; 27
    40ec:	c7 01       	movw	r24, r14
    40ee:	01 97       	sbiw	r24, 0x01	; 1
    40f0:	f1 f7       	brne	.-4      	; 0x40ee <EQ_Read+0x4c>
		// Delay to get the outputs to settle
		_delay_loop_2(OUTPUT_SETTLING_TIME);
		// And read the two chips.
		buffer_ptr[i] = ADC_Read(EQ_AD_LEFT);
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	0e 94 43 20 	call	0x4086	; 0x4086 <ADC_Read>
    40f8:	99 83       	std	Y+1, r25	; 0x01
    40fa:	88 83       	st	Y, r24
		buffer_ptr[(i + 7)] = ADC_Read(EQ_AD_RIGHT);
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	0e 94 43 20 	call	0x4086	; 0x4086 <ADC_Read>
    4102:	9f 87       	std	Y+15, r25	; 0x0f
    4104:	8e 87       	std	Y+14, r24	; 0x0e
	// Inserts a couple of nops to ensure that the minimum reset time of 100ns is fulfilled
	asm volatile(" nop");
	asm volatile(" nop");
	EQ_PORT &= ~EQ_RESET;

	for(i = 0; i < 7; i++)
    4106:	0f 5f       	subi	r16, 0xFF	; 255
    4108:	1f 4f       	sbci	r17, 0xFF	; 255
    410a:	22 96       	adiw	r28, 0x02	; 2
    410c:	07 30       	cpi	r16, 0x07	; 7
    410e:	11 05       	cpc	r17, r1
    4110:	29 f7       	brne	.-54     	; 0x40dc <EQ_Read+0x3a>
		_delay_loop_2(OUTPUT_SETTLING_TIME);
		// And read the two chips.
		buffer_ptr[i] = ADC_Read(EQ_AD_LEFT);
		buffer_ptr[(i + 7)] = ADC_Read(EQ_AD_RIGHT);
	}
}
    4112:	df 91       	pop	r29
    4114:	cf 91       	pop	r28
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	ff 90       	pop	r15
    411c:	ef 90       	pop	r14
    411e:	df 90       	pop	r13
    4120:	cf 90       	pop	r12
    4122:	bf 90       	pop	r11
    4124:	af 90       	pop	r10
    4126:	08 95       	ret

00004128 <DebounceKey>:
#define RELEASE_MS 50
#define BUTTON_PORT PORTD
#define BUTTON0 0x04

void DebounceKey(bool *keyChanged, bool *keyPressed)
{
    4128:	fc 01       	movw	r30, r24
    412a:	db 01       	movw	r26, r22
	static unsigned char count = PRESS_MS / CHECK_MS;
	static bool debouncedKeyPress = false;

	*keyChanged = false;
    412c:	10 82       	st	Z, r1
	*keyPressed = debouncedKeyPress;
    412e:	80 91 99 00 	lds	r24, 0x0099
    4132:	8c 93       	st	X, r24

	bool rawState = !(BUTTON_PORT & BUTTON0);
    4134:	92 b3       	in	r25, 0x12	; 18
    4136:	96 95       	lsr	r25
    4138:	96 95       	lsr	r25
    413a:	90 95       	com	r25
    413c:	91 70       	andi	r25, 0x01	; 1

	if(rawState == debouncedKeyPress)
    413e:	98 17       	cp	r25, r24
    4140:	21 f4       	brne	.+8      	; 0x414a <DebounceKey+0x22>
	{
		if(debouncedKeyPress)
    4142:	99 23       	and	r25, r25
    4144:	81 f4       	brne	.+32     	; 0x4166 <DebounceKey+0x3e>
		{
			count = RELEASE_MS / CHECK_MS;
		}
		else
		{
			count = PRESS_MS / CHECK_MS;
    4146:	84 e1       	ldi	r24, 0x14	; 20
    4148:	0f c0       	rjmp	.+30     	; 0x4168 <DebounceKey+0x40>
		}
	}
	else
	{
		count--;
    414a:	80 91 93 00 	lds	r24, 0x0093
    414e:	81 50       	subi	r24, 0x01	; 1
    4150:	80 93 93 00 	sts	0x0093, r24
		if(count == 0)
    4154:	88 23       	and	r24, r24
    4156:	71 f4       	brne	.+28     	; 0x4174 <DebounceKey+0x4c>
		{
			debouncedKeyPress = rawState;
    4158:	90 93 99 00 	sts	0x0099, r25
			*keyChanged = true;
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	80 83       	st	Z, r24
			*keyPressed = debouncedKeyPress;
    4160:	9c 93       	st	X, r25
			if(debouncedKeyPress)
    4162:	99 23       	and	r25, r25
    4164:	21 f0       	breq	.+8      	; 0x416e <DebounceKey+0x46>
			{
				count = RELEASE_MS / CHECK_MS;
    4166:	82 e3       	ldi	r24, 0x32	; 50
    4168:	80 93 93 00 	sts	0x0093, r24
    416c:	08 95       	ret
			}
			else
			{
				count = PRESS_MS / CHECK_MS;
    416e:	84 e1       	ldi	r24, 0x14	; 20
    4170:	80 93 93 00 	sts	0x0093, r24
    4174:	08 95       	ret

00004176 <__subsf3>:
    4176:	50 58       	subi	r21, 0x80	; 128

00004178 <__addsf3>:
    4178:	bb 27       	eor	r27, r27
    417a:	aa 27       	eor	r26, r26
    417c:	0e d0       	rcall	.+28     	; 0x419a <__addsf3x>
    417e:	78 c1       	rjmp	.+752    	; 0x4470 <__fp_round>
    4180:	41 d1       	rcall	.+642    	; 0x4404 <__fp_pscA>
    4182:	30 f0       	brcs	.+12     	; 0x4190 <__addsf3+0x18>
    4184:	46 d1       	rcall	.+652    	; 0x4412 <__fp_pscB>
    4186:	20 f0       	brcs	.+8      	; 0x4190 <__addsf3+0x18>
    4188:	31 f4       	brne	.+12     	; 0x4196 <__addsf3+0x1e>
    418a:	9f 3f       	cpi	r25, 0xFF	; 255
    418c:	11 f4       	brne	.+4      	; 0x4192 <__addsf3+0x1a>
    418e:	1e f4       	brtc	.+6      	; 0x4196 <__addsf3+0x1e>
    4190:	36 c1       	rjmp	.+620    	; 0x43fe <__fp_nan>
    4192:	0e f4       	brtc	.+2      	; 0x4196 <__addsf3+0x1e>
    4194:	e0 95       	com	r30
    4196:	e7 fb       	bst	r30, 7
    4198:	2c c1       	rjmp	.+600    	; 0x43f2 <__fp_inf>

0000419a <__addsf3x>:
    419a:	e9 2f       	mov	r30, r25
    419c:	8b d1       	rcall	.+790    	; 0x44b4 <__fp_split3>
    419e:	80 f3       	brcs	.-32     	; 0x4180 <__addsf3+0x8>
    41a0:	ba 17       	cp	r27, r26
    41a2:	62 07       	cpc	r22, r18
    41a4:	73 07       	cpc	r23, r19
    41a6:	84 07       	cpc	r24, r20
    41a8:	95 07       	cpc	r25, r21
    41aa:	18 f0       	brcs	.+6      	; 0x41b2 <__addsf3x+0x18>
    41ac:	71 f4       	brne	.+28     	; 0x41ca <__addsf3x+0x30>
    41ae:	9e f5       	brtc	.+102    	; 0x4216 <__addsf3x+0x7c>
    41b0:	a3 c1       	rjmp	.+838    	; 0x44f8 <__fp_zero>
    41b2:	0e f4       	brtc	.+2      	; 0x41b6 <__addsf3x+0x1c>
    41b4:	e0 95       	com	r30
    41b6:	0b 2e       	mov	r0, r27
    41b8:	ba 2f       	mov	r27, r26
    41ba:	a0 2d       	mov	r26, r0
    41bc:	0b 01       	movw	r0, r22
    41be:	b9 01       	movw	r22, r18
    41c0:	90 01       	movw	r18, r0
    41c2:	0c 01       	movw	r0, r24
    41c4:	ca 01       	movw	r24, r20
    41c6:	a0 01       	movw	r20, r0
    41c8:	11 24       	eor	r1, r1
    41ca:	ff 27       	eor	r31, r31
    41cc:	59 1b       	sub	r21, r25
    41ce:	99 f0       	breq	.+38     	; 0x41f6 <__addsf3x+0x5c>
    41d0:	59 3f       	cpi	r21, 0xF9	; 249
    41d2:	50 f4       	brcc	.+20     	; 0x41e8 <__addsf3x+0x4e>
    41d4:	50 3e       	cpi	r21, 0xE0	; 224
    41d6:	68 f1       	brcs	.+90     	; 0x4232 <__addsf3x+0x98>
    41d8:	1a 16       	cp	r1, r26
    41da:	f0 40       	sbci	r31, 0x00	; 0
    41dc:	a2 2f       	mov	r26, r18
    41de:	23 2f       	mov	r18, r19
    41e0:	34 2f       	mov	r19, r20
    41e2:	44 27       	eor	r20, r20
    41e4:	58 5f       	subi	r21, 0xF8	; 248
    41e6:	f3 cf       	rjmp	.-26     	; 0x41ce <__addsf3x+0x34>
    41e8:	46 95       	lsr	r20
    41ea:	37 95       	ror	r19
    41ec:	27 95       	ror	r18
    41ee:	a7 95       	ror	r26
    41f0:	f0 40       	sbci	r31, 0x00	; 0
    41f2:	53 95       	inc	r21
    41f4:	c9 f7       	brne	.-14     	; 0x41e8 <__addsf3x+0x4e>
    41f6:	7e f4       	brtc	.+30     	; 0x4216 <__addsf3x+0x7c>
    41f8:	1f 16       	cp	r1, r31
    41fa:	ba 0b       	sbc	r27, r26
    41fc:	62 0b       	sbc	r22, r18
    41fe:	73 0b       	sbc	r23, r19
    4200:	84 0b       	sbc	r24, r20
    4202:	ba f0       	brmi	.+46     	; 0x4232 <__addsf3x+0x98>
    4204:	91 50       	subi	r25, 0x01	; 1
    4206:	a1 f0       	breq	.+40     	; 0x4230 <__addsf3x+0x96>
    4208:	ff 0f       	add	r31, r31
    420a:	bb 1f       	adc	r27, r27
    420c:	66 1f       	adc	r22, r22
    420e:	77 1f       	adc	r23, r23
    4210:	88 1f       	adc	r24, r24
    4212:	c2 f7       	brpl	.-16     	; 0x4204 <__addsf3x+0x6a>
    4214:	0e c0       	rjmp	.+28     	; 0x4232 <__addsf3x+0x98>
    4216:	ba 0f       	add	r27, r26
    4218:	62 1f       	adc	r22, r18
    421a:	73 1f       	adc	r23, r19
    421c:	84 1f       	adc	r24, r20
    421e:	48 f4       	brcc	.+18     	; 0x4232 <__addsf3x+0x98>
    4220:	87 95       	ror	r24
    4222:	77 95       	ror	r23
    4224:	67 95       	ror	r22
    4226:	b7 95       	ror	r27
    4228:	f7 95       	ror	r31
    422a:	9e 3f       	cpi	r25, 0xFE	; 254
    422c:	08 f0       	brcs	.+2      	; 0x4230 <__addsf3x+0x96>
    422e:	b3 cf       	rjmp	.-154    	; 0x4196 <__addsf3+0x1e>
    4230:	93 95       	inc	r25
    4232:	88 0f       	add	r24, r24
    4234:	08 f0       	brcs	.+2      	; 0x4238 <__addsf3x+0x9e>
    4236:	99 27       	eor	r25, r25
    4238:	ee 0f       	add	r30, r30
    423a:	97 95       	ror	r25
    423c:	87 95       	ror	r24
    423e:	08 95       	ret

00004240 <cos>:
    4240:	f0 d0       	rcall	.+480    	; 0x4422 <__fp_rempio2>
    4242:	e3 95       	inc	r30
    4244:	26 c1       	rjmp	.+588    	; 0x4492 <__fp_sinus>

00004246 <__divsf3>:
    4246:	0c d0       	rcall	.+24     	; 0x4260 <__divsf3x>
    4248:	13 c1       	rjmp	.+550    	; 0x4470 <__fp_round>
    424a:	e3 d0       	rcall	.+454    	; 0x4412 <__fp_pscB>
    424c:	40 f0       	brcs	.+16     	; 0x425e <__divsf3+0x18>
    424e:	da d0       	rcall	.+436    	; 0x4404 <__fp_pscA>
    4250:	30 f0       	brcs	.+12     	; 0x425e <__divsf3+0x18>
    4252:	21 f4       	brne	.+8      	; 0x425c <__divsf3+0x16>
    4254:	5f 3f       	cpi	r21, 0xFF	; 255
    4256:	19 f0       	breq	.+6      	; 0x425e <__divsf3+0x18>
    4258:	cc c0       	rjmp	.+408    	; 0x43f2 <__fp_inf>
    425a:	51 11       	cpse	r21, r1
    425c:	4e c1       	rjmp	.+668    	; 0x44fa <__fp_szero>
    425e:	cf c0       	rjmp	.+414    	; 0x43fe <__fp_nan>

00004260 <__divsf3x>:
    4260:	29 d1       	rcall	.+594    	; 0x44b4 <__fp_split3>
    4262:	98 f3       	brcs	.-26     	; 0x424a <__divsf3+0x4>

00004264 <__divsf3_pse>:
    4264:	99 23       	and	r25, r25
    4266:	c9 f3       	breq	.-14     	; 0x425a <__divsf3+0x14>
    4268:	55 23       	and	r21, r21
    426a:	b1 f3       	breq	.-20     	; 0x4258 <__divsf3+0x12>
    426c:	95 1b       	sub	r25, r21
    426e:	55 0b       	sbc	r21, r21
    4270:	bb 27       	eor	r27, r27
    4272:	aa 27       	eor	r26, r26
    4274:	62 17       	cp	r22, r18
    4276:	73 07       	cpc	r23, r19
    4278:	84 07       	cpc	r24, r20
    427a:	38 f0       	brcs	.+14     	; 0x428a <__divsf3_pse+0x26>
    427c:	9f 5f       	subi	r25, 0xFF	; 255
    427e:	5f 4f       	sbci	r21, 0xFF	; 255
    4280:	22 0f       	add	r18, r18
    4282:	33 1f       	adc	r19, r19
    4284:	44 1f       	adc	r20, r20
    4286:	aa 1f       	adc	r26, r26
    4288:	a9 f3       	breq	.-22     	; 0x4274 <__divsf3_pse+0x10>
    428a:	33 d0       	rcall	.+102    	; 0x42f2 <__divsf3_pse+0x8e>
    428c:	0e 2e       	mov	r0, r30
    428e:	3a f0       	brmi	.+14     	; 0x429e <__divsf3_pse+0x3a>
    4290:	e0 e8       	ldi	r30, 0x80	; 128
    4292:	30 d0       	rcall	.+96     	; 0x42f4 <__divsf3_pse+0x90>
    4294:	91 50       	subi	r25, 0x01	; 1
    4296:	50 40       	sbci	r21, 0x00	; 0
    4298:	e6 95       	lsr	r30
    429a:	00 1c       	adc	r0, r0
    429c:	ca f7       	brpl	.-14     	; 0x4290 <__divsf3_pse+0x2c>
    429e:	29 d0       	rcall	.+82     	; 0x42f2 <__divsf3_pse+0x8e>
    42a0:	fe 2f       	mov	r31, r30
    42a2:	27 d0       	rcall	.+78     	; 0x42f2 <__divsf3_pse+0x8e>
    42a4:	66 0f       	add	r22, r22
    42a6:	77 1f       	adc	r23, r23
    42a8:	88 1f       	adc	r24, r24
    42aa:	bb 1f       	adc	r27, r27
    42ac:	26 17       	cp	r18, r22
    42ae:	37 07       	cpc	r19, r23
    42b0:	48 07       	cpc	r20, r24
    42b2:	ab 07       	cpc	r26, r27
    42b4:	b0 e8       	ldi	r27, 0x80	; 128
    42b6:	09 f0       	breq	.+2      	; 0x42ba <__divsf3_pse+0x56>
    42b8:	bb 0b       	sbc	r27, r27
    42ba:	80 2d       	mov	r24, r0
    42bc:	bf 01       	movw	r22, r30
    42be:	ff 27       	eor	r31, r31
    42c0:	93 58       	subi	r25, 0x83	; 131
    42c2:	5f 4f       	sbci	r21, 0xFF	; 255
    42c4:	2a f0       	brmi	.+10     	; 0x42d0 <__divsf3_pse+0x6c>
    42c6:	9e 3f       	cpi	r25, 0xFE	; 254
    42c8:	51 05       	cpc	r21, r1
    42ca:	68 f0       	brcs	.+26     	; 0x42e6 <__divsf3_pse+0x82>
    42cc:	92 c0       	rjmp	.+292    	; 0x43f2 <__fp_inf>
    42ce:	15 c1       	rjmp	.+554    	; 0x44fa <__fp_szero>
    42d0:	5f 3f       	cpi	r21, 0xFF	; 255
    42d2:	ec f3       	brlt	.-6      	; 0x42ce <__divsf3_pse+0x6a>
    42d4:	98 3e       	cpi	r25, 0xE8	; 232
    42d6:	dc f3       	brlt	.-10     	; 0x42ce <__divsf3_pse+0x6a>
    42d8:	86 95       	lsr	r24
    42da:	77 95       	ror	r23
    42dc:	67 95       	ror	r22
    42de:	b7 95       	ror	r27
    42e0:	f7 95       	ror	r31
    42e2:	9f 5f       	subi	r25, 0xFF	; 255
    42e4:	c9 f7       	brne	.-14     	; 0x42d8 <__divsf3_pse+0x74>
    42e6:	88 0f       	add	r24, r24
    42e8:	91 1d       	adc	r25, r1
    42ea:	96 95       	lsr	r25
    42ec:	87 95       	ror	r24
    42ee:	97 f9       	bld	r25, 7
    42f0:	08 95       	ret
    42f2:	e1 e0       	ldi	r30, 0x01	; 1
    42f4:	66 0f       	add	r22, r22
    42f6:	77 1f       	adc	r23, r23
    42f8:	88 1f       	adc	r24, r24
    42fa:	bb 1f       	adc	r27, r27
    42fc:	62 17       	cp	r22, r18
    42fe:	73 07       	cpc	r23, r19
    4300:	84 07       	cpc	r24, r20
    4302:	ba 07       	cpc	r27, r26
    4304:	20 f0       	brcs	.+8      	; 0x430e <__divsf3_pse+0xaa>
    4306:	62 1b       	sub	r22, r18
    4308:	73 0b       	sbc	r23, r19
    430a:	84 0b       	sbc	r24, r20
    430c:	ba 0b       	sbc	r27, r26
    430e:	ee 1f       	adc	r30, r30
    4310:	88 f7       	brcc	.-30     	; 0x42f4 <__divsf3_pse+0x90>
    4312:	e0 95       	com	r30
    4314:	08 95       	ret

00004316 <__fixsfsi>:
    4316:	04 d0       	rcall	.+8      	; 0x4320 <__fixunssfsi>
    4318:	68 94       	set
    431a:	b1 11       	cpse	r27, r1
    431c:	ee c0       	rjmp	.+476    	; 0x44fa <__fp_szero>
    431e:	08 95       	ret

00004320 <__fixunssfsi>:
    4320:	d1 d0       	rcall	.+418    	; 0x44c4 <__fp_splitA>
    4322:	88 f0       	brcs	.+34     	; 0x4346 <__fixunssfsi+0x26>
    4324:	9f 57       	subi	r25, 0x7F	; 127
    4326:	90 f0       	brcs	.+36     	; 0x434c <__fixunssfsi+0x2c>
    4328:	b9 2f       	mov	r27, r25
    432a:	99 27       	eor	r25, r25
    432c:	b7 51       	subi	r27, 0x17	; 23
    432e:	a0 f0       	brcs	.+40     	; 0x4358 <__fixunssfsi+0x38>
    4330:	d1 f0       	breq	.+52     	; 0x4366 <__fixunssfsi+0x46>
    4332:	66 0f       	add	r22, r22
    4334:	77 1f       	adc	r23, r23
    4336:	88 1f       	adc	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	1a f0       	brmi	.+6      	; 0x4342 <__fixunssfsi+0x22>
    433c:	ba 95       	dec	r27
    433e:	c9 f7       	brne	.-14     	; 0x4332 <__fixunssfsi+0x12>
    4340:	12 c0       	rjmp	.+36     	; 0x4366 <__fixunssfsi+0x46>
    4342:	b1 30       	cpi	r27, 0x01	; 1
    4344:	81 f0       	breq	.+32     	; 0x4366 <__fixunssfsi+0x46>
    4346:	d8 d0       	rcall	.+432    	; 0x44f8 <__fp_zero>
    4348:	b1 e0       	ldi	r27, 0x01	; 1
    434a:	08 95       	ret
    434c:	d5 c0       	rjmp	.+426    	; 0x44f8 <__fp_zero>
    434e:	67 2f       	mov	r22, r23
    4350:	78 2f       	mov	r23, r24
    4352:	88 27       	eor	r24, r24
    4354:	b8 5f       	subi	r27, 0xF8	; 248
    4356:	39 f0       	breq	.+14     	; 0x4366 <__fixunssfsi+0x46>
    4358:	b9 3f       	cpi	r27, 0xF9	; 249
    435a:	cc f3       	brlt	.-14     	; 0x434e <__fixunssfsi+0x2e>
    435c:	86 95       	lsr	r24
    435e:	77 95       	ror	r23
    4360:	67 95       	ror	r22
    4362:	b3 95       	inc	r27
    4364:	d9 f7       	brne	.-10     	; 0x435c <__fixunssfsi+0x3c>
    4366:	3e f4       	brtc	.+14     	; 0x4376 <__fixunssfsi+0x56>
    4368:	90 95       	com	r25
    436a:	80 95       	com	r24
    436c:	70 95       	com	r23
    436e:	61 95       	neg	r22
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
    4372:	8f 4f       	sbci	r24, 0xFF	; 255
    4374:	9f 4f       	sbci	r25, 0xFF	; 255
    4376:	08 95       	ret

00004378 <__floatunsisf>:
    4378:	e8 94       	clt
    437a:	09 c0       	rjmp	.+18     	; 0x438e <__floatsisf+0x12>

0000437c <__floatsisf>:
    437c:	97 fb       	bst	r25, 7
    437e:	3e f4       	brtc	.+14     	; 0x438e <__floatsisf+0x12>
    4380:	90 95       	com	r25
    4382:	80 95       	com	r24
    4384:	70 95       	com	r23
    4386:	61 95       	neg	r22
    4388:	7f 4f       	sbci	r23, 0xFF	; 255
    438a:	8f 4f       	sbci	r24, 0xFF	; 255
    438c:	9f 4f       	sbci	r25, 0xFF	; 255
    438e:	99 23       	and	r25, r25
    4390:	a9 f0       	breq	.+42     	; 0x43bc <__floatsisf+0x40>
    4392:	f9 2f       	mov	r31, r25
    4394:	96 e9       	ldi	r25, 0x96	; 150
    4396:	bb 27       	eor	r27, r27
    4398:	93 95       	inc	r25
    439a:	f6 95       	lsr	r31
    439c:	87 95       	ror	r24
    439e:	77 95       	ror	r23
    43a0:	67 95       	ror	r22
    43a2:	b7 95       	ror	r27
    43a4:	f1 11       	cpse	r31, r1
    43a6:	f8 cf       	rjmp	.-16     	; 0x4398 <__floatsisf+0x1c>
    43a8:	fa f4       	brpl	.+62     	; 0x43e8 <__floatsisf+0x6c>
    43aa:	bb 0f       	add	r27, r27
    43ac:	11 f4       	brne	.+4      	; 0x43b2 <__floatsisf+0x36>
    43ae:	60 ff       	sbrs	r22, 0
    43b0:	1b c0       	rjmp	.+54     	; 0x43e8 <__floatsisf+0x6c>
    43b2:	6f 5f       	subi	r22, 0xFF	; 255
    43b4:	7f 4f       	sbci	r23, 0xFF	; 255
    43b6:	8f 4f       	sbci	r24, 0xFF	; 255
    43b8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ba:	16 c0       	rjmp	.+44     	; 0x43e8 <__floatsisf+0x6c>
    43bc:	88 23       	and	r24, r24
    43be:	11 f0       	breq	.+4      	; 0x43c4 <__floatsisf+0x48>
    43c0:	96 e9       	ldi	r25, 0x96	; 150
    43c2:	11 c0       	rjmp	.+34     	; 0x43e6 <__floatsisf+0x6a>
    43c4:	77 23       	and	r23, r23
    43c6:	21 f0       	breq	.+8      	; 0x43d0 <__floatsisf+0x54>
    43c8:	9e e8       	ldi	r25, 0x8E	; 142
    43ca:	87 2f       	mov	r24, r23
    43cc:	76 2f       	mov	r23, r22
    43ce:	05 c0       	rjmp	.+10     	; 0x43da <__floatsisf+0x5e>
    43d0:	66 23       	and	r22, r22
    43d2:	71 f0       	breq	.+28     	; 0x43f0 <__floatsisf+0x74>
    43d4:	96 e8       	ldi	r25, 0x86	; 134
    43d6:	86 2f       	mov	r24, r22
    43d8:	70 e0       	ldi	r23, 0x00	; 0
    43da:	60 e0       	ldi	r22, 0x00	; 0
    43dc:	2a f0       	brmi	.+10     	; 0x43e8 <__floatsisf+0x6c>
    43de:	9a 95       	dec	r25
    43e0:	66 0f       	add	r22, r22
    43e2:	77 1f       	adc	r23, r23
    43e4:	88 1f       	adc	r24, r24
    43e6:	da f7       	brpl	.-10     	; 0x43de <__floatsisf+0x62>
    43e8:	88 0f       	add	r24, r24
    43ea:	96 95       	lsr	r25
    43ec:	87 95       	ror	r24
    43ee:	97 f9       	bld	r25, 7
    43f0:	08 95       	ret

000043f2 <__fp_inf>:
    43f2:	97 f9       	bld	r25, 7
    43f4:	9f 67       	ori	r25, 0x7F	; 127
    43f6:	80 e8       	ldi	r24, 0x80	; 128
    43f8:	70 e0       	ldi	r23, 0x00	; 0
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	08 95       	ret

000043fe <__fp_nan>:
    43fe:	9f ef       	ldi	r25, 0xFF	; 255
    4400:	80 ec       	ldi	r24, 0xC0	; 192
    4402:	08 95       	ret

00004404 <__fp_pscA>:
    4404:	00 24       	eor	r0, r0
    4406:	0a 94       	dec	r0
    4408:	16 16       	cp	r1, r22
    440a:	17 06       	cpc	r1, r23
    440c:	18 06       	cpc	r1, r24
    440e:	09 06       	cpc	r0, r25
    4410:	08 95       	ret

00004412 <__fp_pscB>:
    4412:	00 24       	eor	r0, r0
    4414:	0a 94       	dec	r0
    4416:	12 16       	cp	r1, r18
    4418:	13 06       	cpc	r1, r19
    441a:	14 06       	cpc	r1, r20
    441c:	05 06       	cpc	r0, r21
    441e:	08 95       	ret
    4420:	ee cf       	rjmp	.-36     	; 0x43fe <__fp_nan>

00004422 <__fp_rempio2>:
    4422:	50 d0       	rcall	.+160    	; 0x44c4 <__fp_splitA>
    4424:	e8 f3       	brcs	.-6      	; 0x4420 <__fp_pscB+0xe>
    4426:	e8 94       	clt
    4428:	e0 e0       	ldi	r30, 0x00	; 0
    442a:	bb 27       	eor	r27, r27
    442c:	9f 57       	subi	r25, 0x7F	; 127
    442e:	f0 f0       	brcs	.+60     	; 0x446c <__fp_rempio2+0x4a>
    4430:	2a ed       	ldi	r18, 0xDA	; 218
    4432:	3f e0       	ldi	r19, 0x0F	; 15
    4434:	49 ec       	ldi	r20, 0xC9	; 201
    4436:	06 c0       	rjmp	.+12     	; 0x4444 <__fp_rempio2+0x22>
    4438:	ee 0f       	add	r30, r30
    443a:	bb 0f       	add	r27, r27
    443c:	66 1f       	adc	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	88 1f       	adc	r24, r24
    4442:	28 f0       	brcs	.+10     	; 0x444e <__fp_rempio2+0x2c>
    4444:	b2 3a       	cpi	r27, 0xA2	; 162
    4446:	62 07       	cpc	r22, r18
    4448:	73 07       	cpc	r23, r19
    444a:	84 07       	cpc	r24, r20
    444c:	28 f0       	brcs	.+10     	; 0x4458 <__fp_rempio2+0x36>
    444e:	b2 5a       	subi	r27, 0xA2	; 162
    4450:	62 0b       	sbc	r22, r18
    4452:	73 0b       	sbc	r23, r19
    4454:	84 0b       	sbc	r24, r20
    4456:	e3 95       	inc	r30
    4458:	9a 95       	dec	r25
    445a:	72 f7       	brpl	.-36     	; 0x4438 <__fp_rempio2+0x16>
    445c:	80 38       	cpi	r24, 0x80	; 128
    445e:	30 f4       	brcc	.+12     	; 0x446c <__fp_rempio2+0x4a>
    4460:	9a 95       	dec	r25
    4462:	bb 0f       	add	r27, r27
    4464:	66 1f       	adc	r22, r22
    4466:	77 1f       	adc	r23, r23
    4468:	88 1f       	adc	r24, r24
    446a:	d2 f7       	brpl	.-12     	; 0x4460 <__fp_rempio2+0x3e>
    446c:	90 48       	sbci	r25, 0x80	; 128
    446e:	b6 c0       	rjmp	.+364    	; 0x45dc <__fp_mpack_finite>

00004470 <__fp_round>:
    4470:	09 2e       	mov	r0, r25
    4472:	03 94       	inc	r0
    4474:	00 0c       	add	r0, r0
    4476:	11 f4       	brne	.+4      	; 0x447c <__fp_round+0xc>
    4478:	88 23       	and	r24, r24
    447a:	52 f0       	brmi	.+20     	; 0x4490 <__fp_round+0x20>
    447c:	bb 0f       	add	r27, r27
    447e:	40 f4       	brcc	.+16     	; 0x4490 <__fp_round+0x20>
    4480:	bf 2b       	or	r27, r31
    4482:	11 f4       	brne	.+4      	; 0x4488 <__fp_round+0x18>
    4484:	60 ff       	sbrs	r22, 0
    4486:	04 c0       	rjmp	.+8      	; 0x4490 <__fp_round+0x20>
    4488:	6f 5f       	subi	r22, 0xFF	; 255
    448a:	7f 4f       	sbci	r23, 0xFF	; 255
    448c:	8f 4f       	sbci	r24, 0xFF	; 255
    448e:	9f 4f       	sbci	r25, 0xFF	; 255
    4490:	08 95       	ret

00004492 <__fp_sinus>:
    4492:	ef 93       	push	r30
    4494:	e0 ff       	sbrs	r30, 0
    4496:	06 c0       	rjmp	.+12     	; 0x44a4 <__fp_sinus+0x12>
    4498:	a2 ea       	ldi	r26, 0xA2	; 162
    449a:	2a ed       	ldi	r18, 0xDA	; 218
    449c:	3f e0       	ldi	r19, 0x0F	; 15
    449e:	49 ec       	ldi	r20, 0xC9	; 201
    44a0:	5f eb       	ldi	r21, 0xBF	; 191
    44a2:	7b de       	rcall	.-778    	; 0x419a <__addsf3x>
    44a4:	e5 df       	rcall	.-54     	; 0x4470 <__fp_round>
    44a6:	0f 90       	pop	r0
    44a8:	03 94       	inc	r0
    44aa:	01 fc       	sbrc	r0, 1
    44ac:	90 58       	subi	r25, 0x80	; 128
    44ae:	ea e8       	ldi	r30, 0x8A	; 138
    44b0:	f0 e0       	ldi	r31, 0x00	; 0
    44b2:	a0 c0       	rjmp	.+320    	; 0x45f4 <__fp_powsodd>

000044b4 <__fp_split3>:
    44b4:	57 fd       	sbrc	r21, 7
    44b6:	90 58       	subi	r25, 0x80	; 128
    44b8:	44 0f       	add	r20, r20
    44ba:	55 1f       	adc	r21, r21
    44bc:	59 f0       	breq	.+22     	; 0x44d4 <__fp_splitA+0x10>
    44be:	5f 3f       	cpi	r21, 0xFF	; 255
    44c0:	71 f0       	breq	.+28     	; 0x44de <__fp_splitA+0x1a>
    44c2:	47 95       	ror	r20

000044c4 <__fp_splitA>:
    44c4:	88 0f       	add	r24, r24
    44c6:	97 fb       	bst	r25, 7
    44c8:	99 1f       	adc	r25, r25
    44ca:	61 f0       	breq	.+24     	; 0x44e4 <__fp_splitA+0x20>
    44cc:	9f 3f       	cpi	r25, 0xFF	; 255
    44ce:	79 f0       	breq	.+30     	; 0x44ee <__fp_splitA+0x2a>
    44d0:	87 95       	ror	r24
    44d2:	08 95       	ret
    44d4:	12 16       	cp	r1, r18
    44d6:	13 06       	cpc	r1, r19
    44d8:	14 06       	cpc	r1, r20
    44da:	55 1f       	adc	r21, r21
    44dc:	f2 cf       	rjmp	.-28     	; 0x44c2 <__fp_split3+0xe>
    44de:	46 95       	lsr	r20
    44e0:	f1 df       	rcall	.-30     	; 0x44c4 <__fp_splitA>
    44e2:	08 c0       	rjmp	.+16     	; 0x44f4 <__fp_splitA+0x30>
    44e4:	16 16       	cp	r1, r22
    44e6:	17 06       	cpc	r1, r23
    44e8:	18 06       	cpc	r1, r24
    44ea:	99 1f       	adc	r25, r25
    44ec:	f1 cf       	rjmp	.-30     	; 0x44d0 <__fp_splitA+0xc>
    44ee:	86 95       	lsr	r24
    44f0:	71 05       	cpc	r23, r1
    44f2:	61 05       	cpc	r22, r1
    44f4:	08 94       	sec
    44f6:	08 95       	ret

000044f8 <__fp_zero>:
    44f8:	e8 94       	clt

000044fa <__fp_szero>:
    44fa:	bb 27       	eor	r27, r27
    44fc:	66 27       	eor	r22, r22
    44fe:	77 27       	eor	r23, r23
    4500:	cb 01       	movw	r24, r22
    4502:	97 f9       	bld	r25, 7
    4504:	08 95       	ret

00004506 <__mulsf3>:
    4506:	0b d0       	rcall	.+22     	; 0x451e <__mulsf3x>
    4508:	b3 cf       	rjmp	.-154    	; 0x4470 <__fp_round>
    450a:	7c df       	rcall	.-264    	; 0x4404 <__fp_pscA>
    450c:	28 f0       	brcs	.+10     	; 0x4518 <__mulsf3+0x12>
    450e:	81 df       	rcall	.-254    	; 0x4412 <__fp_pscB>
    4510:	18 f0       	brcs	.+6      	; 0x4518 <__mulsf3+0x12>
    4512:	95 23       	and	r25, r21
    4514:	09 f0       	breq	.+2      	; 0x4518 <__mulsf3+0x12>
    4516:	6d cf       	rjmp	.-294    	; 0x43f2 <__fp_inf>
    4518:	72 cf       	rjmp	.-284    	; 0x43fe <__fp_nan>
    451a:	11 24       	eor	r1, r1
    451c:	ee cf       	rjmp	.-36     	; 0x44fa <__fp_szero>

0000451e <__mulsf3x>:
    451e:	ca df       	rcall	.-108    	; 0x44b4 <__fp_split3>
    4520:	a0 f3       	brcs	.-24     	; 0x450a <__mulsf3+0x4>

00004522 <__mulsf3_pse>:
    4522:	95 9f       	mul	r25, r21
    4524:	d1 f3       	breq	.-12     	; 0x451a <__mulsf3+0x14>
    4526:	95 0f       	add	r25, r21
    4528:	50 e0       	ldi	r21, 0x00	; 0
    452a:	55 1f       	adc	r21, r21
    452c:	62 9f       	mul	r22, r18
    452e:	f0 01       	movw	r30, r0
    4530:	72 9f       	mul	r23, r18
    4532:	bb 27       	eor	r27, r27
    4534:	f0 0d       	add	r31, r0
    4536:	b1 1d       	adc	r27, r1
    4538:	63 9f       	mul	r22, r19
    453a:	aa 27       	eor	r26, r26
    453c:	f0 0d       	add	r31, r0
    453e:	b1 1d       	adc	r27, r1
    4540:	aa 1f       	adc	r26, r26
    4542:	64 9f       	mul	r22, r20
    4544:	66 27       	eor	r22, r22
    4546:	b0 0d       	add	r27, r0
    4548:	a1 1d       	adc	r26, r1
    454a:	66 1f       	adc	r22, r22
    454c:	82 9f       	mul	r24, r18
    454e:	22 27       	eor	r18, r18
    4550:	b0 0d       	add	r27, r0
    4552:	a1 1d       	adc	r26, r1
    4554:	62 1f       	adc	r22, r18
    4556:	73 9f       	mul	r23, r19
    4558:	b0 0d       	add	r27, r0
    455a:	a1 1d       	adc	r26, r1
    455c:	62 1f       	adc	r22, r18
    455e:	83 9f       	mul	r24, r19
    4560:	a0 0d       	add	r26, r0
    4562:	61 1d       	adc	r22, r1
    4564:	22 1f       	adc	r18, r18
    4566:	74 9f       	mul	r23, r20
    4568:	33 27       	eor	r19, r19
    456a:	a0 0d       	add	r26, r0
    456c:	61 1d       	adc	r22, r1
    456e:	23 1f       	adc	r18, r19
    4570:	84 9f       	mul	r24, r20
    4572:	60 0d       	add	r22, r0
    4574:	21 1d       	adc	r18, r1
    4576:	82 2f       	mov	r24, r18
    4578:	76 2f       	mov	r23, r22
    457a:	6a 2f       	mov	r22, r26
    457c:	11 24       	eor	r1, r1
    457e:	9f 57       	subi	r25, 0x7F	; 127
    4580:	50 40       	sbci	r21, 0x00	; 0
    4582:	8a f0       	brmi	.+34     	; 0x45a6 <__mulsf3_pse+0x84>
    4584:	e1 f0       	breq	.+56     	; 0x45be <__mulsf3_pse+0x9c>
    4586:	88 23       	and	r24, r24
    4588:	4a f0       	brmi	.+18     	; 0x459c <__mulsf3_pse+0x7a>
    458a:	ee 0f       	add	r30, r30
    458c:	ff 1f       	adc	r31, r31
    458e:	bb 1f       	adc	r27, r27
    4590:	66 1f       	adc	r22, r22
    4592:	77 1f       	adc	r23, r23
    4594:	88 1f       	adc	r24, r24
    4596:	91 50       	subi	r25, 0x01	; 1
    4598:	50 40       	sbci	r21, 0x00	; 0
    459a:	a9 f7       	brne	.-22     	; 0x4586 <__mulsf3_pse+0x64>
    459c:	9e 3f       	cpi	r25, 0xFE	; 254
    459e:	51 05       	cpc	r21, r1
    45a0:	70 f0       	brcs	.+28     	; 0x45be <__mulsf3_pse+0x9c>
    45a2:	27 cf       	rjmp	.-434    	; 0x43f2 <__fp_inf>
    45a4:	aa cf       	rjmp	.-172    	; 0x44fa <__fp_szero>
    45a6:	5f 3f       	cpi	r21, 0xFF	; 255
    45a8:	ec f3       	brlt	.-6      	; 0x45a4 <__mulsf3_pse+0x82>
    45aa:	98 3e       	cpi	r25, 0xE8	; 232
    45ac:	dc f3       	brlt	.-10     	; 0x45a4 <__mulsf3_pse+0x82>
    45ae:	86 95       	lsr	r24
    45b0:	77 95       	ror	r23
    45b2:	67 95       	ror	r22
    45b4:	b7 95       	ror	r27
    45b6:	f7 95       	ror	r31
    45b8:	e7 95       	ror	r30
    45ba:	9f 5f       	subi	r25, 0xFF	; 255
    45bc:	c1 f7       	brne	.-16     	; 0x45ae <__mulsf3_pse+0x8c>
    45be:	fe 2b       	or	r31, r30
    45c0:	88 0f       	add	r24, r24
    45c2:	91 1d       	adc	r25, r1
    45c4:	96 95       	lsr	r25
    45c6:	87 95       	ror	r24
    45c8:	97 f9       	bld	r25, 7
    45ca:	08 95       	ret

000045cc <sin>:
    45cc:	9f 93       	push	r25
    45ce:	29 df       	rcall	.-430    	; 0x4422 <__fp_rempio2>
    45d0:	0f 90       	pop	r0
    45d2:	07 fc       	sbrc	r0, 7
    45d4:	ee 5f       	subi	r30, 0xFE	; 254
    45d6:	5d cf       	rjmp	.-326    	; 0x4492 <__fp_sinus>

000045d8 <__fp_mpack>:
    45d8:	9f 3f       	cpi	r25, 0xFF	; 255
    45da:	31 f0       	breq	.+12     	; 0x45e8 <__fp_mpack_finite+0xc>

000045dc <__fp_mpack_finite>:
    45dc:	91 50       	subi	r25, 0x01	; 1
    45de:	20 f4       	brcc	.+8      	; 0x45e8 <__fp_mpack_finite+0xc>
    45e0:	87 95       	ror	r24
    45e2:	77 95       	ror	r23
    45e4:	67 95       	ror	r22
    45e6:	b7 95       	ror	r27
    45e8:	88 0f       	add	r24, r24
    45ea:	91 1d       	adc	r25, r1
    45ec:	96 95       	lsr	r25
    45ee:	87 95       	ror	r24
    45f0:	97 f9       	bld	r25, 7
    45f2:	08 95       	ret

000045f4 <__fp_powsodd>:
    45f4:	9f 93       	push	r25
    45f6:	8f 93       	push	r24
    45f8:	7f 93       	push	r23
    45fa:	6f 93       	push	r22
    45fc:	ff 93       	push	r31
    45fe:	ef 93       	push	r30
    4600:	9b 01       	movw	r18, r22
    4602:	ac 01       	movw	r20, r24
    4604:	80 df       	rcall	.-256    	; 0x4506 <__mulsf3>
    4606:	ef 91       	pop	r30
    4608:	ff 91       	pop	r31
    460a:	05 d0       	rcall	.+10     	; 0x4616 <__fp_powser>
    460c:	2f 91       	pop	r18
    460e:	3f 91       	pop	r19
    4610:	4f 91       	pop	r20
    4612:	5f 91       	pop	r21
    4614:	78 cf       	rjmp	.-272    	; 0x4506 <__mulsf3>

00004616 <__fp_powser>:
    4616:	df 93       	push	r29
    4618:	cf 93       	push	r28
    461a:	1f 93       	push	r17
    461c:	0f 93       	push	r16
    461e:	ff 92       	push	r15
    4620:	ef 92       	push	r14
    4622:	df 92       	push	r13
    4624:	7b 01       	movw	r14, r22
    4626:	8c 01       	movw	r16, r24
    4628:	68 94       	set
    462a:	05 c0       	rjmp	.+10     	; 0x4636 <__fp_powser+0x20>
    462c:	da 2e       	mov	r13, r26
    462e:	ef 01       	movw	r28, r30
    4630:	76 df       	rcall	.-276    	; 0x451e <__mulsf3x>
    4632:	fe 01       	movw	r30, r28
    4634:	e8 94       	clt
    4636:	a5 91       	lpm	r26, Z+
    4638:	25 91       	lpm	r18, Z+
    463a:	35 91       	lpm	r19, Z+
    463c:	45 91       	lpm	r20, Z+
    463e:	55 91       	lpm	r21, Z+
    4640:	ae f3       	brts	.-22     	; 0x462c <__fp_powser+0x16>
    4642:	ef 01       	movw	r28, r30
    4644:	aa dd       	rcall	.-1196   	; 0x419a <__addsf3x>
    4646:	fe 01       	movw	r30, r28
    4648:	97 01       	movw	r18, r14
    464a:	a8 01       	movw	r20, r16
    464c:	da 94       	dec	r13
    464e:	79 f7       	brne	.-34     	; 0x462e <__fp_powser+0x18>
    4650:	df 90       	pop	r13
    4652:	ef 90       	pop	r14
    4654:	ff 90       	pop	r15
    4656:	0f 91       	pop	r16
    4658:	1f 91       	pop	r17
    465a:	cf 91       	pop	r28
    465c:	df 91       	pop	r29
    465e:	08 95       	ret

00004660 <__divmodhi4>:
    4660:	97 fb       	bst	r25, 7
    4662:	09 2e       	mov	r0, r25
    4664:	07 26       	eor	r0, r23
    4666:	0a d0       	rcall	.+20     	; 0x467c <__divmodhi4_neg1>
    4668:	77 fd       	sbrc	r23, 7
    466a:	04 d0       	rcall	.+8      	; 0x4674 <__divmodhi4_neg2>
    466c:	2e d0       	rcall	.+92     	; 0x46ca <__udivmodhi4>
    466e:	06 d0       	rcall	.+12     	; 0x467c <__divmodhi4_neg1>
    4670:	00 20       	and	r0, r0
    4672:	1a f4       	brpl	.+6      	; 0x467a <__divmodhi4_exit>

00004674 <__divmodhi4_neg2>:
    4674:	70 95       	com	r23
    4676:	61 95       	neg	r22
    4678:	7f 4f       	sbci	r23, 0xFF	; 255

0000467a <__divmodhi4_exit>:
    467a:	08 95       	ret

0000467c <__divmodhi4_neg1>:
    467c:	f6 f7       	brtc	.-4      	; 0x467a <__divmodhi4_exit>
    467e:	90 95       	com	r25
    4680:	81 95       	neg	r24
    4682:	9f 4f       	sbci	r25, 0xFF	; 255
    4684:	08 95       	ret

00004686 <__udivmodsi4>:
    4686:	a1 e2       	ldi	r26, 0x21	; 33
    4688:	1a 2e       	mov	r1, r26
    468a:	aa 1b       	sub	r26, r26
    468c:	bb 1b       	sub	r27, r27
    468e:	fd 01       	movw	r30, r26
    4690:	0d c0       	rjmp	.+26     	; 0x46ac <__udivmodsi4_ep>

00004692 <__udivmodsi4_loop>:
    4692:	aa 1f       	adc	r26, r26
    4694:	bb 1f       	adc	r27, r27
    4696:	ee 1f       	adc	r30, r30
    4698:	ff 1f       	adc	r31, r31
    469a:	a2 17       	cp	r26, r18
    469c:	b3 07       	cpc	r27, r19
    469e:	e4 07       	cpc	r30, r20
    46a0:	f5 07       	cpc	r31, r21
    46a2:	20 f0       	brcs	.+8      	; 0x46ac <__udivmodsi4_ep>
    46a4:	a2 1b       	sub	r26, r18
    46a6:	b3 0b       	sbc	r27, r19
    46a8:	e4 0b       	sbc	r30, r20
    46aa:	f5 0b       	sbc	r31, r21

000046ac <__udivmodsi4_ep>:
    46ac:	66 1f       	adc	r22, r22
    46ae:	77 1f       	adc	r23, r23
    46b0:	88 1f       	adc	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	1a 94       	dec	r1
    46b6:	69 f7       	brne	.-38     	; 0x4692 <__udivmodsi4_loop>
    46b8:	60 95       	com	r22
    46ba:	70 95       	com	r23
    46bc:	80 95       	com	r24
    46be:	90 95       	com	r25
    46c0:	9b 01       	movw	r18, r22
    46c2:	ac 01       	movw	r20, r24
    46c4:	bd 01       	movw	r22, r26
    46c6:	cf 01       	movw	r24, r30
    46c8:	08 95       	ret

000046ca <__udivmodhi4>:
    46ca:	aa 1b       	sub	r26, r26
    46cc:	bb 1b       	sub	r27, r27
    46ce:	51 e1       	ldi	r21, 0x11	; 17
    46d0:	07 c0       	rjmp	.+14     	; 0x46e0 <__udivmodhi4_ep>

000046d2 <__udivmodhi4_loop>:
    46d2:	aa 1f       	adc	r26, r26
    46d4:	bb 1f       	adc	r27, r27
    46d6:	a6 17       	cp	r26, r22
    46d8:	b7 07       	cpc	r27, r23
    46da:	10 f0       	brcs	.+4      	; 0x46e0 <__udivmodhi4_ep>
    46dc:	a6 1b       	sub	r26, r22
    46de:	b7 0b       	sbc	r27, r23

000046e0 <__udivmodhi4_ep>:
    46e0:	88 1f       	adc	r24, r24
    46e2:	99 1f       	adc	r25, r25
    46e4:	5a 95       	dec	r21
    46e6:	a9 f7       	brne	.-22     	; 0x46d2 <__udivmodhi4_loop>
    46e8:	80 95       	com	r24
    46ea:	90 95       	com	r25
    46ec:	bc 01       	movw	r22, r24
    46ee:	cd 01       	movw	r24, r26
    46f0:	08 95       	ret

000046f2 <do_rand>:
    46f2:	a0 e0       	ldi	r26, 0x00	; 0
    46f4:	b0 e0       	ldi	r27, 0x00	; 0
    46f6:	ef e7       	ldi	r30, 0x7F	; 127
    46f8:	f3 e2       	ldi	r31, 0x23	; 35
    46fa:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__prologue_saves__+0x10>
    46fe:	ec 01       	movw	r28, r24
    4700:	a8 80       	ld	r10, Y
    4702:	b9 80       	ldd	r11, Y+1	; 0x01
    4704:	ca 80       	ldd	r12, Y+2	; 0x02
    4706:	db 80       	ldd	r13, Y+3	; 0x03
    4708:	a1 14       	cp	r10, r1
    470a:	b1 04       	cpc	r11, r1
    470c:	c1 04       	cpc	r12, r1
    470e:	d1 04       	cpc	r13, r1
    4710:	41 f4       	brne	.+16     	; 0x4722 <do_rand+0x30>
    4712:	84 e2       	ldi	r24, 0x24	; 36
    4714:	a8 2e       	mov	r10, r24
    4716:	89 ed       	ldi	r24, 0xD9	; 217
    4718:	b8 2e       	mov	r11, r24
    471a:	8b e5       	ldi	r24, 0x5B	; 91
    471c:	c8 2e       	mov	r12, r24
    471e:	87 e0       	ldi	r24, 0x07	; 7
    4720:	d8 2e       	mov	r13, r24
    4722:	c6 01       	movw	r24, r12
    4724:	b5 01       	movw	r22, r10
    4726:	2d e1       	ldi	r18, 0x1D	; 29
    4728:	33 ef       	ldi	r19, 0xF3	; 243
    472a:	41 e0       	ldi	r20, 0x01	; 1
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	0e 94 31 24 	call	0x4862	; 0x4862 <__divmodsi4>
    4732:	27 ea       	ldi	r18, 0xA7	; 167
    4734:	31 e4       	ldi	r19, 0x41	; 65
    4736:	40 e0       	ldi	r20, 0x00	; 0
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsi3>
    473e:	7b 01       	movw	r14, r22
    4740:	8c 01       	movw	r16, r24
    4742:	c6 01       	movw	r24, r12
    4744:	b5 01       	movw	r22, r10
    4746:	2d e1       	ldi	r18, 0x1D	; 29
    4748:	33 ef       	ldi	r19, 0xF3	; 243
    474a:	41 e0       	ldi	r20, 0x01	; 1
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	0e 94 31 24 	call	0x4862	; 0x4862 <__divmodsi4>
    4752:	ca 01       	movw	r24, r20
    4754:	b9 01       	movw	r22, r18
    4756:	2c ee       	ldi	r18, 0xEC	; 236
    4758:	34 ef       	ldi	r19, 0xF4	; 244
    475a:	4f ef       	ldi	r20, 0xFF	; 255
    475c:	5f ef       	ldi	r21, 0xFF	; 255
    475e:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsi3>
    4762:	6e 0d       	add	r22, r14
    4764:	7f 1d       	adc	r23, r15
    4766:	80 1f       	adc	r24, r16
    4768:	91 1f       	adc	r25, r17
    476a:	97 ff       	sbrs	r25, 7
    476c:	04 c0       	rjmp	.+8      	; 0x4776 <do_rand+0x84>
    476e:	61 50       	subi	r22, 0x01	; 1
    4770:	70 40       	sbci	r23, 0x00	; 0
    4772:	80 40       	sbci	r24, 0x00	; 0
    4774:	90 48       	sbci	r25, 0x80	; 128
    4776:	68 83       	st	Y, r22
    4778:	79 83       	std	Y+1, r23	; 0x01
    477a:	8a 83       	std	Y+2, r24	; 0x02
    477c:	9b 83       	std	Y+3, r25	; 0x03
    477e:	9b 01       	movw	r18, r22
    4780:	3f 77       	andi	r19, 0x7F	; 127
    4782:	c9 01       	movw	r24, r18
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	ea e0       	ldi	r30, 0x0A	; 10
    478a:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__epilogue_restores__+0x10>

0000478e <rand_r>:
    478e:	0e 94 79 23 	call	0x46f2	; 0x46f2 <do_rand>
    4792:	08 95       	ret

00004794 <rand>:
    4794:	84 e9       	ldi	r24, 0x94	; 148
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	0e 94 79 23 	call	0x46f2	; 0x46f2 <do_rand>
    479c:	08 95       	ret

0000479e <srand>:
    479e:	a0 e0       	ldi	r26, 0x00	; 0
    47a0:	b0 e0       	ldi	r27, 0x00	; 0
    47a2:	80 93 94 00 	sts	0x0094, r24
    47a6:	90 93 95 00 	sts	0x0095, r25
    47aa:	a0 93 96 00 	sts	0x0096, r26
    47ae:	b0 93 97 00 	sts	0x0097, r27
    47b2:	08 95       	ret

000047b4 <__eerd_byte_m32>:
    47b4:	e1 99       	sbic	0x1c, 1	; 28
    47b6:	fe cf       	rjmp	.-4      	; 0x47b4 <__eerd_byte_m32>
    47b8:	9f bb       	out	0x1f, r25	; 31
    47ba:	8e bb       	out	0x1e, r24	; 30
    47bc:	e0 9a       	sbi	0x1c, 0	; 28
    47be:	99 27       	eor	r25, r25
    47c0:	8d b3       	in	r24, 0x1d	; 29
    47c2:	08 95       	ret

000047c4 <__eerd_dword_m32>:
    47c4:	a6 e1       	ldi	r26, 0x16	; 22
    47c6:	b0 e0       	ldi	r27, 0x00	; 0
    47c8:	44 e0       	ldi	r20, 0x04	; 4
    47ca:	50 e0       	ldi	r21, 0x00	; 0
    47cc:	0c 94 f7 23 	jmp	0x47ee	; 0x47ee <__eerd_blraw_m32>

000047d0 <__eewr_dword_m32>:
    47d0:	24 2f       	mov	r18, r20
    47d2:	0e 94 06 24 	call	0x480c	; 0x480c <__eewr_r18_m32>
    47d6:	25 2f       	mov	r18, r21
    47d8:	0e 94 06 24 	call	0x480c	; 0x480c <__eewr_r18_m32>
    47dc:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__eewr_word_m32>

000047e0 <__eewr_word_m32>:
    47e0:	0e 94 05 24 	call	0x480a	; 0x480a <__eewr_byte_m32>
    47e4:	27 2f       	mov	r18, r23
    47e6:	0c 94 06 24 	jmp	0x480c	; 0x480c <__eewr_r18_m32>

000047ea <__eerd_block_m32>:
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22

000047ee <__eerd_blraw_m32>:
    47ee:	fc 01       	movw	r30, r24
    47f0:	e1 99       	sbic	0x1c, 1	; 28
    47f2:	fe cf       	rjmp	.-4      	; 0x47f0 <__eerd_blraw_m32+0x2>
    47f4:	06 c0       	rjmp	.+12     	; 0x4802 <__eerd_blraw_m32+0x14>
    47f6:	ff bb       	out	0x1f, r31	; 31
    47f8:	ee bb       	out	0x1e, r30	; 30
    47fa:	e0 9a       	sbi	0x1c, 0	; 28
    47fc:	31 96       	adiw	r30, 0x01	; 1
    47fe:	0d b2       	in	r0, 0x1d	; 29
    4800:	0d 92       	st	X+, r0
    4802:	41 50       	subi	r20, 0x01	; 1
    4804:	50 40       	sbci	r21, 0x00	; 0
    4806:	b8 f7       	brcc	.-18     	; 0x47f6 <__eerd_blraw_m32+0x8>
    4808:	08 95       	ret

0000480a <__eewr_byte_m32>:
    480a:	26 2f       	mov	r18, r22

0000480c <__eewr_r18_m32>:
    480c:	e1 99       	sbic	0x1c, 1	; 28
    480e:	fe cf       	rjmp	.-4      	; 0x480c <__eewr_r18_m32>
    4810:	9f bb       	out	0x1f, r25	; 31
    4812:	8e bb       	out	0x1e, r24	; 30
    4814:	2d bb       	out	0x1d, r18	; 29
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	f8 94       	cli
    481a:	e2 9a       	sbi	0x1c, 2	; 28
    481c:	e1 9a       	sbi	0x1c, 1	; 28
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	01 96       	adiw	r24, 0x01	; 1
    4822:	08 95       	ret

00004824 <__mulsi3>:
    4824:	62 9f       	mul	r22, r18
    4826:	d0 01       	movw	r26, r0
    4828:	73 9f       	mul	r23, r19
    482a:	f0 01       	movw	r30, r0
    482c:	82 9f       	mul	r24, r18
    482e:	e0 0d       	add	r30, r0
    4830:	f1 1d       	adc	r31, r1
    4832:	64 9f       	mul	r22, r20
    4834:	e0 0d       	add	r30, r0
    4836:	f1 1d       	adc	r31, r1
    4838:	92 9f       	mul	r25, r18
    483a:	f0 0d       	add	r31, r0
    483c:	83 9f       	mul	r24, r19
    483e:	f0 0d       	add	r31, r0
    4840:	74 9f       	mul	r23, r20
    4842:	f0 0d       	add	r31, r0
    4844:	65 9f       	mul	r22, r21
    4846:	f0 0d       	add	r31, r0
    4848:	99 27       	eor	r25, r25
    484a:	72 9f       	mul	r23, r18
    484c:	b0 0d       	add	r27, r0
    484e:	e1 1d       	adc	r30, r1
    4850:	f9 1f       	adc	r31, r25
    4852:	63 9f       	mul	r22, r19
    4854:	b0 0d       	add	r27, r0
    4856:	e1 1d       	adc	r30, r1
    4858:	f9 1f       	adc	r31, r25
    485a:	bd 01       	movw	r22, r26
    485c:	cf 01       	movw	r24, r30
    485e:	11 24       	eor	r1, r1
    4860:	08 95       	ret

00004862 <__divmodsi4>:
    4862:	97 fb       	bst	r25, 7
    4864:	09 2e       	mov	r0, r25
    4866:	05 26       	eor	r0, r21
    4868:	0e d0       	rcall	.+28     	; 0x4886 <__divmodsi4_neg1>
    486a:	57 fd       	sbrc	r21, 7
    486c:	04 d0       	rcall	.+8      	; 0x4876 <__divmodsi4_neg2>
    486e:	0b df       	rcall	.-490    	; 0x4686 <__udivmodsi4>
    4870:	0a d0       	rcall	.+20     	; 0x4886 <__divmodsi4_neg1>
    4872:	00 1c       	adc	r0, r0
    4874:	38 f4       	brcc	.+14     	; 0x4884 <__divmodsi4_exit>

00004876 <__divmodsi4_neg2>:
    4876:	50 95       	com	r21
    4878:	40 95       	com	r20
    487a:	30 95       	com	r19
    487c:	21 95       	neg	r18
    487e:	3f 4f       	sbci	r19, 0xFF	; 255
    4880:	4f 4f       	sbci	r20, 0xFF	; 255
    4882:	5f 4f       	sbci	r21, 0xFF	; 255

00004884 <__divmodsi4_exit>:
    4884:	08 95       	ret

00004886 <__divmodsi4_neg1>:
    4886:	f6 f7       	brtc	.-4      	; 0x4884 <__divmodsi4_exit>
    4888:	90 95       	com	r25
    488a:	80 95       	com	r24
    488c:	70 95       	com	r23
    488e:	61 95       	neg	r22
    4890:	7f 4f       	sbci	r23, 0xFF	; 255
    4892:	8f 4f       	sbci	r24, 0xFF	; 255
    4894:	9f 4f       	sbci	r25, 0xFF	; 255
    4896:	08 95       	ret

00004898 <__prologue_saves__>:
    4898:	2f 92       	push	r2
    489a:	3f 92       	push	r3
    489c:	4f 92       	push	r4
    489e:	5f 92       	push	r5
    48a0:	6f 92       	push	r6
    48a2:	7f 92       	push	r7
    48a4:	8f 92       	push	r8
    48a6:	9f 92       	push	r9
    48a8:	af 92       	push	r10
    48aa:	bf 92       	push	r11
    48ac:	cf 92       	push	r12
    48ae:	df 92       	push	r13
    48b0:	ef 92       	push	r14
    48b2:	ff 92       	push	r15
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	ca 1b       	sub	r28, r26
    48c2:	db 0b       	sbc	r29, r27
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	f8 94       	cli
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	0f be       	out	0x3f, r0	; 63
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	09 94       	ijmp

000048d0 <__epilogue_restores__>:
    48d0:	2a 88       	ldd	r2, Y+18	; 0x12
    48d2:	39 88       	ldd	r3, Y+17	; 0x11
    48d4:	48 88       	ldd	r4, Y+16	; 0x10
    48d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    48d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    48da:	7d 84       	ldd	r7, Y+13	; 0x0d
    48dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    48de:	9b 84       	ldd	r9, Y+11	; 0x0b
    48e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    48e2:	b9 84       	ldd	r11, Y+9	; 0x09
    48e4:	c8 84       	ldd	r12, Y+8	; 0x08
    48e6:	df 80       	ldd	r13, Y+7	; 0x07
    48e8:	ee 80       	ldd	r14, Y+6	; 0x06
    48ea:	fd 80       	ldd	r15, Y+5	; 0x05
    48ec:	0c 81       	ldd	r16, Y+4	; 0x04
    48ee:	1b 81       	ldd	r17, Y+3	; 0x03
    48f0:	aa 81       	ldd	r26, Y+2	; 0x02
    48f2:	b9 81       	ldd	r27, Y+1	; 0x01
    48f4:	ce 0f       	add	r28, r30
    48f6:	d1 1d       	adc	r29, r1
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	f8 94       	cli
    48fc:	de bf       	out	0x3e, r29	; 62
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	ed 01       	movw	r28, r26
    4904:	08 95       	ret

00004906 <_exit>:
    4906:	f8 94       	cli

00004908 <__stop_program>:
    4908:	ff cf       	rjmp	.-2      	; 0x4908 <__stop_program>
