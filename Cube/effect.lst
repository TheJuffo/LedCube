   1               		.file	"effect.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  13               	.global	effect_test
  15               	effect_test:
  16               	.LFB3:
  17               		.file 1 "effect.c"
   1:effect.c      **** #include "effect.h"
   2:effect.c      **** #include "debug.h"
   3:effect.c      **** #include "draw.h"
   4:effect.c      **** #include "font.h"
   5:effect.c      **** 
   6:effect.c      **** #include <math.h>
   7:effect.c      **** #include <avr/interrupt.h>
   8:effect.c      **** 
   9:effect.c      **** void effect_test (void)
  10:effect.c      **** {
  18               		.loc 1 10 0
  19               		.cfi_startproc
  20 0000 8F92      		push r8
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 8, -2
  24 0002 9F92      		push r9
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 9, -3
  28 0004 AF92      		push r10
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 10, -4
  32 0006 BF92      		push r11
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 11, -5
  36 0008 CF92      		push r12
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 12, -6
  40 000a DF92      		push r13
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 13, -7
  44 000c EF92      		push r14
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 14, -8
  48 000e FF92      		push r15
  49               	.LCFI7:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 15, -9
  52 0010 CF93      		push r28
  53               	.LCFI8:
  54               		.cfi_def_cfa_offset 11
  55               		.cfi_offset 28, -10
  56 0012 DF93      		push r29
  57               	.LCFI9:
  58               		.cfi_def_cfa_offset 12
  59               		.cfi_offset 29, -11
  60               	/* prologue: function */
  61               	/* frame size = 0 */
  62               	/* stack size = 10 */
  63               	.L__stack_usage = 10
  64               	.LVL0:
  11:effect.c      **** 
  12:effect.c      **** 	int x,y,i;
  13:effect.c      **** 
  14:effect.c      **** 	for (i=0;i<1000;i++)
  65               		.loc 1 14 0
  66 0014 C0E0      		ldi r28,lo8(0)
  67 0016 D0E0      		ldi r29,hi8(0)
  68               	.LVL1:
  69               	.L2:
  15:effect.c      **** 	{
  16:effect.c      **** 		x = sin(i/8)*2+3.5;
  70               		.loc 1 16 0 discriminator 2
  71 0018 BE01      		movw r22,r28
  72 001a 83E0      		ldi r24,3
  73 001c 7595      	1:	asr r23
  74 001e 6795      		ror r22
  75 0020 8A95      		dec r24
  76 0022 01F4      		brne 1b
  77 0024 8827      		clr r24
  78 0026 77FD      		sbrc r23,7
  79 0028 8095      		com r24
  80 002a 982F      		mov r25,r24
  81 002c 0E94 0000 		call __floatsisf
  82 0030 6B01      		movw r12,r22
  83 0032 7C01      		movw r14,r24
  84 0034 0E94 0000 		call sin
  85 0038 9B01      		movw r18,r22
  86 003a AC01      		movw r20,r24
  87 003c 0E94 0000 		call __addsf3
  88 0040 20E0      		ldi r18,lo8(0x40600000)
  89 0042 30E0      		ldi r19,hi8(0x40600000)
  90 0044 40E6      		ldi r20,hlo8(0x40600000)
  91 0046 50E4      		ldi r21,hhi8(0x40600000)
  92 0048 0E94 0000 		call __addsf3
  93 004c 0E94 0000 		call __fixsfsi
  94 0050 4B01      		movw r8,r22
  95 0052 5C01      		movw r10,r24
  17:effect.c      **** 		y = cos(i/8)*2+3.5;
  96               		.loc 1 17 0 discriminator 2
  97 0054 C701      		movw r24,r14
  98 0056 B601      		movw r22,r12
  99 0058 0E94 0000 		call cos
 100 005c 9B01      		movw r18,r22
 101 005e AC01      		movw r20,r24
 102 0060 0E94 0000 		call __addsf3
 103 0064 20E0      		ldi r18,lo8(0x40600000)
 104 0066 30E0      		ldi r19,hi8(0x40600000)
 105 0068 40E6      		ldi r20,hlo8(0x40600000)
 106 006a 50E4      		ldi r21,hhi8(0x40600000)
 107 006c 0E94 0000 		call __addsf3
 108 0070 0E94 0000 		call __fixsfsi
 109 0074 6B01      		movw r12,r22
 110 0076 7C01      		movw r14,r24
  18:effect.c      **** 
  19:effect.c      **** 		setvoxel(x,y,1);
 111               		.loc 1 19 0 discriminator 2
 112 0078 C401      		movw r24,r8
 113 007a B601      		movw r22,r12
 114 007c 41E0      		ldi r20,lo8(1)
 115 007e 50E0      		ldi r21,hi8(1)
 116 0080 0E94 0000 		call setvoxel
  20:effect.c      **** 		setvoxel(x,y,1);
 117               		.loc 1 20 0 discriminator 2
 118 0084 C401      		movw r24,r8
 119 0086 B601      		movw r22,r12
 120 0088 41E0      		ldi r20,lo8(1)
 121 008a 50E0      		ldi r21,hi8(1)
 122 008c 0E94 0000 		call setvoxel
  21:effect.c      **** 		delay_ms(1000);
 123               		.loc 1 21 0 discriminator 2
 124 0090 88EE      		ldi r24,lo8(1000)
 125 0092 93E0      		ldi r25,hi8(1000)
 126 0094 0E94 0000 		call delay_ms
  22:effect.c      **** 		fill(0x00);
 127               		.loc 1 22 0 discriminator 2
 128 0098 80E0      		ldi r24,lo8(0)
 129 009a 0E94 0000 		call fill
  14:effect.c      **** 	for (i=0;i<1000;i++)
 130               		.loc 1 14 0 discriminator 2
 131 009e 2196      		adiw r28,1
 132               	.LVL2:
 133 00a0 83E0      		ldi r24,hi8(1000)
 134 00a2 C83E      		cpi r28,lo8(1000)
 135 00a4 D807      		cpc r29,r24
 136 00a6 01F0      		breq .+2
 137 00a8 00C0      		rjmp .L2
 138               	/* epilogue start */
  23:effect.c      **** 	}
  24:effect.c      **** 
  25:effect.c      **** }
 139               		.loc 1 25 0
 140 00aa DF91      		pop r29
 141 00ac CF91      		pop r28
 142               	.LVL3:
 143 00ae FF90      		pop r15
 144 00b0 EF90      		pop r14
 145 00b2 DF90      		pop r13
 146 00b4 CF90      		pop r12
 147 00b6 BF90      		pop r11
 148 00b8 AF90      		pop r10
 149 00ba 9F90      		pop r9
 150 00bc 8F90      		pop r8
 151 00be 0895      		ret
 152               		.cfi_endproc
 153               	.LFE3:
 155               	.global	effect_stringfly2
 157               	effect_stringfly2:
 158               	.LFB4:
  26:effect.c      **** 
  27:effect.c      **** 
  28:effect.c      **** void effect_stringfly2(const char * str, unsigned char prgMem)
  29:effect.c      **** {
 159               		.loc 1 29 0
 160               		.cfi_startproc
 161               	.LVL4:
 162 00c0 2F92      		push r2
 163               	.LCFI10:
 164               		.cfi_def_cfa_offset 3
 165               		.cfi_offset 2, -2
 166 00c2 3F92      		push r3
 167               	.LCFI11:
 168               		.cfi_def_cfa_offset 4
 169               		.cfi_offset 3, -3
 170 00c4 4F92      		push r4
 171               	.LCFI12:
 172               		.cfi_def_cfa_offset 5
 173               		.cfi_offset 4, -4
 174 00c6 5F92      		push r5
 175               	.LCFI13:
 176               		.cfi_def_cfa_offset 6
 177               		.cfi_offset 5, -5
 178 00c8 6F92      		push r6
 179               	.LCFI14:
 180               		.cfi_def_cfa_offset 7
 181               		.cfi_offset 6, -6
 182 00ca 7F92      		push r7
 183               	.LCFI15:
 184               		.cfi_def_cfa_offset 8
 185               		.cfi_offset 7, -7
 186 00cc 8F92      		push r8
 187               	.LCFI16:
 188               		.cfi_def_cfa_offset 9
 189               		.cfi_offset 8, -8
 190 00ce 9F92      		push r9
 191               	.LCFI17:
 192               		.cfi_def_cfa_offset 10
 193               		.cfi_offset 9, -9
 194 00d0 BF92      		push r11
 195               	.LCFI18:
 196               		.cfi_def_cfa_offset 11
 197               		.cfi_offset 11, -10
 198 00d2 CF92      		push r12
 199               	.LCFI19:
 200               		.cfi_def_cfa_offset 12
 201               		.cfi_offset 12, -11
 202 00d4 DF92      		push r13
 203               	.LCFI20:
 204               		.cfi_def_cfa_offset 13
 205               		.cfi_offset 13, -12
 206 00d6 EF92      		push r14
 207               	.LCFI21:
 208               		.cfi_def_cfa_offset 14
 209               		.cfi_offset 14, -13
 210 00d8 FF92      		push r15
 211               	.LCFI22:
 212               		.cfi_def_cfa_offset 15
 213               		.cfi_offset 15, -14
 214 00da 0F93      		push r16
 215               	.LCFI23:
 216               		.cfi_def_cfa_offset 16
 217               		.cfi_offset 16, -15
 218 00dc 1F93      		push r17
 219               	.LCFI24:
 220               		.cfi_def_cfa_offset 17
 221               		.cfi_offset 17, -16
 222 00de CF93      		push r28
 223               	.LCFI25:
 224               		.cfi_def_cfa_offset 18
 225               		.cfi_offset 28, -17
 226 00e0 DF93      		push r29
 227               	.LCFI26:
 228               		.cfi_def_cfa_offset 19
 229               		.cfi_offset 29, -18
 230 00e2 00D0      		rcall .
 231 00e4 00D0      		rcall .
 232 00e6 0F92      		push __tmp_reg__
 233               	.LCFI27:
 234               		.cfi_def_cfa_offset 24
 235 00e8 CDB7      		in r28,__SP_L__
 236 00ea DEB7      		in r29,__SP_H__
 237               	.LCFI28:
 238               		.cfi_def_cfa_register 28
 239               	/* prologue: function */
 240               	/* frame size = 5 */
 241               	/* stack size = 22 */
 242               	.L__stack_usage = 22
 243 00ec 4C01      		movw r8,r24
 244 00ee B62E      		mov r11,r22
 245               	.LVL5:
  30:effect.c      **** 	int x, y, i;
  31:effect.c      **** 	unsigned char chr[5];
  32:effect.c      ****     uint16_t pos = 0;
  33:effect.c      **** 	
  34:effect.c      **** 	unsigned char tempChar = GetChar(str, 0, prgMem);
 246               		.loc 1 34 0
 247 00f0 60E0      		ldi r22,lo8(0)
 248 00f2 70E0      		ldi r23,hi8(0)
 249               	.LVL6:
 250 00f4 4B2D      		mov r20,r11
 251 00f6 0E94 0000 		call GetChar
 252               	.LVL7:
  32:effect.c      ****     uint16_t pos = 0;
 253               		.loc 1 32 0
 254 00fa CC24      		clr r12
 255 00fc DD24      		clr r13
  35:effect.c      **** 
  36:effect.c      **** 	while (tempChar != 0)
  37:effect.c      **** 	{
  38:effect.c      **** 		font_getchar(tempChar, chr);
  39:effect.c      **** 		
  40:effect.c      ****         // Put a character on the back of the cube
  41:effect.c      **** 		for (x = 0; x < 5; x++)
  42:effect.c      **** 		{
  43:effect.c      **** 			for (y = 0; y < 8; y++)
  44:effect.c      **** 			{
  45:effect.c      **** 				if ((chr[x] & (0x80 >> y)))
 256               		.loc 1 45 0
 257 00fe 30E8      		ldi r19,lo8(128)
 258 0100 632E      		mov r6,r19
 259 0102 712C      		mov r7,__zero_reg__
  36:effect.c      **** 	while (tempChar != 0)
 260               		.loc 1 36 0
 261 0104 00C0      		rjmp .L5
 262               	.LVL8:
 263               	.L10:
  38:effect.c      **** 		font_getchar(tempChar, chr);
 264               		.loc 1 38 0
 265 0106 BE01      		movw r22,r28
 266 0108 6F5F      		subi r22,lo8(-(1))
 267 010a 7F4F      		sbci r23,hi8(-(1))
 268 010c 0E94 0000 		call font_getchar
 269               	.LVL9:
  41:effect.c      **** 		for (x = 0; x < 5; x++)
 270               		.loc 1 41 0
 271 0110 00E0      		ldi r16,lo8(0)
 272 0112 10E0      		ldi r17,hi8(0)
 273 0114 00C0      		rjmp .L6
 274               	.LVL10:
 275               	.L8:
 276               		.loc 1 45 0
 277 0116 9301      		movw r18,r6
 278 0118 0E2C      		mov r0,r14
 279 011a 00C0      		rjmp 2f
 280 011c 3595      	1:	asr r19
 281 011e 2795      		ror r18
 282 0120 0A94      	2:	dec r0
 283 0122 02F4      		brpl 1b
 284 0124 F201      		movw r30,r4
 285 0126 8081      		ld r24,Z
 286 0128 90E0      		ldi r25,lo8(0)
 287 012a 2823      		and r18,r24
 288 012c 3923      		and r19,r25
 289 012e 2115      		cp r18,__zero_reg__
 290 0130 3105      		cpc r19,__zero_reg__
 291 0132 01F0      		breq .L7
  46:effect.c      **** 				{
  47:effect.c      **** 					setvoxel(7, x + 2,y);
 292               		.loc 1 47 0
 293 0134 87E0      		ldi r24,lo8(7)
 294 0136 90E0      		ldi r25,hi8(7)
 295 0138 B101      		movw r22,r2
 296 013a A701      		movw r20,r14
 297 013c 0E94 0000 		call setvoxel
 298               	.L7:
  43:effect.c      **** 			for (y = 0; y < 8; y++)
 299               		.loc 1 43 0
 300 0140 0894      		sec
 301 0142 E11C      		adc r14,__zero_reg__
 302 0144 F11C      		adc r15,__zero_reg__
 303               	.LVL11:
 304 0146 F8E0      		ldi r31,lo8(8)
 305 0148 EF16      		cp r14,r31
 306 014a F104      		cpc r15,__zero_reg__
 307 014c 01F4      		brne .L8
  41:effect.c      **** 		for (x = 0; x < 5; x++)
 308               		.loc 1 41 0
 309 014e 0F5F      		subi r16,lo8(-(1))
 310 0150 1F4F      		sbci r17,hi8(-(1))
 311               	.LVL12:
 312 0152 0530      		cpi r16,5
 313 0154 1105      		cpc r17,__zero_reg__
 314 0156 01F0      		breq .L12
 315               	.LVL13:
 316               	.L6:
  29:effect.c      **** {
 317               		.loc 1 29 0 discriminator 1
 318 0158 EE24      		clr r14
 319 015a FF24      		clr r15
  28:effect.c      **** void effect_stringfly2(const char * str, unsigned char prgMem)
 320               		.loc 1 28 0 discriminator 1
 321 015c 91E0      		ldi r25,lo8(1)
 322 015e 492E      		mov r4,r25
 323 0160 512C      		mov r5,__zero_reg__
 324 0162 4C0E      		add r4,r28
 325 0164 5D1E      		adc r5,r29
 326 0166 400E      		add r4,r16
 327 0168 511E      		adc r5,r17
 328 016a 22E0      		ldi r18,lo8(2)
 329 016c 222E      		mov r2,r18
 330 016e 312C      		mov r3,__zero_reg__
 331 0170 200E      		add r2,r16
 332 0172 311E      		adc r3,r17
 333 0174 00C0      		rjmp .L8
 334               	.LVL14:
 335               	.L12:
  41:effect.c      **** 		for (x = 0; x < 5; x++)
 336               		.loc 1 41 0
 337 0176 06E0      		ldi r16,lo8(6)
 338 0178 10E0      		ldi r17,hi8(6)
 339               	.LVL15:
 340               	.L9:
  48:effect.c      **** 				}
  49:effect.c      **** 			}
  50:effect.c      **** 		}
  51:effect.c      **** 		
  52:effect.c      ****         // Shift the entire contents of the cube forward by 6 steps
  53:effect.c      ****         // before placing the next character
  54:effect.c      **** 		for (i = 0; i < 6; i++)
  55:effect.c      **** 		{
  56:effect.c      **** 			delay_ms(1000);
 341               		.loc 1 56 0 discriminator 2
 342 017a 88EE      		ldi r24,lo8(1000)
 343 017c 93E0      		ldi r25,hi8(1000)
 344 017e 0E94 0000 		call delay_ms
  57:effect.c      ****             shift(AXIS_X,-1);
 345               		.loc 1 57 0 discriminator 2
 346 0182 88E7      		ldi r24,lo8(120)
 347 0184 6FEF      		ldi r22,lo8(-1)
 348 0186 7FEF      		ldi r23,hi8(-1)
 349 0188 0E94 0000 		call shift
 350 018c 0150      		subi r16,lo8(-(-1))
 351 018e 1040      		sbci r17,hi8(-(-1))
  54:effect.c      **** 		for (i = 0; i < 6; i++)
 352               		.loc 1 54 0 discriminator 2
 353 0190 01F4      		brne .L9
  58:effect.c      **** 		}
  59:effect.c      **** 
  60:effect.c      ****         pos++;
 354               		.loc 1 60 0
 355 0192 0894      		sec
 356 0194 C11C      		adc r12,__zero_reg__
 357 0196 D11C      		adc r13,__zero_reg__
 358               	.LVL16:
  61:effect.c      ****         tempChar = GetChar(str, pos, prgMem);
 359               		.loc 1 61 0
 360 0198 C401      		movw r24,r8
 361 019a B601      		movw r22,r12
 362 019c 4B2D      		mov r20,r11
 363 019e 0E94 0000 		call GetChar
 364               	.LVL17:
 365               	.L5:
  36:effect.c      **** 	while (tempChar != 0)
 366               		.loc 1 36 0 discriminator 1
 367 01a2 8823      		tst r24
 368 01a4 01F0      		breq .+2
 369 01a6 00C0      		rjmp .L10
  36:effect.c      **** 	while (tempChar != 0)
 370               		.loc 1 36 0 is_stmt 0
 371 01a8 08E0      		ldi r16,lo8(8)
 372 01aa 10E0      		ldi r17,hi8(8)
 373               	.LVL18:
 374               	.L11:
  62:effect.c      **** 	}
  63:effect.c      ****     // Shift the last character out of the cube.
  64:effect.c      **** 	for (i = 0; i < 8; i++)
  65:effect.c      **** 	{
  66:effect.c      **** 		delay_ms(1000);
 375               		.loc 1 66 0 is_stmt 1 discriminator 2
 376 01ac 88EE      		ldi r24,lo8(1000)
 377 01ae 93E0      		ldi r25,hi8(1000)
 378 01b0 0E94 0000 		call delay_ms
  67:effect.c      ****         shift(AXIS_X,-1);
 379               		.loc 1 67 0 discriminator 2
 380 01b4 88E7      		ldi r24,lo8(120)
 381 01b6 6FEF      		ldi r22,lo8(-1)
 382 01b8 7FEF      		ldi r23,hi8(-1)
 383 01ba 0E94 0000 		call shift
 384 01be 0150      		subi r16,lo8(-(-1))
 385 01c0 1040      		sbci r17,hi8(-(-1))
  64:effect.c      **** 	for (i = 0; i < 8; i++)
 386               		.loc 1 64 0 discriminator 2
 387 01c2 01F4      		brne .L11
 388               	/* epilogue start */
  68:effect.c      **** 	}
  69:effect.c      **** 	
  70:effect.c      **** }
 389               		.loc 1 70 0
 390 01c4 0F90      		pop __tmp_reg__
 391 01c6 0F90      		pop __tmp_reg__
 392 01c8 0F90      		pop __tmp_reg__
 393 01ca 0F90      		pop __tmp_reg__
 394 01cc 0F90      		pop __tmp_reg__
 395 01ce DF91      		pop r29
 396 01d0 CF91      		pop r28
 397 01d2 1F91      		pop r17
 398 01d4 0F91      		pop r16
 399 01d6 FF90      		pop r15
 400 01d8 EF90      		pop r14
 401 01da DF90      		pop r13
 402 01dc CF90      		pop r12
 403               	.LVL19:
 404 01de BF90      		pop r11
 405               	.LVL20:
 406 01e0 9F90      		pop r9
 407 01e2 8F90      		pop r8
 408               	.LVL21:
 409 01e4 7F90      		pop r7
 410 01e6 6F90      		pop r6
 411 01e8 5F90      		pop r5
 412 01ea 4F90      		pop r4
 413 01ec 3F90      		pop r3
 414 01ee 2F90      		pop r2
 415 01f0 0895      		ret
 416               		.cfi_endproc
 417               	.LFE4:
 419               	.global	effect_planboing
 421               	effect_planboing:
 422               	.LFB5:
  71:effect.c      **** 
  72:effect.c      **** // Draw a plane on one axis and send it back and forth once.
  73:effect.c      **** void effect_planboing (int plane, int speed)
  74:effect.c      **** {
 423               		.loc 1 74 0
 424               		.cfi_startproc
 425               	.LVL22:
 426 01f2 0F93      		push r16
 427               	.LCFI29:
 428               		.cfi_def_cfa_offset 3
 429               		.cfi_offset 16, -2
 430 01f4 1F93      		push r17
 431               	.LCFI30:
 432               		.cfi_def_cfa_offset 4
 433               		.cfi_offset 17, -3
 434 01f6 CF93      		push r28
 435               	.LCFI31:
 436               		.cfi_def_cfa_offset 5
 437               		.cfi_offset 28, -4
 438 01f8 DF93      		push r29
 439               	.LCFI32:
 440               		.cfi_def_cfa_offset 6
 441               		.cfi_offset 29, -5
 442               	/* prologue: function */
 443               	/* frame size = 0 */
 444               	/* stack size = 4 */
 445               	.L__stack_usage = 4
 446 01fa C82F      		mov r28,r24
 447 01fc D62F      		mov r29,r22
 448 01fe 072F      		mov r16,r23
 449               	.LVL23:
 450               		.loc 1 74 0
 451 0200 10E0      		ldi r17,lo8(0)
 452               	.LVL24:
 453               	.L17:
  75:effect.c      **** 	int i;
  76:effect.c      **** 	for (i=0;i<8;i++)
  77:effect.c      **** 	{
  78:effect.c      **** 		fill(0x00);
 454               		.loc 1 78 0 discriminator 2
 455 0202 80E0      		ldi r24,lo8(0)
 456 0204 0E94 0000 		call fill
  79:effect.c      ****         setplane(plane, i);
 457               		.loc 1 79 0 discriminator 2
 458 0208 8C2F      		mov r24,r28
 459 020a 612F      		mov r22,r17
 460 020c 0E94 0000 		call setplane
  80:effect.c      **** 		delay_ms(speed);
 461               		.loc 1 80 0 discriminator 2
 462 0210 8D2F      		mov r24,r29
 463 0212 902F      		mov r25,r16
 464 0214 0E94 0000 		call delay_ms
 465 0218 1F5F      		subi r17,lo8(-(1))
  76:effect.c      **** 	for (i=0;i<8;i++)
 466               		.loc 1 76 0 discriminator 2
 467 021a 1830      		cpi r17,lo8(8)
 468 021c 01F4      		brne .L17
  76:effect.c      **** 	for (i=0;i<8;i++)
 469               		.loc 1 76 0 is_stmt 0
 470 021e 17E0      		ldi r17,lo8(7)
 471               	.L18:
  81:effect.c      **** 	}
  82:effect.c      **** 	
  83:effect.c      **** 	for (i=7;i>=0;i--)
  84:effect.c      **** 	{
  85:effect.c      **** 		fill(0x00);
 472               		.loc 1 85 0 is_stmt 1 discriminator 2
 473 0220 80E0      		ldi r24,lo8(0)
 474 0222 0E94 0000 		call fill
  86:effect.c      ****         setplane(plane,i);
 475               		.loc 1 86 0 discriminator 2
 476 0226 8C2F      		mov r24,r28
 477 0228 612F      		mov r22,r17
 478 022a 0E94 0000 		call setplane
  87:effect.c      **** 		delay_ms(speed);
 479               		.loc 1 87 0 discriminator 2
 480 022e 8D2F      		mov r24,r29
 481 0230 902F      		mov r25,r16
 482 0232 0E94 0000 		call delay_ms
 483 0236 1150      		subi r17,1
 484 0238 00F4      		brcc .L18
 485               	/* epilogue start */
  88:effect.c      **** 	}
  89:effect.c      **** }
 486               		.loc 1 89 0
 487 023a DF91      		pop r29
 488 023c CF91      		pop r28
 489 023e 1F91      		pop r17
 490 0240 0F91      		pop r16
 491 0242 0895      		ret
 492               		.cfi_endproc
 493               	.LFE5:
 495               	.global	effect_blinky2
 497               	effect_blinky2:
 498               	.LFB6:
  90:effect.c      **** 
  91:effect.c      **** void effect_blinky2()
  92:effect.c      **** {
 499               		.loc 1 92 0
 500               		.cfi_startproc
 501 0244 AF92      		push r10
 502               	.LCFI33:
 503               		.cfi_def_cfa_offset 3
 504               		.cfi_offset 10, -2
 505 0246 BF92      		push r11
 506               	.LCFI34:
 507               		.cfi_def_cfa_offset 4
 508               		.cfi_offset 11, -3
 509 0248 CF92      		push r12
 510               	.LCFI35:
 511               		.cfi_def_cfa_offset 5
 512               		.cfi_offset 12, -4
 513 024a DF92      		push r13
 514               	.LCFI36:
 515               		.cfi_def_cfa_offset 6
 516               		.cfi_offset 13, -5
 517 024c EF92      		push r14
 518               	.LCFI37:
 519               		.cfi_def_cfa_offset 7
 520               		.cfi_offset 14, -6
 521 024e FF92      		push r15
 522               	.LCFI38:
 523               		.cfi_def_cfa_offset 8
 524               		.cfi_offset 15, -7
 525 0250 0F93      		push r16
 526               	.LCFI39:
 527               		.cfi_def_cfa_offset 9
 528               		.cfi_offset 16, -8
 529 0252 1F93      		push r17
 530               	.LCFI40:
 531               		.cfi_def_cfa_offset 10
 532               		.cfi_offset 17, -9
 533 0254 CF93      		push r28
 534               	.LCFI41:
 535               		.cfi_def_cfa_offset 11
 536               		.cfi_offset 28, -10
 537 0256 DF93      		push r29
 538               	.LCFI42:
 539               		.cfi_def_cfa_offset 12
 540               		.cfi_offset 29, -11
 541               	/* prologue: function */
 542               	/* frame size = 0 */
 543               	/* stack size = 10 */
 544               	.L__stack_usage = 10
  93:effect.c      **** 	int i,r;
  94:effect.c      **** 	fill(0x00);
 545               		.loc 1 94 0
 546 0258 80E0      		ldi r24,lo8(0)
 547 025a 0E94 0000 		call fill
 548               	.LVL25:
 549 025e 02E0      		ldi r16,lo8(2)
 550 0260 10E0      		ldi r17,hi8(2)
  95:effect.c      **** 	
  96:effect.c      **** 	for (r=0;r<2;r++)
  97:effect.c      **** 	{
  98:effect.c      **** 		i = 750;
  99:effect.c      **** 		while (i>0)
 100:effect.c      **** 		{
 101:effect.c      **** 			fill(0x00);
 102:effect.c      **** 			delay_ms(i);
 103:effect.c      **** 			
 104:effect.c      **** 			fill(0xff);
 105:effect.c      **** 			delay_ms(100);
 106:effect.c      **** 			
 107:effect.c      **** 			i = i - (15+(1000/(i/10)));
 551               		.loc 1 107 0
 552 0262 46EF      		ldi r20,lo8(-10)
 553 0264 E42E      		mov r14,r20
 554 0266 4FEF      		ldi r20,hi8(-10)
 555 0268 F42E      		mov r15,r20
 556 026a 58EE      		ldi r21,lo8(1000)
 557 026c C52E      		mov r12,r21
 558 026e 53E0      		ldi r21,hi8(1000)
 559 0270 D52E      		mov r13,r21
 108:effect.c      **** 		}
 109:effect.c      **** 		
 110:effect.c      **** 		delay_ms(1000);
 111:effect.c      **** 		
 112:effect.c      **** 		i = 750;
 113:effect.c      **** 		while (i>0)
 114:effect.c      **** 		{
 115:effect.c      **** 			fill(0x00);
 116:effect.c      **** 			delay_ms(751-i);
 560               		.loc 1 116 0
 561 0272 6FEE      		ldi r22,lo8(751)
 562 0274 A62E      		mov r10,r22
 563 0276 62E0      		ldi r22,hi8(751)
 564 0278 B62E      		mov r11,r22
 565 027a 00C0      		rjmp .L22
 566               	.LVL26:
 567               	.L23:
 101:effect.c      **** 			fill(0x00);
 568               		.loc 1 101 0
 569 027c 80E0      		ldi r24,lo8(0)
 570 027e 0E94 0000 		call fill
 102:effect.c      **** 			delay_ms(i);
 571               		.loc 1 102 0
 572 0282 CE01      		movw r24,r28
 573 0284 0E94 0000 		call delay_ms
 104:effect.c      **** 			fill(0xff);
 574               		.loc 1 104 0
 575 0288 8FEF      		ldi r24,lo8(-1)
 576 028a 0E94 0000 		call fill
 105:effect.c      **** 			delay_ms(100);
 577               		.loc 1 105 0
 578 028e 84E6      		ldi r24,lo8(100)
 579 0290 90E0      		ldi r25,hi8(100)
 580 0292 0E94 0000 		call delay_ms
 107:effect.c      **** 			i = i - (15+(1000/(i/10)));
 581               		.loc 1 107 0
 582 0296 CE01      		movw r24,r28
 583 0298 B701      		movw r22,r14
 584 029a 0E94 0000 		call __divmodhi4
 585 029e C601      		movw r24,r12
 586 02a0 0E94 0000 		call __divmodhi4
 587 02a4 6F50      		subi r22,lo8(-(-15))
 588 02a6 7040      		sbci r23,hi8(-(-15))
 589 02a8 C60F      		add r28,r22
 590 02aa D71F      		adc r29,r23
 591               	.LVL27:
  99:effect.c      **** 		while (i>0)
 592               		.loc 1 99 0
 593 02ac 1C16      		cp __zero_reg__,r28
 594 02ae 1D06      		cpc __zero_reg__,r29
 595 02b0 04F0      		brlt .L23
 110:effect.c      **** 		delay_ms(1000);
 596               		.loc 1 110 0
 597 02b2 88EE      		ldi r24,lo8(1000)
 598 02b4 93E0      		ldi r25,hi8(1000)
 599 02b6 0E94 0000 		call delay_ms
 600               	.LVL28:
 112:effect.c      **** 		i = 750;
 601               		.loc 1 112 0
 602 02ba CEEE      		ldi r28,lo8(750)
 603 02bc D2E0      		ldi r29,hi8(750)
 604               	.LVL29:
 605               	.L24:
 115:effect.c      **** 			fill(0x00);
 606               		.loc 1 115 0
 607 02be 80E0      		ldi r24,lo8(0)
 608 02c0 0E94 0000 		call fill
 609               		.loc 1 116 0
 610 02c4 C501      		movw r24,r10
 611 02c6 8C1B      		sub r24,r28
 612 02c8 9D0B      		sbc r25,r29
 613 02ca 0E94 0000 		call delay_ms
 117:effect.c      **** 			
 118:effect.c      **** 			fill(0xff);
 614               		.loc 1 118 0
 615 02ce 8FEF      		ldi r24,lo8(-1)
 616 02d0 0E94 0000 		call fill
 119:effect.c      **** 			delay_ms(100);
 617               		.loc 1 119 0
 618 02d4 84E6      		ldi r24,lo8(100)
 619 02d6 90E0      		ldi r25,hi8(100)
 620 02d8 0E94 0000 		call delay_ms
 120:effect.c      **** 			
 121:effect.c      **** 			i = i - (15+(1000/(i/10)));
 621               		.loc 1 121 0
 622 02dc CE01      		movw r24,r28
 623 02de B701      		movw r22,r14
 624 02e0 0E94 0000 		call __divmodhi4
 625 02e4 C601      		movw r24,r12
 626 02e6 0E94 0000 		call __divmodhi4
 627 02ea 6F50      		subi r22,lo8(-(-15))
 628 02ec 7040      		sbci r23,hi8(-(-15))
 629 02ee C60F      		add r28,r22
 630 02f0 D71F      		adc r29,r23
 631               	.LVL30:
 113:effect.c      **** 		while (i>0)
 632               		.loc 1 113 0
 633 02f2 1C16      		cp __zero_reg__,r28
 634 02f4 1D06      		cpc __zero_reg__,r29
 635 02f6 04F0      		brlt .L24
 636 02f8 0150      		subi r16,lo8(-(-1))
 637 02fa 1040      		sbci r17,hi8(-(-1))
  96:effect.c      **** 	for (r=0;r<2;r++)
 638               		.loc 1 96 0
 639 02fc 01F0      		breq .L21
 640               	.LVL31:
 641               	.L22:
  92:effect.c      **** {
 642               		.loc 1 92 0 discriminator 1
 643 02fe CEEE      		ldi r28,lo8(750)
 644 0300 D2E0      		ldi r29,hi8(750)
 645 0302 00C0      		rjmp .L23
 646               	.LVL32:
 647               	.L21:
 648               	/* epilogue start */
 122:effect.c      **** 		}
 123:effect.c      **** 	}
 124:effect.c      **** 
 125:effect.c      **** }
 649               		.loc 1 125 0
 650 0304 DF91      		pop r29
 651 0306 CF91      		pop r28
 652               	.LVL33:
 653 0308 1F91      		pop r17
 654 030a 0F91      		pop r16
 655 030c FF90      		pop r15
 656 030e EF90      		pop r14
 657 0310 DF90      		pop r13
 658 0312 CF90      		pop r12
 659 0314 BF90      		pop r11
 660 0316 AF90      		pop r10
 661 0318 0895      		ret
 662               		.cfi_endproc
 663               	.LFE6:
 665               	.global	effect_box_shrink_grow
 667               	effect_box_shrink_grow:
 668               	.LFB7:
 126:effect.c      **** 
 127:effect.c      **** void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
 128:effect.c      **** {
 669               		.loc 1 128 0
 670               		.cfi_startproc
 671               	.LVL34:
 672 031a 2F92      		push r2
 673               	.LCFI43:
 674               		.cfi_def_cfa_offset 3
 675               		.cfi_offset 2, -2
 676 031c 3F92      		push r3
 677               	.LCFI44:
 678               		.cfi_def_cfa_offset 4
 679               		.cfi_offset 3, -3
 680 031e 4F92      		push r4
 681               	.LCFI45:
 682               		.cfi_def_cfa_offset 5
 683               		.cfi_offset 4, -4
 684 0320 5F92      		push r5
 685               	.LCFI46:
 686               		.cfi_def_cfa_offset 6
 687               		.cfi_offset 5, -5
 688 0322 6F92      		push r6
 689               	.LCFI47:
 690               		.cfi_def_cfa_offset 7
 691               		.cfi_offset 6, -6
 692 0324 7F92      		push r7
 693               	.LCFI48:
 694               		.cfi_def_cfa_offset 8
 695               		.cfi_offset 7, -7
 696 0326 8F92      		push r8
 697               	.LCFI49:
 698               		.cfi_def_cfa_offset 9
 699               		.cfi_offset 8, -8
 700 0328 9F92      		push r9
 701               	.LCFI50:
 702               		.cfi_def_cfa_offset 10
 703               		.cfi_offset 9, -9
 704 032a AF92      		push r10
 705               	.LCFI51:
 706               		.cfi_def_cfa_offset 11
 707               		.cfi_offset 10, -10
 708 032c BF92      		push r11
 709               	.LCFI52:
 710               		.cfi_def_cfa_offset 12
 711               		.cfi_offset 11, -11
 712 032e CF92      		push r12
 713               	.LCFI53:
 714               		.cfi_def_cfa_offset 13
 715               		.cfi_offset 12, -12
 716 0330 DF92      		push r13
 717               	.LCFI54:
 718               		.cfi_def_cfa_offset 14
 719               		.cfi_offset 13, -13
 720 0332 EF92      		push r14
 721               	.LCFI55:
 722               		.cfi_def_cfa_offset 15
 723               		.cfi_offset 14, -14
 724 0334 FF92      		push r15
 725               	.LCFI56:
 726               		.cfi_def_cfa_offset 16
 727               		.cfi_offset 15, -15
 728 0336 0F93      		push r16
 729               	.LCFI57:
 730               		.cfi_def_cfa_offset 17
 731               		.cfi_offset 16, -16
 732 0338 1F93      		push r17
 733               	.LCFI58:
 734               		.cfi_def_cfa_offset 18
 735               		.cfi_offset 17, -17
 736 033a CF93      		push r28
 737               	.LCFI59:
 738               		.cfi_def_cfa_offset 19
 739               		.cfi_offset 28, -18
 740 033c DF93      		push r29
 741               	.LCFI60:
 742               		.cfi_def_cfa_offset 20
 743               		.cfi_offset 29, -19
 744 033e 00D0      		rcall .
 745 0340 00D0      		rcall .
 746               	.LCFI61:
 747               		.cfi_def_cfa_offset 24
 748 0342 CDB7      		in r28,__SP_L__
 749 0344 DEB7      		in r29,__SP_H__
 750               	.LCFI62:
 751               		.cfi_def_cfa_register 28
 752               	/* prologue: function */
 753               	/* frame size = 4 */
 754               	/* stack size = 22 */
 755               	.L__stack_usage = 22
 756 0346 3C01      		movw r6,r24
 757 0348 5B01      		movw r10,r22
 758 034a 2A01      		movw r4,r20
 759 034c 1901      		movw r2,r18
 760               	.LVL35:
 129:effect.c      **** 	int x, i, xyz;
 130:effect.c      **** 	for (x=0;x<iterations;x++)
 761               		.loc 1 130 0
 762 034e CC24      		clr r12
 763 0350 DD24      		clr r13
 127:effect.c      **** void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
 764               		.loc 1 127 0
 765 0352 E7E0      		ldi r30,lo8(7)
 766 0354 8E2E      		mov r8,r30
 767 0356 912C      		mov r9,__zero_reg__
 131:effect.c      **** 	{
 132:effect.c      **** 		for (i=0;i<16;i++)
 133:effect.c      **** 		{
 134:effect.c      ****             xyz = 7-i; // This reverses counter i between 0 and 7.
 135:effect.c      ****             if (i > 7) 
 136:effect.c      ****                 xyz = i-8; // at i > 7, i 8-15 becomes xyz 0-7.
 137:effect.c      ****             
 138:effect.c      ****             fill(0x00); delay_ms(1);
 139:effect.c      ****             cli(); // disable interrupts while the cube is being rotated
 140:effect.c      **** 			box_wireframe(0,0,0,xyz,xyz,xyz);
 141:effect.c      **** 
 142:effect.c      ****             if (flip > 0) // upside-down
 143:effect.c      ****                 mirror_z();
 144:effect.c      **** 
 145:effect.c      ****             if (rot == 1 || rot == 3)
 146:effect.c      ****                 mirror_y();
 147:effect.c      **** 
 148:effect.c      ****             if (rot == 2 || rot == 3)
 768               		.loc 1 148 0
 769 0358 CB01      		movw r24,r22
 770               	.LVL36:
 771 035a 0297      		sbiw r24,2
 772 035c 9A83      		std Y+2,r25
 773 035e 8983      		std Y+1,r24
 130:effect.c      **** 	for (x=0;x<iterations;x++)
 774               		.loc 1 130 0
 775 0360 00C0      		rjmp .L29
 776               	.LVL37:
 777               	.L37:
 778 0362 1C82      		std Y+4,__zero_reg__
 779 0364 1B82      		std Y+3,__zero_reg__
 780               	.L36:
 781               	.LVL38:
 135:effect.c      ****             if (i > 7) 
 782               		.loc 1 135 0
 783 0366 EB81      		ldd r30,Y+3
 784 0368 FC81      		ldd r31,Y+4
 785 036a E830      		cpi r30,8
 786 036c F105      		cpc r31,__zero_reg__
 787 036e 04F4      		brge .L30
 127:effect.c      **** void effect_box_shrink_grow (int iterations, int rot, int flip, uint16_t delay)
 788               		.loc 1 127 0
 789 0370 7401      		movw r14,r8
 790 0372 EE1A      		sub r14,r30
 791 0374 FF0A      		sbc r15,r31
 792 0376 00C0      		rjmp .L31
 793               	.L30:
 794 0378 78EF      		ldi r23,lo8(-8)
 795 037a E72E      		mov r14,r23
 796 037c 7FEF      		ldi r23,hi8(-8)
 797 037e F72E      		mov r15,r23
 798 0380 8B81      		ldd r24,Y+3
 799 0382 9C81      		ldd r25,Y+4
 800 0384 E80E      		add r14,r24
 801 0386 F91E      		adc r15,r25
 802               	.LVL39:
 803               	.L31:
 138:effect.c      ****             fill(0x00); delay_ms(1);
 804               		.loc 1 138 0
 805 0388 80E0      		ldi r24,lo8(0)
 806 038a 0E94 0000 		call fill
 807 038e 81E0      		ldi r24,lo8(1)
 808 0390 90E0      		ldi r25,hi8(1)
 809 0392 0E94 0000 		call delay_ms
 139:effect.c      ****             cli(); // disable interrupts while the cube is being rotated
 810               		.loc 1 139 0
 811               	/* #APP */
 812               	 ;  139 "effect.c" 1
 813 0396 F894      		cli
 814               	 ;  0 "" 2
 140:effect.c      **** 			box_wireframe(0,0,0,xyz,xyz,xyz);
 815               		.loc 1 140 0
 816               	/* #NOAPP */
 817 0398 80E0      		ldi r24,lo8(0)
 818 039a 90E0      		ldi r25,hi8(0)
 819 039c 60E0      		ldi r22,lo8(0)
 820 039e 70E0      		ldi r23,hi8(0)
 821 03a0 40E0      		ldi r20,lo8(0)
 822 03a2 50E0      		ldi r21,hi8(0)
 823 03a4 9701      		movw r18,r14
 824 03a6 8701      		movw r16,r14
 825 03a8 0E94 0000 		call box_wireframe
 142:effect.c      ****             if (flip > 0) // upside-down
 826               		.loc 1 142 0
 827 03ac 1414      		cp __zero_reg__,r4
 828 03ae 1504      		cpc __zero_reg__,r5
 829 03b0 04F4      		brge .L32
 143:effect.c      ****                 mirror_z();
 830               		.loc 1 143 0
 831 03b2 0E94 0000 		call mirror_z
 832               	.L32:
 145:effect.c      ****             if (rot == 1 || rot == 3)
 833               		.loc 1 145 0
 834 03b6 91E0      		ldi r25,lo8(1)
 835 03b8 A916      		cp r10,r25
 836 03ba B104      		cpc r11,__zero_reg__
 837 03bc 01F0      		breq .L33
 145:effect.c      ****             if (rot == 1 || rot == 3)
 838               		.loc 1 145 0 is_stmt 0 discriminator 1
 839 03be E3E0      		ldi r30,lo8(3)
 840 03c0 AE16      		cp r10,r30
 841 03c2 B104      		cpc r11,__zero_reg__
 842 03c4 01F4      		brne .L34
 843               	.L33:
 146:effect.c      ****                 mirror_y();
 844               		.loc 1 146 0 is_stmt 1
 845 03c6 0E94 0000 		call mirror_y
 846               	.L34:
 847               		.loc 1 148 0
 848 03ca 8981      		ldd r24,Y+1
 849 03cc 9A81      		ldd r25,Y+2
 850 03ce 8230      		cpi r24,2
 851 03d0 9105      		cpc r25,__zero_reg__
 852 03d2 00F4      		brsh .L35
 149:effect.c      ****                 mirror_x();
 853               		.loc 1 149 0
 854 03d4 0E94 0000 		call mirror_x
 855               	.L35:
 150:effect.c      ****             
 151:effect.c      ****             sei(); // enable interrupts
 856               		.loc 1 151 0
 857               	/* #APP */
 858               	 ;  151 "effect.c" 1
 859 03d8 7894      		sei
 860               	 ;  0 "" 2
 152:effect.c      **** 			delay_ms(delay);
 861               		.loc 1 152 0
 862               	/* #NOAPP */
 863 03da C101      		movw r24,r2
 864 03dc 0E94 0000 		call delay_ms
 153:effect.c      **** 	        fill(0x00);
 865               		.loc 1 153 0
 866 03e0 80E0      		ldi r24,lo8(0)
 867 03e2 0E94 0000 		call fill
 132:effect.c      **** 		for (i=0;i<16;i++)
 868               		.loc 1 132 0
 869 03e6 EB81      		ldd r30,Y+3
 870 03e8 FC81      		ldd r31,Y+4
 871 03ea 3196      		adiw r30,1
 872 03ec FC83      		std Y+4,r31
 873 03ee EB83      		std Y+3,r30
 874               	.LVL40:
 875 03f0 E031      		cpi r30,16
 876 03f2 F105      		cpc r31,__zero_reg__
 877 03f4 01F0      		breq .+2
 878 03f6 00C0      		rjmp .L36
 130:effect.c      **** 	for (x=0;x<iterations;x++)
 879               		.loc 1 130 0
 880 03f8 0894      		sec
 881 03fa C11C      		adc r12,__zero_reg__
 882 03fc D11C      		adc r13,__zero_reg__
 883               	.LVL41:
 884               	.L29:
 130:effect.c      **** 	for (x=0;x<iterations;x++)
 885               		.loc 1 130 0 is_stmt 0 discriminator 1
 886 03fe C614      		cp r12,r6
 887 0400 D704      		cpc r13,r7
 888 0402 04F4      		brge .+2
 889 0404 00C0      		rjmp .L37
 890               	/* epilogue start */
 154:effect.c      ****         }
 155:effect.c      ****     }
 156:effect.c      **** }
 891               		.loc 1 156 0 is_stmt 1
 892 0406 0F90      		pop __tmp_reg__
 893 0408 0F90      		pop __tmp_reg__
 894 040a 0F90      		pop __tmp_reg__
 895 040c 0F90      		pop __tmp_reg__
 896 040e DF91      		pop r29
 897 0410 CF91      		pop r28
 898 0412 1F91      		pop r17
 899 0414 0F91      		pop r16
 900 0416 FF90      		pop r15
 901 0418 EF90      		pop r14
 902 041a DF90      		pop r13
 903 041c CF90      		pop r12
 904               	.LVL42:
 905 041e BF90      		pop r11
 906 0420 AF90      		pop r10
 907               	.LVL43:
 908 0422 9F90      		pop r9
 909 0424 8F90      		pop r8
 910 0426 7F90      		pop r7
 911 0428 6F90      		pop r6
 912               	.LVL44:
 913 042a 5F90      		pop r5
 914 042c 4F90      		pop r4
 915               	.LVL45:
 916 042e 3F90      		pop r3
 917 0430 2F90      		pop r2
 918               	.LVL46:
 919 0432 0895      		ret
 920               		.cfi_endproc
 921               	.LFE7:
 923               	.global	effect_box_woopwoop
 925               	effect_box_woopwoop:
 926               	.LFB8:
 157:effect.c      **** 
 158:effect.c      **** // Creates a wireframe box that shrinks or grows out from the center of the cube.
 159:effect.c      **** void effect_box_woopwoop (int delay, int grow)
 160:effect.c      **** {
 927               		.loc 1 160 0
 928               		.cfi_startproc
 929               	.LVL47:
 930 0434 8F92      		push r8
 931               	.LCFI63:
 932               		.cfi_def_cfa_offset 3
 933               		.cfi_offset 8, -2
 934 0436 9F92      		push r9
 935               	.LCFI64:
 936               		.cfi_def_cfa_offset 4
 937               		.cfi_offset 9, -3
 938 0438 AF92      		push r10
 939               	.LCFI65:
 940               		.cfi_def_cfa_offset 5
 941               		.cfi_offset 10, -4
 942 043a BF92      		push r11
 943               	.LCFI66:
 944               		.cfi_def_cfa_offset 6
 945               		.cfi_offset 11, -5
 946 043c CF92      		push r12
 947               	.LCFI67:
 948               		.cfi_def_cfa_offset 7
 949               		.cfi_offset 12, -6
 950 043e DF92      		push r13
 951               	.LCFI68:
 952               		.cfi_def_cfa_offset 8
 953               		.cfi_offset 13, -7
 954 0440 EF92      		push r14
 955               	.LCFI69:
 956               		.cfi_def_cfa_offset 9
 957               		.cfi_offset 14, -8
 958 0442 FF92      		push r15
 959               	.LCFI70:
 960               		.cfi_def_cfa_offset 10
 961               		.cfi_offset 15, -9
 962 0444 0F93      		push r16
 963               	.LCFI71:
 964               		.cfi_def_cfa_offset 11
 965               		.cfi_offset 16, -10
 966 0446 1F93      		push r17
 967               	.LCFI72:
 968               		.cfi_def_cfa_offset 12
 969               		.cfi_offset 17, -11
 970 0448 CF93      		push r28
 971               	.LCFI73:
 972               		.cfi_def_cfa_offset 13
 973               		.cfi_offset 28, -12
 974 044a DF93      		push r29
 975               	.LCFI74:
 976               		.cfi_def_cfa_offset 14
 977               		.cfi_offset 29, -13
 978               	/* prologue: function */
 979               	/* frame size = 0 */
 980               	/* stack size = 12 */
 981               	.L__stack_usage = 12
 982 044c 5C01      		movw r10,r24
 983 044e 4B01      		movw r8,r22
 161:effect.c      **** 	int i,ii;
 162:effect.c      **** 	
 163:effect.c      **** 	fill(0x00);
 984               		.loc 1 163 0
 985 0450 80E0      		ldi r24,lo8(0)
 986               	.LVL48:
 987 0452 0E94 0000 		call fill
 988               	.LVL49:
 164:effect.c      **** 	for (i=0;i<4;i++)
 989               		.loc 1 164 0
 990 0456 C0E0      		ldi r28,lo8(0)
 991 0458 D0E0      		ldi r29,hi8(0)
 159:effect.c      **** void effect_box_woopwoop (int delay, int grow)
 992               		.loc 1 159 0
 993 045a F3E0      		ldi r31,lo8(3)
 994 045c CF2E      		mov r12,r31
 995 045e D12C      		mov r13,__zero_reg__
 996               	.LVL50:
 997               	.L41:
 165:effect.c      **** 	{
 166:effect.c      ****         ii = i;
 167:effect.c      ****         if (grow > 0)
 998               		.loc 1 167 0
 999 0460 1814      		cp __zero_reg__,r8
 1000 0462 1904      		cpc __zero_reg__,r9
 1001 0464 04F4      		brge .L42
 159:effect.c      **** void effect_box_woopwoop (int delay, int grow)
 1002               		.loc 1 159 0
 1003 0466 C601      		movw r24,r12
 1004 0468 8C1B      		sub r24,r28
 1005 046a 9D0B      		sbc r25,r29
 1006               	.LVL51:
 1007 046c 00C0      		rjmp .L40
 1008               	.LVL52:
 1009               	.L42:
 1010               		.loc 1 167 0
 1011 046e CE01      		movw r24,r28
 1012               	.LVL53:
 1013               	.L40:
 168:effect.c      ****             ii = 3-i;
 169:effect.c      **** 
 170:effect.c      **** 		box_wireframe(4+ii,4+ii,4+ii,3-ii,3-ii,3-ii);
 1014               		.loc 1 170 0
 1015 0470 AC01      		movw r20,r24
 1016 0472 4C5F      		subi r20,lo8(-(4))
 1017 0474 5F4F      		sbci r21,hi8(-(4))
 1018 0476 7601      		movw r14,r12
 1019 0478 E81A      		sub r14,r24
 1020 047a F90A      		sbc r15,r25
 1021 047c CA01      		movw r24,r20
 1022               	.LVL54:
 1023 047e BA01      		movw r22,r20
 1024 0480 9701      		movw r18,r14
 1025 0482 8701      		movw r16,r14
 1026 0484 0E94 0000 		call box_wireframe
 1027               	.LVL55:
 171:effect.c      **** 		delay_ms(delay);
 1028               		.loc 1 171 0
 1029 0488 C501      		movw r24,r10
 1030 048a 0E94 0000 		call delay_ms
 172:effect.c      **** 		fill(0x00);
 1031               		.loc 1 172 0
 1032 048e 80E0      		ldi r24,lo8(0)
 1033 0490 0E94 0000 		call fill
 164:effect.c      **** 	for (i=0;i<4;i++)
 1034               		.loc 1 164 0
 1035 0494 2196      		adiw r28,1
 1036               	.LVL56:
 1037 0496 C430      		cpi r28,4
 1038 0498 D105      		cpc r29,__zero_reg__
 1039 049a 01F4      		brne .L41
 1040               	/* epilogue start */
 173:effect.c      **** 	}
 174:effect.c      **** }
 1041               		.loc 1 174 0
 1042 049c DF91      		pop r29
 1043 049e CF91      		pop r28
 1044               	.LVL57:
 1045 04a0 1F91      		pop r17
 1046 04a2 0F91      		pop r16
 1047 04a4 FF90      		pop r15
 1048 04a6 EF90      		pop r14
 1049 04a8 DF90      		pop r13
 1050 04aa CF90      		pop r12
 1051 04ac BF90      		pop r11
 1052 04ae AF90      		pop r10
 1053               	.LVL58:
 1054 04b0 9F90      		pop r9
 1055 04b2 8F90      		pop r8
 1056               	.LVL59:
 1057 04b4 0895      		ret
 1058               		.cfi_endproc
 1059               	.LFE8:
 1061               	.global	sendvoxel_z
 1063               	sendvoxel_z:
 1064               	.LFB9:
 175:effect.c      **** 
 176:effect.c      **** 
 177:effect.c      **** // Send a voxel flying from one side of the cube to the other
 178:effect.c      **** // If its at the bottom, send it to the top..
 179:effect.c      **** void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
 180:effect.c      **** {
 1065               		.loc 1 180 0
 1066               		.cfi_startproc
 1067               	.LVL60:
 1068 04b6 6F92      		push r6
 1069               	.LCFI75:
 1070               		.cfi_def_cfa_offset 3
 1071               		.cfi_offset 6, -2
 1072 04b8 7F92      		push r7
 1073               	.LCFI76:
 1074               		.cfi_def_cfa_offset 4
 1075               		.cfi_offset 7, -3
 1076 04ba 9F92      		push r9
 1077               	.LCFI77:
 1078               		.cfi_def_cfa_offset 5
 1079               		.cfi_offset 9, -4
 1080 04bc AF92      		push r10
 1081               	.LCFI78:
 1082               		.cfi_def_cfa_offset 6
 1083               		.cfi_offset 10, -5
 1084 04be BF92      		push r11
 1085               	.LCFI79:
 1086               		.cfi_def_cfa_offset 7
 1087               		.cfi_offset 11, -6
 1088 04c0 CF92      		push r12
 1089               	.LCFI80:
 1090               		.cfi_def_cfa_offset 8
 1091               		.cfi_offset 12, -7
 1092 04c2 DF92      		push r13
 1093               	.LCFI81:
 1094               		.cfi_def_cfa_offset 9
 1095               		.cfi_offset 13, -8
 1096 04c4 EF92      		push r14
 1097               	.LCFI82:
 1098               		.cfi_def_cfa_offset 10
 1099               		.cfi_offset 14, -9
 1100 04c6 FF92      		push r15
 1101               	.LCFI83:
 1102               		.cfi_def_cfa_offset 11
 1103               		.cfi_offset 15, -10
 1104 04c8 0F93      		push r16
 1105               	.LCFI84:
 1106               		.cfi_def_cfa_offset 12
 1107               		.cfi_offset 16, -11
 1108 04ca 1F93      		push r17
 1109               	.LCFI85:
 1110               		.cfi_def_cfa_offset 13
 1111               		.cfi_offset 17, -12
 1112 04cc CF93      		push r28
 1113               	.LCFI86:
 1114               		.cfi_def_cfa_offset 14
 1115               		.cfi_offset 28, -13
 1116 04ce DF93      		push r29
 1117               	.LCFI87:
 1118               		.cfi_def_cfa_offset 15
 1119               		.cfi_offset 29, -14
 1120               	/* prologue: function */
 1121               	/* frame size = 0 */
 1122               	/* stack size = 13 */
 1123               	.L__stack_usage = 13
 1124 04d0 F82E      		mov r15,r24
 1125 04d2 E62E      		mov r14,r22
 1126 04d4 942E      		mov r9,r20
 1127 04d6 3901      		movw r6,r18
 1128               	.LVL61:
 181:effect.c      **** 	int i, ii;
 182:effect.c      **** 	for (i=0; i<8; i++)
 1129               		.loc 1 182 0
 1130 04d8 00E0      		ldi r16,lo8(0)
 1131 04da 10E0      		ldi r17,hi8(0)
 179:effect.c      **** void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
 1132               		.loc 1 179 0
 1133 04dc A7E0      		ldi r26,lo8(7)
 1134 04de CA2E      		mov r12,r26
 1135 04e0 D12C      		mov r13,__zero_reg__
 1136 04e2 B8E0      		ldi r27,lo8(8)
 1137 04e4 AB2E      		mov r10,r27
 1138 04e6 B12C      		mov r11,__zero_reg__
 1139               	.LVL62:
 1140               	.L47:
 183:effect.c      **** 	{
 184:effect.c      **** 		if (z == 7)
 1141               		.loc 1 184 0
 1142 04e8 87E0      		ldi r24,lo8(7)
 1143 04ea 9816      		cp r9,r24
 1144 04ec 01F4      		brne .L45
 179:effect.c      **** void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
 1145               		.loc 1 179 0
 1146 04ee E601      		movw r28,r12
 1147 04f0 C01B      		sub r28,r16
 1148 04f2 D10B      		sbc r29,r17
 1149               	.LVL63:
 1150 04f4 A501      		movw r20,r10
 1151 04f6 401B      		sub r20,r16
 1152 04f8 510B      		sbc r21,r17
 185:effect.c      **** 		{
 186:effect.c      **** 			ii = 7-i;
 187:effect.c      **** 			clrvoxel(x,y,ii+1);
 1153               		.loc 1 187 0
 1154 04fa 8F2D      		mov r24,r15
 1155 04fc 90E0      		ldi r25,lo8(0)
 1156 04fe 6E2D      		mov r22,r14
 1157 0500 70E0      		ldi r23,lo8(0)
 1158 0502 0E94 0000 		call clrvoxel
 1159 0506 00C0      		rjmp .L46
 1160               	.LVL64:
 1161               	.L45:
 179:effect.c      **** void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
 1162               		.loc 1 179 0
 1163 0508 A801      		movw r20,r16
 1164 050a 4150      		subi r20,lo8(-(-1))
 1165 050c 5040      		sbci r21,hi8(-(-1))
 188:effect.c      **** 		} else
 189:effect.c      **** 		{
 190:effect.c      **** 			ii = i;
 191:effect.c      **** 			clrvoxel(x,y,ii-1);
 1166               		.loc 1 191 0
 1167 050e 8F2D      		mov r24,r15
 1168 0510 90E0      		ldi r25,lo8(0)
 1169 0512 6E2D      		mov r22,r14
 1170 0514 70E0      		ldi r23,lo8(0)
 1171 0516 0E94 0000 		call clrvoxel
 1172 051a E801      		movw r28,r16
 1173               	.LVL65:
 1174               	.L46:
 192:effect.c      **** 		}
 193:effect.c      **** 		setvoxel(x,y,ii);
 1175               		.loc 1 193 0
 1176 051c 8F2D      		mov r24,r15
 1177 051e 90E0      		ldi r25,lo8(0)
 1178 0520 6E2D      		mov r22,r14
 1179 0522 70E0      		ldi r23,lo8(0)
 1180 0524 AE01      		movw r20,r28
 1181 0526 0E94 0000 		call setvoxel
 194:effect.c      **** 		delay_ms(delay);
 1182               		.loc 1 194 0
 1183 052a C301      		movw r24,r6
 1184 052c 0E94 0000 		call delay_ms
 182:effect.c      **** 	for (i=0; i<8; i++)
 1185               		.loc 1 182 0
 1186 0530 0F5F      		subi r16,lo8(-(1))
 1187 0532 1F4F      		sbci r17,hi8(-(1))
 1188               	.LVL66:
 1189 0534 0830      		cpi r16,8
 1190 0536 1105      		cpc r17,__zero_reg__
 1191 0538 01F4      		brne .L47
 1192               	/* epilogue start */
 195:effect.c      **** 	}
 196:effect.c      **** }
 1193               		.loc 1 196 0
 1194 053a DF91      		pop r29
 1195 053c CF91      		pop r28
 1196               	.LVL67:
 1197 053e 1F91      		pop r17
 1198 0540 0F91      		pop r16
 1199               	.LVL68:
 1200 0542 FF90      		pop r15
 1201               	.LVL69:
 1202 0544 EF90      		pop r14
 1203               	.LVL70:
 1204 0546 DF90      		pop r13
 1205 0548 CF90      		pop r12
 1206 054a BF90      		pop r11
 1207 054c AF90      		pop r10
 1208 054e 9F90      		pop r9
 1209               	.LVL71:
 1210 0550 7F90      		pop r7
 1211 0552 6F90      		pop r6
 1212               	.LVL72:
 1213 0554 0895      		ret
 1214               		.cfi_endproc
 1215               	.LFE9:
 1217               	.global	sendplane_rand_z
 1219               	sendplane_rand_z:
 1220               	.LFB10:
 197:effect.c      **** 
 198:effect.c      **** // Send all the voxels from one side of the cube to the other
 199:effect.c      **** // Start at z and send to the opposite side.
 200:effect.c      **** // Sends in random order.
 201:effect.c      **** void sendplane_rand_z (unsigned char z, int delay, int wait)
 202:effect.c      **** {
 1221               		.loc 1 202 0
 1222               		.cfi_startproc
 1223               	.LVL73:
 1224 0556 AF92      		push r10
 1225               	.LCFI88:
 1226               		.cfi_def_cfa_offset 3
 1227               		.cfi_offset 10, -2
 1228 0558 BF92      		push r11
 1229               	.LCFI89:
 1230               		.cfi_def_cfa_offset 4
 1231               		.cfi_offset 11, -3
 1232 055a CF92      		push r12
 1233               	.LCFI90:
 1234               		.cfi_def_cfa_offset 5
 1235               		.cfi_offset 12, -4
 1236 055c DF92      		push r13
 1237               	.LCFI91:
 1238               		.cfi_def_cfa_offset 6
 1239               		.cfi_offset 13, -5
 1240 055e EF92      		push r14
 1241               	.LCFI92:
 1242               		.cfi_def_cfa_offset 7
 1243               		.cfi_offset 14, -6
 1244 0560 FF92      		push r15
 1245               	.LCFI93:
 1246               		.cfi_def_cfa_offset 8
 1247               		.cfi_offset 15, -7
 1248 0562 0F93      		push r16
 1249               	.LCFI94:
 1250               		.cfi_def_cfa_offset 9
 1251               		.cfi_offset 16, -8
 1252 0564 1F93      		push r17
 1253               	.LCFI95:
 1254               		.cfi_def_cfa_offset 10
 1255               		.cfi_offset 17, -9
 1256 0566 CF93      		push r28
 1257               	.LCFI96:
 1258               		.cfi_def_cfa_offset 11
 1259               		.cfi_offset 28, -10
 1260 0568 DF93      		push r29
 1261               	.LCFI97:
 1262               		.cfi_def_cfa_offset 12
 1263               		.cfi_offset 29, -11
 1264               	/* prologue: function */
 1265               	/* frame size = 0 */
 1266               	/* stack size = 10 */
 1267               	.L__stack_usage = 10
 1268 056a C82F      		mov r28,r24
 1269 056c 6B01      		movw r12,r22
 1270 056e 5A01      		movw r10,r20
 1271               	.LVL74:
 203:effect.c      **** 	unsigned char loop = 16;
 204:effect.c      **** 	unsigned char x, y;
 205:effect.c      **** 
 206:effect.c      **** 	fill(0x00);
 1272               		.loc 1 206 0
 1273 0570 80E0      		ldi r24,lo8(0)
 1274               	.LVL75:
 1275 0572 0E94 0000 		call fill
 1276               	.LVL76:
 207:effect.c      **** 
 208:effect.c      **** 	setplane_z(z);
 1277               		.loc 1 208 0
 1278 0576 8C2F      		mov r24,r28
 1279 0578 90E0      		ldi r25,lo8(0)
 1280 057a 0E94 0000 		call setplane_z
 209:effect.c      **** 	
 210:effect.c      **** 	// Send voxels at random untill all 16 have crossed the cube.
 211:effect.c      **** 	while(loop)
 1281               		.loc 1 211 0
 1282 057e 11E1      		ldi r17,lo8(17)
 212:effect.c      **** 	{
 213:effect.c      **** 		x = rand()%4;
 1283               		.loc 1 213 0
 1284 0580 D4E0      		ldi r29,lo8(4)
 1285 0582 ED2E      		mov r14,r29
 1286 0584 F12C      		mov r15,__zero_reg__
 211:effect.c      **** 	while(loop)
 1287               		.loc 1 211 0
 1288 0586 00C0      		rjmp .L50
 1289               	.LVL77:
 1290               	.L52:
 1291               		.loc 1 213 0
 1292 0588 0E94 0000 		call rand
 1293 058c B701      		movw r22,r14
 1294 058e 0E94 0000 		call __divmodhi4
 1295 0592 D82F      		mov r29,r24
 214:effect.c      **** 		y = rand()%4;
 1296               		.loc 1 214 0
 1297 0594 0E94 0000 		call rand
 1298 0598 B701      		movw r22,r14
 1299 059a 0E94 0000 		call __divmodhi4
 1300 059e 082F      		mov r16,r24
 215:effect.c      **** 		if (getvoxel(x,y,z))
 1301               		.loc 1 215 0
 1302 05a0 8D2F      		mov r24,r29
 1303 05a2 90E0      		ldi r25,lo8(0)
 1304 05a4 602F      		mov r22,r16
 1305 05a6 70E0      		ldi r23,lo8(0)
 1306 05a8 4C2F      		mov r20,r28
 1307 05aa 50E0      		ldi r21,lo8(0)
 1308 05ac 0E94 0000 		call getvoxel
 1309 05b0 8823      		tst r24
 1310 05b2 01F0      		breq .L52
 216:effect.c      **** 		{
 217:effect.c      **** 			// Send the voxel flying
 218:effect.c      **** 			sendvoxel_z(x,y,z,delay);
 1311               		.loc 1 218 0
 1312 05b4 8D2F      		mov r24,r29
 1313 05b6 602F      		mov r22,r16
 1314 05b8 4C2F      		mov r20,r28
 1315 05ba 9601      		movw r18,r12
 1316 05bc 0E94 0000 		call sendvoxel_z
 219:effect.c      **** 			delay_ms(wait);
 1317               		.loc 1 219 0
 1318 05c0 C501      		movw r24,r10
 1319 05c2 0E94 0000 		call delay_ms
 1320               	.L50:
 1321               		.loc 1 219 0 is_stmt 0 discriminator 1
 1322 05c6 1150      		subi r17,lo8(-(-1))
 211:effect.c      **** 	while(loop)
 1323               		.loc 1 211 0 is_stmt 1 discriminator 1
 1324 05c8 01F4      		brne .L52
 1325               	/* epilogue start */
 220:effect.c      **** 			loop--; // one down, loop-- to go. when this hits 0, the loop exits. 
 221:effect.c      **** 		}
 222:effect.c      **** 	}
 223:effect.c      **** }
 1326               		.loc 1 223 0
 1327 05ca DF91      		pop r29
 1328 05cc CF91      		pop r28
 1329               	.LVL78:
 1330 05ce 1F91      		pop r17
 1331 05d0 0F91      		pop r16
 1332 05d2 FF90      		pop r15
 1333 05d4 EF90      		pop r14
 1334 05d6 DF90      		pop r13
 1335 05d8 CF90      		pop r12
 1336               	.LVL79:
 1337 05da BF90      		pop r11
 1338 05dc AF90      		pop r10
 1339               	.LVL80:
 1340 05de 0895      		ret
 1341               		.cfi_endproc
 1342               	.LFE10:
 1344               	.global	sendvoxels_rand_z
 1346               	sendvoxels_rand_z:
 1347               	.LFB11:
 224:effect.c      **** 
 225:effect.c      **** // For each coordinate along X and Y, a voxel is set either at level 0 or at level 7
 226:effect.c      **** // for n iterations, a random voxel is sent to the opposite side of where it was.
 227:effect.c      **** void sendvoxels_rand_z (int iterations, int delay, int wait)
 228:effect.c      **** {
 1348               		.loc 1 228 0
 1349               		.cfi_startproc
 1350               	.LVL81:
 1351 05e0 2F92      		push r2
 1352               	.LCFI98:
 1353               		.cfi_def_cfa_offset 3
 1354               		.cfi_offset 2, -2
 1355 05e2 3F92      		push r3
 1356               	.LCFI99:
 1357               		.cfi_def_cfa_offset 4
 1358               		.cfi_offset 3, -3
 1359 05e4 4F92      		push r4
 1360               	.LCFI100:
 1361               		.cfi_def_cfa_offset 5
 1362               		.cfi_offset 4, -4
 1363 05e6 5F92      		push r5
 1364               	.LCFI101:
 1365               		.cfi_def_cfa_offset 6
 1366               		.cfi_offset 5, -5
 1367 05e8 6F92      		push r6
 1368               	.LCFI102:
 1369               		.cfi_def_cfa_offset 7
 1370               		.cfi_offset 6, -6
 1371 05ea 7F92      		push r7
 1372               	.LCFI103:
 1373               		.cfi_def_cfa_offset 8
 1374               		.cfi_offset 7, -7
 1375 05ec 8F92      		push r8
 1376               	.LCFI104:
 1377               		.cfi_def_cfa_offset 9
 1378               		.cfi_offset 8, -8
 1379 05ee 9F92      		push r9
 1380               	.LCFI105:
 1381               		.cfi_def_cfa_offset 10
 1382               		.cfi_offset 9, -9
 1383 05f0 AF92      		push r10
 1384               	.LCFI106:
 1385               		.cfi_def_cfa_offset 11
 1386               		.cfi_offset 10, -10
 1387 05f2 BF92      		push r11
 1388               	.LCFI107:
 1389               		.cfi_def_cfa_offset 12
 1390               		.cfi_offset 11, -11
 1391 05f4 DF92      		push r13
 1392               	.LCFI108:
 1393               		.cfi_def_cfa_offset 13
 1394               		.cfi_offset 13, -12
 1395 05f6 EF92      		push r14
 1396               	.LCFI109:
 1397               		.cfi_def_cfa_offset 14
 1398               		.cfi_offset 14, -13
 1399 05f8 FF92      		push r15
 1400               	.LCFI110:
 1401               		.cfi_def_cfa_offset 15
 1402               		.cfi_offset 15, -14
 1403 05fa 0F93      		push r16
 1404               	.LCFI111:
 1405               		.cfi_def_cfa_offset 16
 1406               		.cfi_offset 16, -15
 1407 05fc 1F93      		push r17
 1408               	.LCFI112:
 1409               		.cfi_def_cfa_offset 17
 1410               		.cfi_offset 17, -16
 1411 05fe CF93      		push r28
 1412               	.LCFI113:
 1413               		.cfi_def_cfa_offset 18
 1414               		.cfi_offset 28, -17
 1415 0600 DF93      		push r29
 1416               	.LCFI114:
 1417               		.cfi_def_cfa_offset 19
 1418               		.cfi_offset 29, -18
 1419               	/* prologue: function */
 1420               	/* frame size = 0 */
 1421               	/* stack size = 17 */
 1422               	.L__stack_usage = 17
 1423 0602 1C01      		movw r2,r24
 1424 0604 3B01      		movw r6,r22
 1425 0606 2A01      		movw r4,r20
 1426               	.LVL82:
 229:effect.c      **** 	unsigned char x, y, last_x = 0, last_y = 0, i;
 230:effect.c      **** 
 231:effect.c      **** 	fill(0x00);
 1427               		.loc 1 231 0
 1428 0608 80E0      		ldi r24,lo8(0)
 1429               	.LVL83:
 1430 060a 0E94 0000 		call fill
 1431               	.LVL84:
 1432 060e 00E0      		ldi r16,lo8(0)
 1433 0610 10E0      		ldi r17,hi8(0)
 232:effect.c      **** 
 233:effect.c      **** 	// Loop through all the X and Y coordinates
 234:effect.c      **** 	for (x=0;x<8;x++)
 235:effect.c      **** 	{
 236:effect.c      **** 		for (y=0;y<8;y++)
 237:effect.c      **** 		{
 238:effect.c      **** 			// Then set a voxel either at the top or at the bottom
 239:effect.c      ****             // rand()%2 returns either 0 or 1. multiplying by 7 gives either 0 or 7.
 240:effect.c      ****             setvoxel(x,y,((rand()%2)*7));
 1434               		.loc 1 240 0
 1435 0612 32E0      		ldi r19,lo8(2)
 1436 0614 E32E      		mov r14,r19
 1437 0616 F12C      		mov r15,__zero_reg__
 1438 0618 00C0      		rjmp .L55
 1439               	.LVL85:
 1440               	.L56:
 1441               		.loc 1 240 0 is_stmt 0 discriminator 2
 1442 061a 0E94 0000 		call rand
 1443 061e B701      		movw r22,r14
 1444 0620 0E94 0000 		call __divmodhi4
 1445 0624 AC01      		movw r20,r24
 1446 0626 23E0      		ldi r18,3
 1447 0628 440F      	1:	lsl r20
 1448 062a 551F      		rol r21
 1449 062c 2A95      		dec r18
 1450 062e 01F4      		brne 1b
 1451 0630 481B      		sub r20,r24
 1452 0632 590B      		sbc r21,r25
 1453 0634 C801      		movw r24,r16
 1454 0636 BE01      		movw r22,r28
 1455 0638 0E94 0000 		call setvoxel
 1456 063c 2196      		adiw r28,1
 236:effect.c      **** 		for (y=0;y<8;y++)
 1457               		.loc 1 236 0 is_stmt 1 discriminator 2
 1458 063e C830      		cpi r28,8
 1459 0640 D105      		cpc r29,__zero_reg__
 1460 0642 01F4      		brne .L56
 236:effect.c      **** 		for (y=0;y<8;y++)
 1461               		.loc 1 236 0 is_stmt 0
 1462 0644 0F5F      		subi r16,lo8(-(1))
 1463 0646 1F4F      		sbci r17,hi8(-(1))
 234:effect.c      **** 	for (x=0;x<8;x++)
 1464               		.loc 1 234 0 is_stmt 1
 1465 0648 0830      		cpi r16,8
 1466 064a 1105      		cpc r17,__zero_reg__
 1467 064c 01F0      		breq .L62
 1468               	.LVL86:
 1469               	.L55:
 228:effect.c      **** {
 1470               		.loc 1 228 0 discriminator 1
 1471 064e C0E0      		ldi r28,lo8(0)
 1472 0650 D0E0      		ldi r29,hi8(0)
 1473 0652 00C0      		rjmp .L56
 1474               	.LVL87:
 1475               	.L61:
 241:effect.c      **** 		}
 242:effect.c      **** 	}
 243:effect.c      **** 
 244:effect.c      **** 	for (i=0;i<iterations;i++)
 245:effect.c      **** 	{
 246:effect.c      **** 		// Pick a random x,y position
 247:effect.c      **** 		x = rand()%8;
 1476               		.loc 1 247 0
 1477 0654 0E94 0000 		call rand
 1478 0658 4C01      		movw r8,r24
 1479               	.LVL88:
 248:effect.c      **** 		y = rand()%8;
 1480               		.loc 1 248 0
 1481 065a 0E94 0000 		call rand
 1482               	.LVL89:
 1483 065e B501      		movw r22,r10
 1484 0660 0E94 0000 		call __divmodhi4
 1485 0664 C82F      		mov r28,r24
 1486 0666 F82E      		mov r15,r24
 1487               	.LVL90:
 249:effect.c      **** 		// but not the sameone twice in a row
 250:effect.c      **** 		if (y != last_y && x != last_x)
 1488               		.loc 1 250 0
 1489 0668 8E15      		cp r24,r14
 1490 066a 01F0      		breq .L58
 247:effect.c      **** 		x = rand()%8;
 1491               		.loc 1 247 0 discriminator 1
 1492 066c C401      		movw r24,r8
 1493               	.LVL91:
 1494 066e B501      		movw r22,r10
 1495 0670 0E94 0000 		call __divmodhi4
 1496 0674 D82F      		mov r29,r24
 1497 0676 182F      		mov r17,r24
 1498               		.loc 1 250 0 discriminator 1
 1499 0678 8D15      		cp r24,r13
 1500 067a 01F0      		breq .L58
 251:effect.c      **** 		{
 252:effect.c      **** 			// If the voxel at this x,y is at the bottom
 253:effect.c      **** 			if (getvoxel(x,y,0))
 1501               		.loc 1 253 0
 1502 067c 90E0      		ldi r25,lo8(0)
 1503 067e 6C2F      		mov r22,r28
 1504 0680 70E0      		ldi r23,lo8(0)
 1505 0682 40E0      		ldi r20,lo8(0)
 1506 0684 50E0      		ldi r21,hi8(0)
 1507 0686 0E94 0000 		call getvoxel
 1508 068a 8823      		tst r24
 1509 068c 01F0      		breq .L59
 254:effect.c      **** 			{
 255:effect.c      **** 				// send it to the top
 256:effect.c      **** 				sendvoxel_z(x,y,0,delay);
 1510               		.loc 1 256 0
 1511 068e 8D2F      		mov r24,r29
 1512 0690 6C2F      		mov r22,r28
 1513 0692 40E0      		ldi r20,lo8(0)
 1514 0694 00C0      		rjmp .L64
 1515               	.L59:
 257:effect.c      **** 			} else
 258:effect.c      **** 			{
 259:effect.c      **** 				// if its at the top, send it to the bottom
 260:effect.c      **** 				sendvoxel_z(x,y,7,delay);
 1516               		.loc 1 260 0
 1517 0696 8D2F      		mov r24,r29
 1518 0698 6C2F      		mov r22,r28
 1519 069a 47E0      		ldi r20,lo8(7)
 1520               	.L64:
 1521 069c 9301      		movw r18,r6
 1522 069e 0E94 0000 		call sendvoxel_z
 261:effect.c      **** 			}
 262:effect.c      **** 			delay_ms(wait);
 1523               		.loc 1 262 0
 1524 06a2 C201      		movw r24,r4
 1525 06a4 0E94 0000 		call delay_ms
 1526               	.LVL92:
 1527 06a8 EF2C      		mov r14,r15
 1528 06aa D12E      		mov r13,r17
 1529               	.LVL93:
 1530               	.L58:
 244:effect.c      **** 	for (i=0;i<iterations;i++)
 1531               		.loc 1 244 0
 1532 06ac 0F5F      		subi r16,lo8(-(1))
 1533               	.LVL94:
 1534 06ae 00C0      		rjmp .L57
 1535               	.LVL95:
 1536               	.L62:
 234:effect.c      **** 	for (x=0;x<8;x++)
 1537               		.loc 1 234 0
 1538 06b0 00E0      		ldi r16,lo8(0)
 1539 06b2 EE24      		clr r14
 1540 06b4 DD24      		clr r13
 248:effect.c      **** 		y = rand()%8;
 1541               		.loc 1 248 0
 1542 06b6 18E0      		ldi r17,lo8(8)
 1543 06b8 A12E      		mov r10,r17
 1544 06ba B12C      		mov r11,__zero_reg__
 1545               	.LVL96:
 1546               	.L57:
 244:effect.c      **** 	for (i=0;i<iterations;i++)
 1547               		.loc 1 244 0 discriminator 1
 1548 06bc 802F      		mov r24,r16
 1549 06be 90E0      		ldi r25,lo8(0)
 1550 06c0 8215      		cp r24,r2
 1551 06c2 9305      		cpc r25,r3
 1552 06c4 04F0      		brlt .L61
 1553               	/* epilogue start */
 263:effect.c      **** 			
 264:effect.c      **** 			// Remember the last move
 265:effect.c      **** 			last_y = y;
 266:effect.c      **** 			last_x = x;
 267:effect.c      **** 		}
 268:effect.c      **** 	}
 269:effect.c      **** 
 270:effect.c      **** }
 1554               		.loc 1 270 0
 1555 06c6 DF91      		pop r29
 1556 06c8 CF91      		pop r28
 1557 06ca 1F91      		pop r17
 1558 06cc 0F91      		pop r16
 1559               	.LVL97:
 1560 06ce FF90      		pop r15
 1561 06d0 EF90      		pop r14
 1562               	.LVL98:
 1563 06d2 DF90      		pop r13
 1564               	.LVL99:
 1565 06d4 BF90      		pop r11
 1566 06d6 AF90      		pop r10
 1567 06d8 9F90      		pop r9
 1568 06da 8F90      		pop r8
 1569 06dc 7F90      		pop r7
 1570 06de 6F90      		pop r6
 1571               	.LVL100:
 1572 06e0 5F90      		pop r5
 1573 06e2 4F90      		pop r4
 1574               	.LVL101:
 1575 06e4 3F90      		pop r3
 1576 06e6 2F90      		pop r2
 1577               	.LVL102:
 1578 06e8 0895      		ret
 1579               		.cfi_endproc
 1580               	.LFE11:
 1582               	.global	boingboing
 1584               	boingboing:
 1585               	.LFB12:
 271:effect.c      **** 
 272:effect.c      **** 
 273:effect.c      **** // Big ugly function :p but it looks pretty
 274:effect.c      **** void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
 275:effect.c      **** {
 1586               		.loc 1 275 0
 1587               		.cfi_startproc
 1588               	.LVL103:
 1589 06ea 2F92      		push r2
 1590               	.LCFI115:
 1591               		.cfi_def_cfa_offset 3
 1592               		.cfi_offset 2, -2
 1593 06ec 3F92      		push r3
 1594               	.LCFI116:
 1595               		.cfi_def_cfa_offset 4
 1596               		.cfi_offset 3, -3
 1597 06ee 4F92      		push r4
 1598               	.LCFI117:
 1599               		.cfi_def_cfa_offset 5
 1600               		.cfi_offset 4, -4
 1601 06f0 5F92      		push r5
 1602               	.LCFI118:
 1603               		.cfi_def_cfa_offset 6
 1604               		.cfi_offset 5, -5
 1605 06f2 6F92      		push r6
 1606               	.LCFI119:
 1607               		.cfi_def_cfa_offset 7
 1608               		.cfi_offset 6, -6
 1609 06f4 7F92      		push r7
 1610               	.LCFI120:
 1611               		.cfi_def_cfa_offset 8
 1612               		.cfi_offset 7, -7
 1613 06f6 8F92      		push r8
 1614               	.LCFI121:
 1615               		.cfi_def_cfa_offset 9
 1616               		.cfi_offset 8, -8
 1617 06f8 9F92      		push r9
 1618               	.LCFI122:
 1619               		.cfi_def_cfa_offset 10
 1620               		.cfi_offset 9, -9
 1621 06fa AF92      		push r10
 1622               	.LCFI123:
 1623               		.cfi_def_cfa_offset 11
 1624               		.cfi_offset 10, -10
 1625 06fc BF92      		push r11
 1626               	.LCFI124:
 1627               		.cfi_def_cfa_offset 12
 1628               		.cfi_offset 11, -11
 1629 06fe CF92      		push r12
 1630               	.LCFI125:
 1631               		.cfi_def_cfa_offset 13
 1632               		.cfi_offset 12, -12
 1633 0700 DF92      		push r13
 1634               	.LCFI126:
 1635               		.cfi_def_cfa_offset 14
 1636               		.cfi_offset 13, -13
 1637 0702 EF92      		push r14
 1638               	.LCFI127:
 1639               		.cfi_def_cfa_offset 15
 1640               		.cfi_offset 14, -14
 1641 0704 FF92      		push r15
 1642               	.LCFI128:
 1643               		.cfi_def_cfa_offset 16
 1644               		.cfi_offset 15, -15
 1645 0706 0F93      		push r16
 1646               	.LCFI129:
 1647               		.cfi_def_cfa_offset 17
 1648               		.cfi_offset 16, -16
 1649 0708 1F93      		push r17
 1650               	.LCFI130:
 1651               		.cfi_def_cfa_offset 18
 1652               		.cfi_offset 17, -17
 1653 070a CF93      		push r28
 1654               	.LCFI131:
 1655               		.cfi_def_cfa_offset 19
 1656               		.cfi_offset 28, -18
 1657 070c DF93      		push r29
 1658               	.LCFI132:
 1659               		.cfi_def_cfa_offset 20
 1660               		.cfi_offset 29, -19
 1661 070e CDB7      		in r28,__SP_L__
 1662 0710 DEB7      		in r29,__SP_H__
 1663 0712 E897      		sbiw r28,56
 1664               	.LCFI133:
 1665               		.cfi_def_cfa 28, 76
 1666 0714 0FB6      		in __tmp_reg__,__SREG__
 1667 0716 F894      		cli
 1668 0718 DEBF      		out __SP_H__,r29
 1669 071a 0FBE      		out __SREG__,__tmp_reg__
 1670 071c CDBF      		out __SP_L__,r28
 1671               	/* prologue: function */
 1672               	/* frame size = 56 */
 1673               	/* stack size = 74 */
 1674               	.L__stack_usage = 74
 1675 071e 9CAB      		std Y+52,r25
 1676 0720 8BAB      		std Y+51,r24
 1677 0722 7EAB      		std Y+54,r23
 1678 0724 6DAB      		std Y+53,r22
 1679 0726 622E      		mov r6,r18
 276:effect.c      **** 	fill(0x00);		// Blank the cube
 1680               		.loc 1 276 0
 1681 0728 80E0      		ldi r24,lo8(0)
 1682               	.LVL104:
 1683 072a 0E94 0000 		call fill
 1684               	.LVL105:
 277:effect.c      **** 
 278:effect.c      **** 	int x, y, z;		// Current coordinates for the point
 279:effect.c      **** 	int dx, dy, dz;	// Direction of movement
 280:effect.c      **** 	int lol, i;		// lol?
 281:effect.c      **** 	unsigned char crash_x, crash_y, crash_z;
 282:effect.c      **** 
 283:effect.c      **** 	y = rand()%8;
 1685               		.loc 1 283 0
 1686 072e 0E94 0000 		call rand
 1687 0732 08E0      		ldi r16,lo8(8)
 1688 0734 10E0      		ldi r17,hi8(8)
 1689 0736 B801      		movw r22,r16
 1690 0738 0E94 0000 		call __divmodhi4
 1691 073c B82E      		mov r11,r24
 1692 073e A92E      		mov r10,r25
 1693 0740 482E      		mov r4,r24
 1694 0742 592E      		mov r5,r25
 1695               	.LVL106:
 284:effect.c      **** 	x = rand()%8;
 1696               		.loc 1 284 0
 1697 0744 0E94 0000 		call rand
 1698               	.LVL107:
 1699 0748 B801      		movw r22,r16
 1700 074a 0E94 0000 		call __divmodhi4
 1701 074e E82E      		mov r14,r24
 1702 0750 C92E      		mov r12,r25
 1703 0752 282E      		mov r2,r24
 1704 0754 392E      		mov r3,r25
 1705               	.LVL108:
 285:effect.c      **** 	z = rand()%8;
 1706               		.loc 1 285 0
 1707 0756 0E94 0000 		call rand
 1708               	.LVL109:
 1709 075a B801      		movw r22,r16
 1710 075c 0E94 0000 		call __divmodhi4
 1711 0760 4C01      		movw r8,r24
 1712               	.LVL110:
 274:effect.c      **** void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
 1713               		.loc 1 274 0
 1714 0762 9E01      		movw r18,r28
 1715 0764 2F5C      		subi r18,lo8(-(49))
 1716 0766 3F4F      		sbci r19,hi8(-(49))
 1717 0768 3AAB      		std Y+50,r19
 1718 076a 29AB      		std Y+49,r18
 1719 076c FE01      		movw r30,r28
 1720 076e 3196      		adiw r30,1
 1721               	.LVL111:
 1722               	.L66:
 286:effect.c      **** 
 287:effect.c      **** 	// Coordinate array for the snake.
 288:effect.c      **** 	int snake[8][3];
 289:effect.c      **** 	for (i=0;i<8;i++)
 290:effect.c      **** 	{
 291:effect.c      **** 		snake[i][0] = x;
 1723               		.loc 1 291 0 discriminator 2
 1724 0770 E082      		st Z,r14
 1725 0772 C182      		std Z+1,r12
 292:effect.c      **** 		snake[i][1] = y;
 1726               		.loc 1 292 0 discriminator 2
 1727 0774 B282      		std Z+2,r11
 1728 0776 A382      		std Z+3,r10
 293:effect.c      **** 		snake[i][2] = z;
 1729               		.loc 1 293 0 discriminator 2
 1730 0778 8483      		std Z+4,r24
 1731 077a 9583      		std Z+5,r25
 1732 077c 3696      		adiw r30,6
 289:effect.c      **** 	for (i=0;i<8;i++)
 1733               		.loc 1 289 0 discriminator 2
 1734 077e 29A9      		ldd r18,Y+49
 1735 0780 3AA9      		ldd r19,Y+50
 1736 0782 E217      		cp r30,r18
 1737 0784 F307      		cpc r31,r19
 1738 0786 01F4      		brne .L66
 289:effect.c      **** 	for (i=0;i<8;i++)
 1739               		.loc 1 289 0 is_stmt 0
 1740 0788 01E0      		ldi r16,lo8(1)
 1741 078a 10E0      		ldi r17,hi8(1)
 1742 078c 81E0      		ldi r24,lo8(1)
 1743 078e E82E      		mov r14,r24
 1744 0790 F12C      		mov r15,__zero_reg__
 1745               	.LVL112:
 1746 0792 91E0      		ldi r25,lo8(1)
 1747 0794 C92E      		mov r12,r25
 1748 0796 D12C      		mov r13,__zero_reg__
 1749               	.LVL113:
 274:effect.c      **** void boingboing(uint16_t iterations, int delay, unsigned char mode, unsigned char drawmode)
 1750               		.loc 1 274 0 is_stmt 1
 1751 0798 21E0      		ldi r18,lo8(1)
 1752 079a 30E0      		ldi r19,hi8(1)
 1753 079c 2C0F      		add r18,r28
 1754 079e 3D1F      		adc r19,r29
 1755 07a0 2C50      		subi r18,lo8(-(-12))
 1756 07a2 3040      		sbci r19,hi8(-(-12))
 1757 07a4 38AF      		std Y+56,r19
 1758 07a6 2FAB      		std Y+55,r18
 1759 07a8 00C0      		rjmp .L67
 1760               	.LVL114:
 1761               	.L107:
 294:effect.c      **** 	}
 295:effect.c      **** 	
 296:effect.c      **** 	
 297:effect.c      **** 	dx = 1;
 298:effect.c      **** 	dy = 1;
 299:effect.c      **** 	dz = 1;
 300:effect.c      **** 	
 301:effect.c      **** 	while(iterations)
 302:effect.c      **** 	{
 303:effect.c      **** 		crash_x = 0;
 304:effect.c      **** 		crash_y = 0;
 305:effect.c      **** 		crash_z = 0;
 306:effect.c      **** 	
 307:effect.c      **** 
 308:effect.c      **** 		// Let's mix things up a little:
 309:effect.c      **** 		if (rand()%3 == 0)
 1762               		.loc 1 309 0
 1763 07aa 0E94 0000 		call rand
 1764               	.LVL115:
 1765 07ae 63E0      		ldi r22,lo8(3)
 1766 07b0 70E0      		ldi r23,hi8(3)
 1767 07b2 0E94 0000 		call __divmodhi4
 1768 07b6 0097      		sbiw r24,0
 1769 07b8 01F4      		brne .L68
 310:effect.c      **** 		{
 311:effect.c      **** 			// Pick a random axis, and set the speed to a random number.
 312:effect.c      **** 			lol = rand()%3;
 1770               		.loc 1 312 0
 1771 07ba 0E94 0000 		call rand
 1772 07be 63E0      		ldi r22,lo8(3)
 1773 07c0 70E0      		ldi r23,hi8(3)
 1774 07c2 0E94 0000 		call __divmodhi4
 1775               	.LVL116:
 313:effect.c      **** 			if (lol == 0)
 1776               		.loc 1 313 0
 1777 07c6 0097      		sbiw r24,0
 1778 07c8 01F4      		brne .L69
 314:effect.c      **** 				dx = rand()%3 - 1;
 1779               		.loc 1 314 0
 1780 07ca 0E94 0000 		call rand
 1781               	.LVL117:
 1782 07ce 63E0      		ldi r22,lo8(3)
 1783 07d0 70E0      		ldi r23,hi8(3)
 1784 07d2 0E94 0000 		call __divmodhi4
 1785 07d6 6C01      		movw r12,r24
 1786               	.LVL118:
 1787 07d8 0894      		sec
 1788 07da C108      		sbc r12,__zero_reg__
 1789 07dc D108      		sbc r13,__zero_reg__
 1790               	.LVL119:
 1791 07de 00C0      		rjmp .L68
 1792               	.LVL120:
 1793               	.L69:
 315:effect.c      **** 			
 316:effect.c      **** 			if (lol == 1)
 1794               		.loc 1 316 0
 1795 07e0 8130      		cpi r24,1
 1796 07e2 9105      		cpc r25,__zero_reg__
 1797 07e4 01F4      		brne .L70
 317:effect.c      **** 				dy = rand()%3 - 1;
 1798               		.loc 1 317 0
 1799 07e6 0E94 0000 		call rand
 1800               	.LVL121:
 1801 07ea 63E0      		ldi r22,lo8(3)
 1802 07ec 70E0      		ldi r23,hi8(3)
 1803 07ee 0E94 0000 		call __divmodhi4
 1804 07f2 7C01      		movw r14,r24
 1805               	.LVL122:
 1806 07f4 0894      		sec
 1807 07f6 E108      		sbc r14,__zero_reg__
 1808 07f8 F108      		sbc r15,__zero_reg__
 1809               	.LVL123:
 1810 07fa 00C0      		rjmp .L68
 1811               	.LVL124:
 1812               	.L70:
 318:effect.c      **** 				
 319:effect.c      **** 			if (lol == 2)
 1813               		.loc 1 319 0
 1814 07fc 8230      		cpi r24,2
 1815 07fe 9105      		cpc r25,__zero_reg__
 1816 0800 01F4      		brne .L68
 320:effect.c      **** 				dz = rand()%3 - 1;
 1817               		.loc 1 320 0
 1818 0802 0E94 0000 		call rand
 1819               	.LVL125:
 1820 0806 63E0      		ldi r22,lo8(3)
 1821 0808 70E0      		ldi r23,hi8(3)
 1822 080a 0E94 0000 		call __divmodhi4
 1823 080e 8C01      		movw r16,r24
 1824               	.LVL126:
 1825 0810 0150      		subi r16,lo8(-(-1))
 1826 0812 1040      		sbci r17,hi8(-(-1))
 1827               	.LVL127:
 1828               	.L68:
 321:effect.c      **** 		}
 322:effect.c      **** 
 323:effect.c      **** 	    // The point has reached 0 on the x-axis and is trying to go to -1
 324:effect.c      ****         // aka a crash
 325:effect.c      **** 		if (dx == -1 && x == 0)
 1829               		.loc 1 325 0
 1830 0814 3FEF      		ldi r19,lo8(-1)
 1831 0816 C316      		cp r12,r19
 1832 0818 3FEF      		ldi r19,hi8(-1)
 1833 081a D306      		cpc r13,r19
 1834 081c 01F4      		brne .L109
 1835               		.loc 1 325 0 is_stmt 0 discriminator 1
 1836 081e 2114      		cp r2,__zero_reg__
 1837 0820 3104      		cpc r3,__zero_reg__
 1838 0822 01F4      		brne .L109
 1839               	.LVL128:
 326:effect.c      **** 		{
 327:effect.c      **** 			crash_x = 0x01;
 328:effect.c      **** 			if (rand()%3 == 1)
 1840               		.loc 1 328 0 is_stmt 1
 1841 0824 0E94 0000 		call rand
 1842 0828 63E0      		ldi r22,lo8(3)
 1843 082a 70E0      		ldi r23,hi8(3)
 1844 082c 0E94 0000 		call __divmodhi4
 327:effect.c      **** 			crash_x = 0x01;
 1845               		.loc 1 327 0
 1846 0830 7724      		clr r7
 1847 0832 7394      		inc r7
 1848               		.loc 1 328 0
 1849 0834 8130      		cpi r24,1
 1850 0836 9105      		cpc r25,__zero_reg__
 1851 0838 01F4      		brne .L110
 329:effect.c      **** 			{
 330:effect.c      **** 				dx = 1;
 1852               		.loc 1 330 0
 1853 083a B1E0      		ldi r27,lo8(1)
 1854 083c CB2E      		mov r12,r27
 1855 083e D12C      		mov r13,__zero_reg__
 1856               	.LVL129:
 1857 0840 00C0      		rjmp .L71
 1858               	.LVL130:
 1859               	.L109:
 303:effect.c      **** 		crash_x = 0;
 1860               		.loc 1 303 0
 1861 0842 7724      		clr r7
 1862 0844 00C0      		rjmp .L71
 1863               	.LVL131:
 1864               	.L110:
 331:effect.c      **** 			} else
 332:effect.c      **** 			{
 333:effect.c      **** 				dx = 0;
 1865               		.loc 1 333 0
 1866 0846 CC24      		clr r12
 1867 0848 DD24      		clr r13
 1868               	.LVL132:
 1869               	.L71:
 334:effect.c      **** 			}
 335:effect.c      **** 		}
 336:effect.c      **** 		
 337:effect.c      ****         // y axis 0 crash
 338:effect.c      **** 		if (dy == -1 && y == 0)
 1870               		.loc 1 338 0
 1871 084a 8FEF      		ldi r24,lo8(-1)
 1872 084c E816      		cp r14,r24
 1873 084e 8FEF      		ldi r24,hi8(-1)
 1874 0850 F806      		cpc r15,r24
 1875 0852 01F4      		brne .L112
 1876               		.loc 1 338 0 is_stmt 0 discriminator 1
 1877 0854 4114      		cp r4,__zero_reg__
 1878 0856 5104      		cpc r5,__zero_reg__
 1879 0858 01F4      		brne .L112
 1880               	.LVL133:
 339:effect.c      **** 		{
 340:effect.c      **** 			crash_y = 0x01;
 341:effect.c      **** 			if (rand()%3 == 1)
 1881               		.loc 1 341 0 is_stmt 1
 1882 085a 0E94 0000 		call rand
 1883 085e 63E0      		ldi r22,lo8(3)
 1884 0860 70E0      		ldi r23,hi8(3)
 1885 0862 0E94 0000 		call __divmodhi4
 340:effect.c      **** 			crash_y = 0x01;
 1886               		.loc 1 340 0
 1887 0866 AA24      		clr r10
 1888 0868 A394      		inc r10
 1889               		.loc 1 341 0
 1890 086a 8130      		cpi r24,1
 1891 086c 9105      		cpc r25,__zero_reg__
 1892 086e 01F4      		brne .L113
 342:effect.c      **** 			{
 343:effect.c      **** 				dy = 1;
 1893               		.loc 1 343 0
 1894 0870 A1E0      		ldi r26,lo8(1)
 1895 0872 EA2E      		mov r14,r26
 1896 0874 F12C      		mov r15,__zero_reg__
 1897               	.LVL134:
 1898 0876 00C0      		rjmp .L72
 1899               	.LVL135:
 1900               	.L112:
 304:effect.c      **** 		crash_y = 0;
 1901               		.loc 1 304 0
 1902 0878 AA24      		clr r10
 1903 087a 00C0      		rjmp .L72
 1904               	.LVL136:
 1905               	.L113:
 344:effect.c      **** 			} else
 345:effect.c      **** 			{
 346:effect.c      **** 				dy = 0;
 1906               		.loc 1 346 0
 1907 087c EE24      		clr r14
 1908 087e FF24      		clr r15
 1909               	.LVL137:
 1910               	.L72:
 347:effect.c      **** 			}
 348:effect.c      **** 		}
 349:effect.c      **** 		
 350:effect.c      ****         // z axis 0 crash
 351:effect.c      **** 		if (dz == -1 && z == 0)
 1911               		.loc 1 351 0
 1912 0880 9FEF      		ldi r25,hi8(-1)
 1913 0882 0F3F      		cpi r16,lo8(-1)
 1914 0884 1907      		cpc r17,r25
 1915 0886 01F4      		brne .L115
 1916               		.loc 1 351 0 is_stmt 0 discriminator 1
 1917 0888 8114      		cp r8,__zero_reg__
 1918 088a 9104      		cpc r9,__zero_reg__
 1919 088c 01F4      		brne .L115
 1920               	.LVL138:
 352:effect.c      **** 		{
 353:effect.c      **** 			crash_z = 0x01;
 354:effect.c      **** 			if (rand()%3 == 1)
 1921               		.loc 1 354 0 is_stmt 1
 1922 088e 0E94 0000 		call rand
 1923 0892 63E0      		ldi r22,lo8(3)
 1924 0894 70E0      		ldi r23,hi8(3)
 1925 0896 0E94 0000 		call __divmodhi4
 353:effect.c      **** 			crash_z = 0x01;
 1926               		.loc 1 353 0
 1927 089a BB24      		clr r11
 1928 089c B394      		inc r11
 1929               		.loc 1 354 0
 1930 089e 8130      		cpi r24,1
 1931 08a0 9105      		cpc r25,__zero_reg__
 1932 08a2 01F4      		brne .L116
 355:effect.c      **** 			{
 356:effect.c      **** 				dz = 1;
 1933               		.loc 1 356 0
 1934 08a4 01E0      		ldi r16,lo8(1)
 1935 08a6 10E0      		ldi r17,hi8(1)
 1936               	.LVL139:
 1937 08a8 00C0      		rjmp .L73
 1938               	.LVL140:
 1939               	.L115:
 305:effect.c      **** 		crash_z = 0;
 1940               		.loc 1 305 0
 1941 08aa BB24      		clr r11
 1942 08ac 00C0      		rjmp .L73
 1943               	.LVL141:
 1944               	.L116:
 357:effect.c      **** 			} else
 358:effect.c      **** 			{
 359:effect.c      **** 				dz = 0;
 1945               		.loc 1 359 0
 1946 08ae 00E0      		ldi r16,lo8(0)
 1947 08b0 10E0      		ldi r17,hi8(0)
 1948               	.LVL142:
 1949               	.L73:
 360:effect.c      **** 			}
 361:effect.c      **** 		}
 362:effect.c      **** 	    
 363:effect.c      ****         // x axis 7 crash
 364:effect.c      **** 		if (dx == 1 && x == 7)
 1950               		.loc 1 364 0
 1951 08b2 E1E0      		ldi r30,lo8(1)
 1952 08b4 CE16      		cp r12,r30
 1953 08b6 D104      		cpc r13,__zero_reg__
 1954 08b8 01F4      		brne .L74
 1955               		.loc 1 364 0 is_stmt 0 discriminator 1
 1956 08ba F7E0      		ldi r31,lo8(7)
 1957 08bc 2F16      		cp r2,r31
 1958 08be 3104      		cpc r3,__zero_reg__
 1959 08c0 01F4      		brne .L74
 1960               	.LVL143:
 365:effect.c      **** 		{
 366:effect.c      **** 			crash_x = 0x01;
 367:effect.c      **** 			if (rand()%3 == 1)
 1961               		.loc 1 367 0 is_stmt 1
 1962 08c2 0E94 0000 		call rand
 1963 08c6 63E0      		ldi r22,lo8(3)
 1964 08c8 70E0      		ldi r23,hi8(3)
 1965 08ca 0E94 0000 		call __divmodhi4
 366:effect.c      **** 			crash_x = 0x01;
 1966               		.loc 1 366 0
 1967 08ce 7724      		clr r7
 1968 08d0 7394      		inc r7
 1969               		.loc 1 367 0
 1970 08d2 8130      		cpi r24,1
 1971 08d4 9105      		cpc r25,__zero_reg__
 1972 08d6 01F4      		brne .L117
 368:effect.c      **** 			{
 369:effect.c      **** 				dx = -1;
 1973               		.loc 1 369 0
 1974 08d8 CC24      		clr r12
 1975 08da CA94      		dec r12
 1976 08dc DC2C      		mov r13,r12
 1977               	.LVL144:
 1978 08de 00C0      		rjmp .L74
 1979               	.LVL145:
 1980               	.L117:
 370:effect.c      **** 			} else
 371:effect.c      **** 			{
 372:effect.c      **** 				dx = 0;
 1981               		.loc 1 372 0
 1982 08e0 CC24      		clr r12
 1983 08e2 DD24      		clr r13
 1984               	.LVL146:
 1985               	.L74:
 373:effect.c      **** 			}
 374:effect.c      **** 		}
 375:effect.c      **** 		
 376:effect.c      ****         // y axis 7 crash
 377:effect.c      **** 		if (dy == 1 && y == 7)
 1986               		.loc 1 377 0
 1987 08e4 21E0      		ldi r18,lo8(1)
 1988 08e6 E216      		cp r14,r18
 1989 08e8 F104      		cpc r15,__zero_reg__
 1990 08ea 01F4      		brne .L75
 1991               		.loc 1 377 0 is_stmt 0 discriminator 1
 1992 08ec 37E0      		ldi r19,lo8(7)
 1993 08ee 4316      		cp r4,r19
 1994 08f0 5104      		cpc r5,__zero_reg__
 1995 08f2 01F4      		brne .L75
 1996               	.LVL147:
 378:effect.c      **** 		{
 379:effect.c      **** 			crash_y = 0x01;
 380:effect.c      **** 			if (rand()%3 == 1)
 1997               		.loc 1 380 0 is_stmt 1
 1998 08f4 0E94 0000 		call rand
 1999 08f8 63E0      		ldi r22,lo8(3)
 2000 08fa 70E0      		ldi r23,hi8(3)
 2001 08fc 0E94 0000 		call __divmodhi4
 379:effect.c      **** 			crash_y = 0x01;
 2002               		.loc 1 379 0
 2003 0900 AA24      		clr r10
 2004 0902 A394      		inc r10
 2005               		.loc 1 380 0
 2006 0904 8130      		cpi r24,1
 2007 0906 9105      		cpc r25,__zero_reg__
 2008 0908 01F4      		brne .L118
 381:effect.c      **** 			{
 382:effect.c      **** 				dy = -1;
 2009               		.loc 1 382 0
 2010 090a EE24      		clr r14
 2011 090c EA94      		dec r14
 2012 090e FE2C      		mov r15,r14
 2013               	.LVL148:
 2014 0910 00C0      		rjmp .L75
 2015               	.LVL149:
 2016               	.L118:
 383:effect.c      **** 			} else
 384:effect.c      **** 			{
 385:effect.c      **** 				dy = 0;
 2017               		.loc 1 385 0
 2018 0912 EE24      		clr r14
 2019 0914 FF24      		clr r15
 2020               	.LVL150:
 2021               	.L75:
 386:effect.c      **** 			}
 387:effect.c      **** 		}
 388:effect.c      **** 		
 389:effect.c      ****         // z azis 7 crash
 390:effect.c      **** 		if (dz == 1 && z == 7)
 2022               		.loc 1 390 0
 2023 0916 0130      		cpi r16,1
 2024 0918 1105      		cpc r17,__zero_reg__
 2025 091a 01F4      		brne .L76
 2026               		.loc 1 390 0 is_stmt 0 discriminator 1
 2027 091c 87E0      		ldi r24,lo8(7)
 2028 091e 8816      		cp r8,r24
 2029 0920 9104      		cpc r9,__zero_reg__
 2030 0922 01F4      		brne .L76
 2031               	.LVL151:
 391:effect.c      **** 		{
 392:effect.c      **** 			crash_z = 0x01;
 393:effect.c      **** 			if (rand()%3 == 1)
 2032               		.loc 1 393 0 is_stmt 1
 2033 0924 0E94 0000 		call rand
 2034 0928 63E0      		ldi r22,lo8(3)
 2035 092a 70E0      		ldi r23,hi8(3)
 2036 092c 0E94 0000 		call __divmodhi4
 392:effect.c      **** 			crash_z = 0x01;
 2037               		.loc 1 392 0
 2038 0930 BB24      		clr r11
 2039 0932 B394      		inc r11
 2040               		.loc 1 393 0
 2041 0934 8130      		cpi r24,1
 2042 0936 9105      		cpc r25,__zero_reg__
 2043 0938 01F4      		brne .L119
 394:effect.c      **** 			{
 395:effect.c      **** 				dz = -1;
 2044               		.loc 1 395 0
 2045 093a 0FEF      		ldi r16,lo8(-1)
 2046 093c 1FEF      		ldi r17,hi8(-1)
 2047               	.LVL152:
 2048 093e 00C0      		rjmp .L76
 2049               	.LVL153:
 2050               	.L119:
 396:effect.c      **** 			} else
 397:effect.c      **** 			{
 398:effect.c      **** 				dz = 0;
 2051               		.loc 1 398 0
 2052 0940 00E0      		ldi r16,lo8(0)
 2053 0942 10E0      		ldi r17,hi8(0)
 2054               	.LVL154:
 2055               	.L76:
 399:effect.c      **** 			}
 400:effect.c      **** 		}
 401:effect.c      **** 		
 402:effect.c      **** 		// mode bit 0 sets crash action enable
 403:effect.c      **** 		if (mode | 0x01)
 404:effect.c      **** 		{
 405:effect.c      **** 			if (crash_x)
 2056               		.loc 1 405 0
 2057 0944 7720      		tst r7
 2058 0946 01F0      		breq .L77
 406:effect.c      **** 			{
 407:effect.c      **** 				if (dy == 0)
 2059               		.loc 1 407 0
 2060 0948 E114      		cp r14,__zero_reg__
 2061 094a F104      		cpc r15,__zero_reg__
 2062 094c 01F4      		brne .L78
 408:effect.c      **** 				{
 409:effect.c      **** 					if (y == 7)
 2063               		.loc 1 409 0
 2064 094e 97E0      		ldi r25,lo8(7)
 2065 0950 4916      		cp r4,r25
 2066 0952 5104      		cpc r5,__zero_reg__
 2067 0954 01F0      		breq .L120
 410:effect.c      **** 					{
 411:effect.c      **** 						dy = -1;
 412:effect.c      **** 					} else if (y == 0)
 2068               		.loc 1 412 0
 2069 0956 4114      		cp r4,__zero_reg__
 2070 0958 5104      		cpc r5,__zero_reg__
 2071 095a 01F0      		breq .L122
 413:effect.c      **** 					{
 414:effect.c      **** 						dy = +1;
 415:effect.c      **** 					} else
 416:effect.c      **** 					{
 417:effect.c      **** 						if (rand()%2 == 0)
 2072               		.loc 1 417 0
 2073 095c 0E94 0000 		call rand
 2074 0960 80FD      		sbrc r24,0
 2075 0962 00C0      		rjmp .L122
 2076               	.L120:
 411:effect.c      **** 						dy = -1;
 2077               		.loc 1 411 0
 2078 0964 EE24      		clr r14
 2079 0966 EA94      		dec r14
 2080 0968 FE2C      		mov r15,r14
 2081               	.LVL155:
 2082 096a 00C0      		rjmp .L78
 2083               	.LVL156:
 2084               	.L122:
 418:effect.c      **** 						{
 419:effect.c      **** 							dy = -1;
 420:effect.c      **** 						} else
 421:effect.c      **** 						{
 422:effect.c      **** 							dy = 1;
 2085               		.loc 1 422 0
 2086 096c F1E0      		ldi r31,lo8(1)
 2087 096e EF2E      		mov r14,r31
 2088 0970 F12C      		mov r15,__zero_reg__
 2089               	.LVL157:
 2090               	.L78:
 423:effect.c      **** 						}
 424:effect.c      **** 					}
 425:effect.c      **** 				}
 426:effect.c      **** 				if (dz == 0)
 2091               		.loc 1 426 0
 2092 0972 0115      		cp r16,__zero_reg__
 2093 0974 1105      		cpc r17,__zero_reg__
 2094 0976 01F4      		brne .L77
 427:effect.c      **** 				{
 428:effect.c      **** 					if (z == 7)
 2095               		.loc 1 428 0
 2096 0978 E7E0      		ldi r30,lo8(7)
 2097 097a 8E16      		cp r8,r30
 2098 097c 9104      		cpc r9,__zero_reg__
 2099 097e 01F0      		breq .L123
 429:effect.c      **** 					{
 430:effect.c      **** 						dz = -1;
 431:effect.c      **** 					} else if (z == 0)
 2100               		.loc 1 431 0
 2101 0980 8114      		cp r8,__zero_reg__
 2102 0982 9104      		cpc r9,__zero_reg__
 2103 0984 01F0      		breq .L125
 432:effect.c      **** 					{
 433:effect.c      **** 						dz = 1;
 434:effect.c      **** 					} else
 435:effect.c      **** 					{
 436:effect.c      **** 						if (rand()%2 == 0)
 2104               		.loc 1 436 0
 2105 0986 0E94 0000 		call rand
 2106 098a 80FD      		sbrc r24,0
 2107 098c 00C0      		rjmp .L125
 2108               	.L123:
 430:effect.c      **** 						dz = -1;
 2109               		.loc 1 430 0
 2110 098e 0FEF      		ldi r16,lo8(-1)
 2111 0990 1FEF      		ldi r17,hi8(-1)
 2112               	.LVL158:
 2113 0992 00C0      		rjmp .L77
 2114               	.LVL159:
 2115               	.L125:
 437:effect.c      **** 						{
 438:effect.c      **** 							dz = -1;
 439:effect.c      **** 						} else
 440:effect.c      **** 						{
 441:effect.c      **** 							dz = 1;
 2116               		.loc 1 441 0
 2117 0994 01E0      		ldi r16,lo8(1)
 2118 0996 10E0      		ldi r17,hi8(1)
 2119               	.LVL160:
 2120               	.L77:
 442:effect.c      **** 						}
 443:effect.c      **** 					}	
 444:effect.c      **** 				}
 445:effect.c      **** 			}
 446:effect.c      **** 			
 447:effect.c      **** 			if (crash_y)
 2121               		.loc 1 447 0
 2122 0998 AA20      		tst r10
 2123 099a 01F0      		breq .L79
 448:effect.c      **** 			{
 449:effect.c      **** 				if (dx == 0)
 2124               		.loc 1 449 0
 2125 099c C114      		cp r12,__zero_reg__
 2126 099e D104      		cpc r13,__zero_reg__
 2127 09a0 01F4      		brne .L80
 450:effect.c      **** 				{
 451:effect.c      **** 					if (x == 7)
 2128               		.loc 1 451 0
 2129 09a2 F7E0      		ldi r31,lo8(7)
 2130 09a4 2F16      		cp r2,r31
 2131 09a6 3104      		cpc r3,__zero_reg__
 2132 09a8 01F0      		breq .L126
 452:effect.c      **** 					{
 453:effect.c      **** 						dx = -1;
 454:effect.c      **** 					} else if (x == 0)
 2133               		.loc 1 454 0
 2134 09aa 2114      		cp r2,__zero_reg__
 2135 09ac 3104      		cpc r3,__zero_reg__
 2136 09ae 01F0      		breq .L128
 455:effect.c      **** 					{
 456:effect.c      **** 						dx = 1;
 457:effect.c      **** 					} else
 458:effect.c      **** 					{
 459:effect.c      **** 						if (rand()%2 == 0)
 2137               		.loc 1 459 0
 2138 09b0 0E94 0000 		call rand
 2139 09b4 80FD      		sbrc r24,0
 2140 09b6 00C0      		rjmp .L128
 2141               	.L126:
 453:effect.c      **** 						dx = -1;
 2142               		.loc 1 453 0
 2143 09b8 CC24      		clr r12
 2144 09ba CA94      		dec r12
 2145 09bc DC2C      		mov r13,r12
 2146               	.LVL161:
 2147 09be 00C0      		rjmp .L80
 2148               	.LVL162:
 2149               	.L128:
 460:effect.c      **** 						{
 461:effect.c      **** 							dx = -1;
 462:effect.c      **** 						} else
 463:effect.c      **** 						{
 464:effect.c      **** 							dx = 1;
 2150               		.loc 1 464 0
 2151 09c0 E1E0      		ldi r30,lo8(1)
 2152 09c2 CE2E      		mov r12,r30
 2153 09c4 D12C      		mov r13,__zero_reg__
 2154               	.LVL163:
 2155               	.L80:
 465:effect.c      **** 						}
 466:effect.c      **** 					}
 467:effect.c      **** 				}
 468:effect.c      **** 				if (dz == 0)
 2156               		.loc 1 468 0
 2157 09c6 0115      		cp r16,__zero_reg__
 2158 09c8 1105      		cpc r17,__zero_reg__
 2159 09ca 01F4      		brne .L79
 469:effect.c      **** 				{
 470:effect.c      **** 					if (z == 3)
 2160               		.loc 1 470 0
 2161 09cc 23E0      		ldi r18,lo8(3)
 2162 09ce 8216      		cp r8,r18
 2163 09d0 9104      		cpc r9,__zero_reg__
 2164 09d2 01F0      		breq .L129
 471:effect.c      **** 					{
 472:effect.c      **** 						dz = -1;
 473:effect.c      **** 					} else if (z == 0)
 2165               		.loc 1 473 0
 2166 09d4 8114      		cp r8,__zero_reg__
 2167 09d6 9104      		cpc r9,__zero_reg__
 2168 09d8 01F0      		breq .L131
 474:effect.c      **** 					{
 475:effect.c      **** 						dz = 1;
 476:effect.c      **** 					} else
 477:effect.c      **** 					{
 478:effect.c      **** 						if (rand()%2 == 0)
 2169               		.loc 1 478 0
 2170 09da 0E94 0000 		call rand
 2171 09de 80FD      		sbrc r24,0
 2172 09e0 00C0      		rjmp .L131
 2173               	.L129:
 472:effect.c      **** 						dz = -1;
 2174               		.loc 1 472 0
 2175 09e2 0FEF      		ldi r16,lo8(-1)
 2176 09e4 1FEF      		ldi r17,hi8(-1)
 2177               	.LVL164:
 2178 09e6 00C0      		rjmp .L79
 2179               	.LVL165:
 2180               	.L131:
 479:effect.c      **** 						{
 480:effect.c      **** 							dz = -1;
 481:effect.c      **** 						} else
 482:effect.c      **** 						{
 483:effect.c      **** 							dz = 1;
 2181               		.loc 1 483 0
 2182 09e8 01E0      		ldi r16,lo8(1)
 2183 09ea 10E0      		ldi r17,hi8(1)
 2184               	.LVL166:
 2185               	.L79:
 484:effect.c      **** 						}
 485:effect.c      **** 					}	
 486:effect.c      **** 				}
 487:effect.c      **** 			}
 488:effect.c      **** 			
 489:effect.c      **** 			if (crash_z)
 2186               		.loc 1 489 0
 2187 09ec BB20      		tst r11
 2188 09ee 01F0      		breq .L81
 490:effect.c      **** 			{
 491:effect.c      **** 				if (dy == 0)
 2189               		.loc 1 491 0
 2190 09f0 E114      		cp r14,__zero_reg__
 2191 09f2 F104      		cpc r15,__zero_reg__
 2192 09f4 01F4      		brne .L82
 492:effect.c      **** 				{
 493:effect.c      **** 					if (y == 7)
 2193               		.loc 1 493 0
 2194 09f6 37E0      		ldi r19,lo8(7)
 2195 09f8 4316      		cp r4,r19
 2196 09fa 5104      		cpc r5,__zero_reg__
 2197 09fc 01F0      		breq .L132
 494:effect.c      **** 					{
 495:effect.c      **** 						dy = -1;
 496:effect.c      **** 					} else if (y == 0)
 2198               		.loc 1 496 0
 2199 09fe 4114      		cp r4,__zero_reg__
 2200 0a00 5104      		cpc r5,__zero_reg__
 2201 0a02 01F0      		breq .L134
 497:effect.c      **** 					{
 498:effect.c      **** 						dy = 1;
 499:effect.c      **** 					} else
 500:effect.c      **** 					{
 501:effect.c      **** 						if (rand()%2 == 0)
 2202               		.loc 1 501 0
 2203 0a04 0E94 0000 		call rand
 2204 0a08 80FD      		sbrc r24,0
 2205 0a0a 00C0      		rjmp .L134
 2206               	.L132:
 495:effect.c      **** 						dy = -1;
 2207               		.loc 1 495 0
 2208 0a0c EE24      		clr r14
 2209 0a0e EA94      		dec r14
 2210 0a10 FE2C      		mov r15,r14
 2211               	.LVL167:
 2212 0a12 00C0      		rjmp .L82
 2213               	.LVL168:
 2214               	.L134:
 502:effect.c      **** 						{
 503:effect.c      **** 							dy = -1;
 504:effect.c      **** 						} else
 505:effect.c      **** 						{
 506:effect.c      **** 							dy = 1;
 2215               		.loc 1 506 0
 2216 0a14 71E0      		ldi r23,lo8(1)
 2217 0a16 E72E      		mov r14,r23
 2218 0a18 F12C      		mov r15,__zero_reg__
 2219               	.LVL169:
 2220               	.L82:
 507:effect.c      **** 						}
 508:effect.c      **** 					}	
 509:effect.c      **** 				}
 510:effect.c      **** 				if (dx == 0)
 2221               		.loc 1 510 0
 2222 0a1a C114      		cp r12,__zero_reg__
 2223 0a1c D104      		cpc r13,__zero_reg__
 2224 0a1e 01F4      		brne .L81
 511:effect.c      **** 				{
 512:effect.c      **** 					if (x == 7)
 2225               		.loc 1 512 0
 2226 0a20 87E0      		ldi r24,lo8(7)
 2227 0a22 2816      		cp r2,r24
 2228 0a24 3104      		cpc r3,__zero_reg__
 2229 0a26 01F0      		breq .L135
 513:effect.c      **** 					{
 514:effect.c      **** 						dx = -1;
 515:effect.c      **** 					} else if (x == 0)
 2230               		.loc 1 515 0
 2231 0a28 2114      		cp r2,__zero_reg__
 2232 0a2a 3104      		cpc r3,__zero_reg__
 2233 0a2c 01F0      		breq .L136
 516:effect.c      **** 					{
 517:effect.c      **** 						dx = 1;
 518:effect.c      **** 					} else
 519:effect.c      **** 					{
 520:effect.c      **** 						if (rand()%2 == 0)
 2234               		.loc 1 520 0
 2235 0a2e 0E94 0000 		call rand
 2236 0a32 80FF      		sbrs r24,0
 2237 0a34 00C0      		rjmp .L85
 2238 0a36 00C0      		rjmp .L151
 2239               	.L81:
 521:effect.c      **** 						{
 522:effect.c      **** 							dx = -1;
 523:effect.c      **** 						} else
 524:effect.c      **** 						{
 525:effect.c      **** 							dx = 1;
 526:effect.c      **** 						}
 527:effect.c      **** 					}	
 528:effect.c      **** 				}
 529:effect.c      **** 			}
 530:effect.c      **** 		}
 531:effect.c      **** 		
 532:effect.c      **** 		// mode bit 1 sets corner avoid enable
 533:effect.c      **** 		if (mode | 0x02)
 534:effect.c      **** 		{
 535:effect.c      **** 			if (	// We are in one of 8 corner positions
 2240               		.loc 1 535 0
 2241 0a38 2114      		cp r2,__zero_reg__
 2242 0a3a 3104      		cpc r3,__zero_reg__
 2243 0a3c 01F4      		brne .L87
 2244 0a3e 00C0      		rjmp .L84
 2245               	.L136:
 517:effect.c      **** 						dx = 1;
 2246               		.loc 1 517 0
 2247 0a40 61E0      		ldi r22,lo8(1)
 2248 0a42 C62E      		mov r12,r22
 2249 0a44 D12C      		mov r13,__zero_reg__
 2250               	.LVL170:
 2251               	.L84:
 536:effect.c      **** 				(x == 0 && y == 0 && z == 0) ||
 2252               		.loc 1 536 0
 2253 0a46 4114      		cp r4,__zero_reg__
 2254 0a48 5104      		cpc r5,__zero_reg__
 2255 0a4a 01F4      		brne .L88
 2256               		.loc 1 536 0 is_stmt 0 discriminator 1
 2257 0a4c 8114      		cp r8,__zero_reg__
 2258 0a4e 9104      		cpc r9,__zero_reg__
 2259 0a50 01F0      		breq .L89
 2260 0a52 97E0      		ldi r25,lo8(7)
 2261 0a54 8916      		cp r8,r25
 2262 0a56 9104      		cpc r9,__zero_reg__
 2263 0a58 01F0      		breq .+2
 2264 0a5a 00C0      		rjmp .L90
 2265 0a5c 00C0      		rjmp .L89
 2266               	.L88:
 537:effect.c      **** 				(x == 0 && y == 0 && z == 7) ||
 538:effect.c      **** 				(x == 0 && y == 7 && z == 0) ||
 2267               		.loc 1 538 0 is_stmt 1
 2268 0a5e E7E0      		ldi r30,lo8(7)
 2269 0a60 4E16      		cp r4,r30
 2270 0a62 5104      		cpc r5,__zero_reg__
 2271 0a64 01F0      		breq .+2
 2272 0a66 00C0      		rjmp .L90
 2273               		.loc 1 538 0 is_stmt 0 discriminator 1
 2274 0a68 8114      		cp r8,__zero_reg__
 2275 0a6a 9104      		cpc r9,__zero_reg__
 2276 0a6c 01F0      		breq .L89
 539:effect.c      **** 				(x == 0 && y == 7 && z == 7) ||
 2277               		.loc 1 539 0 is_stmt 1 discriminator 1
 2278 0a6e F7E0      		ldi r31,lo8(7)
 2279 0a70 8F16      		cp r8,r31
 2280 0a72 9104      		cpc r9,__zero_reg__
 2281 0a74 01F4      		brne .L90
 2282 0a76 00C0      		rjmp .L89
 2283               	.LVL171:
 2284               	.L87:
 2285               		.loc 1 539 0 is_stmt 0 discriminator 2
 2286 0a78 27E0      		ldi r18,lo8(7)
 2287 0a7a 2216      		cp r2,r18
 2288 0a7c 3104      		cpc r3,__zero_reg__
 2289 0a7e 01F0      		breq .L83
 2290 0a80 00C0      		rjmp .L96
 2291               	.L135:
 514:effect.c      **** 						dx = -1;
 2292               		.loc 1 514 0 is_stmt 1
 2293 0a82 CC24      		clr r12
 2294 0a84 CA94      		dec r12
 2295 0a86 DC2C      		mov r13,r12
 2296               	.LVL172:
 2297               	.L83:
 540:effect.c      **** 				(x == 7 && y == 0 && z == 0) ||
 2298               		.loc 1 540 0
 2299 0a88 4114      		cp r4,__zero_reg__
 2300 0a8a 5104      		cpc r5,__zero_reg__
 2301 0a8c 01F4      		brne .L92
 2302               		.loc 1 540 0 is_stmt 0 discriminator 1
 2303 0a8e 8114      		cp r8,__zero_reg__
 2304 0a90 9104      		cpc r9,__zero_reg__
 2305 0a92 01F0      		breq .L89
 541:effect.c      **** 				(x == 7 && y == 0 && z == 7) ||
 2306               		.loc 1 541 0 is_stmt 1 discriminator 1
 2307 0a94 37E0      		ldi r19,lo8(7)
 2308 0a96 8316      		cp r8,r19
 2309 0a98 9104      		cpc r9,__zero_reg__
 2310 0a9a 01F4      		brne .L93
 2311 0a9c 00C0      		rjmp .L89
 2312               	.L92:
 542:effect.c      **** 				(x == 7 && y == 7 && z == 0) ||
 2313               		.loc 1 542 0
 2314 0a9e 87E0      		ldi r24,lo8(7)
 2315 0aa0 4816      		cp r4,r24
 2316 0aa2 5104      		cpc r5,__zero_reg__
 2317 0aa4 01F4      		brne .L94
 2318               		.loc 1 542 0 is_stmt 0 discriminator 1
 2319 0aa6 8114      		cp r8,__zero_reg__
 2320 0aa8 9104      		cpc r9,__zero_reg__
 2321 0aaa 01F0      		breq .L89
 543:effect.c      **** 				(x == 7 && y == 7 && z == 7)
 2322               		.loc 1 543 0 is_stmt 1 discriminator 1
 2323 0aac 97E0      		ldi r25,lo8(7)
 2324 0aae 8916      		cp r8,r25
 2325 0ab0 9104      		cpc r9,__zero_reg__
 2326 0ab2 01F4      		brne .L94
 2327               	.L89:
 544:effect.c      **** 			)
 545:effect.c      **** 			{
 546:effect.c      **** 				// At this point, the voxel would bounce
 547:effect.c      **** 				// back and forth between this corner,
 548:effect.c      **** 				// and the exact opposite corner
 549:effect.c      **** 				// We don't want that!
 550:effect.c      **** 			
 551:effect.c      **** 				// So we alter the trajectory a bit,
 552:effect.c      **** 				// to avoid corner stickyness
 553:effect.c      **** 				lol = rand()%3;
 2328               		.loc 1 553 0
 2329 0ab4 0E94 0000 		call rand
 2330 0ab8 63E0      		ldi r22,lo8(3)
 2331 0aba 70E0      		ldi r23,hi8(3)
 2332 0abc 0E94 0000 		call __divmodhi4
 2333               	.LVL173:
 554:effect.c      **** 				if (lol == 0)
 2334               		.loc 1 554 0
 2335 0ac0 0097      		sbiw r24,0
 2336 0ac2 01F0      		breq .L137
 2337               	.LVL174:
 555:effect.c      **** 					dx = 0;
 556:effect.c      **** 				
 557:effect.c      **** 				if (lol == 1)
 2338               		.loc 1 557 0
 2339 0ac4 8130      		cpi r24,1
 2340 0ac6 9105      		cpc r25,__zero_reg__
 2341 0ac8 01F0      		breq .L138
 558:effect.c      **** 					dy = 0;
 559:effect.c      **** 					
 560:effect.c      **** 				if (lol == 2)
 2342               		.loc 1 560 0
 2343 0aca 8230      		cpi r24,2
 2344 0acc 9105      		cpc r25,__zero_reg__
 2345 0ace 01F0      		breq .L139
 2346 0ad0 00C0      		rjmp .L95
 2347               	.LVL175:
 2348               	.L137:
 555:effect.c      **** 					dx = 0;
 2349               		.loc 1 555 0
 2350 0ad2 CC24      		clr r12
 2351 0ad4 DD24      		clr r13
 2352 0ad6 00C0      		rjmp .L95
 2353               	.LVL176:
 2354               	.L138:
 558:effect.c      **** 					dy = 0;
 2355               		.loc 1 558 0
 2356 0ad8 EE24      		clr r14
 2357 0ada FF24      		clr r15
 2358               	.LVL177:
 2359 0adc 00C0      		rjmp .L95
 2360               	.LVL178:
 2361               	.L139:
 561:effect.c      **** 					dz = 0;
 2362               		.loc 1 561 0
 2363 0ade 00E0      		ldi r16,lo8(0)
 2364 0ae0 10E0      		ldi r17,hi8(0)
 2365               	.LVL179:
 2366               	.L95:
 562:effect.c      **** 			}
 563:effect.c      **** 		}
 564:effect.c      **** 
 565:effect.c      ****         // one last sanity check
 566:effect.c      ****         if (x == 0 && dx == -1)
 2367               		.loc 1 566 0
 2368 0ae2 2114      		cp r2,__zero_reg__
 2369 0ae4 3104      		cpc r3,__zero_reg__
 2370 0ae6 01F4      		brne .L96
 2371               	.LVL180:
 2372               	.L90:
 2373               		.loc 1 566 0 is_stmt 0 discriminator 1
 2374 0ae8 EFEF      		ldi r30,lo8(-1)
 2375 0aea CE16      		cp r12,r30
 2376 0aec EFEF      		ldi r30,hi8(-1)
 2377 0aee DE06      		cpc r13,r30
 2378 0af0 01F4      		brne .L96
 2379               	.L151:
 567:effect.c      ****             dx = 1;
 2380               		.loc 1 567 0 is_stmt 1
 2381 0af2 51E0      		ldi r21,lo8(1)
 2382 0af4 C52E      		mov r12,r21
 2383 0af6 D12C      		mov r13,__zero_reg__
 2384               	.L96:
 2385               	.LVL181:
 568:effect.c      **** 	
 569:effect.c      ****         if (y == 0 && dy == -1)
 2386               		.loc 1 569 0
 2387 0af8 4114      		cp r4,__zero_reg__
 2388 0afa 5104      		cpc r5,__zero_reg__
 2389 0afc 01F4      		brne .L94
 2390               	.LVL182:
 2391               	.L93:
 2392               		.loc 1 569 0 is_stmt 0 discriminator 1
 2393 0afe FFEF      		ldi r31,lo8(-1)
 2394 0b00 EF16      		cp r14,r31
 2395 0b02 FFEF      		ldi r31,hi8(-1)
 2396 0b04 FF06      		cpc r15,r31
 2397 0b06 01F4      		brne .L94
 570:effect.c      ****             dy = 1;
 2398               		.loc 1 570 0 is_stmt 1
 2399 0b08 41E0      		ldi r20,lo8(1)
 2400 0b0a E42E      		mov r14,r20
 2401 0b0c F12C      		mov r15,__zero_reg__
 2402               	.LVL183:
 2403               	.L94:
 571:effect.c      **** 	
 572:effect.c      ****         if (z == 0 && dz == -1)
 2404               		.loc 1 572 0
 2405 0b0e 8114      		cp r8,__zero_reg__
 2406 0b10 9104      		cpc r9,__zero_reg__
 2407 0b12 01F4      		brne .L97
 2408               		.loc 1 572 0 is_stmt 0 discriminator 1
 2409 0b14 2FEF      		ldi r18,hi8(-1)
 2410 0b16 0F3F      		cpi r16,lo8(-1)
 2411 0b18 1207      		cpc r17,r18
 2412 0b1a 01F4      		brne .L97
 573:effect.c      ****             dz = 1;
 2413               		.loc 1 573 0 is_stmt 1
 2414 0b1c 01E0      		ldi r16,lo8(1)
 2415 0b1e 10E0      		ldi r17,hi8(1)
 2416               	.LVL184:
 2417               	.L97:
 574:effect.c      **** 	
 575:effect.c      ****         if (x == 7 && dx == 1)
 2418               		.loc 1 575 0
 2419 0b20 37E0      		ldi r19,lo8(7)
 2420 0b22 2316      		cp r2,r19
 2421 0b24 3104      		cpc r3,__zero_reg__
 2422 0b26 01F4      		brne .L98
 2423               		.loc 1 575 0 is_stmt 0 discriminator 1
 2424 0b28 81E0      		ldi r24,lo8(1)
 2425 0b2a C816      		cp r12,r24
 2426 0b2c D104      		cpc r13,__zero_reg__
 2427 0b2e 01F4      		brne .L98
 576:effect.c      ****             dx = -1;
 2428               		.loc 1 576 0 is_stmt 1
 2429 0b30 CC24      		clr r12
 2430 0b32 CA94      		dec r12
 2431 0b34 DC2C      		mov r13,r12
 2432               	.L98:
 2433               	.LVL185:
 577:effect.c      **** 	
 578:effect.c      ****         if (y == 7 && dy == 1)
 2434               		.loc 1 578 0
 2435 0b36 97E0      		ldi r25,lo8(7)
 2436 0b38 4916      		cp r4,r25
 2437 0b3a 5104      		cpc r5,__zero_reg__
 2438 0b3c 01F4      		brne .L99
 2439               		.loc 1 578 0 is_stmt 0 discriminator 1
 2440 0b3e E1E0      		ldi r30,lo8(1)
 2441 0b40 EE16      		cp r14,r30
 2442 0b42 F104      		cpc r15,__zero_reg__
 2443 0b44 01F4      		brne .L99
 579:effect.c      ****             dy = -1;
 2444               		.loc 1 579 0 is_stmt 1
 2445 0b46 EE24      		clr r14
 2446 0b48 EA94      		dec r14
 2447 0b4a FE2C      		mov r15,r14
 2448               	.LVL186:
 2449               	.L99:
 580:effect.c      **** 	
 581:effect.c      ****         if (z == 7 && dz == 1)
 2450               		.loc 1 581 0
 2451 0b4c F7E0      		ldi r31,lo8(7)
 2452 0b4e 8F16      		cp r8,r31
 2453 0b50 9104      		cpc r9,__zero_reg__
 2454 0b52 01F4      		brne .L100
 2455               		.loc 1 581 0 is_stmt 0 discriminator 1
 2456 0b54 0130      		cpi r16,1
 2457 0b56 1105      		cpc r17,__zero_reg__
 2458 0b58 01F4      		brne .L100
 582:effect.c      ****             dz = -1;
 2459               		.loc 1 582 0 is_stmt 1
 2460 0b5a 0FEF      		ldi r16,lo8(-1)
 2461 0b5c 1FEF      		ldi r17,hi8(-1)
 2462               	.LVL187:
 2463               	.L100:
 583:effect.c      **** 	
 584:effect.c      **** 	
 585:effect.c      **** 		// Finally, move the voxel.
 586:effect.c      **** 		x = x + dx;
 2464               		.loc 1 586 0
 2465 0b5e 2C0C      		add r2,r12
 2466 0b60 3D1C      		adc r3,r13
 2467               	.LVL188:
 587:effect.c      **** 		y = y + dy;
 2468               		.loc 1 587 0
 2469 0b62 4E0C      		add r4,r14
 2470 0b64 5F1C      		adc r5,r15
 2471               	.LVL189:
 588:effect.c      **** 		z = z + dz;
 2472               		.loc 1 588 0
 2473 0b66 800E      		add r8,r16
 2474 0b68 911E      		adc r9,r17
 2475               	.LVL190:
 589:effect.c      **** 		
 590:effect.c      **** 		if (drawmode == 0x01) // show one voxel at time
 2476               		.loc 1 590 0
 2477 0b6a 21E0      		ldi r18,lo8(1)
 2478 0b6c 6216      		cp r6,r18
 2479 0b6e 01F4      		brne .L101
 591:effect.c      **** 		{
 592:effect.c      **** 			setvoxel(x,y,z);
 2480               		.loc 1 592 0
 2481 0b70 C101      		movw r24,r2
 2482 0b72 B201      		movw r22,r4
 2483 0b74 A401      		movw r20,r8
 2484 0b76 0E94 0000 		call setvoxel
 593:effect.c      **** 			delay_ms(delay);
 2485               		.loc 1 593 0
 2486 0b7a 8DA9      		ldd r24,Y+53
 2487 0b7c 9EA9      		ldd r25,Y+54
 2488 0b7e 0E94 0000 		call delay_ms
 594:effect.c      **** 			clrvoxel(x,y,z);	
 2489               		.loc 1 594 0
 2490 0b82 C101      		movw r24,r2
 2491 0b84 B201      		movw r22,r4
 2492 0b86 A401      		movw r20,r8
 2493 0b88 0E94 0000 		call clrvoxel
 2494 0b8c 00C0      		rjmp .L102
 2495               	.L101:
 595:effect.c      **** 		} else if (drawmode == 0x02) // flip the voxel in question
 2496               		.loc 1 595 0
 2497 0b8e 32E0      		ldi r19,lo8(2)
 2498 0b90 6316      		cp r6,r19
 2499 0b92 01F4      		brne .L103
 596:effect.c      **** 		{
 597:effect.c      **** 			flpvoxel(x,y,z);
 2500               		.loc 1 597 0
 2501 0b94 C101      		movw r24,r2
 2502 0b96 B201      		movw r22,r4
 2503 0b98 A401      		movw r20,r8
 2504 0b9a 0E94 0000 		call flpvoxel
 598:effect.c      **** 			delay_ms(delay);
 2505               		.loc 1 598 0
 2506 0b9e 8DA9      		ldd r24,Y+53
 2507 0ba0 9EA9      		ldd r25,Y+54
 2508 0ba2 0E94 0000 		call delay_ms
 2509 0ba6 00C0      		rjmp .L102
 2510               	.L103:
 599:effect.c      **** 		} if (drawmode == 0x03) // draw a snake
 2511               		.loc 1 599 0
 2512 0ba8 83E0      		ldi r24,lo8(3)
 2513 0baa 6816      		cp r6,r24
 2514 0bac 01F0      		breq .+2
 2515 0bae 00C0      		rjmp .L102
 2516 0bb0 FE01      		movw r30,r28
 2517 0bb2 B596      		adiw r30,37
 2518               	.L104:
 600:effect.c      **** 		{
 601:effect.c      **** 			for (i=7;i>=0;i--)
 602:effect.c      **** 			{
 603:effect.c      **** 				snake[i][0] = snake[i-1][0];
 2519               		.loc 1 603 0 discriminator 2
 2520 0bb4 8081      		ld r24,Z
 2521 0bb6 9181      		ldd r25,Z+1
 2522 0bb8 9783      		std Z+7,r25
 2523 0bba 8683      		std Z+6,r24
 604:effect.c      **** 				snake[i][1] = snake[i-1][1];
 2524               		.loc 1 604 0 discriminator 2
 2525 0bbc 8281      		ldd r24,Z+2
 2526 0bbe 9381      		ldd r25,Z+3
 2527 0bc0 9187      		std Z+9,r25
 2528 0bc2 8087      		std Z+8,r24
 605:effect.c      **** 				snake[i][2] = snake[i-1][2];
 2529               		.loc 1 605 0 discriminator 2
 2530 0bc4 8481      		ldd r24,Z+4
 2531 0bc6 9581      		ldd r25,Z+5
 2532 0bc8 9387      		std Z+11,r25
 2533 0bca 8287      		std Z+10,r24
 2534 0bcc 3697      		sbiw r30,6
 601:effect.c      **** 			for (i=7;i>=0;i--)
 2535               		.loc 1 601 0 discriminator 2
 2536 0bce 2FA9      		ldd r18,Y+55
 2537 0bd0 38AD      		ldd r19,Y+56
 2538 0bd2 E217      		cp r30,r18
 2539 0bd4 F307      		cpc r31,r19
 2540 0bd6 01F4      		brne .L104
 606:effect.c      **** 			}
 607:effect.c      **** 			snake[0][0] = x;
 2541               		.loc 1 607 0
 2542 0bd8 3A82      		std Y+2,r3
 2543 0bda 2982      		std Y+1,r2
 608:effect.c      **** 			snake[0][1] = y;
 2544               		.loc 1 608 0
 2545 0bdc 5C82      		std Y+4,r5
 2546 0bde 4B82      		std Y+3,r4
 609:effect.c      **** 			snake[0][2] = z;
 2547               		.loc 1 609 0
 2548 0be0 9E82      		std Y+6,r9
 2549 0be2 8D82      		std Y+5,r8
 2550               	.LVL191:
 2551 0be4 5E01      		movw r10,r28
 2552               	.LVL192:
 2553 0be6 0894      		sec
 2554 0be8 A11C      		adc r10,__zero_reg__
 2555 0bea B11C      		adc r11,__zero_reg__
 2556 0bec C501      		movw r24,r10
 2557 0bee 5701      		movw r10,r14
 2558 0bf0 7801      		movw r14,r16
 2559               	.LVL193:
 2560 0bf2 8C01      		movw r16,r24
 2561               	.LVL194:
 2562               	.L105:
 610:effect.c      **** 				
 611:effect.c      **** 			for (i=0;i<8;i++)
 612:effect.c      **** 			{
 613:effect.c      **** 				setvoxel(snake[i][0],snake[i][1],snake[i][2]);
 2563               		.loc 1 613 0 discriminator 2
 2564 0bf4 F801      		movw r30,r16
 2565 0bf6 6281      		ldd r22,Z+2
 2566 0bf8 7381      		ldd r23,Z+3
 2567 0bfa 4481      		ldd r20,Z+4
 2568 0bfc 5581      		ldd r21,Z+5
 2569 0bfe 8081      		ld r24,Z
 2570 0c00 9181      		ldd r25,Z+1
 2571 0c02 0E94 0000 		call setvoxel
 2572 0c06 0A5F      		subi r16,lo8(-(6))
 2573 0c08 1F4F      		sbci r17,hi8(-(6))
 611:effect.c      **** 			for (i=0;i<8;i++)
 2574               		.loc 1 611 0 discriminator 2
 2575 0c0a 29A9      		ldd r18,Y+49
 2576 0c0c 3AA9      		ldd r19,Y+50
 2577 0c0e 0217      		cp r16,r18
 2578 0c10 1307      		cpc r17,r19
 2579 0c12 01F4      		brne .L105
 2580 0c14 8701      		movw r16,r14
 2581 0c16 7501      		movw r14,r10
 2582               	.LVL195:
 614:effect.c      **** 			}
 615:effect.c      **** 			delay_ms(delay);
 2583               		.loc 1 615 0
 2584 0c18 8DA9      		ldd r24,Y+53
 2585 0c1a 9EA9      		ldd r25,Y+54
 2586 0c1c 0E94 0000 		call delay_ms
 2587               	.LVL196:
 2588 0c20 5E01      		movw r10,r28
 2589               	.LVL197:
 2590 0c22 0894      		sec
 2591 0c24 A11C      		adc r10,__zero_reg__
 2592 0c26 B11C      		adc r11,__zero_reg__
 2593 0c28 C501      		movw r24,r10
 2594 0c2a 5701      		movw r10,r14
 2595 0c2c 7801      		movw r14,r16
 2596               	.LVL198:
 2597 0c2e 8C01      		movw r16,r24
 2598               	.LVL199:
 2599               	.L106:
 616:effect.c      **** 			for (i=0;i<8;i++)
 617:effect.c      **** 			{
 618:effect.c      **** 				clrvoxel(snake[i][0],snake[i][1],snake[i][2]);
 2600               		.loc 1 618 0 discriminator 2
 2601 0c30 F801      		movw r30,r16
 2602 0c32 6281      		ldd r22,Z+2
 2603 0c34 7381      		ldd r23,Z+3
 2604 0c36 4481      		ldd r20,Z+4
 2605 0c38 5581      		ldd r21,Z+5
 2606 0c3a 8081      		ld r24,Z
 2607 0c3c 9181      		ldd r25,Z+1
 2608 0c3e 0E94 0000 		call clrvoxel
 2609 0c42 0A5F      		subi r16,lo8(-(6))
 2610 0c44 1F4F      		sbci r17,hi8(-(6))
 616:effect.c      **** 			for (i=0;i<8;i++)
 2611               		.loc 1 616 0 discriminator 2
 2612 0c46 29A9      		ldd r18,Y+49
 2613 0c48 3AA9      		ldd r19,Y+50
 2614 0c4a 0217      		cp r16,r18
 2615 0c4c 1307      		cpc r17,r19
 2616 0c4e 01F4      		brne .L106
 2617 0c50 8701      		movw r16,r14
 2618 0c52 7501      		movw r14,r10
 2619               	.LVL200:
 2620               	.L102:
 619:effect.c      **** 			}
 620:effect.c      **** 		}
 621:effect.c      **** 		
 622:effect.c      **** 	
 623:effect.c      **** 		iterations--;
 2621               		.loc 1 623 0
 2622 0c54 8BA9      		ldd r24,Y+51
 2623 0c56 9CA9      		ldd r25,Y+52
 2624 0c58 0197      		sbiw r24,1
 2625 0c5a 9CAB      		std Y+52,r25
 2626 0c5c 8BAB      		std Y+51,r24
 2627               	.LVL201:
 2628               	.L67:
 301:effect.c      **** 	while(iterations)
 2629               		.loc 1 301 0 discriminator 1
 2630 0c5e EBA9      		ldd r30,Y+51
 2631 0c60 FCA9      		ldd r31,Y+52
 2632 0c62 3097      		sbiw r30,0
 2633 0c64 01F0      		breq .+2
 2634 0c66 00C0      		rjmp .L107
 2635 0c68 00C0      		rjmp .L152
 2636               	.LVL202:
 2637               	.L85:
 522:effect.c      **** 							dx = -1;
 2638               		.loc 1 522 0
 2639 0c6a CC24      		clr r12
 2640 0c6c CA94      		dec r12
 2641 0c6e DC2C      		mov r13,r12
 2642               	.LVL203:
 2643 0c70 00C0      		rjmp .L96
 2644               	.LVL204:
 2645               	.L152:
 2646               	/* epilogue start */
 624:effect.c      **** 	}
 625:effect.c      **** }
 2647               		.loc 1 625 0
 2648 0c72 E896      		adiw r28,56
 2649 0c74 0FB6      		in __tmp_reg__,__SREG__
 2650 0c76 F894      		cli
 2651 0c78 DEBF      		out __SP_H__,r29
 2652 0c7a 0FBE      		out __SREG__,__tmp_reg__
 2653 0c7c CDBF      		out __SP_L__,r28
 2654 0c7e DF91      		pop r29
 2655 0c80 CF91      		pop r28
 2656 0c82 1F91      		pop r17
 2657 0c84 0F91      		pop r16
 2658               	.LVL205:
 2659 0c86 FF90      		pop r15
 2660 0c88 EF90      		pop r14
 2661               	.LVL206:
 2662 0c8a DF90      		pop r13
 2663 0c8c CF90      		pop r12
 2664               	.LVL207:
 2665 0c8e BF90      		pop r11
 2666 0c90 AF90      		pop r10
 2667 0c92 9F90      		pop r9
 2668 0c94 8F90      		pop r8
 2669               	.LVL208:
 2670 0c96 7F90      		pop r7
 2671 0c98 6F90      		pop r6
 2672               	.LVL209:
 2673 0c9a 5F90      		pop r5
 2674 0c9c 4F90      		pop r4
 2675               	.LVL210:
 2676 0c9e 3F90      		pop r3
 2677 0ca0 2F90      		pop r2
 2678               	.LVL211:
 2679 0ca2 0895      		ret
 2680               		.cfi_endproc
 2681               	.LFE12:
 2683               	.global	effect_random_filler
 2685               	effect_random_filler:
 2686               	.LFB13:
 626:effect.c      **** 
 627:effect.c      **** // Set or clear exactly 512 voxels in a random order.
 628:effect.c      **** void effect_random_filler (int delay, int state)
 629:effect.c      **** {
 2687               		.loc 1 629 0
 2688               		.cfi_startproc
 2689               	.LVL212:
 2690 0ca4 2F92      		push r2
 2691               	.LCFI134:
 2692               		.cfi_def_cfa_offset 3
 2693               		.cfi_offset 2, -2
 2694 0ca6 3F92      		push r3
 2695               	.LCFI135:
 2696               		.cfi_def_cfa_offset 4
 2697               		.cfi_offset 3, -3
 2698 0ca8 4F92      		push r4
 2699               	.LCFI136:
 2700               		.cfi_def_cfa_offset 5
 2701               		.cfi_offset 4, -4
 2702 0caa 5F92      		push r5
 2703               	.LCFI137:
 2704               		.cfi_def_cfa_offset 6
 2705               		.cfi_offset 5, -5
 2706 0cac 6F92      		push r6
 2707               	.LCFI138:
 2708               		.cfi_def_cfa_offset 7
 2709               		.cfi_offset 6, -6
 2710 0cae 7F92      		push r7
 2711               	.LCFI139:
 2712               		.cfi_def_cfa_offset 8
 2713               		.cfi_offset 7, -7
 2714 0cb0 8F92      		push r8
 2715               	.LCFI140:
 2716               		.cfi_def_cfa_offset 9
 2717               		.cfi_offset 8, -8
 2718 0cb2 9F92      		push r9
 2719               	.LCFI141:
 2720               		.cfi_def_cfa_offset 10
 2721               		.cfi_offset 9, -9
 2722 0cb4 AF92      		push r10
 2723               	.LCFI142:
 2724               		.cfi_def_cfa_offset 11
 2725               		.cfi_offset 10, -10
 2726 0cb6 BF92      		push r11
 2727               	.LCFI143:
 2728               		.cfi_def_cfa_offset 12
 2729               		.cfi_offset 11, -11
 2730 0cb8 CF92      		push r12
 2731               	.LCFI144:
 2732               		.cfi_def_cfa_offset 13
 2733               		.cfi_offset 12, -12
 2734 0cba DF92      		push r13
 2735               	.LCFI145:
 2736               		.cfi_def_cfa_offset 14
 2737               		.cfi_offset 13, -13
 2738 0cbc EF92      		push r14
 2739               	.LCFI146:
 2740               		.cfi_def_cfa_offset 15
 2741               		.cfi_offset 14, -14
 2742 0cbe FF92      		push r15
 2743               	.LCFI147:
 2744               		.cfi_def_cfa_offset 16
 2745               		.cfi_offset 15, -15
 2746 0cc0 0F93      		push r16
 2747               	.LCFI148:
 2748               		.cfi_def_cfa_offset 17
 2749               		.cfi_offset 16, -16
 2750 0cc2 1F93      		push r17
 2751               	.LCFI149:
 2752               		.cfi_def_cfa_offset 18
 2753               		.cfi_offset 17, -17
 2754 0cc4 CF93      		push r28
 2755               	.LCFI150:
 2756               		.cfi_def_cfa_offset 19
 2757               		.cfi_offset 28, -18
 2758 0cc6 DF93      		push r29
 2759               	.LCFI151:
 2760               		.cfi_def_cfa_offset 20
 2761               		.cfi_offset 29, -19
 2762               	/* prologue: function */
 2763               	/* frame size = 0 */
 2764               	/* stack size = 18 */
 2765               	.L__stack_usage = 18
 2766 0cc8 1C01      		movw r2,r24
 2767 0cca 7B01      		movw r14,r22
 2768               	.LVL213:
 630:effect.c      **** 	int x,y,z;
 631:effect.c      **** 	int loop = 0;
 632:effect.c      **** 	
 633:effect.c      **** 	
 634:effect.c      **** 	if (state == 1)
 2769               		.loc 1 634 0
 2770 0ccc 6130      		cpi r22,1
 2771 0cce 7105      		cpc r23,__zero_reg__
 2772               	.LVL214:
 2773 0cd0 01F4      		brne .L154
 2774               	.LVL215:
 635:effect.c      **** 	{
 636:effect.c      **** 		fill(0x00);
 2775               		.loc 1 636 0
 2776 0cd2 80E0      		ldi r24,lo8(0)
 2777               	.L161:
 2778 0cd4 0E94 0000 		call fill
 629:effect.c      **** {
 2779               		.loc 1 629 0
 2780 0cd8 CC24      		clr r12
 2781 0cda DD24      		clr r13
 637:effect.c      **** 	} else
 638:effect.c      **** 	{
 639:effect.c      **** 		fill(0xff);
 640:effect.c      **** 	}
 641:effect.c      **** 	
 642:effect.c      **** 	while (loop<511)
 643:effect.c      **** 	{
 644:effect.c      **** 		x = rand()%8;
 2782               		.loc 1 644 0
 2783 0cdc 28E0      		ldi r18,lo8(8)
 2784 0cde A22E      		mov r10,r18
 2785 0ce0 B12C      		mov r11,__zero_reg__
 2786 0ce2 00C0      		rjmp .L155
 2787               	.L154:
 639:effect.c      **** 		fill(0xff);
 2788               		.loc 1 639 0
 2789 0ce4 8FEF      		ldi r24,lo8(-1)
 2790 0ce6 00C0      		rjmp .L161
 2791               	.LVL216:
 2792               	.L155:
 2793               		.loc 1 644 0
 2794 0ce8 0E94 0000 		call rand
 2795 0cec B501      		movw r22,r10
 2796 0cee 0E94 0000 		call __divmodhi4
 2797 0cf2 EC01      		movw r28,r24
 2798 0cf4 582E      		mov r5,r24
 2799 0cf6 4D2E      		mov r4,r29
 2800               	.LVL217:
 645:effect.c      **** 		y = rand()%8;
 2801               		.loc 1 645 0
 2802 0cf8 0E94 0000 		call rand
 2803               	.LVL218:
 2804 0cfc B501      		movw r22,r10
 2805 0cfe 0E94 0000 		call __divmodhi4
 2806 0d02 182F      		mov r17,r24
 2807 0d04 092F      		mov r16,r25
 2808 0d06 3801      		movw r6,r16
 2809               	.LVL219:
 646:effect.c      **** 		z = rand()%8;
 2810               		.loc 1 646 0
 2811 0d08 0E94 0000 		call rand
 2812 0d0c B501      		movw r22,r10
 2813 0d0e 0E94 0000 		call __divmodhi4
 2814 0d12 AC01      		movw r20,r24
 2815 0d14 982E      		mov r9,r24
 2816 0d16 852E      		mov r8,r21
 2817               	.LVL220:
 647:effect.c      **** 
 648:effect.c      **** 		if ((state == 0 && getvoxel(x,y,z) == 0x01) || (state == 1 && getvoxel(x,y,z) == 0x00))
 2818               		.loc 1 648 0
 2819 0d18 E114      		cp r14,__zero_reg__
 2820 0d1a F104      		cpc r15,__zero_reg__
 2821 0d1c 01F4      		brne .L157
 2822               		.loc 1 648 0 is_stmt 0 discriminator 1
 2823 0d1e CE01      		movw r24,r28
 2824               	.LVL221:
 2825 0d20 612F      		mov r22,r17
 2826 0d22 702F      		mov r23,r16
 2827 0d24 0E94 0000 		call getvoxel
 2828               	.LVL222:
 2829 0d28 8130      		cpi r24,lo8(1)
 2830 0d2a 01F4      		brne .L159
 2831 0d2c 00C0      		rjmp .L158
 2832               	.L157:
 2833               		.loc 1 648 0 discriminator 2
 2834 0d2e 81E0      		ldi r24,lo8(1)
 2835 0d30 E816      		cp r14,r24
 2836 0d32 F104      		cpc r15,__zero_reg__
 2837 0d34 01F4      		brne .L159
 2838               		.loc 1 648 0 discriminator 1
 2839 0d36 CE01      		movw r24,r28
 2840 0d38 612F      		mov r22,r17
 2841 0d3a 702F      		mov r23,r16
 2842 0d3c 0E94 0000 		call getvoxel
 2843 0d40 8823      		tst r24
 2844 0d42 01F4      		brne .L159
 2845               	.L158:
 649:effect.c      **** 		{
 650:effect.c      **** 			altervoxel(x,y,z,state);
 2846               		.loc 1 650 0 is_stmt 1
 2847 0d44 852D      		mov r24,r5
 2848 0d46 942D      		mov r25,r4
 2849 0d48 672D      		mov r22,r7
 2850 0d4a 762D      		mov r23,r6
 2851 0d4c 492D      		mov r20,r9
 2852 0d4e 582D      		mov r21,r8
 2853 0d50 9701      		movw r18,r14
 2854 0d52 0E94 0000 		call altervoxel
 651:effect.c      **** 			delay_ms(delay);
 2855               		.loc 1 651 0
 2856 0d56 C101      		movw r24,r2
 2857 0d58 0E94 0000 		call delay_ms
 652:effect.c      **** 			loop++;
 2858               		.loc 1 652 0
 2859 0d5c 0894      		sec
 2860 0d5e C11C      		adc r12,__zero_reg__
 2861 0d60 D11C      		adc r13,__zero_reg__
 2862               	.LVL223:
 2863               	.L159:
 642:effect.c      **** 	while (loop<511)
 2864               		.loc 1 642 0 discriminator 1
 2865 0d62 8FEF      		ldi r24,lo8(511)
 2866 0d64 C816      		cp r12,r24
 2867 0d66 81E0      		ldi r24,hi8(511)
 2868 0d68 D806      		cpc r13,r24
 2869 0d6a 04F4      		brge .+2
 2870 0d6c 00C0      		rjmp .L155
 2871               	/* epilogue start */
 653:effect.c      **** 		}	
 654:effect.c      **** 	}
 655:effect.c      **** }
 2872               		.loc 1 655 0
 2873 0d6e DF91      		pop r29
 2874               	.LVL224:
 2875 0d70 CF91      		pop r28
 2876 0d72 1F91      		pop r17
 2877 0d74 0F91      		pop r16
 2878 0d76 FF90      		pop r15
 2879 0d78 EF90      		pop r14
 2880               	.LVL225:
 2881 0d7a DF90      		pop r13
 2882 0d7c CF90      		pop r12
 2883               	.LVL226:
 2884 0d7e BF90      		pop r11
 2885 0d80 AF90      		pop r10
 2886 0d82 9F90      		pop r9
 2887               	.LVL227:
 2888 0d84 8F90      		pop r8
 2889 0d86 7F90      		pop r7
 2890               	.LVL228:
 2891 0d88 6F90      		pop r6
 2892 0d8a 5F90      		pop r5
 2893               	.LVL229:
 2894 0d8c 4F90      		pop r4
 2895 0d8e 3F90      		pop r3
 2896 0d90 2F90      		pop r2
 2897               	.LVL230:
 2898 0d92 0895      		ret
 2899               		.cfi_endproc
 2900               	.LFE13:
 2902               	.global	effect_rain
 2904               	effect_rain:
 2905               	.LFB14:
 656:effect.c      **** 
 657:effect.c      **** 
 658:effect.c      **** void effect_rain (int iterations)
 659:effect.c      **** {
 2906               		.loc 1 659 0
 2907               		.cfi_startproc
 2908               	.LVL231:
 2909 0d94 6F92      		push r6
 2910               	.LCFI152:
 2911               		.cfi_def_cfa_offset 3
 2912               		.cfi_offset 6, -2
 2913 0d96 7F92      		push r7
 2914               	.LCFI153:
 2915               		.cfi_def_cfa_offset 4
 2916               		.cfi_offset 7, -3
 2917 0d98 8F92      		push r8
 2918               	.LCFI154:
 2919               		.cfi_def_cfa_offset 5
 2920               		.cfi_offset 8, -4
 2921 0d9a 9F92      		push r9
 2922               	.LCFI155:
 2923               		.cfi_def_cfa_offset 6
 2924               		.cfi_offset 9, -5
 2925 0d9c AF92      		push r10
 2926               	.LCFI156:
 2927               		.cfi_def_cfa_offset 7
 2928               		.cfi_offset 10, -6
 2929 0d9e BF92      		push r11
 2930               	.LCFI157:
 2931               		.cfi_def_cfa_offset 8
 2932               		.cfi_offset 11, -7
 2933 0da0 CF92      		push r12
 2934               	.LCFI158:
 2935               		.cfi_def_cfa_offset 9
 2936               		.cfi_offset 12, -8
 2937 0da2 DF92      		push r13
 2938               	.LCFI159:
 2939               		.cfi_def_cfa_offset 10
 2940               		.cfi_offset 13, -9
 2941 0da4 EF92      		push r14
 2942               	.LCFI160:
 2943               		.cfi_def_cfa_offset 11
 2944               		.cfi_offset 14, -10
 2945 0da6 FF92      		push r15
 2946               	.LCFI161:
 2947               		.cfi_def_cfa_offset 12
 2948               		.cfi_offset 15, -11
 2949 0da8 0F93      		push r16
 2950               	.LCFI162:
 2951               		.cfi_def_cfa_offset 13
 2952               		.cfi_offset 16, -12
 2953 0daa 1F93      		push r17
 2954               	.LCFI163:
 2955               		.cfi_def_cfa_offset 14
 2956               		.cfi_offset 17, -13
 2957 0dac CF93      		push r28
 2958               	.LCFI164:
 2959               		.cfi_def_cfa_offset 15
 2960               		.cfi_offset 28, -14
 2961 0dae DF93      		push r29
 2962               	.LCFI165:
 2963               		.cfi_def_cfa_offset 16
 2964               		.cfi_offset 29, -15
 2965               	/* prologue: function */
 2966               	/* frame size = 0 */
 2967               	/* stack size = 14 */
 2968               	.L__stack_usage = 14
 2969 0db0 4C01      		movw r8,r24
 2970               	.LVL232:
 660:effect.c      **** 	int i, ii;
 661:effect.c      **** 	int rnd_x;
 662:effect.c      **** 	int rnd_y;
 663:effect.c      **** 	int rnd_num;
 664:effect.c      **** 	
 665:effect.c      **** 	for (ii=0;ii<iterations;ii++)
 2971               		.loc 1 665 0
 2972 0db2 00E0      		ldi r16,lo8(0)
 2973 0db4 10E0      		ldi r17,hi8(0)
 666:effect.c      **** 	{
 667:effect.c      **** 		rnd_num = rand()%4;
 2974               		.loc 1 667 0
 2975 0db6 34E0      		ldi r19,lo8(4)
 2976 0db8 632E      		mov r6,r19
 2977 0dba 712C      		mov r7,__zero_reg__
 668:effect.c      **** 		
 669:effect.c      **** 		for (i=0; i < rnd_num;i++)
 670:effect.c      **** 		{
 671:effect.c      **** 			rnd_x = rand()%8;
 2978               		.loc 1 671 0
 2979 0dbc 48E0      		ldi r20,lo8(8)
 2980 0dbe C42E      		mov r12,r20
 2981 0dc0 D12C      		mov r13,__zero_reg__
 665:effect.c      **** 	for (ii=0;ii<iterations;ii++)
 2982               		.loc 1 665 0
 2983 0dc2 00C0      		rjmp .L163
 2984               	.LVL233:
 2985               	.L166:
 667:effect.c      **** 		rnd_num = rand()%4;
 2986               		.loc 1 667 0
 2987 0dc4 0E94 0000 		call rand
 2988 0dc8 B301      		movw r22,r6
 2989 0dca 0E94 0000 		call __divmodhi4
 2990 0dce 5C01      		movw r10,r24
 2991               	.LVL234:
 669:effect.c      **** 		for (i=0; i < rnd_num;i++)
 2992               		.loc 1 669 0
 2993 0dd0 C0E0      		ldi r28,lo8(0)
 2994 0dd2 D0E0      		ldi r29,hi8(0)
 2995 0dd4 00C0      		rjmp .L164
 2996               	.LVL235:
 2997               	.L165:
 2998               		.loc 1 671 0 discriminator 2
 2999 0dd6 0E94 0000 		call rand
 3000 0dda 7C01      		movw r14,r24
 3001               	.LVL236:
 672:effect.c      **** 			rnd_y = rand()%8;
 3002               		.loc 1 672 0 discriminator 2
 3003 0ddc 0E94 0000 		call rand
 3004               	.LVL237:
 3005 0de0 9C01      		movw r18,r24
 3006               	.LVL238:
 671:effect.c      **** 			rnd_x = rand()%8;
 3007               		.loc 1 671 0 discriminator 2
 3008 0de2 C701      		movw r24,r14
 3009               	.LVL239:
 3010 0de4 B601      		movw r22,r12
 3011 0de6 0E94 0000 		call __divmodhi4
 3012 0dea FC01      		movw r30,r24
 3013               		.loc 1 672 0 discriminator 2
 3014 0dec C901      		movw r24,r18
 3015 0dee B601      		movw r22,r12
 3016 0df0 0E94 0000 		call __divmodhi4
 3017 0df4 BC01      		movw r22,r24
 673:effect.c      **** 			setvoxel(rnd_x,rnd_y,7);
 3018               		.loc 1 673 0 discriminator 2
 3019 0df6 CF01      		movw r24,r30
 3020 0df8 47E0      		ldi r20,lo8(7)
 3021 0dfa 50E0      		ldi r21,hi8(7)
 3022 0dfc 0E94 0000 		call setvoxel
 3023               	.LVL240:
 669:effect.c      **** 		for (i=0; i < rnd_num;i++)
 3024               		.loc 1 669 0 discriminator 2
 3025 0e00 2196      		adiw r28,1
 3026               	.LVL241:
 3027               	.L164:
 669:effect.c      **** 		for (i=0; i < rnd_num;i++)
 3028               		.loc 1 669 0 is_stmt 0 discriminator 1
 3029 0e02 CA15      		cp r28,r10
 3030 0e04 DB05      		cpc r29,r11
 3031 0e06 04F0      		brlt .L165
 674:effect.c      **** 		}
 675:effect.c      **** 		
 676:effect.c      **** 		delay_ms(1000);
 3032               		.loc 1 676 0 is_stmt 1
 3033 0e08 88EE      		ldi r24,lo8(1000)
 3034 0e0a 93E0      		ldi r25,hi8(1000)
 3035 0e0c 0E94 0000 		call delay_ms
 677:effect.c      **** 		shift(AXIS_Z,-1);
 3036               		.loc 1 677 0
 3037 0e10 8AE7      		ldi r24,lo8(122)
 3038 0e12 6FEF      		ldi r22,lo8(-1)
 3039 0e14 7FEF      		ldi r23,hi8(-1)
 3040 0e16 0E94 0000 		call shift
 665:effect.c      **** 	for (ii=0;ii<iterations;ii++)
 3041               		.loc 1 665 0
 3042 0e1a 0F5F      		subi r16,lo8(-(1))
 3043 0e1c 1F4F      		sbci r17,hi8(-(1))
 3044               	.LVL242:
 3045               	.L163:
 665:effect.c      **** 	for (ii=0;ii<iterations;ii++)
 3046               		.loc 1 665 0 is_stmt 0 discriminator 1
 3047 0e1e 0815      		cp r16,r8
 3048 0e20 1905      		cpc r17,r9
 3049 0e22 04F0      		brlt .L166
 3050               	/* epilogue start */
 678:effect.c      **** 	}
 679:effect.c      **** }
 3051               		.loc 1 679 0 is_stmt 1
 3052 0e24 DF91      		pop r29
 3053 0e26 CF91      		pop r28
 3054 0e28 1F91      		pop r17
 3055 0e2a 0F91      		pop r16
 3056               	.LVL243:
 3057 0e2c FF90      		pop r15
 3058 0e2e EF90      		pop r14
 3059 0e30 DF90      		pop r13
 3060 0e32 CF90      		pop r12
 3061 0e34 BF90      		pop r11
 3062 0e36 AF90      		pop r10
 3063 0e38 9F90      		pop r9
 3064 0e3a 8F90      		pop r8
 3065               	.LVL244:
 3066 0e3c 7F90      		pop r7
 3067 0e3e 6F90      		pop r6
 3068 0e40 0895      		ret
 3069               		.cfi_endproc
 3070               	.LFE14:
 3072               	.global	draw_positions_axis
 3074               	draw_positions_axis:
 3075               	.LFB18:
 680:effect.c      **** 
 681:effect.c      **** void effect_z_updown (int iterations, int delay)
 682:effect.c      **** {
 683:effect.c      **** 	unsigned char positions[64];
 684:effect.c      **** 	unsigned char destinations[64];
 685:effect.c      **** 
 686:effect.c      **** 	int i,y,move;
 687:effect.c      **** 	
 688:effect.c      **** 	for (i=0; i<64; i++)
 689:effect.c      **** 	{
 690:effect.c      **** 		positions[i] = 4;
 691:effect.c      **** 		destinations[i] = rand()%8;
 692:effect.c      **** 	}
 693:effect.c      **** 
 694:effect.c      **** 	for (i=0; i<8; i++)
 695:effect.c      **** 	{
 696:effect.c      **** 		effect_z_updown_move(positions, destinations, AXIS_Z);
 697:effect.c      **** 		delay_ms(delay);
 698:effect.c      **** 	}
 699:effect.c      **** 	
 700:effect.c      **** 	for (i=0;i<iterations;i++)
 701:effect.c      **** 	{
 702:effect.c      **** 		for (move=0;move<8;move++)
 703:effect.c      **** 		{
 704:effect.c      **** 			effect_z_updown_move(positions, destinations, AXIS_Z);
 705:effect.c      **** 			delay_ms(delay);
 706:effect.c      **** 		}
 707:effect.c      **** 
 708:effect.c      **** 		delay_ms(delay*4);
 709:effect.c      **** 
 710:effect.c      **** 
 711:effect.c      **** 		for (y=0;y<32;y++)
 712:effect.c      **** 		{
 713:effect.c      **** 				destinations[rand()%64] = rand()%8;
 714:effect.c      **** 		}
 715:effect.c      **** 		
 716:effect.c      **** 	}
 717:effect.c      **** 
 718:effect.c      **** }
 719:effect.c      **** 
 720:effect.c      **** void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
 721:effect.c      **** {
 722:effect.c      **** 	int px;
 723:effect.c      **** 	for (px=0; px<64; px++)
 724:effect.c      **** 	{
 725:effect.c      **** 		if (positions[px]<destinations[px])
 726:effect.c      **** 		{
 727:effect.c      **** 			positions[px]++;
 728:effect.c      **** 		}
 729:effect.c      **** 		if (positions[px]>destinations[px])
 730:effect.c      **** 		{
 731:effect.c      **** 			positions[px]--;
 732:effect.c      **** 		}
 733:effect.c      **** 	}
 734:effect.c      **** 		
 735:effect.c      **** 	draw_positions_axis (AXIS_Z, positions,0);
 736:effect.c      **** }
 737:effect.c      **** 
 738:effect.c      **** void effect_axis_updown_randsuspend (char axis, int delay, int sleep, int invert)
 739:effect.c      **** {
 740:effect.c      **** 	unsigned char positions[64];
 741:effect.c      **** 	unsigned char destinations[64];
 742:effect.c      **** 
 743:effect.c      **** 	int i,px;
 744:effect.c      **** 	
 745:effect.c      ****     // Set 64 random positions
 746:effect.c      **** 	for (i=0; i<64; i++)
 747:effect.c      **** 	{
 748:effect.c      **** 		positions[i] = 0; // Set all starting positions to 0
 749:effect.c      **** 		destinations[i] = rand()%8;
 750:effect.c      **** 	}
 751:effect.c      **** 
 752:effect.c      ****     // Loop 8 times to allow destination 7 to reach all the way
 753:effect.c      **** 	for (i=0; i<8; i++)
 754:effect.c      **** 	{
 755:effect.c      ****         // For every iteration, move all position one step closer to their destination
 756:effect.c      **** 		for (px=0; px<64; px++)
 757:effect.c      **** 		{
 758:effect.c      **** 			if (positions[px]<destinations[px])
 759:effect.c      **** 			{
 760:effect.c      **** 				positions[px]++;
 761:effect.c      **** 			}
 762:effect.c      **** 		}
 763:effect.c      ****         // Draw the positions and take a nap
 764:effect.c      **** 		draw_positions_axis (axis, positions,invert);
 765:effect.c      **** 		delay_ms(delay);
 766:effect.c      **** 	}
 767:effect.c      **** 	
 768:effect.c      ****     // Set all destinations to 7 (opposite from the side they started out)
 769:effect.c      **** 	for (i=0; i<64; i++)
 770:effect.c      **** 	{
 771:effect.c      **** 		destinations[i] = 7;
 772:effect.c      **** 	}
 773:effect.c      **** 	
 774:effect.c      ****     // Suspend the positions in mid-air for a while
 775:effect.c      **** 	delay_ms(sleep);
 776:effect.c      **** 	
 777:effect.c      ****     // Then do the same thing one more time
 778:effect.c      **** 	for (i=0; i<8; i++)
 779:effect.c      **** 	{
 780:effect.c      **** 		for (px=0; px<64; px++)
 781:effect.c      **** 		{
 782:effect.c      **** 			if (positions[px]<destinations[px])
 783:effect.c      **** 			{
 784:effect.c      **** 				positions[px]++;
 785:effect.c      **** 			}
 786:effect.c      **** 			if (positions[px]>destinations[px])
 787:effect.c      **** 			{
 788:effect.c      **** 				positions[px]--;
 789:effect.c      **** 			}
 790:effect.c      **** 		}
 791:effect.c      **** 		draw_positions_axis (axis, positions,invert);
 792:effect.c      **** 		delay_ms(delay);
 793:effect.c      **** 	}
 794:effect.c      **** }
 795:effect.c      **** 
 796:effect.c      **** void draw_positions_axis (char axis, const unsigned char positions[64], int invert)
 797:effect.c      **** {
 3076               		.loc 1 797 0
 3077               		.cfi_startproc
 3078               	.LVL245:
 3079 0e42 6F92      		push r6
 3080               	.LCFI166:
 3081               		.cfi_def_cfa_offset 3
 3082               		.cfi_offset 6, -2
 3083 0e44 7F92      		push r7
 3084               	.LCFI167:
 3085               		.cfi_def_cfa_offset 4
 3086               		.cfi_offset 7, -3
 3087 0e46 8F92      		push r8
 3088               	.LCFI168:
 3089               		.cfi_def_cfa_offset 5
 3090               		.cfi_offset 8, -4
 3091 0e48 9F92      		push r9
 3092               	.LCFI169:
 3093               		.cfi_def_cfa_offset 6
 3094               		.cfi_offset 9, -5
 3095 0e4a AF92      		push r10
 3096               	.LCFI170:
 3097               		.cfi_def_cfa_offset 7
 3098               		.cfi_offset 10, -6
 3099 0e4c BF92      		push r11
 3100               	.LCFI171:
 3101               		.cfi_def_cfa_offset 8
 3102               		.cfi_offset 11, -7
 3103 0e4e CF92      		push r12
 3104               	.LCFI172:
 3105               		.cfi_def_cfa_offset 9
 3106               		.cfi_offset 12, -8
 3107 0e50 DF92      		push r13
 3108               	.LCFI173:
 3109               		.cfi_def_cfa_offset 10
 3110               		.cfi_offset 13, -9
 3111 0e52 FF92      		push r15
 3112               	.LCFI174:
 3113               		.cfi_def_cfa_offset 11
 3114               		.cfi_offset 15, -10
 3115 0e54 0F93      		push r16
 3116               	.LCFI175:
 3117               		.cfi_def_cfa_offset 12
 3118               		.cfi_offset 16, -11
 3119 0e56 1F93      		push r17
 3120               	.LCFI176:
 3121               		.cfi_def_cfa_offset 13
 3122               		.cfi_offset 17, -12
 3123 0e58 CF93      		push r28
 3124               	.LCFI177:
 3125               		.cfi_def_cfa_offset 14
 3126               		.cfi_offset 28, -13
 3127 0e5a DF93      		push r29
 3128               	.LCFI178:
 3129               		.cfi_def_cfa_offset 15
 3130               		.cfi_offset 29, -14
 3131 0e5c 00D0      		rcall .
 3132               	.LCFI179:
 3133               		.cfi_def_cfa_offset 17
 3134 0e5e CDB7      		in r28,__SP_L__
 3135 0e60 DEB7      		in r29,__SP_H__
 3136               	.LCFI180:
 3137               		.cfi_def_cfa_register 28
 3138               	/* prologue: function */
 3139               	/* frame size = 2 */
 3140               	/* stack size = 15 */
 3141               	.L__stack_usage = 15
 3142 0e62 F82E      		mov r15,r24
 3143 0e64 4A01      		movw r8,r20
 798:effect.c      **** 	int x, y, p;
 799:effect.c      **** 	
 800:effect.c      **** 	fill(0x00);
 3144               		.loc 1 800 0
 3145 0e66 80E0      		ldi r24,lo8(0)
 3146               	.LVL246:
 3147 0e68 6983      		std Y+1,r22
 3148 0e6a 7A83      		std Y+2,r23
 3149 0e6c 0E94 0000 		call fill
 3150               	.LVL247:
 3151 0e70 6981      		ldd r22,Y+1
 3152 0e72 C62E      		mov r12,r22
 3153 0e74 7A81      		ldd r23,Y+2
 3154 0e76 D72E      		mov r13,r23
 801:effect.c      **** 	
 802:effect.c      **** 	for (x=0; x<8; x++)
 3155               		.loc 1 802 0
 3156 0e78 00E0      		ldi r16,lo8(0)
 3157 0e7a 10E0      		ldi r17,hi8(0)
 803:effect.c      **** 	{
 804:effect.c      **** 		for (y=0; y<8; y++)
 805:effect.c      **** 		{
 806:effect.c      **** 			if (invert)
 807:effect.c      **** 			{
 808:effect.c      **** 				p = (7 - positions[(x * 8) + y]);
 3158               		.loc 1 808 0
 3159 0e7c 67E0      		ldi r22,lo8(7)
 3160 0e7e A62E      		mov r10,r22
 3161 0e80 B12C      		mov r11,__zero_reg__
 3162 0e82 00C0      		rjmp .L168
 3163               	.LVL248:
 3164               	.L174:
 3165 0e84 F601      		movw r30,r12
 3166 0e86 E60D      		add r30,r6
 3167 0e88 F71D      		adc r31,r7
 806:effect.c      **** 			if (invert)
 3168               		.loc 1 806 0
 3169 0e8a 8114      		cp r8,__zero_reg__
 3170 0e8c 9104      		cpc r9,__zero_reg__
 3171 0e8e 01F0      		breq .L169
 3172               		.loc 1 808 0
 3173 0e90 8081      		ld r24,Z
 3174 0e92 A501      		movw r20,r10
 3175 0e94 481B      		sub r20,r24
 3176 0e96 5109      		sbc r21,__zero_reg__
 3177               	.LVL249:
 3178 0e98 00C0      		rjmp .L170
 3179               	.LVL250:
 3180               	.L169:
 809:effect.c      **** 			}
 810:effect.c      **** 			else
 811:effect.c      **** 			{
 812:effect.c      **** 				p = positions[(x * 8) + y];
 3181               		.loc 1 812 0
 3182 0e9a 4081      		ld r20,Z
 3183 0e9c 50E0      		ldi r21,lo8(0)
 3184               	.LVL251:
 3185               	.L170:
 813:effect.c      **** 			}
 814:effect.c      **** 		
 815:effect.c      **** 			if (axis == AXIS_Z)
 3186               		.loc 1 815 0
 3187 0e9e 8AE7      		ldi r24,lo8(122)
 3188 0ea0 F816      		cp r15,r24
 3189 0ea2 01F4      		brne .L171
 816:effect.c      **** 			{
 817:effect.c      **** 				setvoxel(x, y, p);
 3190               		.loc 1 817 0
 3191 0ea4 C801      		movw r24,r16
 3192 0ea6 B301      		movw r22,r6
 3193 0ea8 00C0      		rjmp .L177
 3194               	.L171:
 818:effect.c      **** 			}
 819:effect.c      **** 			else if (axis == AXIS_Y)
 3195               		.loc 1 819 0
 3196 0eaa 99E7      		ldi r25,lo8(121)
 3197 0eac F916      		cp r15,r25
 3198 0eae 01F4      		brne .L173
 820:effect.c      **** 			{
 821:effect.c      **** 				setvoxel(x, p, y);
 3199               		.loc 1 821 0
 3200 0eb0 C801      		movw r24,r16
 3201 0eb2 BA01      		movw r22,r20
 3202 0eb4 A301      		movw r20,r6
 3203               	.LVL252:
 3204 0eb6 00C0      		rjmp .L177
 3205               	.LVL253:
 3206               	.L173:
 822:effect.c      **** 			}
 823:effect.c      **** 			else if (axis == AXIS_X)
 3207               		.loc 1 823 0
 3208 0eb8 E8E7      		ldi r30,lo8(120)
 3209 0eba FE16      		cp r15,r30
 3210 0ebc 01F4      		brne .L172
 824:effect.c      **** 			{
 825:effect.c      **** 				setvoxel(p, y, x);
 3211               		.loc 1 825 0
 3212 0ebe CA01      		movw r24,r20
 3213 0ec0 B301      		movw r22,r6
 3214 0ec2 A801      		movw r20,r16
 3215               	.LVL254:
 3216               	.L177:
 3217 0ec4 0E94 0000 		call setvoxel
 3218               	.L172:
 804:effect.c      **** 		for (y=0; y<8; y++)
 3219               		.loc 1 804 0
 3220 0ec8 0894      		sec
 3221 0eca 611C      		adc r6,__zero_reg__
 3222 0ecc 711C      		adc r7,__zero_reg__
 3223               	.LVL255:
 3224 0ece F8E0      		ldi r31,lo8(8)
 3225 0ed0 6F16      		cp r6,r31
 3226 0ed2 7104      		cpc r7,__zero_reg__
 3227 0ed4 01F4      		brne .L174
 802:effect.c      **** 	for (x=0; x<8; x++)
 3228               		.loc 1 802 0
 3229 0ed6 0F5F      		subi r16,lo8(-(1))
 3230 0ed8 1F4F      		sbci r17,hi8(-(1))
 3231               	.LVL256:
 3232 0eda 88E0      		ldi r24,lo8(8)
 3233 0edc 90E0      		ldi r25,hi8(8)
 3234 0ede C80E      		add r12,r24
 3235 0ee0 D91E      		adc r13,r25
 3236 0ee2 0830      		cpi r16,8
 3237 0ee4 1105      		cpc r17,__zero_reg__
 3238 0ee6 01F0      		breq .L167
 3239               	.LVL257:
 3240               	.L168:
 797:effect.c      **** {
 3241               		.loc 1 797 0 discriminator 1
 3242 0ee8 6624      		clr r6
 3243 0eea 7724      		clr r7
 3244 0eec 00C0      		rjmp .L174
 3245               	.LVL258:
 3246               	.L167:
 3247               	/* epilogue start */
 826:effect.c      **** 			}
 827:effect.c      **** 		}
 828:effect.c      **** 	}
 829:effect.c      **** 	
 830:effect.c      **** }
 3248               		.loc 1 830 0
 3249 0eee 0F90      		pop __tmp_reg__
 3250 0ef0 0F90      		pop __tmp_reg__
 3251 0ef2 DF91      		pop r29
 3252 0ef4 CF91      		pop r28
 3253 0ef6 1F91      		pop r17
 3254 0ef8 0F91      		pop r16
 3255               	.LVL259:
 3256 0efa FF90      		pop r15
 3257               	.LVL260:
 3258 0efc DF90      		pop r13
 3259 0efe CF90      		pop r12
 3260 0f00 BF90      		pop r11
 3261 0f02 AF90      		pop r10
 3262 0f04 9F90      		pop r9
 3263 0f06 8F90      		pop r8
 3264               	.LVL261:
 3265 0f08 7F90      		pop r7
 3266 0f0a 6F90      		pop r6
 3267               	.LVL262:
 3268 0f0c 0895      		ret
 3269               		.cfi_endproc
 3270               	.LFE18:
 3272               	.global	effect_axis_updown_randsuspend
 3274               	effect_axis_updown_randsuspend:
 3275               	.LFB17:
 739:effect.c      **** {
 3276               		.loc 1 739 0
 3277               		.cfi_startproc
 3278               	.LVL263:
 3279 0f0e 2F92      		push r2
 3280               	.LCFI181:
 3281               		.cfi_def_cfa_offset 3
 3282               		.cfi_offset 2, -2
 3283 0f10 3F92      		push r3
 3284               	.LCFI182:
 3285               		.cfi_def_cfa_offset 4
 3286               		.cfi_offset 3, -3
 3287 0f12 4F92      		push r4
 3288               	.LCFI183:
 3289               		.cfi_def_cfa_offset 5
 3290               		.cfi_offset 4, -4
 3291 0f14 5F92      		push r5
 3292               	.LCFI184:
 3293               		.cfi_def_cfa_offset 6
 3294               		.cfi_offset 5, -5
 3295 0f16 7F92      		push r7
 3296               	.LCFI185:
 3297               		.cfi_def_cfa_offset 7
 3298               		.cfi_offset 7, -6
 3299 0f18 8F92      		push r8
 3300               	.LCFI186:
 3301               		.cfi_def_cfa_offset 8
 3302               		.cfi_offset 8, -7
 3303 0f1a 9F92      		push r9
 3304               	.LCFI187:
 3305               		.cfi_def_cfa_offset 9
 3306               		.cfi_offset 9, -8
 3307 0f1c AF92      		push r10
 3308               	.LCFI188:
 3309               		.cfi_def_cfa_offset 10
 3310               		.cfi_offset 10, -9
 3311 0f1e BF92      		push r11
 3312               	.LCFI189:
 3313               		.cfi_def_cfa_offset 11
 3314               		.cfi_offset 11, -10
 3315 0f20 CF92      		push r12
 3316               	.LCFI190:
 3317               		.cfi_def_cfa_offset 12
 3318               		.cfi_offset 12, -11
 3319 0f22 DF92      		push r13
 3320               	.LCFI191:
 3321               		.cfi_def_cfa_offset 13
 3322               		.cfi_offset 13, -12
 3323 0f24 EF92      		push r14
 3324               	.LCFI192:
 3325               		.cfi_def_cfa_offset 14
 3326               		.cfi_offset 14, -13
 3327 0f26 FF92      		push r15
 3328               	.LCFI193:
 3329               		.cfi_def_cfa_offset 15
 3330               		.cfi_offset 15, -14
 3331 0f28 0F93      		push r16
 3332               	.LCFI194:
 3333               		.cfi_def_cfa_offset 16
 3334               		.cfi_offset 16, -15
 3335 0f2a 1F93      		push r17
 3336               	.LCFI195:
 3337               		.cfi_def_cfa_offset 17
 3338               		.cfi_offset 17, -16
 3339 0f2c CF93      		push r28
 3340               	.LCFI196:
 3341               		.cfi_def_cfa_offset 18
 3342               		.cfi_offset 28, -17
 3343 0f2e DF93      		push r29
 3344               	.LCFI197:
 3345               		.cfi_def_cfa_offset 19
 3346               		.cfi_offset 29, -18
 3347 0f30 CDB7      		in r28,__SP_L__
 3348 0f32 DEB7      		in r29,__SP_H__
 3349 0f34 C058      		subi r28,lo8(-(-128))
 3350 0f36 D040      		sbci r29,hi8(-(-128))
 3351               	.LCFI198:
 3352               		.cfi_def_cfa 28, 147
 3353 0f38 0FB6      		in __tmp_reg__,__SREG__
 3354 0f3a F894      		cli
 3355 0f3c DEBF      		out __SP_H__,r29
 3356 0f3e 0FBE      		out __SREG__,__tmp_reg__
 3357 0f40 CDBF      		out __SP_L__,r28
 3358               	/* prologue: function */
 3359               	/* frame size = 128 */
 3360               	/* stack size = 145 */
 3361               	.L__stack_usage = 145
 3362 0f42 782E      		mov r7,r24
 3363 0f44 4B01      		movw r8,r22
 3364 0f46 1A01      		movw r2,r20
 3365 0f48 2901      		movw r4,r18
 3366               	.LVL264:
 739:effect.c      **** {
 3367               		.loc 1 739 0
 3368 0f4a 7E01      		movw r14,r28
 3369 0f4c 0894      		sec
 3370 0f4e E11C      		adc r14,__zero_reg__
 3371 0f50 F11C      		adc r15,__zero_reg__
 3372 0f52 71E4      		ldi r23,lo8(65)
 3373 0f54 C72E      		mov r12,r23
 3374 0f56 D12C      		mov r13,__zero_reg__
 3375 0f58 CC0E      		add r12,r28
 3376 0f5a DD1E      		adc r13,r29
 746:effect.c      **** 	for (i=0; i<64; i++)
 3377               		.loc 1 746 0
 3378 0f5c 00E0      		ldi r16,lo8(0)
 3379 0f5e 10E0      		ldi r17,hi8(0)
 749:effect.c      **** 		destinations[i] = rand()%8;
 3380               		.loc 1 749 0
 3381 0f60 E8E0      		ldi r30,lo8(8)
 3382 0f62 AE2E      		mov r10,r30
 3383 0f64 B12C      		mov r11,__zero_reg__
 3384               	.LVL265:
 3385               	.L179:
 748:effect.c      **** 		positions[i] = 0; // Set all starting positions to 0
 3386               		.loc 1 748 0 discriminator 2
 3387 0f66 F601      		movw r30,r12
 3388 0f68 1192      		st Z+,__zero_reg__
 3389 0f6a 6F01      		movw r12,r30
 749:effect.c      **** 		destinations[i] = rand()%8;
 3390               		.loc 1 749 0 discriminator 2
 3391 0f6c 0E94 0000 		call rand
 3392 0f70 B501      		movw r22,r10
 3393 0f72 0E94 0000 		call __divmodhi4
 3394 0f76 F701      		movw r30,r14
 3395 0f78 8193      		st Z+,r24
 3396 0f7a 7F01      		movw r14,r30
 746:effect.c      **** 	for (i=0; i<64; i++)
 3397               		.loc 1 746 0 discriminator 2
 3398 0f7c 0F5F      		subi r16,lo8(-(1))
 3399 0f7e 1F4F      		sbci r17,hi8(-(1))
 3400               	.LVL266:
 3401 0f80 0034      		cpi r16,64
 3402 0f82 1105      		cpc r17,__zero_reg__
 3403 0f84 01F4      		brne .L179
 746:effect.c      **** 	for (i=0; i<64; i++)
 3404               		.loc 1 746 0 is_stmt 0
 3405 0f86 08E0      		ldi r16,lo8(8)
 3406 0f88 10E0      		ldi r17,hi8(8)
 3407               	.LVL267:
 3408 0f8a 00C0      		rjmp .L180
 3409               	.L182:
 758:effect.c      **** 			if (positions[px]<destinations[px])
 3410               		.loc 1 758 0 is_stmt 1
 3411 0f8c 2081      		ld r18,Z
 3412 0f8e 3D91      		ld r19,X+
 3413 0f90 2317      		cp r18,r19
 3414 0f92 00F4      		brsh .L181
 760:effect.c      **** 				positions[px]++;
 3415               		.loc 1 760 0
 3416 0f94 2F5F      		subi r18,lo8(-(1))
 3417 0f96 2083      		st Z,r18
 3418               	.L181:
 756:effect.c      **** 		for (px=0; px<64; px++)
 3419               		.loc 1 756 0
 3420 0f98 0196      		adiw r24,1
 3421               	.LVL268:
 3422 0f9a 3196      		adiw r30,1
 3423 0f9c 8034      		cpi r24,64
 3424 0f9e 9105      		cpc r25,__zero_reg__
 3425 0fa0 01F4      		brne .L182
 764:effect.c      **** 		draw_positions_axis (axis, positions,invert);
 3426               		.loc 1 764 0
 3427 0fa2 872D      		mov r24,r7
 3428               	.LVL269:
 3429 0fa4 BE01      		movw r22,r28
 3430 0fa6 6F5B      		subi r22,lo8(-(65))
 3431 0fa8 7F4F      		sbci r23,hi8(-(65))
 3432 0faa A201      		movw r20,r4
 3433 0fac 0E94 0000 		call draw_positions_axis
 765:effect.c      **** 		delay_ms(delay);
 3434               		.loc 1 765 0
 3435 0fb0 C401      		movw r24,r8
 3436 0fb2 0E94 0000 		call delay_ms
 3437 0fb6 0150      		subi r16,lo8(-(-1))
 3438 0fb8 1040      		sbci r17,hi8(-(-1))
 753:effect.c      **** 	for (i=0; i<8; i++)
 3439               		.loc 1 753 0
 3440 0fba 01F0      		breq .L183
 3441               	.L180:
 3442               	.LVL270:
 746:effect.c      **** 	for (i=0; i<64; i++)
 3443               		.loc 1 746 0 discriminator 1
 3444 0fbc DE01      		movw r26,r28
 3445 0fbe 1196      		adiw r26,1
 3446 0fc0 FE01      		movw r30,r28
 3447 0fc2 EF5B      		subi r30,lo8(-(65))
 3448 0fc4 FF4F      		sbci r31,hi8(-(65))
 3449 0fc6 80E0      		ldi r24,lo8(0)
 3450 0fc8 90E0      		ldi r25,hi8(0)
 3451 0fca 00C0      		rjmp .L182
 3452               	.LVL271:
 3453               	.L183:
 753:effect.c      **** 	for (i=0; i<8; i++)
 3454               		.loc 1 753 0
 3455 0fcc FE01      		movw r30,r28
 3456 0fce 3196      		adiw r30,1
 3457 0fd0 80E0      		ldi r24,lo8(0)
 3458 0fd2 90E0      		ldi r25,hi8(0)
 771:effect.c      **** 		destinations[i] = 7;
 3459               		.loc 1 771 0
 3460 0fd4 27E0      		ldi r18,lo8(7)
 3461               	.L184:
 771:effect.c      **** 		destinations[i] = 7;
 3462               		.loc 1 771 0 is_stmt 0 discriminator 2
 3463 0fd6 2193      		st Z+,r18
 769:effect.c      **** 	for (i=0; i<64; i++)
 3464               		.loc 1 769 0 is_stmt 1 discriminator 2
 3465 0fd8 0196      		adiw r24,1
 3466               	.LVL272:
 3467 0fda 8034      		cpi r24,64
 3468 0fdc 9105      		cpc r25,__zero_reg__
 3469 0fde 01F4      		brne .L184
 775:effect.c      **** 	delay_ms(sleep);
 3470               		.loc 1 775 0
 3471 0fe0 C101      		movw r24,r2
 3472               	.LVL273:
 3473 0fe2 0E94 0000 		call delay_ms
 3474               	.LVL274:
 3475 0fe6 08E0      		ldi r16,lo8(8)
 3476 0fe8 10E0      		ldi r17,hi8(8)
 3477 0fea 00C0      		rjmp .L185
 3478               	.LVL275:
 3479               	.L188:
 782:effect.c      **** 			if (positions[px]<destinations[px])
 3480               		.loc 1 782 0
 3481 0fec 2081      		ld r18,Z
 3482 0fee 3D91      		ld r19,X+
 3483 0ff0 2317      		cp r18,r19
 3484 0ff2 00F4      		brsh .L186
 784:effect.c      **** 				positions[px]++;
 3485               		.loc 1 784 0
 3486 0ff4 2F5F      		subi r18,lo8(-(1))
 3487 0ff6 2083      		st Z,r18
 3488               	.L186:
 786:effect.c      **** 			if (positions[px]>destinations[px])
 3489               		.loc 1 786 0
 3490 0ff8 2081      		ld r18,Z
 3491 0ffa 3217      		cp r19,r18
 3492 0ffc 00F4      		brsh .L187
 788:effect.c      **** 				positions[px]--;
 3493               		.loc 1 788 0
 3494 0ffe 2150      		subi r18,lo8(-(-1))
 3495 1000 2083      		st Z,r18
 3496               	.L187:
 780:effect.c      **** 		for (px=0; px<64; px++)
 3497               		.loc 1 780 0
 3498 1002 0196      		adiw r24,1
 3499               	.LVL276:
 3500 1004 3196      		adiw r30,1
 3501 1006 8034      		cpi r24,64
 3502 1008 9105      		cpc r25,__zero_reg__
 3503 100a 01F4      		brne .L188
 791:effect.c      **** 		draw_positions_axis (axis, positions,invert);
 3504               		.loc 1 791 0
 3505 100c 872D      		mov r24,r7
 3506               	.LVL277:
 3507 100e BE01      		movw r22,r28
 3508 1010 6F5B      		subi r22,lo8(-(65))
 3509 1012 7F4F      		sbci r23,hi8(-(65))
 3510 1014 A201      		movw r20,r4
 3511 1016 0E94 0000 		call draw_positions_axis
 792:effect.c      **** 		delay_ms(delay);
 3512               		.loc 1 792 0
 3513 101a C401      		movw r24,r8
 3514 101c 0E94 0000 		call delay_ms
 3515 1020 0150      		subi r16,lo8(-(-1))
 3516 1022 1040      		sbci r17,hi8(-(-1))
 778:effect.c      **** 	for (i=0; i<8; i++)
 3517               		.loc 1 778 0
 3518 1024 01F0      		breq .L178
 3519               	.L185:
 3520               	.LVL278:
 753:effect.c      **** 	for (i=0; i<8; i++)
 3521               		.loc 1 753 0 discriminator 1
 3522 1026 DE01      		movw r26,r28
 3523 1028 1196      		adiw r26,1
 3524 102a FE01      		movw r30,r28
 3525 102c EF5B      		subi r30,lo8(-(65))
 3526 102e FF4F      		sbci r31,hi8(-(65))
 3527 1030 80E0      		ldi r24,lo8(0)
 3528 1032 90E0      		ldi r25,hi8(0)
 3529 1034 00C0      		rjmp .L188
 3530               	.LVL279:
 3531               	.L178:
 3532               	/* epilogue start */
 794:effect.c      **** }
 3533               		.loc 1 794 0
 3534 1036 C058      		subi r28,lo8(-(128))
 3535 1038 DF4F      		sbci r29,hi8(-(128))
 3536 103a 0FB6      		in __tmp_reg__,__SREG__
 3537 103c F894      		cli
 3538 103e DEBF      		out __SP_H__,r29
 3539 1040 0FBE      		out __SREG__,__tmp_reg__
 3540 1042 CDBF      		out __SP_L__,r28
 3541 1044 DF91      		pop r29
 3542 1046 CF91      		pop r28
 3543 1048 1F91      		pop r17
 3544 104a 0F91      		pop r16
 3545 104c FF90      		pop r15
 3546 104e EF90      		pop r14
 3547 1050 DF90      		pop r13
 3548 1052 CF90      		pop r12
 3549 1054 BF90      		pop r11
 3550 1056 AF90      		pop r10
 3551 1058 9F90      		pop r9
 3552 105a 8F90      		pop r8
 3553               	.LVL280:
 3554 105c 7F90      		pop r7
 3555               	.LVL281:
 3556 105e 5F90      		pop r5
 3557 1060 4F90      		pop r4
 3558               	.LVL282:
 3559 1062 3F90      		pop r3
 3560 1064 2F90      		pop r2
 3561               	.LVL283:
 3562 1066 0895      		ret
 3563               		.cfi_endproc
 3564               	.LFE17:
 3566               	.global	effect_z_updown_move
 3568               	effect_z_updown_move:
 3569               	.LFB16:
 721:effect.c      **** {
 3570               		.loc 1 721 0
 3571               		.cfi_startproc
 3572               	.LVL284:
 3573 1068 CF93      		push r28
 3574               	.LCFI199:
 3575               		.cfi_def_cfa_offset 3
 3576               		.cfi_offset 28, -2
 3577 106a DF93      		push r29
 3578               	.LCFI200:
 3579               		.cfi_def_cfa_offset 4
 3580               		.cfi_offset 29, -3
 3581               	/* prologue: function */
 3582               	/* frame size = 0 */
 3583               	/* stack size = 2 */
 3584               	.L__stack_usage = 2
 3585 106c 482F      		mov r20,r24
 3586               	.LVL285:
 723:effect.c      **** 	for (px=0; px<64; px++)
 3587               		.loc 1 723 0
 3588 106e E82F      		mov r30,r24
 3589 1070 F92F      		mov r31,r25
 3590 1072 DB01      		movw r26,r22
 3591 1074 20E0      		ldi r18,lo8(0)
 3592 1076 30E0      		ldi r19,hi8(0)
 3593               	.LVL286:
 3594               	.L197:
 725:effect.c      **** 		if (positions[px]<destinations[px])
 3595               		.loc 1 725 0
 3596 1078 8081      		ld r24,Z
 720:effect.c      **** void effect_z_updown_move (unsigned char positions[64], unsigned char destinations[64], char axis)
 3597               		.loc 1 720 0
 3598 107a ED01      		movw r28,r26
 725:effect.c      **** 		if (positions[px]<destinations[px])
 3599               		.loc 1 725 0
 3600 107c 5C91      		ld r21,X
 3601 107e 8517      		cp r24,r21
 3602 1080 00F4      		brsh .L195
 727:effect.c      **** 			positions[px]++;
 3603               		.loc 1 727 0
 3604 1082 8F5F      		subi r24,lo8(-(1))
 3605 1084 8083      		st Z,r24
 3606               	.L195:
 729:effect.c      **** 		if (positions[px]>destinations[px])
 3607               		.loc 1 729 0
 3608 1086 8081      		ld r24,Z
 3609 1088 1196      		adiw r26,1
 3610 108a 5881      		ld r21,Y
 3611 108c 5817      		cp r21,r24
 3612 108e 00F4      		brsh .L196
 731:effect.c      **** 			positions[px]--;
 3613               		.loc 1 731 0
 3614 1090 8150      		subi r24,lo8(-(-1))
 3615 1092 8083      		st Z,r24
 3616               	.L196:
 723:effect.c      **** 	for (px=0; px<64; px++)
 3617               		.loc 1 723 0
 3618 1094 2F5F      		subi r18,lo8(-(1))
 3619 1096 3F4F      		sbci r19,hi8(-(1))
 3620               	.LVL287:
 3621 1098 3196      		adiw r30,1
 3622 109a 2034      		cpi r18,64
 3623 109c 3105      		cpc r19,__zero_reg__
 3624 109e 01F4      		brne .L197
 735:effect.c      **** 	draw_positions_axis (AXIS_Z, positions,0);
 3625               		.loc 1 735 0
 3626 10a0 8AE7      		ldi r24,lo8(122)
 3627 10a2 642F      		mov r22,r20
 3628               	.LVL288:
 3629 10a4 792F      		mov r23,r25
 3630 10a6 40E0      		ldi r20,lo8(0)
 3631 10a8 50E0      		ldi r21,hi8(0)
 3632 10aa 0E94 0000 		call draw_positions_axis
 3633               	.LVL289:
 3634               	/* epilogue start */
 736:effect.c      **** }
 3635               		.loc 1 736 0
 3636 10ae DF91      		pop r29
 3637 10b0 CF91      		pop r28
 3638 10b2 0895      		ret
 3639               		.cfi_endproc
 3640               	.LFE16:
 3642               	.global	effect_z_updown
 3644               	effect_z_updown:
 3645               	.LFB15:
 682:effect.c      **** {
 3646               		.loc 1 682 0
 3647               		.cfi_startproc
 3648               	.LVL290:
 3649 10b4 2F92      		push r2
 3650               	.LCFI201:
 3651               		.cfi_def_cfa_offset 3
 3652               		.cfi_offset 2, -2
 3653 10b6 3F92      		push r3
 3654               	.LCFI202:
 3655               		.cfi_def_cfa_offset 4
 3656               		.cfi_offset 3, -3
 3657 10b8 4F92      		push r4
 3658               	.LCFI203:
 3659               		.cfi_def_cfa_offset 5
 3660               		.cfi_offset 4, -4
 3661 10ba 5F92      		push r5
 3662               	.LCFI204:
 3663               		.cfi_def_cfa_offset 6
 3664               		.cfi_offset 5, -5
 3665 10bc 6F92      		push r6
 3666               	.LCFI205:
 3667               		.cfi_def_cfa_offset 7
 3668               		.cfi_offset 6, -6
 3669 10be 7F92      		push r7
 3670               	.LCFI206:
 3671               		.cfi_def_cfa_offset 8
 3672               		.cfi_offset 7, -7
 3673 10c0 8F92      		push r8
 3674               	.LCFI207:
 3675               		.cfi_def_cfa_offset 9
 3676               		.cfi_offset 8, -8
 3677 10c2 9F92      		push r9
 3678               	.LCFI208:
 3679               		.cfi_def_cfa_offset 10
 3680               		.cfi_offset 9, -9
 3681 10c4 AF92      		push r10
 3682               	.LCFI209:
 3683               		.cfi_def_cfa_offset 11
 3684               		.cfi_offset 10, -10
 3685 10c6 BF92      		push r11
 3686               	.LCFI210:
 3687               		.cfi_def_cfa_offset 12
 3688               		.cfi_offset 11, -11
 3689 10c8 CF92      		push r12
 3690               	.LCFI211:
 3691               		.cfi_def_cfa_offset 13
 3692               		.cfi_offset 12, -12
 3693 10ca DF92      		push r13
 3694               	.LCFI212:
 3695               		.cfi_def_cfa_offset 14
 3696               		.cfi_offset 13, -13
 3697 10cc EF92      		push r14
 3698               	.LCFI213:
 3699               		.cfi_def_cfa_offset 15
 3700               		.cfi_offset 14, -14
 3701 10ce FF92      		push r15
 3702               	.LCFI214:
 3703               		.cfi_def_cfa_offset 16
 3704               		.cfi_offset 15, -15
 3705 10d0 0F93      		push r16
 3706               	.LCFI215:
 3707               		.cfi_def_cfa_offset 17
 3708               		.cfi_offset 16, -16
 3709 10d2 1F93      		push r17
 3710               	.LCFI216:
 3711               		.cfi_def_cfa_offset 18
 3712               		.cfi_offset 17, -17
 3713 10d4 CF93      		push r28
 3714               	.LCFI217:
 3715               		.cfi_def_cfa_offset 19
 3716               		.cfi_offset 28, -18
 3717 10d6 DF93      		push r29
 3718               	.LCFI218:
 3719               		.cfi_def_cfa_offset 20
 3720               		.cfi_offset 29, -19
 3721 10d8 CDB7      		in r28,__SP_L__
 3722 10da DEB7      		in r29,__SP_H__
 3723 10dc C058      		subi r28,lo8(-(-128))
 3724 10de D040      		sbci r29,hi8(-(-128))
 3725               	.LCFI219:
 3726               		.cfi_def_cfa 28, 148
 3727 10e0 0FB6      		in __tmp_reg__,__SREG__
 3728 10e2 F894      		cli
 3729 10e4 DEBF      		out __SP_H__,r29
 3730 10e6 0FBE      		out __SREG__,__tmp_reg__
 3731 10e8 CDBF      		out __SP_L__,r28
 3732               	/* prologue: function */
 3733               	/* frame size = 128 */
 3734               	/* stack size = 146 */
 3735               	.L__stack_usage = 146
 3736 10ea 1C01      		movw r2,r24
 3737 10ec 4B01      		movw r8,r22
 3738               	.LVL291:
 708:effect.c      **** 		delay_ms(delay*4);
 3739               		.loc 1 708 0
 3740 10ee 11E4      		ldi r17,lo8(65)
 3741 10f0 E12E      		mov r14,r17
 3742 10f2 F12C      		mov r15,__zero_reg__
 3743 10f4 EC0E      		add r14,r28
 3744 10f6 FD1E      		adc r15,r29
 3745 10f8 6E01      		movw r12,r28
 3746 10fa 0894      		sec
 3747 10fc C11C      		adc r12,__zero_reg__
 3748 10fe D11C      		adc r13,__zero_reg__
 688:effect.c      **** 	for (i=0; i<64; i++)
 3749               		.loc 1 688 0
 3750 1100 00E0      		ldi r16,lo8(0)
 3751 1102 10E0      		ldi r17,hi8(0)
 690:effect.c      **** 		positions[i] = 4;
 3752               		.loc 1 690 0
 3753 1104 24E0      		ldi r18,lo8(4)
 3754 1106 B22E      		mov r11,r18
 691:effect.c      **** 		destinations[i] = rand()%8;
 3755               		.loc 1 691 0
 3756 1108 38E0      		ldi r19,lo8(8)
 3757 110a 632E      		mov r6,r19
 3758 110c 712C      		mov r7,__zero_reg__
 3759               	.LVL292:
 3760               	.L200:
 690:effect.c      **** 		positions[i] = 4;
 3761               		.loc 1 690 0 discriminator 2
 3762 110e F701      		movw r30,r14
 3763 1110 B192      		st Z+,r11
 3764 1112 7F01      		movw r14,r30
 691:effect.c      **** 		destinations[i] = rand()%8;
 3765               		.loc 1 691 0 discriminator 2
 3766 1114 0E94 0000 		call rand
 3767 1118 B301      		movw r22,r6
 3768 111a 0E94 0000 		call __divmodhi4
 3769 111e F601      		movw r30,r12
 3770 1120 8193      		st Z+,r24
 3771 1122 6F01      		movw r12,r30
 688:effect.c      **** 	for (i=0; i<64; i++)
 3772               		.loc 1 688 0 discriminator 2
 3773 1124 0F5F      		subi r16,lo8(-(1))
 3774 1126 1F4F      		sbci r17,hi8(-(1))
 3775               	.LVL293:
 3776 1128 0034      		cpi r16,64
 3777 112a 1105      		cpc r17,__zero_reg__
 3778 112c 01F4      		brne .L200
 688:effect.c      **** 	for (i=0; i<64; i++)
 3779               		.loc 1 688 0 is_stmt 0
 3780 112e 08E0      		ldi r16,lo8(8)
 3781 1130 10E0      		ldi r17,hi8(8)
 3782               	.LVL294:
 697:effect.c      **** 		delay_ms(delay);
 3783               		.loc 1 697 0 is_stmt 1
 3784 1132 D82C      		mov r13,r8
 3785 1134 C92C      		mov r12,r9
 3786               	.L201:
 696:effect.c      **** 		effect_z_updown_move(positions, destinations, AXIS_Z);
 3787               		.loc 1 696 0 discriminator 2
 3788 1136 CE01      		movw r24,r28
 3789 1138 8F5B      		subi r24,lo8(-(65))
 3790 113a 9F4F      		sbci r25,hi8(-(65))
 3791 113c BE01      		movw r22,r28
 3792 113e 6F5F      		subi r22,lo8(-(1))
 3793 1140 7F4F      		sbci r23,hi8(-(1))
 3794 1142 4AE7      		ldi r20,lo8(122)
 3795 1144 0E94 0000 		call effect_z_updown_move
 697:effect.c      **** 		delay_ms(delay);
 3796               		.loc 1 697 0 discriminator 2
 3797 1148 8D2D      		mov r24,r13
 3798 114a 9C2D      		mov r25,r12
 3799 114c 0E94 0000 		call delay_ms
 3800 1150 0150      		subi r16,lo8(-(-1))
 3801 1152 1040      		sbci r17,hi8(-(-1))
 694:effect.c      **** 	for (i=0; i<8; i++)
 3802               		.loc 1 694 0 discriminator 2
 3803 1154 01F4      		brne .L201
 708:effect.c      **** 		delay_ms(delay*4);
 3804               		.loc 1 708 0
 3805 1156 3401      		movw r6,r8
 3806 1158 660C      		lsl r6
 3807 115a 771C      		rol r7
 3808 115c 660C      		lsl r6
 3809 115e 771C      		rol r7
 3810 1160 EE24      		clr r14
 3811 1162 FF24      		clr r15
 700:effect.c      **** 	for (i=0;i<iterations;i++)
 3812               		.loc 1 700 0
 3813 1164 A8E0      		ldi r26,lo8(8)
 3814 1166 AA2E      		mov r10,r26
 3815 1168 B12C      		mov r11,__zero_reg__
 713:effect.c      **** 				destinations[rand()%64] = rand()%8;
 3816               		.loc 1 713 0
 3817 116a B0E4      		ldi r27,lo8(64)
 3818 116c 4B2E      		mov r4,r27
 3819 116e 512C      		mov r5,__zero_reg__
 3820 1170 00C0      		rjmp .L202
 3821               	.LVL295:
 3822               	.L205:
 700:effect.c      **** 	for (i=0;i<iterations;i++)
 3823               		.loc 1 700 0
 3824 1172 08E0      		ldi r16,lo8(8)
 3825 1174 10E0      		ldi r17,hi8(8)
 3826               	.L203:
 704:effect.c      **** 			effect_z_updown_move(positions, destinations, AXIS_Z);
 3827               		.loc 1 704 0 discriminator 2
 3828 1176 CE01      		movw r24,r28
 3829 1178 8F5B      		subi r24,lo8(-(65))
 3830 117a 9F4F      		sbci r25,hi8(-(65))
 3831 117c BE01      		movw r22,r28
 3832 117e 6F5F      		subi r22,lo8(-(1))
 3833 1180 7F4F      		sbci r23,hi8(-(1))
 3834 1182 4AE7      		ldi r20,lo8(122)
 3835 1184 0E94 0000 		call effect_z_updown_move
 705:effect.c      **** 			delay_ms(delay);
 3836               		.loc 1 705 0 discriminator 2
 3837 1188 8D2D      		mov r24,r13
 3838 118a 9C2D      		mov r25,r12
 3839 118c 0E94 0000 		call delay_ms
 3840 1190 0150      		subi r16,lo8(-(-1))
 3841 1192 1040      		sbci r17,hi8(-(-1))
 702:effect.c      **** 		for (move=0;move<8;move++)
 3842               		.loc 1 702 0 discriminator 2
 3843 1194 01F4      		brne .L203
 708:effect.c      **** 		delay_ms(delay*4);
 3844               		.loc 1 708 0
 3845 1196 C301      		movw r24,r6
 3846 1198 0E94 0000 		call delay_ms
 3847               	.LVL296:
 3848 119c 00E2      		ldi r16,lo8(32)
 3849 119e 10E0      		ldi r17,hi8(32)
 3850               	.LVL297:
 3851               	.L204:
 713:effect.c      **** 				destinations[rand()%64] = rand()%8;
 3852               		.loc 1 713 0 discriminator 2
 3853 11a0 0E94 0000 		call rand
 3854 11a4 4C01      		movw r8,r24
 3855 11a6 0E94 0000 		call rand
 3856 11aa 9C01      		movw r18,r24
 3857 11ac C401      		movw r24,r8
 3858 11ae B201      		movw r22,r4
 3859 11b0 0E94 0000 		call __divmodhi4
 3860 11b4 FC01      		movw r30,r24
 3861 11b6 81E0      		ldi r24,lo8(1)
 3862 11b8 90E0      		ldi r25,hi8(1)
 3863 11ba 8C0F      		add r24,r28
 3864 11bc 9D1F      		adc r25,r29
 3865 11be E80F      		add r30,r24
 3866 11c0 F91F      		adc r31,r25
 3867 11c2 C901      		movw r24,r18
 3868 11c4 B501      		movw r22,r10
 3869 11c6 0E94 0000 		call __divmodhi4
 3870 11ca 8083      		st Z,r24
 3871 11cc 0150      		subi r16,lo8(-(-1))
 3872 11ce 1040      		sbci r17,hi8(-(-1))
 711:effect.c      **** 		for (y=0;y<32;y++)
 3873               		.loc 1 711 0 discriminator 2
 3874 11d0 01F4      		brne .L204
 700:effect.c      **** 	for (i=0;i<iterations;i++)
 3875               		.loc 1 700 0
 3876 11d2 0894      		sec
 3877 11d4 E11C      		adc r14,__zero_reg__
 3878 11d6 F11C      		adc r15,__zero_reg__
 3879               	.LVL298:
 3880               	.L202:
 700:effect.c      **** 	for (i=0;i<iterations;i++)
 3881               		.loc 1 700 0 is_stmt 0 discriminator 1
 3882 11d8 E214      		cp r14,r2
 3883 11da F304      		cpc r15,r3
 3884 11dc 04F0      		brlt .L205
 3885               	/* epilogue start */
 718:effect.c      **** }
 3886               		.loc 1 718 0 is_stmt 1
 3887 11de C058      		subi r28,lo8(-(128))
 3888 11e0 DF4F      		sbci r29,hi8(-(128))
 3889 11e2 0FB6      		in __tmp_reg__,__SREG__
 3890 11e4 F894      		cli
 3891 11e6 DEBF      		out __SP_H__,r29
 3892 11e8 0FBE      		out __SREG__,__tmp_reg__
 3893 11ea CDBF      		out __SP_L__,r28
 3894 11ec DF91      		pop r29
 3895 11ee CF91      		pop r28
 3896 11f0 1F91      		pop r17
 3897 11f2 0F91      		pop r16
 3898 11f4 FF90      		pop r15
 3899 11f6 EF90      		pop r14
 3900               	.LVL299:
 3901 11f8 DF90      		pop r13
 3902 11fa CF90      		pop r12
 3903 11fc BF90      		pop r11
 3904 11fe AF90      		pop r10
 3905 1200 9F90      		pop r9
 3906 1202 8F90      		pop r8
 3907 1204 7F90      		pop r7
 3908 1206 6F90      		pop r6
 3909 1208 5F90      		pop r5
 3910 120a 4F90      		pop r4
 3911 120c 3F90      		pop r3
 3912 120e 2F90      		pop r2
 3913               	.LVL300:
 3914 1210 0895      		ret
 3915               		.cfi_endproc
 3916               	.LFE15:
 3918               	.global	effect_boxside_randsend_parallel
 3920               	effect_boxside_randsend_parallel:
 3921               	.LFB19:
 831:effect.c      **** 
 832:effect.c      **** 
 833:effect.c      **** void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
 834:effect.c      **** {
 3922               		.loc 1 834 0
 3923               		.cfi_startproc
 3924               	.LVL301:
 3925 1212 2F92      		push r2
 3926               	.LCFI220:
 3927               		.cfi_def_cfa_offset 3
 3928               		.cfi_offset 2, -2
 3929 1214 3F92      		push r3
 3930               	.LCFI221:
 3931               		.cfi_def_cfa_offset 4
 3932               		.cfi_offset 3, -3
 3933 1216 4F92      		push r4
 3934               	.LCFI222:
 3935               		.cfi_def_cfa_offset 5
 3936               		.cfi_offset 4, -4
 3937 1218 5F92      		push r5
 3938               	.LCFI223:
 3939               		.cfi_def_cfa_offset 6
 3940               		.cfi_offset 5, -5
 3941 121a 6F92      		push r6
 3942               	.LCFI224:
 3943               		.cfi_def_cfa_offset 7
 3944               		.cfi_offset 6, -6
 3945 121c 7F92      		push r7
 3946               	.LCFI225:
 3947               		.cfi_def_cfa_offset 8
 3948               		.cfi_offset 7, -7
 3949 121e 9F92      		push r9
 3950               	.LCFI226:
 3951               		.cfi_def_cfa_offset 9
 3952               		.cfi_offset 9, -8
 3953 1220 AF92      		push r10
 3954               	.LCFI227:
 3955               		.cfi_def_cfa_offset 10
 3956               		.cfi_offset 10, -9
 3957 1222 BF92      		push r11
 3958               	.LCFI228:
 3959               		.cfi_def_cfa_offset 11
 3960               		.cfi_offset 11, -10
 3961 1224 CF92      		push r12
 3962               	.LCFI229:
 3963               		.cfi_def_cfa_offset 12
 3964               		.cfi_offset 12, -11
 3965 1226 DF92      		push r13
 3966               	.LCFI230:
 3967               		.cfi_def_cfa_offset 13
 3968               		.cfi_offset 13, -12
 3969 1228 EF92      		push r14
 3970               	.LCFI231:
 3971               		.cfi_def_cfa_offset 14
 3972               		.cfi_offset 14, -13
 3973 122a FF92      		push r15
 3974               	.LCFI232:
 3975               		.cfi_def_cfa_offset 15
 3976               		.cfi_offset 15, -14
 3977 122c 0F93      		push r16
 3978               	.LCFI233:
 3979               		.cfi_def_cfa_offset 16
 3980               		.cfi_offset 16, -15
 3981 122e 1F93      		push r17
 3982               	.LCFI234:
 3983               		.cfi_def_cfa_offset 17
 3984               		.cfi_offset 17, -16
 3985 1230 CF93      		push r28
 3986               	.LCFI235:
 3987               		.cfi_def_cfa_offset 18
 3988               		.cfi_offset 28, -17
 3989 1232 DF93      		push r29
 3990               	.LCFI236:
 3991               		.cfi_def_cfa_offset 19
 3992               		.cfi_offset 29, -18
 3993 1234 CDB7      		in r28,__SP_L__
 3994 1236 DEB7      		in r29,__SP_H__
 3995 1238 C058      		subi r28,lo8(-(-128))
 3996 123a D040      		sbci r29,hi8(-(-128))
 3997               	.LCFI237:
 3998               		.cfi_def_cfa 28, 147
 3999 123c 0FB6      		in __tmp_reg__,__SREG__
 4000 123e F894      		cli
 4001 1240 DEBF      		out __SP_H__,r29
 4002 1242 0FBE      		out __SREG__,__tmp_reg__
 4003 1244 CDBF      		out __SP_L__,r28
 4004               	/* prologue: function */
 4005               	/* frame size = 128 */
 4006               	/* stack size = 145 */
 4007               	.L__stack_usage = 145
 4008 1246 982E      		mov r9,r24
 4009 1248 1B01      		movw r2,r22
 4010 124a 2A01      		movw r4,r20
 4011 124c 5901      		movw r10,r18
 4012               	.LVL302:
 4013               		.loc 1 834 0
 4014 124e FE01      		movw r30,r28
 4015 1250 3196      		adiw r30,1
 835:effect.c      **** 	int i;
 836:effect.c      **** 	int done;
 837:effect.c      **** 	unsigned char cubepos[64];
 838:effect.c      **** 	unsigned char pos[64];
 839:effect.c      **** 	int notdone = 1;
 840:effect.c      **** 	int notdone2 = 1;
 841:effect.c      **** 	int sent = 0;
 842:effect.c      **** 	
 843:effect.c      **** 	for (i=0;i<64;i++)
 4016               		.loc 1 843 0
 4017 1252 80E0      		ldi r24,lo8(0)
 4018 1254 90E0      		ldi r25,hi8(0)
 4019               	.LVL303:
 4020               	.L211:
 844:effect.c      **** 	{
 845:effect.c      **** 		pos[i] = 0;
 4021               		.loc 1 845 0 discriminator 2
 4022 1256 1192      		st Z+,__zero_reg__
 843:effect.c      **** 	for (i=0;i<64;i++)
 4023               		.loc 1 843 0 discriminator 2
 4024 1258 0196      		adiw r24,1
 4025               	.LVL304:
 4026 125a 8034      		cpi r24,64
 4027 125c 9105      		cpc r25,__zero_reg__
 4028 125e 01F4      		brne .L211
 843:effect.c      **** 	for (i=0;i<64;i++)
 4029               		.loc 1 843 0 is_stmt 0
 4030 1260 00E0      		ldi r16,lo8(0)
 4031 1262 10E0      		ldi r17,hi8(0)
 846:effect.c      **** 	}
 847:effect.c      **** 	
 848:effect.c      **** 	while (notdone)
 849:effect.c      **** 	{
 850:effect.c      **** 		if (mode == 1)
 851:effect.c      **** 		{
 852:effect.c      **** 			notdone2 = 1;
 853:effect.c      **** 			while (notdone2 && sent < 64)
 854:effect.c      **** 			{
 855:effect.c      **** 				i = rand() % 64;
 4032               		.loc 1 855 0 is_stmt 1
 4033 1264 40E4      		ldi r20,lo8(64)
 4034 1266 642E      		mov r6,r20
 4035 1268 712C      		mov r7,__zero_reg__
 856:effect.c      **** 				if (pos[i] == 0)
 857:effect.c      **** 				{
 858:effect.c      **** 					sent++;
 859:effect.c      **** 					pos[i] += 1;
 4036               		.loc 1 859 0
 4037 126a CC24      		clr r12
 4038 126c C394      		inc r12
 860:effect.c      **** 					notdone2 = 0;
 861:effect.c      **** 				}
 862:effect.c      **** 			}
 863:effect.c      **** 		} 
 864:effect.c      **** 		else if (mode == 2)
 865:effect.c      **** 		{
 866:effect.c      **** 			if (sent < 64)
 867:effect.c      **** 			{
 868:effect.c      **** 				pos[sent] += 1;
 869:effect.c      **** 				sent++;
 870:effect.c      **** 			}
 871:effect.c      **** 		}
 872:effect.c      **** 		
 873:effect.c      **** 		done = 0;
 874:effect.c      **** 		for (i = 0; i < 64; i++)
 875:effect.c      **** 		{
 876:effect.c      **** 			if (pos[i] > 0 && pos[i] <7)
 877:effect.c      **** 			{
 878:effect.c      **** 				pos[i] += 1;
 879:effect.c      **** 			}
 880:effect.c      **** 				
 881:effect.c      **** 			if (pos[i] == 7)
 882:effect.c      **** 			{
 883:effect.c      **** 				done++;
 884:effect.c      **** 			}
 885:effect.c      **** 		}
 886:effect.c      **** 		
 887:effect.c      **** 		if (done == 64)
 888:effect.c      **** 		{
 889:effect.c      **** 			notdone = 0;
 890:effect.c      **** 		}
 891:effect.c      **** 		
 892:effect.c      **** 		for (i=0;i<64;i++)
 893:effect.c      **** 		{
 894:effect.c      **** 			if (origin == 0)
 895:effect.c      **** 			{
 896:effect.c      **** 				cubepos[i] = pos[i];
 897:effect.c      **** 			}
 898:effect.c      **** 			else
 899:effect.c      **** 			{
 900:effect.c      **** 				cubepos[i] = (7-pos[i]);
 4039               		.loc 1 900 0
 4040 126e 57E0      		ldi r21,lo8(7)
 4041 1270 D52E      		mov r13,r21
 4042               	.LVL305:
 4043               	.L221:
 850:effect.c      **** 		if (mode == 1)
 4044               		.loc 1 850 0
 4045 1272 31E0      		ldi r19,lo8(1)
 4046 1274 A316      		cp r10,r19
 4047 1276 B104      		cpc r11,__zero_reg__
 4048 1278 01F4      		brne .L212
 4049               	.LVL306:
 853:effect.c      **** 			while (notdone2 && sent < 64)
 4050               		.loc 1 853 0 discriminator 1
 4051 127a 0034      		cpi r16,64
 4052 127c 1105      		cpc r17,__zero_reg__
 4053 127e 04F4      		brge .L213
 4054               	.L222:
 855:effect.c      **** 				i = rand() % 64;
 4055               		.loc 1 855 0
 4056 1280 0E94 0000 		call rand
 4057 1284 B301      		movw r22,r6
 4058 1286 0E94 0000 		call __divmodhi4
 4059 128a FC01      		movw r30,r24
 4060               	.LVL307:
 856:effect.c      **** 				if (pos[i] == 0)
 4061               		.loc 1 856 0
 4062 128c 81E0      		ldi r24,lo8(1)
 4063 128e 90E0      		ldi r25,hi8(1)
 4064               	.LVL308:
 4065 1290 8C0F      		add r24,r28
 4066 1292 9D1F      		adc r25,r29
 4067 1294 E80F      		add r30,r24
 4068 1296 F91F      		adc r31,r25
 4069               	.LVL309:
 4070 1298 8081      		ld r24,Z
 4071 129a 8823      		tst r24
 4072 129c 01F4      		brne .L222
 858:effect.c      **** 					sent++;
 4073               		.loc 1 858 0
 4074 129e 0F5F      		subi r16,lo8(-(1))
 4075 12a0 1F4F      		sbci r17,hi8(-(1))
 4076               	.LVL310:
 859:effect.c      **** 					pos[i] += 1;
 4077               		.loc 1 859 0
 4078 12a2 C082      		st Z,r12
 4079               	.LVL311:
 4080 12a4 00C0      		rjmp .L213
 4081               	.LVL312:
 4082               	.L212:
 864:effect.c      **** 		else if (mode == 2)
 4083               		.loc 1 864 0
 4084 12a6 92E0      		ldi r25,lo8(2)
 4085 12a8 A916      		cp r10,r25
 4086 12aa B104      		cpc r11,__zero_reg__
 4087 12ac 01F4      		brne .L213
 866:effect.c      **** 			if (sent < 64)
 4088               		.loc 1 866 0
 4089 12ae 0034      		cpi r16,64
 4090 12b0 1105      		cpc r17,__zero_reg__
 4091 12b2 04F4      		brge .L213
 868:effect.c      **** 				pos[sent] += 1;
 4092               		.loc 1 868 0
 4093 12b4 E1E0      		ldi r30,lo8(1)
 4094 12b6 F0E0      		ldi r31,hi8(1)
 4095 12b8 EC0F      		add r30,r28
 4096 12ba FD1F      		adc r31,r29
 4097 12bc E00F      		add r30,r16
 4098 12be F11F      		adc r31,r17
 4099 12c0 8081      		ld r24,Z
 4100 12c2 8F5F      		subi r24,lo8(-(1))
 4101 12c4 8083      		st Z,r24
 869:effect.c      **** 				sent++;
 4102               		.loc 1 869 0
 4103 12c6 0F5F      		subi r16,lo8(-(1))
 4104 12c8 1F4F      		sbci r17,hi8(-(1))
 4105               	.LVL313:
 4106               	.L213:
 843:effect.c      **** 	for (i=0;i<64;i++)
 4107               		.loc 1 843 0
 4108 12ca FE01      		movw r30,r28
 4109 12cc 3196      		adiw r30,1
 873:effect.c      **** 		done = 0;
 4110               		.loc 1 873 0
 4111 12ce EE24      		clr r14
 4112 12d0 FF24      		clr r15
 874:effect.c      **** 		for (i = 0; i < 64; i++)
 4113               		.loc 1 874 0
 4114 12d2 80E0      		ldi r24,lo8(0)
 4115 12d4 90E0      		ldi r25,hi8(0)
 4116               	.LVL314:
 4117               	.L217:
 833:effect.c      **** void effect_boxside_randsend_parallel (char axis, int origin, int delay, int mode)
 4118               		.loc 1 833 0
 4119 12d6 DF01      		movw r26,r30
 876:effect.c      **** 			if (pos[i] > 0 && pos[i] <7)
 4120               		.loc 1 876 0
 4121 12d8 2081      		ld r18,Z
 4122 12da 322F      		mov r19,r18
 4123 12dc 3150      		subi r19,lo8(-(-1))
 4124 12de 3630      		cpi r19,lo8(6)
 4125 12e0 00F4      		brsh .L215
 878:effect.c      **** 				pos[i] += 1;
 4126               		.loc 1 878 0
 4127 12e2 2F5F      		subi r18,lo8(-(1))
 4128 12e4 2083      		st Z,r18
 4129               	.L215:
 4130 12e6 3196      		adiw r30,1
 881:effect.c      **** 			if (pos[i] == 7)
 4131               		.loc 1 881 0
 4132 12e8 2C91      		ld r18,X
 4133 12ea 2730      		cpi r18,lo8(7)
 4134 12ec 01F4      		brne .L216
 883:effect.c      **** 				done++;
 4135               		.loc 1 883 0
 4136 12ee 0894      		sec
 4137 12f0 E11C      		adc r14,__zero_reg__
 4138 12f2 F11C      		adc r15,__zero_reg__
 4139               	.LVL315:
 4140               	.L216:
 874:effect.c      **** 		for (i = 0; i < 64; i++)
 4141               		.loc 1 874 0
 4142 12f4 0196      		adiw r24,1
 4143               	.LVL316:
 4144 12f6 8034      		cpi r24,64
 4145 12f8 9105      		cpc r25,__zero_reg__
 4146 12fa 01F4      		brne .L217
 4147               	.LVL317:
 4148 12fc FE01      		movw r30,r28
 4149 12fe EF5B      		subi r30,lo8(-(65))
 4150 1300 FF4F      		sbci r31,hi8(-(65))
 4151 1302 DE01      		movw r26,r28
 4152 1304 1196      		adiw r26,1
 892:effect.c      **** 		for (i=0;i<64;i++)
 4153               		.loc 1 892 0
 4154 1306 80E0      		ldi r24,lo8(0)
 4155 1308 90E0      		ldi r25,hi8(0)
 4156               	.LVL318:
 4157               	.L220:
 896:effect.c      **** 				cubepos[i] = pos[i];
 4158               		.loc 1 896 0
 4159 130a 2C91      		ld r18,X
 894:effect.c      **** 			if (origin == 0)
 4160               		.loc 1 894 0
 4161 130c 2114      		cp r2,__zero_reg__
 4162 130e 3104      		cpc r3,__zero_reg__
 4163 1310 01F0      		breq .L228
 4164               	.L218:
 4165               		.loc 1 900 0
 4166 1312 3D2D      		mov r19,r13
 4167 1314 321B      		sub r19,r18
 4168 1316 232F      		mov r18,r19
 4169               	.L228:
 4170 1318 2083      		st Z,r18
 892:effect.c      **** 		for (i=0;i<64;i++)
 4171               		.loc 1 892 0
 4172 131a 0196      		adiw r24,1
 4173               	.LVL319:
 4174 131c 1196      		adiw r26,1
 4175 131e 3196      		adiw r30,1
 4176 1320 8034      		cpi r24,64
 4177 1322 9105      		cpc r25,__zero_reg__
 4178 1324 01F4      		brne .L220
 901:effect.c      **** 			}
 902:effect.c      **** 		}
 903:effect.c      **** 		
 904:effect.c      **** 		
 905:effect.c      **** 		delay_ms(delay);
 4179               		.loc 1 905 0
 4180 1326 C201      		movw r24,r4
 4181               	.LVL320:
 4182 1328 0E94 0000 		call delay_ms
 906:effect.c      **** 		draw_positions_axis(axis, cubepos, 0);
 4183               		.loc 1 906 0
 4184 132c 892D      		mov r24,r9
 4185 132e BE01      		movw r22,r28
 4186 1330 6F5B      		subi r22,lo8(-(65))
 4187 1332 7F4F      		sbci r23,hi8(-(65))
 4188 1334 40E0      		ldi r20,lo8(0)
 4189 1336 50E0      		ldi r21,hi8(0)
 4190 1338 0E94 0000 		call draw_positions_axis
 907:effect.c      **** 		debug_blink(LED_RED);
 4191               		.loc 1 907 0
 4192 133c 80E1      		ldi r24,lo8(16)
 4193 133e 0E94 0000 		call debug_blink
 848:effect.c      **** 	while (notdone)
 4194               		.loc 1 848 0
 4195 1342 80E4      		ldi r24,lo8(64)
 4196 1344 E816      		cp r14,r24
 4197 1346 F104      		cpc r15,__zero_reg__
 4198 1348 01F0      		breq .+2
 4199 134a 00C0      		rjmp .L221
 4200               	/* epilogue start */
 908:effect.c      **** 	}
 909:effect.c      **** 	
 910:effect.c      **** }
 4201               		.loc 1 910 0
 4202 134c C058      		subi r28,lo8(-(128))
 4203 134e DF4F      		sbci r29,hi8(-(128))
 4204 1350 0FB6      		in __tmp_reg__,__SREG__
 4205 1352 F894      		cli
 4206 1354 DEBF      		out __SP_H__,r29
 4207 1356 0FBE      		out __SREG__,__tmp_reg__
 4208 1358 CDBF      		out __SP_L__,r28
 4209 135a DF91      		pop r29
 4210 135c CF91      		pop r28
 4211 135e 1F91      		pop r17
 4212 1360 0F91      		pop r16
 4213               	.LVL321:
 4214 1362 FF90      		pop r15
 4215 1364 EF90      		pop r14
 4216               	.LVL322:
 4217 1366 DF90      		pop r13
 4218 1368 CF90      		pop r12
 4219 136a BF90      		pop r11
 4220 136c AF90      		pop r10
 4221               	.LVL323:
 4222 136e 9F90      		pop r9
 4223               	.LVL324:
 4224 1370 7F90      		pop r7
 4225 1372 6F90      		pop r6
 4226 1374 5F90      		pop r5
 4227 1376 4F90      		pop r4
 4228               	.LVL325:
 4229 1378 3F90      		pop r3
 4230 137a 2F90      		pop r2
 4231               	.LVL326:
 4232 137c 0895      		ret
 4233               		.cfi_endproc
 4234               	.LFE19:
 4236               	.global	effect_loadbar
 4238               	effect_loadbar:
 4239               	.LFB20:
 911:effect.c      **** 
 912:effect.c      **** 
 913:effect.c      **** // Light all leds layer by layer,
 914:effect.c      **** // then unset layer by layer
 915:effect.c      **** void effect_loadbar(int delay)
 916:effect.c      **** {
 4240               		.loc 1 916 0
 4241               		.cfi_startproc
 4242               	.LVL327:
 4243 137e DF92      		push r13
 4244               	.LCFI238:
 4245               		.cfi_def_cfa_offset 3
 4246               		.cfi_offset 13, -2
 4247 1380 EF92      		push r14
 4248               	.LCFI239:
 4249               		.cfi_def_cfa_offset 4
 4250               		.cfi_offset 14, -3
 4251 1382 FF92      		push r15
 4252               	.LCFI240:
 4253               		.cfi_def_cfa_offset 5
 4254               		.cfi_offset 15, -4
 4255 1384 0F93      		push r16
 4256               	.LCFI241:
 4257               		.cfi_def_cfa_offset 6
 4258               		.cfi_offset 16, -5
 4259 1386 1F93      		push r17
 4260               	.LCFI242:
 4261               		.cfi_def_cfa_offset 7
 4262               		.cfi_offset 17, -6
 4263 1388 CF93      		push r28
 4264               	.LCFI243:
 4265               		.cfi_def_cfa_offset 8
 4266               		.cfi_offset 28, -7
 4267 138a DF93      		push r29
 4268               	.LCFI244:
 4269               		.cfi_def_cfa_offset 9
 4270               		.cfi_offset 29, -8
 4271               	/* prologue: function */
 4272               	/* frame size = 0 */
 4273               	/* stack size = 7 */
 4274               	.L__stack_usage = 7
 4275 138c 8C01      		movw r16,r24
 917:effect.c      **** 	fill(0x00);
 4276               		.loc 1 917 0
 4277 138e 80E0      		ldi r24,lo8(0)
 4278               	.LVL328:
 4279 1390 0E94 0000 		call fill
 4280               	.LVL329:
 918:effect.c      **** 	
 919:effect.c      **** 	int z,y;
 920:effect.c      **** 	
 921:effect.c      **** 	for (z=0;z<8;z++)
 4281               		.loc 1 921 0
 4282 1394 C0E0      		ldi r28,lo8(0)
 4283 1396 D0E0      		ldi r29,hi8(0)
 922:effect.c      **** 	{
 923:effect.c      **** 		for (y=0;y<8;y++)
 924:effect.c      **** 			cube[z][y] = 0xff;
 4284               		.loc 1 924 0
 4285 1398 DD24      		clr r13
 4286 139a DA94      		dec r13
 925:effect.c      **** 			
 926:effect.c      **** 		delay_ms(delay);
 4287               		.loc 1 926 0
 4288 139c 7801      		movw r14,r16
 4289               	.LVL330:
 4290               	.L230:
 924:effect.c      **** 			cube[z][y] = 0xff;
 4291               		.loc 1 924 0 discriminator 1
 4292 139e FE01      		movw r30,r28
 4293 13a0 A3E0      		ldi r26,3
 4294 13a2 EE0F      	1:	lsl r30
 4295 13a4 FF1F      		rol r31
 4296 13a6 AA95      		dec r26
 4297 13a8 01F4      		brne 1b
 4298 13aa E050      		subi r30,lo8(-(cube))
 4299 13ac F040      		sbci r31,hi8(-(cube))
 4300 13ae D082      		st Z,r13
 4301               	.LVL331:
 4302 13b0 D182      		std Z+1,r13
 4303               	.LVL332:
 4304 13b2 D282      		std Z+2,r13
 4305               	.LVL333:
 4306 13b4 D382      		std Z+3,r13
 4307               	.LVL334:
 4308 13b6 D482      		std Z+4,r13
 4309               	.LVL335:
 4310 13b8 D582      		std Z+5,r13
 4311               	.LVL336:
 4312 13ba D682      		std Z+6,r13
 4313               	.LVL337:
 4314 13bc D782      		std Z+7,r13
 4315               	.LVL338:
 4316               		.loc 1 926 0 discriminator 1
 4317 13be C701      		movw r24,r14
 4318 13c0 0E94 0000 		call delay_ms
 921:effect.c      **** 	for (z=0;z<8;z++)
 4319               		.loc 1 921 0 discriminator 1
 4320 13c4 2196      		adiw r28,1
 4321               	.LVL339:
 4322 13c6 C830      		cpi r28,8
 4323 13c8 D105      		cpc r29,__zero_reg__
 4324 13ca 01F4      		brne .L230
 927:effect.c      **** 	}
 928:effect.c      **** 	
 929:effect.c      **** 	delay_ms(delay*3);
 4325               		.loc 1 929 0
 4326 13cc C801      		movw r24,r16
 4327 13ce 880F      		lsl r24
 4328 13d0 991F      		rol r25
 4329 13d2 800F      		add r24,r16
 4330 13d4 911F      		adc r25,r17
 4331 13d6 0E94 0000 		call delay_ms
 4332               	.LVL340:
 930:effect.c      **** 	
 931:effect.c      **** 	for (z=0;z<8;z++)
 4333               		.loc 1 931 0
 4334 13da C0E0      		ldi r28,lo8(0)
 4335 13dc D0E0      		ldi r29,hi8(0)
 4336               	.LVL341:
 4337               	.L231:
 932:effect.c      **** 	{
 933:effect.c      **** 		for (y=0;y<8;y++)
 934:effect.c      **** 			cube[z][y] = 0x00;
 4338               		.loc 1 934 0 discriminator 1
 4339 13de FE01      		movw r30,r28
 4340 13e0 63E0      		ldi r22,3
 4341 13e2 EE0F      	1:	lsl r30
 4342 13e4 FF1F      		rol r31
 4343 13e6 6A95      		dec r22
 4344 13e8 01F4      		brne 1b
 4345 13ea E050      		subi r30,lo8(-(cube))
 4346 13ec F040      		sbci r31,hi8(-(cube))
 4347 13ee 1082      		st Z,__zero_reg__
 4348               	.LVL342:
 4349 13f0 1182      		std Z+1,__zero_reg__
 4350               	.LVL343:
 4351 13f2 1282      		std Z+2,__zero_reg__
 4352               	.LVL344:
 4353 13f4 1382      		std Z+3,__zero_reg__
 4354               	.LVL345:
 4355 13f6 1482      		std Z+4,__zero_reg__
 4356               	.LVL346:
 4357 13f8 1582      		std Z+5,__zero_reg__
 4358               	.LVL347:
 4359 13fa 1682      		std Z+6,__zero_reg__
 4360               	.LVL348:
 4361 13fc 1782      		std Z+7,__zero_reg__
 4362               	.LVL349:
 935:effect.c      **** 			
 936:effect.c      **** 		delay_ms(delay);
 4363               		.loc 1 936 0 discriminator 1
 4364 13fe C701      		movw r24,r14
 4365 1400 0E94 0000 		call delay_ms
 931:effect.c      **** 	for (z=0;z<8;z++)
 4366               		.loc 1 931 0 discriminator 1
 4367 1404 2196      		adiw r28,1
 4368               	.LVL350:
 4369 1406 C830      		cpi r28,8
 4370 1408 D105      		cpc r29,__zero_reg__
 4371 140a 01F4      		brne .L231
 4372               	/* epilogue start */
 937:effect.c      **** 	}
 938:effect.c      **** }
 4373               		.loc 1 938 0
 4374 140c DF91      		pop r29
 4375 140e CF91      		pop r28
 4376               	.LVL351:
 4377 1410 1F91      		pop r17
 4378 1412 0F91      		pop r16
 4379               	.LVL352:
 4380 1414 FF90      		pop r15
 4381 1416 EF90      		pop r14
 4382               	.LVL353:
 4383 1418 DF90      		pop r13
 4384 141a 0895      		ret
 4385               		.cfi_endproc
 4386               	.LFE20:
 4388               	.global	effect_random_sparkle_flash
 4390               	effect_random_sparkle_flash:
 4391               	.LFB21:
 939:effect.c      **** 
 940:effect.c      **** 
 941:effect.c      **** // Set n number of voxels at random positions
 942:effect.c      **** void effect_random_sparkle_flash (int iterations, int voxels, int delay)
 943:effect.c      **** {
 4392               		.loc 1 943 0
 4393               		.cfi_startproc
 4394               	.LVL354:
 4395 141c 4F92      		push r4
 4396               	.LCFI245:
 4397               		.cfi_def_cfa_offset 3
 4398               		.cfi_offset 4, -2
 4399 141e 5F92      		push r5
 4400               	.LCFI246:
 4401               		.cfi_def_cfa_offset 4
 4402               		.cfi_offset 5, -3
 4403 1420 6F92      		push r6
 4404               	.LCFI247:
 4405               		.cfi_def_cfa_offset 5
 4406               		.cfi_offset 6, -4
 4407 1422 7F92      		push r7
 4408               	.LCFI248:
 4409               		.cfi_def_cfa_offset 6
 4410               		.cfi_offset 7, -5
 4411 1424 8F92      		push r8
 4412               	.LCFI249:
 4413               		.cfi_def_cfa_offset 7
 4414               		.cfi_offset 8, -6
 4415 1426 9F92      		push r9
 4416               	.LCFI250:
 4417               		.cfi_def_cfa_offset 8
 4418               		.cfi_offset 9, -7
 4419 1428 AF92      		push r10
 4420               	.LCFI251:
 4421               		.cfi_def_cfa_offset 9
 4422               		.cfi_offset 10, -8
 4423 142a BF92      		push r11
 4424               	.LCFI252:
 4425               		.cfi_def_cfa_offset 10
 4426               		.cfi_offset 11, -9
 4427 142c CF92      		push r12
 4428               	.LCFI253:
 4429               		.cfi_def_cfa_offset 11
 4430               		.cfi_offset 12, -10
 4431 142e DF92      		push r13
 4432               	.LCFI254:
 4433               		.cfi_def_cfa_offset 12
 4434               		.cfi_offset 13, -11
 4435 1430 EF92      		push r14
 4436               	.LCFI255:
 4437               		.cfi_def_cfa_offset 13
 4438               		.cfi_offset 14, -12
 4439 1432 FF92      		push r15
 4440               	.LCFI256:
 4441               		.cfi_def_cfa_offset 14
 4442               		.cfi_offset 15, -13
 4443 1434 0F93      		push r16
 4444               	.LCFI257:
 4445               		.cfi_def_cfa_offset 15
 4446               		.cfi_offset 16, -14
 4447 1436 1F93      		push r17
 4448               	.LCFI258:
 4449               		.cfi_def_cfa_offset 16
 4450               		.cfi_offset 17, -15
 4451 1438 CF93      		push r28
 4452               	.LCFI259:
 4453               		.cfi_def_cfa_offset 17
 4454               		.cfi_offset 28, -16
 4455 143a DF93      		push r29
 4456               	.LCFI260:
 4457               		.cfi_def_cfa_offset 18
 4458               		.cfi_offset 29, -17
 4459               	/* prologue: function */
 4460               	/* frame size = 0 */
 4461               	/* stack size = 16 */
 4462               	.L__stack_usage = 16
 4463 143c 4C01      		movw r8,r24
 4464 143e 3B01      		movw r6,r22
 4465 1440 2A01      		movw r4,r20
 4466               	.LVL355:
 944:effect.c      **** 	int i;
 945:effect.c      **** 	int v;
 946:effect.c      **** 	for (i = 0; i < iterations; i++)
 4467               		.loc 1 946 0
 4468 1442 00E0      		ldi r16,lo8(0)
 4469 1444 10E0      		ldi r17,hi8(0)
 947:effect.c      **** 	{
 948:effect.c      **** 		for (v = 0; v <= voxels; v++)
 949:effect.c      **** 		{
 950:effect.c      **** 			setvoxel(rand() % 8, rand() % 8, rand() % 8);
 4470               		.loc 1 950 0
 4471 1446 B8E0      		ldi r27,lo8(8)
 4472 1448 EB2E      		mov r14,r27
 4473 144a F12C      		mov r15,__zero_reg__
 946:effect.c      **** 	for (i = 0; i < iterations; i++)
 4474               		.loc 1 946 0
 4475 144c 00C0      		rjmp .L235
 4476               	.LVL356:
 4477               	.L236:
 4478               		.loc 1 950 0 discriminator 2
 4479 144e 0E94 0000 		call rand
 4480 1452 6C01      		movw r12,r24
 4481 1454 0E94 0000 		call rand
 4482 1458 5C01      		movw r10,r24
 4483 145a 0E94 0000 		call rand
 4484 145e 9C01      		movw r18,r24
 4485 1460 C601      		movw r24,r12
 4486 1462 B701      		movw r22,r14
 4487 1464 0E94 0000 		call __divmodhi4
 4488 1468 FC01      		movw r30,r24
 4489 146a C501      		movw r24,r10
 4490 146c B701      		movw r22,r14
 4491 146e 0E94 0000 		call __divmodhi4
 4492 1472 6C01      		movw r12,r24
 4493 1474 C901      		movw r24,r18
 4494 1476 B701      		movw r22,r14
 4495 1478 0E94 0000 		call __divmodhi4
 4496 147c AC01      		movw r20,r24
 4497 147e CF01      		movw r24,r30
 4498 1480 B601      		movw r22,r12
 4499 1482 0E94 0000 		call setvoxel
 948:effect.c      **** 		for (v = 0; v <= voxels; v++)
 4500               		.loc 1 948 0 discriminator 2
 4501 1486 2196      		adiw r28,1
 4502               	.LVL357:
 4503 1488 00C0      		rjmp .L237
 4504               	.LVL358:
 4505               	.L238:
 946:effect.c      **** 	for (i = 0; i < iterations; i++)
 4506               		.loc 1 946 0
 4507 148a C0E0      		ldi r28,lo8(0)
 4508 148c D0E0      		ldi r29,hi8(0)
 4509               	.L237:
 4510               	.LVL359:
 948:effect.c      **** 		for (v = 0; v <= voxels; v++)
 4511               		.loc 1 948 0 discriminator 1
 4512 148e 6C16      		cp r6,r28
 4513 1490 7D06      		cpc r7,r29
 4514 1492 04F4      		brge .L236
 951:effect.c      **** 		}
 952:effect.c      **** 			
 953:effect.c      **** 		delay_ms(delay);
 4515               		.loc 1 953 0
 4516 1494 C201      		movw r24,r4
 4517 1496 0E94 0000 		call delay_ms
 954:effect.c      **** 		fill(0x00);
 4518               		.loc 1 954 0
 4519 149a 80E0      		ldi r24,lo8(0)
 4520 149c 0E94 0000 		call fill
 946:effect.c      **** 	for (i = 0; i < iterations; i++)
 4521               		.loc 1 946 0
 4522 14a0 0F5F      		subi r16,lo8(-(1))
 4523 14a2 1F4F      		sbci r17,hi8(-(1))
 4524               	.LVL360:
 4525               	.L235:
 946:effect.c      **** 	for (i = 0; i < iterations; i++)
 4526               		.loc 1 946 0 is_stmt 0 discriminator 1
 4527 14a4 0815      		cp r16,r8
 4528 14a6 1905      		cpc r17,r9
 4529 14a8 04F0      		brlt .L238
 4530               	/* epilogue start */
 955:effect.c      **** 	}
 956:effect.c      **** }
 4531               		.loc 1 956 0 is_stmt 1
 4532 14aa DF91      		pop r29
 4533 14ac CF91      		pop r28
 4534 14ae 1F91      		pop r17
 4535 14b0 0F91      		pop r16
 4536               	.LVL361:
 4537 14b2 FF90      		pop r15
 4538 14b4 EF90      		pop r14
 4539 14b6 DF90      		pop r13
 4540 14b8 CF90      		pop r12
 4541 14ba BF90      		pop r11
 4542 14bc AF90      		pop r10
 4543 14be 9F90      		pop r9
 4544 14c0 8F90      		pop r8
 4545               	.LVL362:
 4546 14c2 7F90      		pop r7
 4547 14c4 6F90      		pop r6
 4548               	.LVL363:
 4549 14c6 5F90      		pop r5
 4550 14c8 4F90      		pop r4
 4551               	.LVL364:
 4552 14ca 0895      		ret
 4553               		.cfi_endproc
 4554               	.LFE21:
 4556               	.global	effect_random_sparkle
 4558               	effect_random_sparkle:
 4559               	.LFB22:
 957:effect.c      **** 
 958:effect.c      **** // blink 1 random voxel, blink 2 random voxels..... blink 20 random voxels
 959:effect.c      **** // and back to 1 again.
 960:effect.c      **** void effect_random_sparkle (void)
 961:effect.c      **** {
 4560               		.loc 1 961 0
 4561               		.cfi_startproc
 4562 14cc CF93      		push r28
 4563               	.LCFI261:
 4564               		.cfi_def_cfa_offset 3
 4565               		.cfi_offset 28, -2
 4566 14ce DF93      		push r29
 4567               	.LCFI262:
 4568               		.cfi_def_cfa_offset 4
 4569               		.cfi_offset 29, -3
 4570               	/* prologue: function */
 4571               	/* frame size = 0 */
 4572               	/* stack size = 2 */
 4573               	.L__stack_usage = 2
 4574               	.LVL365:
 962:effect.c      **** 	int i;
 963:effect.c      **** 	
 964:effect.c      **** 	for (i = 1; i < 20; i++)
 4575               		.loc 1 964 0
 4576 14d0 C1E0      		ldi r28,lo8(1)
 4577 14d2 D0E0      		ldi r29,hi8(1)
 4578               	.LVL366:
 4579               	.L240:
 965:effect.c      **** 	{
 966:effect.c      **** 		effect_random_sparkle_flash(5, i, 200);
 4580               		.loc 1 966 0 discriminator 2
 4581 14d4 85E0      		ldi r24,lo8(5)
 4582 14d6 90E0      		ldi r25,hi8(5)
 4583 14d8 BE01      		movw r22,r28
 4584 14da 48EC      		ldi r20,lo8(200)
 4585 14dc 50E0      		ldi r21,hi8(200)
 4586 14de 0E94 0000 		call effect_random_sparkle_flash
 964:effect.c      **** 	for (i = 1; i < 20; i++)
 4587               		.loc 1 964 0 discriminator 2
 4588 14e2 2196      		adiw r28,1
 4589               	.LVL367:
 4590 14e4 C431      		cpi r28,20
 4591 14e6 D105      		cpc r29,__zero_reg__
 4592 14e8 01F4      		brne .L240
 4593               	.L242:
 967:effect.c      **** 	}
 968:effect.c      **** 	
 969:effect.c      **** 	for (i = 20; i >= 1; i--)
 970:effect.c      **** 	{
 971:effect.c      **** 		effect_random_sparkle_flash(5, i, 200);
 4594               		.loc 1 971 0 discriminator 2
 4595 14ea 85E0      		ldi r24,lo8(5)
 4596 14ec 90E0      		ldi r25,hi8(5)
 4597 14ee BE01      		movw r22,r28
 4598 14f0 48EC      		ldi r20,lo8(200)
 4599 14f2 50E0      		ldi r21,hi8(200)
 4600 14f4 0E94 0000 		call effect_random_sparkle_flash
 969:effect.c      **** 	for (i = 20; i >= 1; i--)
 4601               		.loc 1 969 0 discriminator 2
 4602 14f8 2197      		sbiw r28,1
 4603               	.LVL368:
 4604 14fa 01F4      		brne .L242
 4605               	/* epilogue start */
 972:effect.c      **** 	}
 973:effect.c      **** 	
 974:effect.c      **** }
 4606               		.loc 1 974 0
 4607 14fc DF91      		pop r29
 4608 14fe CF91      		pop r28
 4609               	.LVL369:
 4610 1500 0895      		ret
 4611               		.cfi_endproc
 4612               	.LFE22:
 4614               	.global	effect_telcstairs_do
 4616               	effect_telcstairs_do:
 4617               	.LFB23:
 975:effect.c      **** 
 976:effect.c      **** int effect_telcstairs_do(int x, int val, int delay)
 977:effect.c      **** {
 4618               		.loc 1 977 0
 4619               		.cfi_startproc
 4620               	.LVL370:
 4621 1502 CF93      		push r28
 4622               	.LCFI263:
 4623               		.cfi_def_cfa_offset 3
 4624               		.cfi_offset 28, -2
 4625 1504 DF93      		push r29
 4626               	.LCFI264:
 4627               		.cfi_def_cfa_offset 4
 4628               		.cfi_offset 29, -3
 4629               	/* prologue: function */
 4630               	/* frame size = 0 */
 4631               	/* stack size = 2 */
 4632               	.L__stack_usage = 2
 4633 1506 EC01      		movw r28,r24
 4634               	.LVL371:
 978:effect.c      **** 	int y,z;
 979:effect.c      **** 
 980:effect.c      **** 	for(y = 0, z = x; y <= z; y++, x--)
 4635               		.loc 1 980 0
 4636 1508 9C01      		movw r18,r24
 4637 150a 80E0      		ldi r24,lo8(0)
 4638 150c 90E0      		ldi r25,hi8(0)
 4639               	.LVL372:
 4640 150e 00C0      		rjmp .L246
 4641               	.LVL373:
 4642               	.L248:
 981:effect.c      **** 	{
 982:effect.c      **** 		if(x < CUBE_SIZE && y < CUBE_SIZE)
 4643               		.loc 1 982 0
 4644 1510 2830      		cpi r18,8
 4645 1512 3105      		cpc r19,__zero_reg__
 4646 1514 04F4      		brge .L247
 4647               		.loc 1 982 0 is_stmt 0 discriminator 1
 4648 1516 8830      		cpi r24,8
 4649 1518 9105      		cpc r25,__zero_reg__
 4650 151a 04F4      		brge .L247
 983:effect.c      **** 		{
 984:effect.c      **** 			cube[x][y] = val;
 4651               		.loc 1 984 0 is_stmt 1
 4652 151c F901      		movw r30,r18
 4653 151e 73E0      		ldi r23,3
 4654 1520 EE0F      	1:	lsl r30
 4655 1522 FF1F      		rol r31
 4656 1524 7A95      		dec r23
 4657 1526 01F4      		brne 1b
 4658 1528 E80F      		add r30,r24
 4659 152a F91F      		adc r31,r25
 4660 152c E050      		subi r30,lo8(-(cube))
 4661 152e F040      		sbci r31,hi8(-(cube))
 4662 1530 6083      		st Z,r22
 4663               	.L247:
 980:effect.c      **** 	for(y = 0, z = x; y <= z; y++, x--)
 4664               		.loc 1 980 0
 4665 1532 0196      		adiw r24,1
 4666               	.LVL374:
 4667 1534 2150      		subi r18,lo8(-(-1))
 4668 1536 3040      		sbci r19,hi8(-(-1))
 4669               	.LVL375:
 4670               	.L246:
 980:effect.c      **** 	for(y = 0, z = x; y <= z; y++, x--)
 4671               		.loc 1 980 0 is_stmt 0 discriminator 1
 4672 1538 C817      		cp r28,r24
 4673 153a D907      		cpc r29,r25
 4674 153c 04F4      		brge .L248
 985:effect.c      **** 		}
 986:effect.c      **** 	}
 987:effect.c      **** 	delay_ms(delay);
 4675               		.loc 1 987 0 is_stmt 1
 4676 153e CA01      		movw r24,r20
 4677               	.LVL376:
 4678 1540 0E94 0000 		call delay_ms
 4679               	.LVL377:
 988:effect.c      **** 	return z;
 989:effect.c      **** }
 4680               		.loc 1 989 0
 4681 1544 CE01      		movw r24,r28
 4682               	/* epilogue start */
 4683 1546 DF91      		pop r29
 4684 1548 CF91      		pop r28
 4685               	.LVL378:
 4686 154a 0895      		ret
 4687               		.cfi_endproc
 4688               	.LFE23:
 4690               	.global	effect_telcstairs
 4692               	effect_telcstairs:
 4693               	.LFB24:
 990:effect.c      **** 
 991:effect.c      **** void effect_telcstairs (int invert, int delay, int val)
 992:effect.c      **** {
 4694               		.loc 1 992 0
 4695               		.cfi_startproc
 4696               	.LVL379:
 4697 154c 0F93      		push r16
 4698               	.LCFI265:
 4699               		.cfi_def_cfa_offset 3
 4700               		.cfi_offset 16, -2
 4701 154e 1F93      		push r17
 4702               	.LCFI266:
 4703               		.cfi_def_cfa_offset 4
 4704               		.cfi_offset 17, -3
 4705 1550 CF93      		push r28
 4706               	.LCFI267:
 4707               		.cfi_def_cfa_offset 5
 4708               		.cfi_offset 28, -4
 4709 1552 DF93      		push r29
 4710               	.LCFI268:
 4711               		.cfi_def_cfa_offset 6
 4712               		.cfi_offset 29, -5
 4713               	/* prologue: function */
 4714               	/* frame size = 0 */
 4715               	/* stack size = 4 */
 4716               	.L__stack_usage = 4
 4717 1554 8B01      		movw r16,r22
 4718 1556 EA01      		movw r28,r20
 993:effect.c      **** 	int x;
 994:effect.c      **** 
 995:effect.c      **** 	if(invert)
 4719               		.loc 1 995 0
 4720 1558 0097      		sbiw r24,0
 4721 155a 01F0      		breq .L253
 4722               	.LVL380:
 4723 155c 80E1      		ldi r24,lo8(16)
 4724 155e 90E0      		ldi r25,hi8(16)
 4725               	.LVL381:
 4726               	.L251:
 996:effect.c      **** 	{
 997:effect.c      **** 		for(x = CUBE_SIZE*2; x >= 0; x--)
 998:effect.c      **** 		{
 999:effect.c      **** 			x = effect_telcstairs_do(x,val,delay);
 4727               		.loc 1 999 0 discriminator 2
 4728 1560 BE01      		movw r22,r28
 4729 1562 A801      		movw r20,r16
 4730 1564 0E94 0000 		call effect_telcstairs_do
 4731               	.LVL382:
 997:effect.c      **** 		for(x = CUBE_SIZE*2; x >= 0; x--)
 4732               		.loc 1 997 0 discriminator 2
 4733 1568 0197      		sbiw r24,1
 4734               	.LVL383:
 4735 156a 97FF      		sbrs r25,7
 4736 156c 00C0      		rjmp .L251
 4737 156e 00C0      		rjmp .L249
 4738               	.LVL384:
 4739               	.L253:
 995:effect.c      **** 	if(invert)
 4740               		.loc 1 995 0
 4741 1570 80E0      		ldi r24,lo8(0)
 4742 1572 90E0      		ldi r25,hi8(0)
 4743               	.LVL385:
 4744               	.L250:
1000:effect.c      **** 		}
1001:effect.c      **** 	}
1002:effect.c      **** 	else
1003:effect.c      **** 	{
1004:effect.c      **** 		for(x = 0; x < CUBE_SIZE*2; x++)
1005:effect.c      **** 		{
1006:effect.c      **** 			x = effect_telcstairs_do(x,val,delay);
 4745               		.loc 1 1006 0 discriminator 2
 4746 1574 BE01      		movw r22,r28
 4747 1576 A801      		movw r20,r16
 4748 1578 0E94 0000 		call effect_telcstairs_do
 4749               	.LVL386:
1004:effect.c      **** 		for(x = 0; x < CUBE_SIZE*2; x++)
 4750               		.loc 1 1004 0 discriminator 2
 4751 157c 0196      		adiw r24,1
 4752               	.LVL387:
 4753 157e 8031      		cpi r24,16
 4754 1580 9105      		cpc r25,__zero_reg__
 4755 1582 04F0      		brlt .L250
 4756               	.L249:
 4757               	/* epilogue start */
1007:effect.c      **** 		}
1008:effect.c      **** 	}
1009:effect.c      **** }
 4758               		.loc 1 1009 0
 4759 1584 DF91      		pop r29
 4760 1586 CF91      		pop r28
 4761               	.LVL388:
 4762 1588 1F91      		pop r17
 4763 158a 0F91      		pop r16
 4764               	.LVL389:
 4765 158c 0895      		ret
 4766               		.cfi_endproc
 4767               	.LFE24:
 4769               	.global	effect_wormsqueeze
 4771               	effect_wormsqueeze:
 4772               	.LFB25:
1010:effect.c      **** 
1011:effect.c      **** void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
1012:effect.c      **** {
 4773               		.loc 1 1012 0
 4774               		.cfi_startproc
 4775               	.LVL390:
 4776 158e 2F92      		push r2
 4777               	.LCFI269:
 4778               		.cfi_def_cfa_offset 3
 4779               		.cfi_offset 2, -2
 4780 1590 3F92      		push r3
 4781               	.LCFI270:
 4782               		.cfi_def_cfa_offset 4
 4783               		.cfi_offset 3, -3
 4784 1592 4F92      		push r4
 4785               	.LCFI271:
 4786               		.cfi_def_cfa_offset 5
 4787               		.cfi_offset 4, -4
 4788 1594 5F92      		push r5
 4789               	.LCFI272:
 4790               		.cfi_def_cfa_offset 6
 4791               		.cfi_offset 5, -5
 4792 1596 6F92      		push r6
 4793               	.LCFI273:
 4794               		.cfi_def_cfa_offset 7
 4795               		.cfi_offset 6, -6
 4796 1598 7F92      		push r7
 4797               	.LCFI274:
 4798               		.cfi_def_cfa_offset 8
 4799               		.cfi_offset 7, -7
 4800 159a 8F92      		push r8
 4801               	.LCFI275:
 4802               		.cfi_def_cfa_offset 9
 4803               		.cfi_offset 8, -8
 4804 159c 9F92      		push r9
 4805               	.LCFI276:
 4806               		.cfi_def_cfa_offset 10
 4807               		.cfi_offset 9, -9
 4808 159e AF92      		push r10
 4809               	.LCFI277:
 4810               		.cfi_def_cfa_offset 11
 4811               		.cfi_offset 10, -10
 4812 15a0 BF92      		push r11
 4813               	.LCFI278:
 4814               		.cfi_def_cfa_offset 12
 4815               		.cfi_offset 11, -11
 4816 15a2 CF92      		push r12
 4817               	.LCFI279:
 4818               		.cfi_def_cfa_offset 13
 4819               		.cfi_offset 12, -12
 4820 15a4 DF92      		push r13
 4821               	.LCFI280:
 4822               		.cfi_def_cfa_offset 14
 4823               		.cfi_offset 13, -13
 4824 15a6 EF92      		push r14
 4825               	.LCFI281:
 4826               		.cfi_def_cfa_offset 15
 4827               		.cfi_offset 14, -14
 4828 15a8 FF92      		push r15
 4829               	.LCFI282:
 4830               		.cfi_def_cfa_offset 16
 4831               		.cfi_offset 15, -15
 4832 15aa 0F93      		push r16
 4833               	.LCFI283:
 4834               		.cfi_def_cfa_offset 17
 4835               		.cfi_offset 16, -16
 4836 15ac 1F93      		push r17
 4837               	.LCFI284:
 4838               		.cfi_def_cfa_offset 18
 4839               		.cfi_offset 17, -17
 4840 15ae CF93      		push r28
 4841               	.LCFI285:
 4842               		.cfi_def_cfa_offset 19
 4843               		.cfi_offset 28, -18
 4844 15b0 DF93      		push r29
 4845               	.LCFI286:
 4846               		.cfi_def_cfa_offset 20
 4847               		.cfi_offset 29, -19
 4848 15b2 CDB7      		in r28,__SP_L__
 4849 15b4 DEB7      		in r29,__SP_H__
 4850 15b6 6097      		sbiw r28,16
 4851               	.LCFI287:
 4852               		.cfi_def_cfa 28, 36
 4853 15b8 0FB6      		in __tmp_reg__,__SREG__
 4854 15ba F894      		cli
 4855 15bc DEBF      		out __SP_H__,r29
 4856 15be 0FBE      		out __SREG__,__tmp_reg__
 4857 15c0 CDBF      		out __SP_L__,r28
 4858               	/* prologue: function */
 4859               	/* frame size = 16 */
 4860               	/* stack size = 34 */
 4861               	.L__stack_usage = 34
 4862 15c2 9A83      		std Y+2,r25
 4863 15c4 8983      		std Y+1,r24
 4864 15c6 7C83      		std Y+4,r23
 4865 15c8 6B83      		std Y+3,r22
 4866 15ca 5E83      		std Y+6,r21
 4867 15cc 4D83      		std Y+5,r20
 4868 15ce 3887      		std Y+8,r19
 4869 15d0 2F83      		std Y+7,r18
 4870 15d2 1A87      		std Y+10,r17
 4871 15d4 0987      		std Y+9,r16
 4872               	.LVL391:
1013:effect.c      **** 	int x, y, i,j,k, dx, dy;
1014:effect.c      **** 	int cube_size;
1015:effect.c      **** 	int origin = 0;
1016:effect.c      **** 	
1017:effect.c      **** 	if (direction == -1)
 4873               		.loc 1 1017 0
 4874 15d6 2FEF      		ldi r18,hi8(-1)
 4875 15d8 4F3F      		cpi r20,lo8(-1)
 4876 15da 5207      		cpc r21,r18
 4877               	.LVL392:
 4878 15dc 01F0      		breq .L269
1015:effect.c      **** 	int origin = 0;
 4879               		.loc 1 1015 0
 4880 15de 4424      		clr r4
 4881 15e0 5524      		clr r5
 4882 15e2 00C0      		rjmp .L257
 4883               	.L269:
1018:effect.c      **** 		origin = 7;
 4884               		.loc 1 1018 0
 4885 15e4 F7E0      		ldi r31,lo8(7)
 4886 15e6 4F2E      		mov r4,r31
 4887 15e8 512C      		mov r5,__zero_reg__
 4888               	.L257:
 4889               	.LVL393:
1019:effect.c      **** 	
1020:effect.c      **** 	cube_size = 8-(size-1);
 4890               		.loc 1 1020 0
 4891 15ea E9E0      		ldi r30,lo8(9)
 4892 15ec AE2E      		mov r10,r30
 4893 15ee B12C      		mov r11,__zero_reg__
 4894 15f0 8981      		ldd r24,Y+1
 4895 15f2 9A81      		ldd r25,Y+2
 4896               	.LVL394:
 4897 15f4 A81A      		sub r10,r24
 4898 15f6 B90A      		sbc r11,r25
 4899               	.LVL395:
1021:effect.c      **** 	
1022:effect.c      **** 	x = rand()%cube_size;
 4900               		.loc 1 1022 0
 4901 15f8 0E94 0000 		call rand
 4902               	.LVL396:
 4903 15fc B501      		movw r22,r10
 4904 15fe 0E94 0000 		call __divmodhi4
 4905 1602 3C01      		movw r6,r24
 4906               	.LVL397:
1023:effect.c      **** 	y = rand()%cube_size;
 4907               		.loc 1 1023 0
 4908 1604 0E94 0000 		call rand
 4909               	.LVL398:
 4910 1608 B501      		movw r22,r10
 4911 160a 0E94 0000 		call __divmodhi4
 4912 160e 4C01      		movw r8,r24
 4913               	.LVL399:
1024:effect.c      **** 	
1025:effect.c      **** 	for (i=0; i<iterations; i++)
 4914               		.loc 1 1025 0
 4915 1610 2224      		clr r2
 4916 1612 3324      		clr r3
 4917 1614 00C0      		rjmp .L258
 4918               	.LVL400:
 4919               	.L268:
1026:effect.c      **** 	{
1027:effect.c      **** 		dx = ((rand()%3)-1);
 4920               		.loc 1 1027 0
 4921 1616 0E94 0000 		call rand
 4922 161a 8C01      		movw r16,r24
 4923               	.LVL401:
1028:effect.c      **** 		dy = ((rand()%3)-1);
 4924               		.loc 1 1028 0
 4925 161c 0E94 0000 		call rand
 4926               	.LVL402:
 4927 1620 63E0      		ldi r22,lo8(3)
 4928 1622 70E0      		ldi r23,hi8(3)
 4929 1624 0E94 0000 		call __divmodhi4
 4930 1628 9C01      		movw r18,r24
 4931 162a 2150      		subi r18,lo8(-(-1))
 4932 162c 3040      		sbci r19,hi8(-(-1))
 4933               	.LVL403:
1027:effect.c      **** 		dx = ((rand()%3)-1);
 4934               		.loc 1 1027 0
 4935 162e C801      		movw r24,r16
 4936 1630 63E0      		ldi r22,lo8(3)
 4937 1632 70E0      		ldi r23,hi8(3)
 4938 1634 0E94 0000 		call __divmodhi4
 4939 1638 0197      		sbiw r24,1
1029:effect.c      **** 	
1030:effect.c      **** 		if ((x+dx) > 0 && (x+dx) < cube_size)
 4940               		.loc 1 1030 0
 4941 163a 860D      		add r24,r6
 4942 163c 971D      		adc r25,r7
 4943 163e 1816      		cp __zero_reg__,r24
 4944 1640 1906      		cpc __zero_reg__,r25
 4945 1642 04F4      		brge .L259
 4946               		.loc 1 1030 0 is_stmt 0 discriminator 1
 4947 1644 8A15      		cp r24,r10
 4948 1646 9B05      		cpc r25,r11
 4949 1648 04F4      		brge .L259
 4950               		.loc 1 1030 0
 4951 164a 3C01      		movw r6,r24
 4952               	.LVL404:
 4953               	.L259:
1031:effect.c      **** 			x += dx;
1032:effect.c      **** 			
1033:effect.c      **** 		if ((y+dy) > 0 && (y+dy) < cube_size)
 4954               		.loc 1 1033 0 is_stmt 1
 4955 164c C401      		movw r24,r8
 4956 164e 820F      		add r24,r18
 4957 1650 931F      		adc r25,r19
 4958 1652 1816      		cp __zero_reg__,r24
 4959 1654 1906      		cpc __zero_reg__,r25
 4960 1656 04F4      		brge .L260
 4961               		.loc 1 1033 0 is_stmt 0 discriminator 1
 4962 1658 8A15      		cp r24,r10
 4963 165a 9B05      		cpc r25,r11
 4964 165c 04F4      		brge .L260
 4965               		.loc 1 1033 0
 4966 165e 4C01      		movw r8,r24
 4967               	.LVL405:
 4968               	.L260:
1034:effect.c      **** 			y += dy;
1035:effect.c      **** 	
1036:effect.c      **** 		shift(axis, direction);
 4969               		.loc 1 1036 0 is_stmt 1
 4970 1660 8B81      		ldd r24,Y+3
 4971 1662 6D81      		ldd r22,Y+5
 4972 1664 7E81      		ldd r23,Y+6
 4973 1666 0E94 0000 		call shift
 4974               	.LVL406:
1037:effect.c      **** 		
1038:effect.c      **** 
1039:effect.c      **** 		for (j=0; j<size;j++)
 4975               		.loc 1 1039 0
 4976 166a 6301      		movw r12,r6
 4977 166c 00E0      		ldi r16,lo8(0)
 4978 166e 10E0      		ldi r17,hi8(0)
 4979               	.LVL407:
 4980 1670 3E86      		std Y+14,r3
 4981 1672 2D86      		std Y+13,r2
 4982 1674 1501      		movw r2,r10
 4983               	.LVL408:
 4984 1676 2981      		ldd r18,Y+1
 4985 1678 3A81      		ldd r19,Y+2
 4986 167a 00C0      		rjmp .L261
 4987               	.LVL409:
 4988               	.L265:
1040:effect.c      **** 		{
1041:effect.c      **** 			for (k=0; k<size;k++)
1042:effect.c      **** 			{
1043:effect.c      **** 				if (axis == AXIS_Z)
 4989               		.loc 1 1043 0
 4990 167c 0A37      		cpi r16,122
 4991 167e 1105      		cpc r17,__zero_reg__
 4992 1680 01F4      		brne .L262
1044:effect.c      **** 					setvoxel(x+j,y+k,origin);
 4993               		.loc 1 1044 0
 4994 1682 C601      		movw r24,r12
 4995 1684 B501      		movw r22,r10
 4996 1686 A201      		movw r20,r4
 4997 1688 00C0      		rjmp .L270
 4998               	.L262:
1045:effect.c      **** 					
1046:effect.c      **** 				if (axis == AXIS_Y)
 4999               		.loc 1 1046 0
 5000 168a 0937      		cpi r16,121
 5001 168c 1105      		cpc r17,__zero_reg__
 5002 168e 01F4      		brne .L264
1047:effect.c      **** 					setvoxel(x+j,origin,y+k);
 5003               		.loc 1 1047 0
 5004 1690 C601      		movw r24,r12
 5005 1692 B201      		movw r22,r4
 5006 1694 A501      		movw r20,r10
 5007 1696 00C0      		rjmp .L270
 5008               	.L264:
1048:effect.c      **** 					
1049:effect.c      **** 				if (axis == AXIS_X)
 5009               		.loc 1 1049 0
 5010 1698 0837      		cpi r16,120
 5011 169a 1105      		cpc r17,__zero_reg__
 5012 169c 01F4      		brne .L263
1011:effect.c      **** void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
 5013               		.loc 1 1011 0
 5014 169e A701      		movw r20,r14
 5015 16a0 460D      		add r20,r6
 5016 16a2 571D      		adc r21,r7
1050:effect.c      **** 					setvoxel(origin,y+j,x+k);
 5017               		.loc 1 1050 0
 5018 16a4 C201      		movw r24,r4
 5019 16a6 6B85      		ldd r22,Y+11
 5020 16a8 7C85      		ldd r23,Y+12
 5021               	.L270:
 5022 16aa 0E94 0000 		call setvoxel
 5023               	.L263:
1041:effect.c      **** 			for (k=0; k<size;k++)
 5024               		.loc 1 1041 0
 5025 16ae 0894      		sec
 5026 16b0 E11C      		adc r14,__zero_reg__
 5027 16b2 F11C      		adc r15,__zero_reg__
 5028               	.LVL410:
 5029 16b4 0894      		sec
 5030 16b6 A11C      		adc r10,__zero_reg__
 5031 16b8 B11C      		adc r11,__zero_reg__
 5032               	.LVL411:
 5033               	.L267:
1041:effect.c      **** 			for (k=0; k<size;k++)
 5034               		.loc 1 1041 0 is_stmt 0 discriminator 1
 5035 16ba E981      		ldd r30,Y+1
 5036 16bc FA81      		ldd r31,Y+2
 5037 16be EE16      		cp r14,r30
 5038 16c0 FF06      		cpc r15,r31
 5039 16c2 04F0      		brlt .L265
 5040 16c4 8401      		movw r16,r8
 5041 16c6 8F84      		ldd r8,Y+15
 5042 16c8 9888      		ldd r9,Y+16
 5043               	.LVL412:
 5044 16ca 9F01      		movw r18,r30
1039:effect.c      **** 		for (j=0; j<size;j++)
 5045               		.loc 1 1039 0 is_stmt 1
 5046 16cc 0F5F      		subi r16,lo8(-(1))
 5047 16ce 1F4F      		sbci r17,hi8(-(1))
 5048               	.LVL413:
 5049 16d0 0894      		sec
 5050 16d2 C11C      		adc r12,__zero_reg__
 5051 16d4 D11C      		adc r13,__zero_reg__
 5052               	.LVL414:
 5053               	.L261:
1039:effect.c      **** 		for (j=0; j<size;j++)
 5054               		.loc 1 1039 0 is_stmt 0 discriminator 1
 5055 16d6 0217      		cp r16,r18
 5056 16d8 1307      		cpc r17,r19
 5057 16da 04F4      		brge .L266
1039:effect.c      **** 		for (j=0; j<size;j++)
 5058               		.loc 1 1039 0
 5059 16dc 5401      		movw r10,r8
 5060 16de EE24      		clr r14
 5061 16e0 FF24      		clr r15
1011:effect.c      **** void effect_wormsqueeze (int size, int axis, int direction, int iterations, int delay)
 5062               		.loc 1 1011 0 is_stmt 1
 5063 16e2 C801      		movw r24,r16
 5064 16e4 880D      		add r24,r8
 5065 16e6 991D      		adc r25,r9
 5066 16e8 9C87      		std Y+12,r25
 5067 16ea 8B87      		std Y+11,r24
 5068 16ec 988A      		std Y+16,r9
 5069 16ee 8F86      		std Y+15,r8
 5070 16f0 4801      		movw r8,r16
 5071 16f2 3A83      		std Y+2,r19
 5072 16f4 2983      		std Y+1,r18
 5073 16f6 0B81      		ldd r16,Y+3
 5074 16f8 1C81      		ldd r17,Y+4
 5075               	.LVL415:
 5076 16fa 00C0      		rjmp .L267
 5077               	.LVL416:
 5078               	.L266:
 5079 16fc 5101      		movw r10,r2
 5080 16fe 2D84      		ldd r2,Y+13
 5081 1700 3E84      		ldd r3,Y+14
 5082               	.LVL417:
1051:effect.c      **** 			}
1052:effect.c      **** 		}
1053:effect.c      **** 		
1054:effect.c      **** 		delay_ms(delay);
 5083               		.loc 1 1054 0
 5084 1702 8985      		ldd r24,Y+9
 5085 1704 9A85      		ldd r25,Y+10
 5086 1706 0E94 0000 		call delay_ms
1025:effect.c      **** 	for (i=0; i<iterations; i++)
 5087               		.loc 1 1025 0
 5088 170a 0894      		sec
 5089 170c 211C      		adc r2,__zero_reg__
 5090 170e 311C      		adc r3,__zero_reg__
 5091               	.LVL418:
 5092               	.L258:
1025:effect.c      **** 	for (i=0; i<iterations; i++)
 5093               		.loc 1 1025 0 is_stmt 0 discriminator 1
 5094 1710 EF81      		ldd r30,Y+7
 5095 1712 F885      		ldd r31,Y+8
 5096 1714 2E16      		cp r2,r30
 5097 1716 3F06      		cpc r3,r31
 5098 1718 04F4      		brge .+2
 5099 171a 00C0      		rjmp .L268
 5100               	/* epilogue start */
1055:effect.c      **** 	}
1056:effect.c      **** }
 5101               		.loc 1 1056 0 is_stmt 1
 5102 171c 6096      		adiw r28,16
 5103 171e 0FB6      		in __tmp_reg__,__SREG__
 5104 1720 F894      		cli
 5105 1722 DEBF      		out __SP_H__,r29
 5106 1724 0FBE      		out __SREG__,__tmp_reg__
 5107 1726 CDBF      		out __SP_L__,r28
 5108 1728 DF91      		pop r29
 5109 172a CF91      		pop r28
 5110 172c 1F91      		pop r17
 5111 172e 0F91      		pop r16
 5112 1730 FF90      		pop r15
 5113 1732 EF90      		pop r14
 5114 1734 DF90      		pop r13
 5115 1736 CF90      		pop r12
 5116 1738 BF90      		pop r11
 5117 173a AF90      		pop r10
 5118               	.LVL419:
 5119 173c 9F90      		pop r9
 5120 173e 8F90      		pop r8
 5121               	.LVL420:
 5122 1740 7F90      		pop r7
 5123 1742 6F90      		pop r6
 5124               	.LVL421:
 5125 1744 5F90      		pop r5
 5126 1746 4F90      		pop r4
 5127               	.LVL422:
 5128 1748 3F90      		pop r3
 5129 174a 2F90      		pop r2
 5130               	.LVL423:
 5131 174c 0895      		ret
 5132               		.cfi_endproc
 5133               	.LFE25:
 5135               		.data
 5136               	.LC0:
 5137 0000 00        		.byte	0
 5138 0001 01        		.byte	1
 5139 0002 02        		.byte	2
 5140 0003 03        		.byte	3
 5141 0004 04        		.byte	4
 5142 0005 05        		.byte	5
 5143 0006 06        		.byte	6
 5144 0007 07        		.byte	7
 5145 0008 01        		.byte	1
 5146 0009 01        		.byte	1
 5147 000a 02        		.byte	2
 5148 000b 03        		.byte	3
 5149 000c 04        		.byte	4
 5150 000d 05        		.byte	5
 5151 000e 06        		.byte	6
 5152 000f 06        		.byte	6
 5153 0010 02        		.byte	2
 5154 0011 02        		.byte	2
 5155 0012 03        		.byte	3
 5156 0013 03        		.byte	3
 5157 0014 04        		.byte	4
 5158 0015 04        		.byte	4
 5159 0016 05        		.byte	5
 5160 0017 05        		.byte	5
 5161 0018 03        		.byte	3
 5162 0019 03        		.byte	3
 5163 001a 03        		.byte	3
 5164 001b 03        		.byte	3
 5165 001c 04        		.byte	4
 5166 001d 04        		.byte	4
 5167 001e 04        		.byte	4
 5168 001f 04        		.byte	4
 5169               		.text
 5170               	.global	effect_smileyspin
 5172               	effect_smileyspin:
 5173               	.LFB26:
1057:effect.c      **** 
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
1059:effect.c      **** {
 5174               		.loc 1 1059 0
 5175               		.cfi_startproc
 5176               	.LVL424:
 5177 174e 2F92      		push r2
 5178               	.LCFI288:
 5179               		.cfi_def_cfa_offset 3
 5180               		.cfi_offset 2, -2
 5181 1750 3F92      		push r3
 5182               	.LCFI289:
 5183               		.cfi_def_cfa_offset 4
 5184               		.cfi_offset 3, -3
 5185 1752 4F92      		push r4
 5186               	.LCFI290:
 5187               		.cfi_def_cfa_offset 5
 5188               		.cfi_offset 4, -4
 5189 1754 5F92      		push r5
 5190               	.LCFI291:
 5191               		.cfi_def_cfa_offset 6
 5192               		.cfi_offset 5, -5
 5193 1756 6F92      		push r6
 5194               	.LCFI292:
 5195               		.cfi_def_cfa_offset 7
 5196               		.cfi_offset 6, -6
 5197 1758 7F92      		push r7
 5198               	.LCFI293:
 5199               		.cfi_def_cfa_offset 8
 5200               		.cfi_offset 7, -7
 5201 175a 8F92      		push r8
 5202               	.LCFI294:
 5203               		.cfi_def_cfa_offset 9
 5204               		.cfi_offset 8, -8
 5205 175c 9F92      		push r9
 5206               	.LCFI295:
 5207               		.cfi_def_cfa_offset 10
 5208               		.cfi_offset 9, -9
 5209 175e AF92      		push r10
 5210               	.LCFI296:
 5211               		.cfi_def_cfa_offset 11
 5212               		.cfi_offset 10, -10
 5213 1760 BF92      		push r11
 5214               	.LCFI297:
 5215               		.cfi_def_cfa_offset 12
 5216               		.cfi_offset 11, -11
 5217 1762 CF92      		push r12
 5218               	.LCFI298:
 5219               		.cfi_def_cfa_offset 13
 5220               		.cfi_offset 12, -12
 5221 1764 DF92      		push r13
 5222               	.LCFI299:
 5223               		.cfi_def_cfa_offset 14
 5224               		.cfi_offset 13, -13
 5225 1766 EF92      		push r14
 5226               	.LCFI300:
 5227               		.cfi_def_cfa_offset 15
 5228               		.cfi_offset 14, -14
 5229 1768 FF92      		push r15
 5230               	.LCFI301:
 5231               		.cfi_def_cfa_offset 16
 5232               		.cfi_offset 15, -15
 5233 176a 0F93      		push r16
 5234               	.LCFI302:
 5235               		.cfi_def_cfa_offset 17
 5236               		.cfi_offset 16, -16
 5237 176c 1F93      		push r17
 5238               	.LCFI303:
 5239               		.cfi_def_cfa_offset 18
 5240               		.cfi_offset 17, -17
 5241 176e CF93      		push r28
 5242               	.LCFI304:
 5243               		.cfi_def_cfa_offset 19
 5244               		.cfi_offset 28, -18
 5245 1770 DF93      		push r29
 5246               	.LCFI305:
 5247               		.cfi_def_cfa_offset 20
 5248               		.cfi_offset 29, -19
 5249 1772 CDB7      		in r28,__SP_L__
 5250 1774 DEB7      		in r29,__SP_H__
 5251 1776 AB97      		sbiw r28,43
 5252               	.LCFI306:
 5253               		.cfi_def_cfa 28, 63
 5254 1778 0FB6      		in __tmp_reg__,__SREG__
 5255 177a F894      		cli
 5256 177c DEBF      		out __SP_H__,r29
 5257 177e 0FBE      		out __SREG__,__tmp_reg__
 5258 1780 CDBF      		out __SP_L__,r28
 5259               	/* prologue: function */
 5260               	/* frame size = 43 */
 5261               	/* stack size = 61 */
 5262               	.L__stack_usage = 61
 5263 1782 9BA7      		std Y+43,r25
 5264 1784 8AA7      		std Y+42,r24
 5265 1786 6EA3      		std Y+38,r22
 5266 1788 7FA3      		std Y+39,r23
 5267 178a 4DA3      		std Y+37,r20
1060:effect.c      **** 	unsigned char dybde[] = {0,1,2,3,4,5,6,7,1,1,2,3,4,5,6,6,2,2,3,3,4,4,5,5,3,3,3,3,4,4,4,4};
 5268               		.loc 1 1060 0
 5269 178c DE01      		movw r26,r28
 5270 178e 1196      		adiw r26,1
 5271 1790 E0E0      		ldi r30,lo8(.LC0)
 5272 1792 F0E0      		ldi r31,hi8(.LC0)
 5273 1794 80E2      		ldi r24,lo8(32)
 5274               	.LVL425:
 5275               	.L272:
 5276 1796 0190      		ld r0,Z+
 5277 1798 0D92      		st X+,r0
 5278 179a 8150      		subi r24,lo8(-(-1))
 5279 179c 01F4      		brne .L272
 5280               	.LVL426:
 5281               	.LBB2:
1061:effect.c      **** 	int d = 0;
1062:effect.c      **** 	int flip = 0;
1063:effect.c      **** 	int x, y, off;
1064:effect.c      **** 	for(int i = 0; i<count; i++)
 5282               		.loc 1 1064 0
 5283 179e 19A6      		std Y+41,__zero_reg__
 5284 17a0 18A6      		std Y+40,__zero_reg__
 5285 17a2 9E01      		movw r18,r28
 5286 17a4 2F5F      		subi r18,lo8(-(1))
 5287 17a6 3F4F      		sbci r19,hi8(-(1))
 5288 17a8 3AA3      		std Y+34,r19
 5289 17aa 29A3      		std Y+33,r18
 5290 17ac 00C0      		rjmp .L273
 5291               	.LVL427:
 5292               	.L310:
 5293 17ae 47E0      		ldi r20,lo8(7)
 5294 17b0 442E      		mov r4,r20
 5295 17b2 512C      		mov r5,__zero_reg__
 5296 17b4 00E0      		ldi r16,lo8(0)
 5297 17b6 10E0      		ldi r17,hi8(0)
 5298 17b8 2224      		clr r2
 5299 17ba 3324      		clr r3
 5300               	.LVL428:
 5301               	.L281:
 5302 17bc 0F5F      		subi r16,lo8(-(1))
 5303 17be 1F4F      		sbci r17,hi8(-(1))
 5304               	.LBB3:
1065:effect.c      **** 	{
1066:effect.c      **** 		flip = 0;
1067:effect.c      **** 		d = 0;
1068:effect.c      **** 		off = 0;
1069:effect.c      **** 		// front:
1070:effect.c      **** 		for (int s=0;s<7;s++){
1071:effect.c      **** 			if(!flip){
 5305               		.loc 1 1071 0
 5306 17c0 2114      		cp r2,__zero_reg__
 5307 17c2 3104      		cpc r3,__zero_reg__
 5308 17c4 01F4      		brne .L275
 5309               	.LVL429:
1072:effect.c      **** 				off++;
1073:effect.c      **** 				if (off == 4){
 5310               		.loc 1 1073 0
 5311 17c6 0430      		cpi r16,4
 5312 17c8 1105      		cpc r17,__zero_reg__
 5313 17ca 01F4      		brne .L275
1074:effect.c      **** 					flip = 1;
1075:effect.c      **** 					off = 0;
 5314               		.loc 1 1075 0
 5315 17cc 00E0      		ldi r16,lo8(0)
 5316 17ce 10E0      		ldi r17,hi8(0)
 5317               	.LVL430:
1074:effect.c      **** 					flip = 1;
 5318               		.loc 1 1074 0
 5319 17d0 31E0      		ldi r19,lo8(1)
 5320 17d2 232E      		mov r2,r19
 5321 17d4 312C      		mov r3,__zero_reg__
 5322               	.L275:
 5323               	.LVL431:
1076:effect.c      **** 				}
1077:effect.c      **** 			} else {
1078:effect.c      **** 				off++;
1079:effect.c      **** 			}
1080:effect.c      **** 		        for (x=0; x<8; x++)
1081:effect.c      ****         		{
1082:effect.c      **** 				d = 0;
1083:effect.c      ****                 		for (y=0; y<8; y++)
1084:effect.c      **** 	                	{
1085:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, y)){
1086:effect.c      **** 						if (!flip)
1087:effect.c      **** 							setvoxel(y,dybde[8 * off + d++],x);
 5324               		.loc 1 1087 0
 5325 17d6 3801      		movw r6,r16
 5326 17d8 B3E0      		ldi r27,3
 5327 17da 660C      	1:	lsl r6
 5328 17dc 771C      		rol r7
 5329 17de BA95      		dec r27
 5330 17e0 01F4      		brne 1b
1088:effect.c      **** 						else
1089:effect.c      **** 							setvoxel(y,dybde[31 - 8 * off - d++],x);
 5331               		.loc 1 1089 0
 5332 17e2 27E0      		ldi r18,lo8(7)
 5333 17e4 C22E      		mov r12,r18
1080:effect.c      **** 		        for (x=0; x<8; x++)
 5334               		.loc 1 1080 0
 5335 17e6 8824      		clr r8
 5336 17e8 9924      		clr r9
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5337               		.loc 1 1058 0
 5338 17ea 29A1      		ldd r18,Y+33
 5339 17ec 3AA1      		ldd r19,Y+34
 5340 17ee 2619      		sub r18,r6
 5341 17f0 3709      		sbc r19,r7
 5342 17f2 3CA3      		std Y+36,r19
 5343 17f4 2BA3      		std Y+35,r18
 5344 17f6 81E0      		ldi r24,lo8(1)
 5345 17f8 90E0      		ldi r25,hi8(1)
 5346 17fa 8C0F      		add r24,r28
 5347 17fc 9D1F      		adc r25,r29
 5348 17fe 680E      		add r6,r24
 5349 1800 791E      		adc r7,r25
 5350 1802 5801      		movw r10,r16
 5351 1804 00C0      		rjmp .L276
 5352               	.LVL432:
 5353               	.L279:
1085:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, y)){
 5354               		.loc 1 1085 0
 5355 1806 8DA1      		ldd r24,Y+37
 5356 1808 6C2D      		mov r22,r12
 5357 180a 402F      		mov r20,r16
 5358 180c 0E94 0000 		call font_getbitmappixel
 5359 1810 8823      		tst r24
 5360 1812 01F0      		breq .L277
1086:effect.c      **** 						if (!flip)
 5361               		.loc 1 1086 0
 5362 1814 2114      		cp r2,__zero_reg__
 5363 1816 3104      		cpc r3,__zero_reg__
 5364 1818 01F4      		brne .L278
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5365               		.loc 1 1058 0
 5366 181a F301      		movw r30,r6
 5367 181c E00F      		add r30,r16
 5368 181e F11F      		adc r31,r17
1087:effect.c      **** 							setvoxel(y,dybde[8 * off + d++],x);
 5369               		.loc 1 1087 0
 5370 1820 6081      		ld r22,Z
 5371 1822 00C0      		rjmp .L320
 5372               	.L278:
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5373               		.loc 1 1058 0
 5374 1824 EBA1      		ldd r30,Y+35
 5375 1826 FCA1      		ldd r31,Y+36
 5376 1828 EE0D      		add r30,r14
 5377 182a FF1D      		adc r31,r15
 5378               		.loc 1 1089 0
 5379 182c 6789      		ldd r22,Z+23
 5380               	.L320:
 5381 182e C801      		movw r24,r16
 5382 1830 70E0      		ldi r23,lo8(0)
 5383 1832 A401      		movw r20,r8
 5384 1834 0E94 0000 		call setvoxel
 5385               	.L277:
1083:effect.c      ****                 		for (y=0; y<8; y++)
 5386               		.loc 1 1083 0
 5387 1838 0F5F      		subi r16,lo8(-(1))
 5388 183a 1F4F      		sbci r17,hi8(-(1))
 5389               	.LVL433:
 5390 183c 0894      		sec
 5391 183e E108      		sbc r14,__zero_reg__
 5392 1840 F108      		sbc r15,__zero_reg__
 5393 1842 E114      		cp r14,__zero_reg__
 5394 1844 F104      		cpc r15,__zero_reg__
 5395 1846 01F4      		brne .L279
1080:effect.c      **** 		        for (x=0; x<8; x++)
 5396               		.loc 1 1080 0
 5397 1848 0894      		sec
 5398 184a 811C      		adc r8,__zero_reg__
 5399 184c 911C      		adc r9,__zero_reg__
 5400               	.LVL434:
 5401 184e CA94      		dec r12
 5402 1850 9FEF      		ldi r25,lo8(-1)
 5403 1852 C916      		cp r12,r25
 5404 1854 01F0      		breq .L280
 5405               	.LVL435:
 5406               	.L276:
1074:effect.c      **** 					flip = 1;
 5407               		.loc 1 1074 0 discriminator 1
 5408 1856 A8E0      		ldi r26,lo8(8)
 5409 1858 EA2E      		mov r14,r26
 5410 185a F12C      		mov r15,__zero_reg__
 5411 185c 00E0      		ldi r16,lo8(0)
 5412 185e 10E0      		ldi r17,hi8(0)
 5413 1860 00C0      		rjmp .L279
 5414               	.LVL436:
 5415               	.L280:
 5416 1862 8501      		movw r16,r10
 5417               	.LVL437:
1090:effect.c      **** 					} else {
1091:effect.c      **** 						d++;
1092:effect.c      **** 					}
1093:effect.c      **** 				}
1094:effect.c      **** 			}
1095:effect.c      **** 			delay_ms(delay);
 5418               		.loc 1 1095 0
 5419 1864 8EA1      		ldd r24,Y+38
 5420 1866 9FA1      		ldd r25,Y+39
 5421 1868 0E94 0000 		call delay_ms
1096:effect.c      **** 			fill(0x00);
 5422               		.loc 1 1096 0
 5423 186c 80E0      		ldi r24,lo8(0)
 5424 186e 0E94 0000 		call fill
 5425 1872 0894      		sec
 5426 1874 4108      		sbc r4,__zero_reg__
 5427 1876 5108      		sbc r5,__zero_reg__
1070:effect.c      **** 		for (int s=0;s<7;s++){
 5428               		.loc 1 1070 0
 5429 1878 4114      		cp r4,__zero_reg__
 5430 187a 5104      		cpc r5,__zero_reg__
 5431 187c 01F0      		breq .+2
 5432 187e 00C0      		rjmp .L281
 5433 1880 F7E0      		ldi r31,lo8(7)
 5434 1882 4F2E      		mov r4,r31
 5435 1884 512C      		mov r5,__zero_reg__
 5436 1886 00E0      		ldi r16,lo8(0)
 5437 1888 10E0      		ldi r17,hi8(0)
 5438 188a 2224      		clr r2
 5439 188c 3324      		clr r3
 5440               	.LVL438:
 5441               	.L289:
 5442 188e 0F5F      		subi r16,lo8(-(1))
 5443 1890 1F4F      		sbci r17,hi8(-(1))
 5444               	.LBE3:
 5445               	.LBB4:
1097:effect.c      **** 		}
1098:effect.c      **** 
1099:effect.c      **** 		// side:
1100:effect.c      **** 		off = 0;
1101:effect.c      **** 		flip = 0;
1102:effect.c      **** 		d = 0;
1103:effect.c      **** 		for (int s=0;s<7;s++){
1104:effect.c      **** 			if(!flip){
 5446               		.loc 1 1104 0
 5447 1892 2114      		cp r2,__zero_reg__
 5448 1894 3104      		cpc r3,__zero_reg__
 5449 1896 01F4      		brne .L283
 5450               	.LVL439:
1105:effect.c      **** 				off++;
1106:effect.c      **** 				if (off == 4){
 5451               		.loc 1 1106 0
 5452 1898 0430      		cpi r16,4
 5453 189a 1105      		cpc r17,__zero_reg__
 5454 189c 01F4      		brne .L283
1107:effect.c      **** 					flip = 1;
1108:effect.c      **** 					off = 0;
 5455               		.loc 1 1108 0
 5456 189e 00E0      		ldi r16,lo8(0)
 5457 18a0 10E0      		ldi r17,hi8(0)
 5458               	.LVL440:
1107:effect.c      **** 					flip = 1;
 5459               		.loc 1 1107 0
 5460 18a2 E1E0      		ldi r30,lo8(1)
 5461 18a4 2E2E      		mov r2,r30
 5462 18a6 312C      		mov r3,__zero_reg__
 5463               	.L283:
 5464               	.LVL441:
1109:effect.c      **** 				}
1110:effect.c      **** 			} else {
1111:effect.c      **** 				off++;
1112:effect.c      **** 			}
1113:effect.c      **** 		        for (x=0; x<8; x++)
1114:effect.c      ****         		{
1115:effect.c      **** 				d = 0;
1116:effect.c      ****                 		for (y=0; y<8; y++)
1117:effect.c      **** 	                	{
1118:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, y)){
1119:effect.c      **** 						if (!flip)
1120:effect.c      **** 							setvoxel(dybde[8 * off + d++], 7 - y,x);
 5465               		.loc 1 1120 0
 5466 18a8 3801      		movw r6,r16
 5467 18aa 63E0      		ldi r22,3
 5468 18ac 660C      	1:	lsl r6
 5469 18ae 771C      		rol r7
 5470 18b0 6A95      		dec r22
 5471 18b2 01F4      		brne 1b
1121:effect.c      **** 						else
1122:effect.c      **** 							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
 5472               		.loc 1 1122 0
 5473 18b4 77E0      		ldi r23,lo8(7)
 5474 18b6 B72E      		mov r11,r23
1113:effect.c      **** 		        for (x=0; x<8; x++)
 5475               		.loc 1 1113 0
 5476 18b8 8824      		clr r8
 5477 18ba 9924      		clr r9
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5478               		.loc 1 1058 0
 5479 18bc 29A1      		ldd r18,Y+33
 5480 18be 3AA1      		ldd r19,Y+34
 5481 18c0 2619      		sub r18,r6
 5482 18c2 3709      		sbc r19,r7
 5483 18c4 3CA3      		std Y+36,r19
 5484 18c6 2BA3      		std Y+35,r18
 5485 18c8 81E0      		ldi r24,lo8(1)
 5486 18ca 90E0      		ldi r25,hi8(1)
 5487 18cc 8C0F      		add r24,r28
 5488 18ce 9D1F      		adc r25,r29
 5489 18d0 680E      		add r6,r24
 5490 18d2 791E      		adc r7,r25
 5491 18d4 6801      		movw r12,r16
 5492 18d6 00C0      		rjmp .L284
 5493               	.LVL442:
 5494               	.L287:
1118:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, y)){
 5495               		.loc 1 1118 0
 5496 18d8 8DA1      		ldd r24,Y+37
 5497 18da 6B2D      		mov r22,r11
 5498 18dc 4E2D      		mov r20,r14
 5499 18de 0E94 0000 		call font_getbitmappixel
 5500 18e2 8823      		tst r24
 5501 18e4 01F0      		breq .L285
1119:effect.c      **** 						if (!flip)
 5502               		.loc 1 1119 0
 5503 18e6 2114      		cp r2,__zero_reg__
 5504 18e8 3104      		cpc r3,__zero_reg__
 5505 18ea 01F4      		brne .L286
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5506               		.loc 1 1058 0
 5507 18ec F301      		movw r30,r6
 5508 18ee EE0D      		add r30,r14
 5509 18f0 FF1D      		adc r31,r15
1120:effect.c      **** 							setvoxel(dybde[8 * off + d++], 7 - y,x);
 5510               		.loc 1 1120 0
 5511 18f2 8081      		ld r24,Z
 5512 18f4 00C0      		rjmp .L321
 5513               	.L286:
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5514               		.loc 1 1058 0
 5515 18f6 EBA1      		ldd r30,Y+35
 5516 18f8 FCA1      		ldd r31,Y+36
 5517 18fa E00F      		add r30,r16
 5518 18fc F11F      		adc r31,r17
 5519               		.loc 1 1122 0
 5520 18fe 808D      		ldd r24,Z+24
 5521               	.L321:
 5522 1900 90E0      		ldi r25,lo8(0)
 5523 1902 B801      		movw r22,r16
 5524 1904 A401      		movw r20,r8
 5525 1906 0E94 0000 		call setvoxel
 5526               	.L285:
1116:effect.c      ****                 		for (y=0; y<8; y++)
 5527               		.loc 1 1116 0
 5528 190a 0894      		sec
 5529 190c E11C      		adc r14,__zero_reg__
 5530 190e F11C      		adc r15,__zero_reg__
 5531               	.LVL443:
 5532 1910 0150      		subi r16,lo8(-(-1))
 5533 1912 1040      		sbci r17,hi8(-(-1))
 5534 1914 98E0      		ldi r25,lo8(8)
 5535 1916 E916      		cp r14,r25
 5536 1918 F104      		cpc r15,__zero_reg__
 5537 191a 01F4      		brne .L287
1113:effect.c      **** 		        for (x=0; x<8; x++)
 5538               		.loc 1 1113 0
 5539 191c 0894      		sec
 5540 191e 811C      		adc r8,__zero_reg__
 5541 1920 911C      		adc r9,__zero_reg__
 5542               	.LVL444:
 5543 1922 BA94      		dec r11
 5544 1924 2FEF      		ldi r18,lo8(-1)
 5545 1926 B216      		cp r11,r18
 5546 1928 01F0      		breq .L288
 5547               	.LVL445:
 5548               	.L284:
1107:effect.c      **** 					flip = 1;
 5549               		.loc 1 1107 0 discriminator 1
 5550 192a 07E0      		ldi r16,lo8(7)
 5551 192c 10E0      		ldi r17,hi8(7)
 5552 192e EE24      		clr r14
 5553 1930 FF24      		clr r15
 5554 1932 00C0      		rjmp .L287
 5555               	.LVL446:
 5556               	.L288:
 5557 1934 8601      		movw r16,r12
1123:effect.c      **** 					} else {
1124:effect.c      **** 						d++;
1125:effect.c      **** 					}
1126:effect.c      **** 				}
1127:effect.c      **** 			}
1128:effect.c      **** 			delay_ms(delay);
 5558               		.loc 1 1128 0
 5559 1936 8EA1      		ldd r24,Y+38
 5560 1938 9FA1      		ldd r25,Y+39
 5561 193a 0E94 0000 		call delay_ms
1129:effect.c      **** 			fill(0x00);
 5562               		.loc 1 1129 0
 5563 193e 80E0      		ldi r24,lo8(0)
 5564 1940 0E94 0000 		call fill
 5565 1944 0894      		sec
 5566 1946 4108      		sbc r4,__zero_reg__
 5567 1948 5108      		sbc r5,__zero_reg__
1103:effect.c      **** 		for (int s=0;s<7;s++){
 5568               		.loc 1 1103 0
 5569 194a 4114      		cp r4,__zero_reg__
 5570 194c 5104      		cpc r5,__zero_reg__
 5571 194e 01F0      		breq .+2
 5572 1950 00C0      		rjmp .L289
 5573 1952 57E0      		ldi r21,lo8(7)
 5574 1954 452E      		mov r4,r21
 5575 1956 512C      		mov r5,__zero_reg__
 5576 1958 00E0      		ldi r16,lo8(0)
 5577 195a 10E0      		ldi r17,hi8(0)
 5578 195c 2224      		clr r2
 5579 195e 3324      		clr r3
 5580               	.LVL447:
 5581               	.L297:
 5582 1960 0F5F      		subi r16,lo8(-(1))
 5583 1962 1F4F      		sbci r17,hi8(-(1))
 5584               	.LBE4:
 5585               	.LBB5:
1130:effect.c      **** 		}
1131:effect.c      **** 
1132:effect.c      **** 
1133:effect.c      **** 		flip = 0;
1134:effect.c      **** 		d = 0;
1135:effect.c      **** 		off = 0;
1136:effect.c      **** 		// back:
1137:effect.c      **** 		for (int s=0;s<7;s++){
1138:effect.c      **** 			if(!flip){
 5586               		.loc 1 1138 0
 5587 1964 2114      		cp r2,__zero_reg__
 5588 1966 3104      		cpc r3,__zero_reg__
 5589 1968 01F4      		brne .L291
 5590               	.LVL448:
1139:effect.c      **** 				off++;
1140:effect.c      **** 				if (off == 4){
 5591               		.loc 1 1140 0
 5592 196a 0430      		cpi r16,4
 5593 196c 1105      		cpc r17,__zero_reg__
 5594 196e 01F4      		brne .L291
1141:effect.c      **** 					flip = 1;
1142:effect.c      **** 					off = 0;
 5595               		.loc 1 1142 0
 5596 1970 00E0      		ldi r16,lo8(0)
 5597 1972 10E0      		ldi r17,hi8(0)
 5598               	.LVL449:
1141:effect.c      **** 					flip = 1;
 5599               		.loc 1 1141 0
 5600 1974 41E0      		ldi r20,lo8(1)
 5601 1976 242E      		mov r2,r20
 5602 1978 312C      		mov r3,__zero_reg__
 5603               	.L291:
 5604               	.LVL450:
1143:effect.c      **** 				}
1144:effect.c      **** 			} else {
1145:effect.c      **** 				off++;
1146:effect.c      **** 			}
1147:effect.c      **** 		        for (x=0; x<8; x++)
1148:effect.c      ****         		{
1149:effect.c      **** 				d = 0;
1150:effect.c      ****                 		for (y=0; y<8; y++)
1151:effect.c      **** 	                	{
1152:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
1153:effect.c      **** 						if (!flip)
1154:effect.c      **** 							setvoxel(y,dybde[8 * off + d++],x);
 5605               		.loc 1 1154 0
 5606 197a 3801      		movw r6,r16
 5607 197c 23E0      		ldi r18,3
 5608 197e 660C      	1:	lsl r6
 5609 1980 771C      		rol r7
 5610 1982 2A95      		dec r18
 5611 1984 01F4      		brne 1b
1155:effect.c      **** 						else
1156:effect.c      **** 							setvoxel(y,dybde[31 - 8 * off - d++],x);
 5612               		.loc 1 1156 0
 5613 1986 37E0      		ldi r19,lo8(7)
 5614 1988 C32E      		mov r12,r19
1147:effect.c      **** 		        for (x=0; x<8; x++)
 5615               		.loc 1 1147 0
 5616 198a 8824      		clr r8
 5617 198c 9924      		clr r9
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5618               		.loc 1 1058 0
 5619 198e 29A1      		ldd r18,Y+33
 5620 1990 3AA1      		ldd r19,Y+34
 5621 1992 2619      		sub r18,r6
 5622 1994 3709      		sbc r19,r7
 5623 1996 3CA3      		std Y+36,r19
 5624 1998 2BA3      		std Y+35,r18
 5625 199a 81E0      		ldi r24,lo8(1)
 5626 199c 90E0      		ldi r25,hi8(1)
 5627 199e 8C0F      		add r24,r28
 5628 19a0 9D1F      		adc r25,r29
 5629 19a2 680E      		add r6,r24
 5630 19a4 791E      		adc r7,r25
 5631 19a6 5801      		movw r10,r16
 5632 19a8 00C0      		rjmp .L292
 5633               	.LVL451:
 5634               	.L295:
1152:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
 5635               		.loc 1 1152 0
 5636 19aa 8DA1      		ldd r24,Y+37
 5637 19ac 6C2D      		mov r22,r12
 5638 19ae 4E2D      		mov r20,r14
 5639 19b0 0E94 0000 		call font_getbitmappixel
 5640 19b4 8823      		tst r24
 5641 19b6 01F0      		breq .L293
1153:effect.c      **** 						if (!flip)
 5642               		.loc 1 1153 0
 5643 19b8 2114      		cp r2,__zero_reg__
 5644 19ba 3104      		cpc r3,__zero_reg__
 5645 19bc 01F4      		brne .L294
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5646               		.loc 1 1058 0
 5647 19be F301      		movw r30,r6
 5648 19c0 E00F      		add r30,r16
 5649 19c2 F11F      		adc r31,r17
1154:effect.c      **** 							setvoxel(y,dybde[8 * off + d++],x);
 5650               		.loc 1 1154 0
 5651 19c4 6081      		ld r22,Z
 5652 19c6 00C0      		rjmp .L322
 5653               	.L294:
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5654               		.loc 1 1058 0
 5655 19c8 EBA1      		ldd r30,Y+35
 5656 19ca FCA1      		ldd r31,Y+36
 5657 19cc EE0D      		add r30,r14
 5658 19ce FF1D      		adc r31,r15
 5659               		.loc 1 1156 0
 5660 19d0 608D      		ldd r22,Z+24
 5661               	.L322:
 5662 19d2 C801      		movw r24,r16
 5663 19d4 70E0      		ldi r23,lo8(0)
 5664 19d6 A401      		movw r20,r8
 5665 19d8 0E94 0000 		call setvoxel
 5666               	.L293:
1150:effect.c      ****                 		for (y=0; y<8; y++)
 5667               		.loc 1 1150 0
 5668 19dc 0F5F      		subi r16,lo8(-(1))
 5669 19de 1F4F      		sbci r17,hi8(-(1))
 5670               	.LVL452:
 5671 19e0 0894      		sec
 5672 19e2 E108      		sbc r14,__zero_reg__
 5673 19e4 F108      		sbc r15,__zero_reg__
 5674 19e6 0830      		cpi r16,8
 5675 19e8 1105      		cpc r17,__zero_reg__
 5676 19ea 01F4      		brne .L295
1147:effect.c      **** 		        for (x=0; x<8; x++)
 5677               		.loc 1 1147 0
 5678 19ec 0894      		sec
 5679 19ee 811C      		adc r8,__zero_reg__
 5680 19f0 911C      		adc r9,__zero_reg__
 5681               	.LVL453:
 5682 19f2 CA94      		dec r12
 5683 19f4 9FEF      		ldi r25,lo8(-1)
 5684 19f6 C916      		cp r12,r25
 5685 19f8 01F0      		breq .L296
 5686               	.LVL454:
 5687               	.L292:
1141:effect.c      **** 					flip = 1;
 5688               		.loc 1 1141 0 discriminator 1
 5689 19fa 97E0      		ldi r25,lo8(7)
 5690 19fc E92E      		mov r14,r25
 5691 19fe F12C      		mov r15,__zero_reg__
 5692 1a00 00E0      		ldi r16,lo8(0)
 5693 1a02 10E0      		ldi r17,hi8(0)
 5694 1a04 00C0      		rjmp .L295
 5695               	.LVL455:
 5696               	.L296:
 5697 1a06 8501      		movw r16,r10
 5698               	.LVL456:
1157:effect.c      **** 					} else {
1158:effect.c      **** 						d++;
1159:effect.c      **** 					}
1160:effect.c      **** 				}
1161:effect.c      **** 			}
1162:effect.c      **** 			delay_ms(delay);
 5699               		.loc 1 1162 0
 5700 1a08 8EA1      		ldd r24,Y+38
 5701 1a0a 9FA1      		ldd r25,Y+39
 5702 1a0c 0E94 0000 		call delay_ms
1163:effect.c      **** 			fill(0x00);
 5703               		.loc 1 1163 0
 5704 1a10 80E0      		ldi r24,lo8(0)
 5705 1a12 0E94 0000 		call fill
 5706 1a16 0894      		sec
 5707 1a18 4108      		sbc r4,__zero_reg__
 5708 1a1a 5108      		sbc r5,__zero_reg__
1137:effect.c      **** 		for (int s=0;s<7;s++){
 5709               		.loc 1 1137 0
 5710 1a1c 4114      		cp r4,__zero_reg__
 5711 1a1e 5104      		cpc r5,__zero_reg__
 5712 1a20 01F0      		breq .+2
 5713 1a22 00C0      		rjmp .L297
 5714 1a24 87E0      		ldi r24,lo8(7)
 5715 1a26 482E      		mov r4,r24
 5716 1a28 512C      		mov r5,__zero_reg__
 5717 1a2a EE24      		clr r14
 5718 1a2c FF24      		clr r15
 5719 1a2e 2224      		clr r2
 5720 1a30 3324      		clr r3
 5721               	.LVL457:
 5722               	.L305:
 5723 1a32 0894      		sec
 5724 1a34 E11C      		adc r14,__zero_reg__
 5725 1a36 F11C      		adc r15,__zero_reg__
 5726               	.LBE5:
 5727               	.LBB6:
1164:effect.c      **** 		}
1165:effect.c      **** 
1166:effect.c      **** 		// other side:
1167:effect.c      **** 		off = 0;
1168:effect.c      **** 		flip = 0;
1169:effect.c      **** 		d = 0;
1170:effect.c      **** 		for (int s=0;s<7;s++){
1171:effect.c      **** 			if(!flip){
 5728               		.loc 1 1171 0
 5729 1a38 2114      		cp r2,__zero_reg__
 5730 1a3a 3104      		cpc r3,__zero_reg__
 5731 1a3c 01F4      		brne .L299
 5732               	.LVL458:
1172:effect.c      **** 				off++;
1173:effect.c      **** 				if (off == 4){
 5733               		.loc 1 1173 0
 5734 1a3e 24E0      		ldi r18,lo8(4)
 5735 1a40 E216      		cp r14,r18
 5736 1a42 F104      		cpc r15,__zero_reg__
 5737 1a44 01F4      		brne .L299
1174:effect.c      **** 					flip = 1;
1175:effect.c      **** 					off = 0;
 5738               		.loc 1 1175 0
 5739 1a46 EE24      		clr r14
 5740 1a48 FF24      		clr r15
 5741               	.LVL459:
1174:effect.c      **** 					flip = 1;
 5742               		.loc 1 1174 0
 5743 1a4a 01E0      		ldi r16,lo8(1)
 5744 1a4c 202E      		mov r2,r16
 5745 1a4e 312C      		mov r3,__zero_reg__
 5746               	.L299:
 5747               	.LVL460:
1176:effect.c      **** 				}
1177:effect.c      **** 			} else {
1178:effect.c      **** 				off++;
1179:effect.c      **** 			}
1180:effect.c      **** 		        for (x=0; x<8; x++)
1181:effect.c      ****         		{
1182:effect.c      **** 				d = 0;
1183:effect.c      ****                 		for (y=0; y<8; y++)
1184:effect.c      **** 	                	{
1185:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
1186:effect.c      **** 						if (!flip)
1187:effect.c      **** 							setvoxel(dybde[8 * off + d++], 7 - y,x);
 5748               		.loc 1 1187 0
 5749 1a50 3701      		movw r6,r14
 5750 1a52 B3E0      		ldi r27,3
 5751 1a54 660C      	1:	lsl r6
 5752 1a56 771C      		rol r7
 5753 1a58 BA95      		dec r27
 5754 1a5a 01F4      		brne 1b
1188:effect.c      **** 						else
1189:effect.c      **** 							setvoxel(dybde[31 - 8 * off - d++],7 - y,x);
 5755               		.loc 1 1189 0
 5756 1a5c 17E0      		ldi r17,lo8(7)
 5757 1a5e C12E      		mov r12,r17
1180:effect.c      **** 		        for (x=0; x<8; x++)
 5758               		.loc 1 1180 0
 5759 1a60 AA24      		clr r10
 5760 1a62 BB24      		clr r11
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5761               		.loc 1 1058 0
 5762 1a64 29A1      		ldd r18,Y+33
 5763 1a66 3AA1      		ldd r19,Y+34
 5764 1a68 2619      		sub r18,r6
 5765 1a6a 3709      		sbc r19,r7
 5766 1a6c 3CA3      		std Y+36,r19
 5767 1a6e 2BA3      		std Y+35,r18
 5768 1a70 81E0      		ldi r24,lo8(1)
 5769 1a72 90E0      		ldi r25,hi8(1)
 5770 1a74 8C0F      		add r24,r28
 5771 1a76 9D1F      		adc r25,r29
 5772 1a78 680E      		add r6,r24
 5773 1a7a 791E      		adc r7,r25
 5774 1a7c 4701      		movw r8,r14
 5775 1a7e 00C0      		rjmp .L300
 5776               	.LVL461:
 5777               	.L303:
1185:effect.c      **** 					if (font_getbitmappixel ( bitmap, 7-x, 7-y)){
 5778               		.loc 1 1185 0
 5779 1a80 8DA1      		ldd r24,Y+37
 5780 1a82 6C2D      		mov r22,r12
 5781 1a84 402F      		mov r20,r16
 5782 1a86 0E94 0000 		call font_getbitmappixel
 5783 1a8a 8823      		tst r24
 5784 1a8c 01F0      		breq .L301
1186:effect.c      **** 						if (!flip)
 5785               		.loc 1 1186 0
 5786 1a8e 2114      		cp r2,__zero_reg__
 5787 1a90 3104      		cpc r3,__zero_reg__
 5788 1a92 01F4      		brne .L302
 5789               	.LVL462:
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5790               		.loc 1 1058 0
 5791 1a94 F301      		movw r30,r6
 5792 1a96 EE0D      		add r30,r14
 5793 1a98 FF1D      		adc r31,r15
 5794 1a9a 3197      		sbiw r30,1
1187:effect.c      **** 							setvoxel(dybde[8 * off + d++], 7 - y,x);
 5795               		.loc 1 1187 0
 5796 1a9c 8081      		ld r24,Z
 5797 1a9e 00C0      		rjmp .L323
 5798               	.LVL463:
 5799               	.L302:
1058:effect.c      **** void effect_smileyspin (int count, int delay, char bitmap)
 5800               		.loc 1 1058 0
 5801 1aa0 EBA1      		ldd r30,Y+35
 5802 1aa2 FCA1      		ldd r31,Y+36
 5803 1aa4 E00F      		add r30,r16
 5804 1aa6 F11F      		adc r31,r17
 5805               		.loc 1 1189 0
 5806 1aa8 808D      		ldd r24,Z+24
 5807               	.L323:
 5808 1aaa 90E0      		ldi r25,lo8(0)
 5809 1aac B801      		movw r22,r16
 5810 1aae A501      		movw r20,r10
 5811 1ab0 0E94 0000 		call setvoxel
 5812               	.LVL464:
 5813               	.L301:
 5814 1ab4 0894      		sec
 5815 1ab6 E11C      		adc r14,__zero_reg__
 5816 1ab8 F11C      		adc r15,__zero_reg__
 5817 1aba 0150      		subi r16,lo8(-(-1))
 5818 1abc 1040      		sbci r17,hi8(-(-1))
1183:effect.c      ****                 		for (y=0; y<8; y++)
 5819               		.loc 1 1183 0
 5820 1abe 9FEF      		ldi r25,hi8(-1)
 5821 1ac0 0F3F      		cpi r16,lo8(-1)
 5822 1ac2 1907      		cpc r17,r25
 5823 1ac4 01F4      		brne .L303
1180:effect.c      **** 		        for (x=0; x<8; x++)
 5824               		.loc 1 1180 0
 5825 1ac6 0894      		sec
 5826 1ac8 A11C      		adc r10,__zero_reg__
 5827 1aca B11C      		adc r11,__zero_reg__
 5828               	.LVL465:
 5829 1acc CA94      		dec r12
 5830 1ace 2FEF      		ldi r18,lo8(-1)
 5831 1ad0 C216      		cp r12,r18
 5832 1ad2 01F0      		breq .L304
 5833               	.LVL466:
 5834               	.L300:
1174:effect.c      **** 					flip = 1;
 5835               		.loc 1 1174 0 discriminator 1
 5836 1ad4 07E0      		ldi r16,lo8(7)
 5837 1ad6 10E0      		ldi r17,hi8(7)
 5838 1ad8 A1E0      		ldi r26,lo8(1)
 5839 1ada EA2E      		mov r14,r26
 5840 1adc F12C      		mov r15,__zero_reg__
 5841 1ade 00C0      		rjmp .L303
 5842               	.LVL467:
 5843               	.L304:
 5844 1ae0 7401      		movw r14,r8
1190:effect.c      **** 					} else {
1191:effect.c      **** 						d++;
1192:effect.c      **** 					}
1193:effect.c      **** 				}
1194:effect.c      **** 			}
1195:effect.c      **** 			delay_ms(delay);
 5845               		.loc 1 1195 0
 5846 1ae2 8EA1      		ldd r24,Y+38
 5847 1ae4 9FA1      		ldd r25,Y+39
 5848 1ae6 0E94 0000 		call delay_ms
1196:effect.c      **** 			fill(0x00);
 5849               		.loc 1 1196 0
 5850 1aea 80E0      		ldi r24,lo8(0)
 5851 1aec 0E94 0000 		call fill
 5852 1af0 0894      		sec
 5853 1af2 4108      		sbc r4,__zero_reg__
 5854 1af4 5108      		sbc r5,__zero_reg__
1170:effect.c      **** 		for (int s=0;s<7;s++){
 5855               		.loc 1 1170 0
 5856 1af6 4114      		cp r4,__zero_reg__
 5857 1af8 5104      		cpc r5,__zero_reg__
 5858 1afa 01F0      		breq .+2
 5859 1afc 00C0      		rjmp .L305
 5860               	.LBE6:
1064:effect.c      **** 	for(int i = 0; i<count; i++)
 5861               		.loc 1 1064 0
 5862 1afe 28A5      		ldd r18,Y+40
 5863 1b00 39A5      		ldd r19,Y+41
 5864 1b02 2F5F      		subi r18,lo8(-(1))
 5865 1b04 3F4F      		sbci r19,hi8(-(1))
 5866 1b06 39A7      		std Y+41,r19
 5867 1b08 28A7      		std Y+40,r18
 5868               	.LVL468:
 5869               	.L273:
1064:effect.c      **** 	for(int i = 0; i<count; i++)
 5870               		.loc 1 1064 0 is_stmt 0 discriminator 1
 5871 1b0a 28A5      		ldd r18,Y+40
 5872 1b0c 39A5      		ldd r19,Y+41
 5873 1b0e 8AA5      		ldd r24,Y+42
 5874 1b10 9BA5      		ldd r25,Y+43
 5875 1b12 2817      		cp r18,r24
 5876 1b14 3907      		cpc r19,r25
 5877 1b16 04F4      		brge .+2
 5878 1b18 00C0      		rjmp .L310
 5879               	/* epilogue start */
 5880               	.LBE2:
1197:effect.c      **** 		}
1198:effect.c      **** 
1199:effect.c      **** 	}
1200:effect.c      **** }
 5881               		.loc 1 1200 0 is_stmt 1
 5882 1b1a AB96      		adiw r28,43
 5883 1b1c 0FB6      		in __tmp_reg__,__SREG__
 5884 1b1e F894      		cli
 5885 1b20 DEBF      		out __SP_H__,r29
 5886 1b22 0FBE      		out __SREG__,__tmp_reg__
 5887 1b24 CDBF      		out __SP_L__,r28
 5888 1b26 DF91      		pop r29
 5889 1b28 CF91      		pop r28
 5890 1b2a 1F91      		pop r17
 5891 1b2c 0F91      		pop r16
 5892 1b2e FF90      		pop r15
 5893 1b30 EF90      		pop r14
 5894 1b32 DF90      		pop r13
 5895 1b34 CF90      		pop r12
 5896 1b36 BF90      		pop r11
 5897 1b38 AF90      		pop r10
 5898 1b3a 9F90      		pop r9
 5899 1b3c 8F90      		pop r8
 5900 1b3e 7F90      		pop r7
 5901 1b40 6F90      		pop r6
 5902 1b42 5F90      		pop r5
 5903 1b44 4F90      		pop r4
 5904 1b46 3F90      		pop r3
 5905 1b48 2F90      		pop r2
 5906 1b4a 0895      		ret
 5907               		.cfi_endproc
 5908               	.LFE26:
 5910               	.global	effect_pathmove
 5912               	effect_pathmove:
 5913               	.LFB27:
1201:effect.c      **** 
1202:effect.c      **** 
1203:effect.c      **** void effect_pathmove (const unsigned char *path, int length)
1204:effect.c      **** {
 5914               		.loc 1 1204 0
 5915               		.cfi_startproc
 5916               	.LVL469:
 5917 1b4c AF92      		push r10
 5918               	.LCFI307:
 5919               		.cfi_def_cfa_offset 3
 5920               		.cfi_offset 10, -2
 5921 1b4e BF92      		push r11
 5922               	.LCFI308:
 5923               		.cfi_def_cfa_offset 4
 5924               		.cfi_offset 11, -3
 5925 1b50 CF92      		push r12
 5926               	.LCFI309:
 5927               		.cfi_def_cfa_offset 5
 5928               		.cfi_offset 12, -4
 5929 1b52 DF92      		push r13
 5930               	.LCFI310:
 5931               		.cfi_def_cfa_offset 6
 5932               		.cfi_offset 13, -5
 5933 1b54 EF92      		push r14
 5934               	.LCFI311:
 5935               		.cfi_def_cfa_offset 7
 5936               		.cfi_offset 14, -6
 5937 1b56 FF92      		push r15
 5938               	.LCFI312:
 5939               		.cfi_def_cfa_offset 8
 5940               		.cfi_offset 15, -7
 5941 1b58 0F93      		push r16
 5942               	.LCFI313:
 5943               		.cfi_def_cfa_offset 9
 5944               		.cfi_offset 16, -8
 5945 1b5a 1F93      		push r17
 5946               	.LCFI314:
 5947               		.cfi_def_cfa_offset 10
 5948               		.cfi_offset 17, -9
 5949 1b5c CF93      		push r28
 5950               	.LCFI315:
 5951               		.cfi_def_cfa_offset 11
 5952               		.cfi_offset 28, -10
 5953 1b5e DF93      		push r29
 5954               	.LCFI316:
 5955               		.cfi_def_cfa_offset 12
 5956               		.cfi_offset 29, -11
 5957               	/* prologue: function */
 5958               	/* frame size = 0 */
 5959               	/* stack size = 10 */
 5960               	.L__stack_usage = 10
 5961 1b60 6C01      		movw r12,r24
 5962 1b62 EB01      		movw r28,r22
 5963 1b64 00C0      		rjmp .L331
 5964               	.LVL470:
 5965               	.L328:
1205:effect.c      **** 	int i,z;
1206:effect.c      **** 	unsigned char state;
1207:effect.c      **** 	
1208:effect.c      **** 	for (i= (length - 1); i >= 1; i--)
 5966               		.loc 1 1208 0
 5967 1b66 00E0      		ldi r16,lo8(0)
 5968 1b68 10E0      		ldi r17,hi8(0)
1203:effect.c      **** void effect_pathmove (const unsigned char *path, int length)
 5969               		.loc 1 1203 0
 5970 1b6a 7601      		movw r14,r12
 5971 1b6c EC0E      		add r14,r28
 5972 1b6e FD1E      		adc r15,r29
 5973 1b70 5701      		movw r10,r14
 5974 1b72 0894      		sec
 5975 1b74 A108      		sbc r10,__zero_reg__
 5976 1b76 B108      		sbc r11,__zero_reg__
 5977               	.L326:
1209:effect.c      **** 	{
1210:effect.c      **** 		for (z = 0; z < 8; z++)
1211:effect.c      **** 		{
1212:effect.c      **** 			state = getvoxel(((path[(i - 1)] >> 4) & 0x0f), (path[(i - 1)] & 0x0f), z);
 5978               		.loc 1 1212 0 discriminator 2
 5979 1b78 F501      		movw r30,r10
 5980 1b7a 6081      		ld r22,Z
 5981 1b7c 862F      		mov r24,r22
 5982 1b7e 8295      		swap r24
 5983 1b80 8F70      		andi r24,lo8(15)
 5984 1b82 70E0      		ldi r23,lo8(0)
 5985 1b84 6F70      		andi r22,lo8(15)
 5986 1b86 7070      		andi r23,hi8(15)
 5987 1b88 90E0      		ldi r25,lo8(0)
 5988 1b8a A801      		movw r20,r16
 5989 1b8c 0E94 0000 		call getvoxel
 5990 1b90 282F      		mov r18,r24
 5991               	.LVL471:
1213:effect.c      **** 			altervoxel(((path[i] >> 4) & 0x0f), (path[i] & 0x0f), z, state);
 5992               		.loc 1 1213 0 discriminator 2
 5993 1b92 F701      		movw r30,r14
 5994 1b94 6081      		ld r22,Z
 5995 1b96 862F      		mov r24,r22
 5996               	.LVL472:
 5997 1b98 8295      		swap r24
 5998 1b9a 8F70      		andi r24,lo8(15)
 5999 1b9c 70E0      		ldi r23,lo8(0)
 6000 1b9e 6F70      		andi r22,lo8(15)
 6001 1ba0 7070      		andi r23,hi8(15)
 6002 1ba2 90E0      		ldi r25,lo8(0)
 6003 1ba4 A801      		movw r20,r16
 6004 1ba6 30E0      		ldi r19,lo8(0)
 6005 1ba8 0E94 0000 		call altervoxel
 6006               	.LVL473:
1210:effect.c      **** 		for (z = 0; z < 8; z++)
 6007               		.loc 1 1210 0 discriminator 2
 6008 1bac 0F5F      		subi r16,lo8(-(1))
 6009 1bae 1F4F      		sbci r17,hi8(-(1))
 6010               	.LVL474:
 6011 1bb0 0830      		cpi r16,8
 6012 1bb2 1105      		cpc r17,__zero_reg__
 6013 1bb4 01F4      		brne .L326
 6014               	.LVL475:
 6015               	.L331:
1208:effect.c      **** 	for (i= (length - 1); i >= 1; i--)
 6016               		.loc 1 1208 0
 6017 1bb6 2197      		sbiw r28,1
 6018               	.LVL476:
 6019 1bb8 1C16      		cp __zero_reg__,r28
 6020 1bba 1D06      		cpc __zero_reg__,r29
 6021 1bbc 04F0      		brlt .L328
 6022 1bbe C0E0      		ldi r28,lo8(0)
 6023 1bc0 D0E0      		ldi r29,hi8(0)
 6024               	.LVL477:
 6025               	.L327:
1214:effect.c      **** 		}
1215:effect.c      **** 	}
1216:effect.c      **** 	for (i = 0;i < 8; i++)
1217:effect.c      **** 	{
1218:effect.c      **** 		clrvoxel(((path[0] >> 4) & 0x0f), (path[0] & 0x0f), i);
 6026               		.loc 1 1218 0 discriminator 2
 6027 1bc2 F601      		movw r30,r12
 6028 1bc4 6081      		ld r22,Z
 6029 1bc6 862F      		mov r24,r22
 6030 1bc8 8295      		swap r24
 6031 1bca 8F70      		andi r24,lo8(15)
 6032 1bcc 70E0      		ldi r23,lo8(0)
 6033 1bce 6F70      		andi r22,lo8(15)
 6034 1bd0 7070      		andi r23,hi8(15)
 6035 1bd2 90E0      		ldi r25,lo8(0)
 6036 1bd4 AE01      		movw r20,r28
 6037 1bd6 0E94 0000 		call clrvoxel
1216:effect.c      **** 	for (i = 0;i < 8; i++)
 6038               		.loc 1 1216 0 discriminator 2
 6039 1bda 2196      		adiw r28,1
 6040               	.LVL478:
 6041 1bdc C830      		cpi r28,8
 6042 1bde D105      		cpc r29,__zero_reg__
 6043 1be0 01F4      		brne .L327
 6044               	/* epilogue start */
1219:effect.c      **** 	}
1220:effect.c      **** }
 6045               		.loc 1 1220 0
 6046 1be2 DF91      		pop r29
 6047 1be4 CF91      		pop r28
 6048               	.LVL479:
 6049 1be6 1F91      		pop r17
 6050 1be8 0F91      		pop r16
 6051 1bea FF90      		pop r15
 6052 1bec EF90      		pop r14
 6053 1bee DF90      		pop r13
 6054 1bf0 CF90      		pop r12
 6055               	.LVL480:
 6056 1bf2 BF90      		pop r11
 6057 1bf4 AF90      		pop r10
 6058 1bf6 0895      		ret
 6059               		.cfi_endproc
 6060               	.LFE27:
 6062               	.global	effect_rand_patharound
 6064               	effect_rand_patharound:
 6065               	.LFB28:
1221:effect.c      **** 
1222:effect.c      **** void effect_rand_patharound (int iterations, int delay)
1223:effect.c      **** {
 6066               		.loc 1 1223 0
 6067               		.cfi_startproc
 6068               	.LVL481:
 6069 1bf8 4F92      		push r4
 6070               	.LCFI317:
 6071               		.cfi_def_cfa_offset 3
 6072               		.cfi_offset 4, -2
 6073 1bfa 5F92      		push r5
 6074               	.LCFI318:
 6075               		.cfi_def_cfa_offset 4
 6076               		.cfi_offset 5, -3
 6077 1bfc 6F92      		push r6
 6078               	.LCFI319:
 6079               		.cfi_def_cfa_offset 5
 6080               		.cfi_offset 6, -4
 6081 1bfe 7F92      		push r7
 6082               	.LCFI320:
 6083               		.cfi_def_cfa_offset 6
 6084               		.cfi_offset 7, -5
 6085 1c00 8F92      		push r8
 6086               	.LCFI321:
 6087               		.cfi_def_cfa_offset 7
 6088               		.cfi_offset 8, -6
 6089 1c02 9F92      		push r9
 6090               	.LCFI322:
 6091               		.cfi_def_cfa_offset 8
 6092               		.cfi_offset 9, -7
 6093 1c04 BF92      		push r11
 6094               	.LCFI323:
 6095               		.cfi_def_cfa_offset 9
 6096               		.cfi_offset 11, -8
 6097 1c06 CF92      		push r12
 6098               	.LCFI324:
 6099               		.cfi_def_cfa_offset 10
 6100               		.cfi_offset 12, -9
 6101 1c08 DF92      		push r13
 6102               	.LCFI325:
 6103               		.cfi_def_cfa_offset 11
 6104               		.cfi_offset 13, -10
 6105 1c0a EF92      		push r14
 6106               	.LCFI326:
 6107               		.cfi_def_cfa_offset 12
 6108               		.cfi_offset 14, -11
 6109 1c0c FF92      		push r15
 6110               	.LCFI327:
 6111               		.cfi_def_cfa_offset 13
 6112               		.cfi_offset 15, -12
 6113 1c0e 0F93      		push r16
 6114               	.LCFI328:
 6115               		.cfi_def_cfa_offset 14
 6116               		.cfi_offset 16, -13
 6117 1c10 1F93      		push r17
 6118               	.LCFI329:
 6119               		.cfi_def_cfa_offset 15
 6120               		.cfi_offset 17, -14
 6121 1c12 CF93      		push r28
 6122               	.LCFI330:
 6123               		.cfi_def_cfa_offset 16
 6124               		.cfi_offset 28, -15
 6125 1c14 DF93      		push r29
 6126               	.LCFI331:
 6127               		.cfi_def_cfa_offset 17
 6128               		.cfi_offset 29, -16
 6129 1c16 CDB7      		in r28,__SP_L__
 6130 1c18 DEB7      		in r29,__SP_H__
 6131 1c1a 6C97      		sbiw r28,28
 6132               	.LCFI332:
 6133               		.cfi_def_cfa 28, 45
 6134 1c1c 0FB6      		in __tmp_reg__,__SREG__
 6135 1c1e F894      		cli
 6136 1c20 DEBF      		out __SP_H__,r29
 6137 1c22 0FBE      		out __SREG__,__tmp_reg__
 6138 1c24 CDBF      		out __SP_L__,r28
 6139               	/* prologue: function */
 6140               	/* frame size = 28 */
 6141               	/* stack size = 43 */
 6142               	.L__stack_usage = 43
 6143 1c26 4C01      		movw r8,r24
 6144 1c28 3B01      		movw r6,r22
 6145               	.LVL482:
1224:effect.c      **** 	int z, dz, i;
1225:effect.c      **** 	z = 4;
1226:effect.c      **** 	unsigned char path[28];
1227:effect.c      **** 	
1228:effect.c      **** 	font_getpath(0, path, 28);
 6146               		.loc 1 1228 0
 6147 1c2a 80E0      		ldi r24,lo8(0)
 6148               	.LVL483:
 6149 1c2c 7E01      		movw r14,r28
 6150 1c2e 0894      		sec
 6151 1c30 E11C      		adc r14,__zero_reg__
 6152 1c32 F11C      		adc r15,__zero_reg__
 6153 1c34 B701      		movw r22,r14
 6154               	.LVL484:
 6155 1c36 4CE1      		ldi r20,lo8(28)
 6156 1c38 50E0      		ldi r21,hi8(28)
 6157 1c3a 0E94 0000 		call font_getpath
 6158               	.LVL485:
1229:effect.c      **** 	
1230:effect.c      **** 	for (i = 0; i < iterations; i++)
 6159               		.loc 1 1230 0
 6160 1c3e CC24      		clr r12
 6161 1c40 DD24      		clr r13
1225:effect.c      **** 	z = 4;
 6162               		.loc 1 1225 0
 6163 1c42 04E0      		ldi r16,lo8(4)
 6164 1c44 10E0      		ldi r17,hi8(4)
1231:effect.c      **** 	{
1232:effect.c      **** 		dz = ((rand() % 3) - 1);
 6165               		.loc 1 1232 0
 6166 1c46 E3E0      		ldi r30,lo8(3)
 6167 1c48 4E2E      		mov r4,r30
 6168 1c4a 512C      		mov r5,__zero_reg__
1233:effect.c      **** 		z += dz;
1234:effect.c      **** 		
1235:effect.c      **** 		if (z > 7)
1236:effect.c      **** 		{
1237:effect.c      **** 			z = 7;
1238:effect.c      **** 		}
1239:effect.c      **** 			
1240:effect.c      **** 		if (z < 0)
1241:effect.c      **** 		{
1242:effect.c      **** 			z = 0;
1243:effect.c      **** 		}
1244:effect.c      **** 		
1245:effect.c      **** 		effect_pathmove(path, 28);
 6169               		.loc 1 1245 0
 6170 1c4c BE2C      		mov r11,r14
 6171 1c4e EF2C      		mov r14,r15
1230:effect.c      **** 	for (i = 0; i < iterations; i++)
 6172               		.loc 1 1230 0
 6173 1c50 00C0      		rjmp .L333
 6174               	.LVL486:
 6175               	.L336:
1232:effect.c      **** 		dz = ((rand() % 3) - 1);
 6176               		.loc 1 1232 0
 6177 1c52 0E94 0000 		call rand
 6178               	.LVL487:
 6179 1c56 B201      		movw r22,r4
 6180 1c58 0E94 0000 		call __divmodhi4
 6181               	.LVL488:
 6182 1c5c 0197      		sbiw r24,1
1233:effect.c      **** 		z += dz;
 6183               		.loc 1 1233 0
 6184 1c5e 080F      		add r16,r24
 6185 1c60 191F      		adc r17,r25
 6186               	.LVL489:
1235:effect.c      **** 		if (z > 7)
 6187               		.loc 1 1235 0
 6188 1c62 0830      		cpi r16,8
 6189 1c64 1105      		cpc r17,__zero_reg__
 6190 1c66 04F4      		brge .L337
1240:effect.c      **** 		if (z < 0)
 6191               		.loc 1 1240 0
 6192 1c68 17FD      		sbrc r17,7
 6193 1c6a 00C0      		rjmp .L338
 6194 1c6c 00C0      		rjmp .L335
 6195               	.L337:
1237:effect.c      **** 			z = 7;
 6196               		.loc 1 1237 0
 6197 1c6e 07E0      		ldi r16,lo8(7)
 6198 1c70 10E0      		ldi r17,hi8(7)
 6199               	.LVL490:
 6200 1c72 00C0      		rjmp .L335
 6201               	.LVL491:
 6202               	.L338:
1242:effect.c      **** 			z = 0;
 6203               		.loc 1 1242 0
 6204 1c74 00E0      		ldi r16,lo8(0)
 6205 1c76 10E0      		ldi r17,hi8(0)
 6206               	.LVL492:
 6207               	.L335:
 6208               		.loc 1 1245 0
 6209 1c78 8B2D      		mov r24,r11
 6210 1c7a 9E2D      		mov r25,r14
 6211 1c7c 6CE1      		ldi r22,lo8(28)
 6212 1c7e 70E0      		ldi r23,hi8(28)
 6213 1c80 0E94 0000 		call effect_pathmove
1246:effect.c      **** 		setvoxel(0, 7, z);
 6214               		.loc 1 1246 0
 6215 1c84 80E0      		ldi r24,lo8(0)
 6216 1c86 90E0      		ldi r25,hi8(0)
 6217 1c88 67E0      		ldi r22,lo8(7)
 6218 1c8a 70E0      		ldi r23,hi8(7)
 6219 1c8c A801      		movw r20,r16
 6220 1c8e 0E94 0000 		call setvoxel
1247:effect.c      **** 		delay_ms(delay);
 6221               		.loc 1 1247 0
 6222 1c92 C301      		movw r24,r6
 6223 1c94 0E94 0000 		call delay_ms
1230:effect.c      **** 	for (i = 0; i < iterations; i++)
 6224               		.loc 1 1230 0
 6225 1c98 0894      		sec
 6226 1c9a C11C      		adc r12,__zero_reg__
 6227 1c9c D11C      		adc r13,__zero_reg__
 6228               	.LVL493:
 6229               	.L333:
1230:effect.c      **** 	for (i = 0; i < iterations; i++)
 6230               		.loc 1 1230 0 is_stmt 0 discriminator 1
 6231 1c9e C814      		cp r12,r8
 6232 1ca0 D904      		cpc r13,r9
 6233 1ca2 04F0      		brlt .L336
 6234               	/* epilogue start */
1248:effect.c      **** 	}
1249:effect.c      **** }
 6235               		.loc 1 1249 0 is_stmt 1
 6236 1ca4 6C96      		adiw r28,28
 6237 1ca6 0FB6      		in __tmp_reg__,__SREG__
 6238 1ca8 F894      		cli
 6239 1caa DEBF      		out __SP_H__,r29
 6240 1cac 0FBE      		out __SREG__,__tmp_reg__
 6241 1cae CDBF      		out __SP_L__,r28
 6242 1cb0 DF91      		pop r29
 6243 1cb2 CF91      		pop r28
 6244 1cb4 1F91      		pop r17
 6245 1cb6 0F91      		pop r16
 6246               	.LVL494:
 6247 1cb8 FF90      		pop r15
 6248 1cba EF90      		pop r14
 6249 1cbc DF90      		pop r13
 6250 1cbe CF90      		pop r12
 6251               	.LVL495:
 6252 1cc0 BF90      		pop r11
 6253 1cc2 9F90      		pop r9
 6254 1cc4 8F90      		pop r8
 6255               	.LVL496:
 6256 1cc6 7F90      		pop r7
 6257 1cc8 6F90      		pop r6
 6258               	.LVL497:
 6259 1cca 5F90      		pop r5
 6260 1ccc 4F90      		pop r4
 6261 1cce 0895      		ret
 6262               		.cfi_endproc
 6263               	.LFE28:
 6265               	.global	effect_pathspiral
 6267               	effect_pathspiral:
 6268               	.LFB29:
1250:effect.c      **** 
1251:effect.c      **** void effect_pathspiral (int iterations, int delay)
1252:effect.c      **** {
 6269               		.loc 1 1252 0
 6270               		.cfi_startproc
 6271               	.LVL498:
 6272 1cd0 6F92      		push r6
 6273               	.LCFI333:
 6274               		.cfi_def_cfa_offset 3
 6275               		.cfi_offset 6, -2
 6276 1cd2 7F92      		push r7
 6277               	.LCFI334:
 6278               		.cfi_def_cfa_offset 4
 6279               		.cfi_offset 7, -3
 6280 1cd4 8F92      		push r8
 6281               	.LCFI335:
 6282               		.cfi_def_cfa_offset 5
 6283               		.cfi_offset 8, -4
 6284 1cd6 9F92      		push r9
 6285               	.LCFI336:
 6286               		.cfi_def_cfa_offset 6
 6287               		.cfi_offset 9, -5
 6288 1cd8 AF92      		push r10
 6289               	.LCFI337:
 6290               		.cfi_def_cfa_offset 7
 6291               		.cfi_offset 10, -6
 6292 1cda BF92      		push r11
 6293               	.LCFI338:
 6294               		.cfi_def_cfa_offset 8
 6295               		.cfi_offset 11, -7
 6296 1cdc DF92      		push r13
 6297               	.LCFI339:
 6298               		.cfi_def_cfa_offset 9
 6299               		.cfi_offset 13, -8
 6300 1cde EF92      		push r14
 6301               	.LCFI340:
 6302               		.cfi_def_cfa_offset 10
 6303               		.cfi_offset 14, -9
 6304 1ce0 FF92      		push r15
 6305               	.LCFI341:
 6306               		.cfi_def_cfa_offset 11
 6307               		.cfi_offset 15, -10
 6308 1ce2 0F93      		push r16
 6309               	.LCFI342:
 6310               		.cfi_def_cfa_offset 12
 6311               		.cfi_offset 16, -11
 6312 1ce4 1F93      		push r17
 6313               	.LCFI343:
 6314               		.cfi_def_cfa_offset 13
 6315               		.cfi_offset 17, -12
 6316 1ce6 CF93      		push r28
 6317               	.LCFI344:
 6318               		.cfi_def_cfa_offset 14
 6319               		.cfi_offset 28, -13
 6320 1ce8 DF93      		push r29
 6321               	.LCFI345:
 6322               		.cfi_def_cfa_offset 15
 6323               		.cfi_offset 29, -14
 6324 1cea CDB7      		in r28,__SP_L__
 6325 1cec DEB7      		in r29,__SP_H__
 6326 1cee 6097      		sbiw r28,16
 6327               	.LCFI346:
 6328               		.cfi_def_cfa 28, 31
 6329 1cf0 0FB6      		in __tmp_reg__,__SREG__
 6330 1cf2 F894      		cli
 6331 1cf4 DEBF      		out __SP_H__,r29
 6332 1cf6 0FBE      		out __SREG__,__tmp_reg__
 6333 1cf8 CDBF      		out __SP_L__,r28
 6334               	/* prologue: function */
 6335               	/* frame size = 16 */
 6336               	/* stack size = 29 */
 6337               	.L__stack_usage = 29
 6338 1cfa 5C01      		movw r10,r24
 6339 1cfc 4B01      		movw r8,r22
1253:effect.c      **** 	int i;
1254:effect.c      **** 	unsigned char path[16];
1255:effect.c      **** 	
1256:effect.c      **** 	font_getpath(1, path, 16);
 6340               		.loc 1 1256 0
 6341 1cfe 81E0      		ldi r24,lo8(1)
 6342               	.LVL499:
 6343 1d00 7E01      		movw r14,r28
 6344 1d02 0894      		sec
 6345 1d04 E11C      		adc r14,__zero_reg__
 6346 1d06 F11C      		adc r15,__zero_reg__
 6347 1d08 B701      		movw r22,r14
 6348               	.LVL500:
 6349 1d0a 40E1      		ldi r20,lo8(16)
 6350 1d0c 50E0      		ldi r21,hi8(16)
 6351 1d0e 0E94 0000 		call font_getpath
 6352               	.LVL501:
1257:effect.c      **** 	
1258:effect.c      **** 	for (i = 0; i < iterations; i++)
 6353               		.loc 1 1258 0
 6354 1d12 00E0      		ldi r16,lo8(0)
 6355 1d14 10E0      		ldi r17,hi8(0)
1259:effect.c      **** 	{
1260:effect.c      **** 		setvoxel(4, 0, i % 8);
 6356               		.loc 1 1260 0
 6357 1d16 F8E0      		ldi r31,lo8(8)
 6358 1d18 6F2E      		mov r6,r31
 6359 1d1a 712C      		mov r7,__zero_reg__
1261:effect.c      **** 		delay_ms(delay);
1262:effect.c      **** 		effect_pathmove(path, 28);
 6360               		.loc 1 1262 0
 6361 1d1c DE2C      		mov r13,r14
 6362 1d1e EF2C      		mov r14,r15
1258:effect.c      **** 	for (i = 0; i < iterations; i++)
 6363               		.loc 1 1258 0
 6364 1d20 00C0      		rjmp .L340
 6365               	.LVL502:
 6366               	.L341:
1260:effect.c      **** 		setvoxel(4, 0, i % 8);
 6367               		.loc 1 1260 0 discriminator 2
 6368 1d22 C801      		movw r24,r16
 6369 1d24 B301      		movw r22,r6
 6370 1d26 0E94 0000 		call __divmodhi4
 6371 1d2a AC01      		movw r20,r24
 6372 1d2c 84E0      		ldi r24,lo8(4)
 6373 1d2e 90E0      		ldi r25,hi8(4)
 6374 1d30 60E0      		ldi r22,lo8(0)
 6375 1d32 70E0      		ldi r23,hi8(0)
 6376 1d34 0E94 0000 		call setvoxel
1261:effect.c      **** 		delay_ms(delay);
 6377               		.loc 1 1261 0 discriminator 2
 6378 1d38 C401      		movw r24,r8
 6379 1d3a 0E94 0000 		call delay_ms
 6380               		.loc 1 1262 0 discriminator 2
 6381 1d3e 8D2D      		mov r24,r13
 6382 1d40 9E2D      		mov r25,r14
 6383 1d42 6CE1      		ldi r22,lo8(28)
 6384 1d44 70E0      		ldi r23,hi8(28)
 6385 1d46 0E94 0000 		call effect_pathmove
1258:effect.c      **** 	for (i = 0; i < iterations; i++)
 6386               		.loc 1 1258 0 discriminator 2
 6387 1d4a 0F5F      		subi r16,lo8(-(1))
 6388 1d4c 1F4F      		sbci r17,hi8(-(1))
 6389               	.LVL503:
 6390               	.L340:
1258:effect.c      **** 	for (i = 0; i < iterations; i++)
 6391               		.loc 1 1258 0 is_stmt 0 discriminator 1
 6392 1d4e 0A15      		cp r16,r10
 6393 1d50 1B05      		cpc r17,r11
 6394 1d52 04F0      		brlt .L341
 6395               	/* epilogue start */
1263:effect.c      **** 		
1264:effect.c      **** 	}
1265:effect.c      **** }
 6396               		.loc 1 1265 0 is_stmt 1
 6397 1d54 6096      		adiw r28,16
 6398 1d56 0FB6      		in __tmp_reg__,__SREG__
 6399 1d58 F894      		cli
 6400 1d5a DEBF      		out __SP_H__,r29
 6401 1d5c 0FBE      		out __SREG__,__tmp_reg__
 6402 1d5e CDBF      		out __SP_L__,r28
 6403 1d60 DF91      		pop r29
 6404 1d62 CF91      		pop r28
 6405 1d64 1F91      		pop r17
 6406 1d66 0F91      		pop r16
 6407               	.LVL504:
 6408 1d68 FF90      		pop r15
 6409 1d6a EF90      		pop r14
 6410 1d6c DF90      		pop r13
 6411 1d6e BF90      		pop r11
 6412 1d70 AF90      		pop r10
 6413               	.LVL505:
 6414 1d72 9F90      		pop r9
 6415 1d74 8F90      		pop r8
 6416               	.LVL506:
 6417 1d76 7F90      		pop r7
 6418 1d78 6F90      		pop r6
 6419 1d7a 0895      		ret
 6420               		.cfi_endproc
 6421               	.LFE29:
 6423               	.global	effect_path_text
 6425               	effect_path_text:
 6426               	.LFB30:
1266:effect.c      **** 
1267:effect.c      **** void effect_path_text (int delay, const char *str, unsigned char prgMem)
1268:effect.c      **** {
 6427               		.loc 1 1268 0
 6428               		.cfi_startproc
 6429               	.LVL507:
 6430 1d7c 2F92      		push r2
 6431               	.LCFI347:
 6432               		.cfi_def_cfa_offset 3
 6433               		.cfi_offset 2, -2
 6434 1d7e 3F92      		push r3
 6435               	.LCFI348:
 6436               		.cfi_def_cfa_offset 4
 6437               		.cfi_offset 3, -3
 6438 1d80 4F92      		push r4
 6439               	.LCFI349:
 6440               		.cfi_def_cfa_offset 5
 6441               		.cfi_offset 4, -4
 6442 1d82 5F92      		push r5
 6443               	.LCFI350:
 6444               		.cfi_def_cfa_offset 6
 6445               		.cfi_offset 5, -5
 6446 1d84 6F92      		push r6
 6447               	.LCFI351:
 6448               		.cfi_def_cfa_offset 7
 6449               		.cfi_offset 6, -6
 6450 1d86 7F92      		push r7
 6451               	.LCFI352:
 6452               		.cfi_def_cfa_offset 8
 6453               		.cfi_offset 7, -7
 6454 1d88 8F92      		push r8
 6455               	.LCFI353:
 6456               		.cfi_def_cfa_offset 9
 6457               		.cfi_offset 8, -8
 6458 1d8a 9F92      		push r9
 6459               	.LCFI354:
 6460               		.cfi_def_cfa_offset 10
 6461               		.cfi_offset 9, -9
 6462 1d8c AF92      		push r10
 6463               	.LCFI355:
 6464               		.cfi_def_cfa_offset 11
 6465               		.cfi_offset 10, -10
 6466 1d8e BF92      		push r11
 6467               	.LCFI356:
 6468               		.cfi_def_cfa_offset 12
 6469               		.cfi_offset 11, -11
 6470 1d90 CF92      		push r12
 6471               	.LCFI357:
 6472               		.cfi_def_cfa_offset 13
 6473               		.cfi_offset 12, -12
 6474 1d92 DF92      		push r13
 6475               	.LCFI358:
 6476               		.cfi_def_cfa_offset 14
 6477               		.cfi_offset 13, -13
 6478 1d94 EF92      		push r14
 6479               	.LCFI359:
 6480               		.cfi_def_cfa_offset 15
 6481               		.cfi_offset 14, -14
 6482 1d96 FF92      		push r15
 6483               	.LCFI360:
 6484               		.cfi_def_cfa_offset 16
 6485               		.cfi_offset 15, -15
 6486 1d98 0F93      		push r16
 6487               	.LCFI361:
 6488               		.cfi_def_cfa_offset 17
 6489               		.cfi_offset 16, -16
 6490 1d9a 1F93      		push r17
 6491               	.LCFI362:
 6492               		.cfi_def_cfa_offset 18
 6493               		.cfi_offset 17, -17
 6494 1d9c CF93      		push r28
 6495               	.LCFI363:
 6496               		.cfi_def_cfa_offset 19
 6497               		.cfi_offset 28, -18
 6498 1d9e DF93      		push r29
 6499               	.LCFI364:
 6500               		.cfi_def_cfa_offset 20
 6501               		.cfi_offset 29, -19
 6502 1da0 CDB7      		in r28,__SP_L__
 6503 1da2 DEB7      		in r29,__SP_H__
 6504 1da4 A197      		sbiw r28,33
 6505               	.LCFI365:
 6506               		.cfi_def_cfa 28, 53
 6507 1da6 0FB6      		in __tmp_reg__,__SREG__
 6508 1da8 F894      		cli
 6509 1daa DEBF      		out __SP_H__,r29
 6510 1dac 0FBE      		out __SREG__,__tmp_reg__
 6511 1dae CDBF      		out __SP_L__,r28
 6512               	/* prologue: function */
 6513               	/* frame size = 33 */
 6514               	/* stack size = 51 */
 6515               	.L__stack_usage = 51
 6516 1db0 D82E      		mov r13,r24
 6517 1db2 E92E      		mov r14,r25
 6518 1db4 3B01      		movw r6,r22
 6519 1db6 C42E      		mov r12,r20
 6520               	.LVL508:
1269:effect.c      **** 	int z, i, ii;
1270:effect.c      **** 	z = 4;
1271:effect.c      **** 	unsigned char path[28];
1272:effect.c      **** 	font_getpath(0, path, 28);
 6521               		.loc 1 1272 0
 6522 1db8 80E0      		ldi r24,lo8(0)
 6523               	.LVL509:
 6524 1dba BE01      		movw r22,r28
 6525               	.LVL510:
 6526 1dbc 6A5F      		subi r22,lo8(-(6))
 6527 1dbe 7F4F      		sbci r23,hi8(-(6))
 6528 1dc0 4CE1      		ldi r20,lo8(28)
 6529 1dc2 50E0      		ldi r21,hi8(28)
 6530               	.LVL511:
 6531 1dc4 0E94 0000 		call font_getpath
1273:effect.c      **** 	
1274:effect.c      **** 	unsigned char chr[5];
1275:effect.c      **** 	unsigned char stripe;
1276:effect.c      **** 
1277:effect.c      **** 	unsigned char tempChar = GetChar(str, 0, prgMem);
 6532               		.loc 1 1277 0
 6533 1dc8 C301      		movw r24,r6
 6534 1dca 60E0      		ldi r22,lo8(0)
 6535 1dcc 70E0      		ldi r23,hi8(0)
 6536 1dce 4C2D      		mov r20,r12
 6537 1dd0 0E94 0000 		call GetChar
 6538               	.LVL512:
1278:effect.c      **** 	uint8_t pos = 0;
 6539               		.loc 1 1278 0
 6540 1dd4 FF24      		clr r15
1267:effect.c      **** void effect_path_text (int delay, const char *str, unsigned char prgMem)
 6541               		.loc 1 1267 0
 6542 1dd6 A7E0      		ldi r26,lo8(7)
 6543 1dd8 4A2E      		mov r4,r26
 6544 1dda 512C      		mov r5,__zero_reg__
1279:effect.c      **** 	
1280:effect.c      **** 	while (tempChar != 0)
 6545               		.loc 1 1280 0
 6546 1ddc 00C0      		rjmp .L343
 6547               	.LVL513:
 6548               	.L348:
1281:effect.c      **** 	{
1282:effect.c      **** 		font_getchar(tempChar, chr);
 6549               		.loc 1 1282 0
 6550 1dde BE01      		movw r22,r28
 6551 1de0 6F5F      		subi r22,lo8(-(1))
 6552 1de2 7F4F      		sbci r23,hi8(-(1))
 6553 1de4 0E94 0000 		call font_getchar
 6554               	.LVL514:
 6555 1de8 4E01      		movw r8,r28
 6556 1dea 0894      		sec
 6557 1dec 811C      		adc r8,__zero_reg__
 6558 1dee 911C      		adc r9,__zero_reg__
1283:effect.c      **** 		
1284:effect.c      **** 		for (ii = 0; ii < 5; ii++)
 6559               		.loc 1 1284 0
 6560 1df0 AA24      		clr r10
 6561 1df2 BB24      		clr r11
 6562               	.LVL515:
 6563               	.L347:
1285:effect.c      **** 		{
1286:effect.c      **** 			stripe = chr[ii];
 6564               		.loc 1 1286 0
 6565 1df4 F401      		movw r30,r8
 6566 1df6 2190      		ld r2,Z+
 6567 1df8 4F01      		movw r8,r30
 6568               	.LVL516:
1287:effect.c      **** 			
1288:effect.c      **** 			for (z = 0; z < 8; z++)
 6569               		.loc 1 1288 0
 6570 1dfa 00E0      		ldi r16,lo8(0)
 6571 1dfc 10E0      		ldi r17,hi8(0)
1289:effect.c      **** 			{
1290:effect.c      **** 				if ((stripe >> (7 - z)) & 0x01)
 6572               		.loc 1 1290 0
 6573 1dfe 3324      		clr r3
 6574               	.LVL517:
 6575               	.L346:
1267:effect.c      **** void effect_path_text (int delay, const char *str, unsigned char prgMem)
 6576               		.loc 1 1267 0
 6577 1e00 C201      		movw r24,r4
 6578 1e02 801B      		sub r24,r16
 6579 1e04 910B      		sbc r25,r17
 6580               		.loc 1 1290 0
 6581 1e06 9101      		movw r18,r2
 6582 1e08 00C0      		rjmp 2f
 6583 1e0a 3595      	1:	asr r19
 6584 1e0c 2795      		ror r18
 6585 1e0e 8A95      	2:	dec r24
 6586 1e10 02F4      		brpl 1b
 6587 1e12 20FF      		sbrs r18,0
 6588 1e14 00C0      		rjmp .L344
1291:effect.c      **** 				{
1292:effect.c      **** 					setvoxel(0, 7, z);
 6589               		.loc 1 1292 0
 6590 1e16 80E0      		ldi r24,lo8(0)
 6591 1e18 90E0      		ldi r25,hi8(0)
 6592 1e1a 67E0      		ldi r22,lo8(7)
 6593 1e1c 70E0      		ldi r23,hi8(7)
 6594 1e1e A801      		movw r20,r16
 6595 1e20 0E94 0000 		call setvoxel
 6596 1e24 00C0      		rjmp .L345
 6597               	.L344:
1293:effect.c      **** 				} 
1294:effect.c      **** 				else
1295:effect.c      **** 				{
1296:effect.c      **** 					clrvoxel(0, 7, z);
 6598               		.loc 1 1296 0
 6599 1e26 80E0      		ldi r24,lo8(0)
 6600 1e28 90E0      		ldi r25,hi8(0)
 6601 1e2a 67E0      		ldi r22,lo8(7)
 6602 1e2c 70E0      		ldi r23,hi8(7)
 6603 1e2e A801      		movw r20,r16
 6604 1e30 0E94 0000 		call clrvoxel
 6605               	.L345:
1288:effect.c      **** 			for (z = 0; z < 8; z++)
 6606               		.loc 1 1288 0
 6607 1e34 0F5F      		subi r16,lo8(-(1))
 6608 1e36 1F4F      		sbci r17,hi8(-(1))
 6609               	.LVL518:
 6610 1e38 0830      		cpi r16,8
 6611 1e3a 1105      		cpc r17,__zero_reg__
 6612 1e3c 01F4      		brne .L346
1297:effect.c      **** 				}
1298:effect.c      **** 				
1299:effect.c      **** 			}
1300:effect.c      **** 			effect_pathmove(path, 28);
 6613               		.loc 1 1300 0
 6614 1e3e CE01      		movw r24,r28
 6615 1e40 0696      		adiw r24,6
 6616 1e42 6CE1      		ldi r22,lo8(28)
 6617 1e44 70E0      		ldi r23,hi8(28)
 6618 1e46 0E94 0000 		call effect_pathmove
1301:effect.c      **** 			delay_ms(delay);
 6619               		.loc 1 1301 0
 6620 1e4a 8D2D      		mov r24,r13
 6621 1e4c 9E2D      		mov r25,r14
 6622 1e4e 0E94 0000 		call delay_ms
1284:effect.c      **** 		for (ii = 0; ii < 5; ii++)
 6623               		.loc 1 1284 0
 6624 1e52 0894      		sec
 6625 1e54 A11C      		adc r10,__zero_reg__
 6626 1e56 B11C      		adc r11,__zero_reg__
 6627               	.LVL519:
 6628 1e58 35E0      		ldi r19,lo8(5)
 6629 1e5a A316      		cp r10,r19
 6630 1e5c B104      		cpc r11,__zero_reg__
 6631 1e5e 01F4      		brne .L347
1302:effect.c      **** 		}
1303:effect.c      **** 	
1304:effect.c      **** 		effect_pathmove(path, 28);
 6632               		.loc 1 1304 0
 6633 1e60 CE01      		movw r24,r28
 6634 1e62 0696      		adiw r24,6
 6635 1e64 6CE1      		ldi r22,lo8(28)
 6636 1e66 70E0      		ldi r23,hi8(28)
 6637 1e68 0E94 0000 		call effect_pathmove
1305:effect.c      **** 		delay_ms(delay);
 6638               		.loc 1 1305 0
 6639 1e6c 8D2D      		mov r24,r13
 6640 1e6e 9E2D      		mov r25,r14
 6641 1e70 0E94 0000 		call delay_ms
1306:effect.c      **** 
1307:effect.c      **** 		pos++;
 6642               		.loc 1 1307 0
 6643 1e74 F394      		inc r15
 6644               	.LVL520:
1308:effect.c      **** 		tempChar = GetChar(str, pos, prgMem);
 6645               		.loc 1 1308 0
 6646 1e76 C301      		movw r24,r6
 6647 1e78 6F2D      		mov r22,r15
 6648 1e7a 70E0      		ldi r23,lo8(0)
 6649 1e7c 4C2D      		mov r20,r12
 6650 1e7e 0E94 0000 		call GetChar
 6651               	.LVL521:
 6652               	.L343:
1280:effect.c      **** 	while (tempChar != 0)
 6653               		.loc 1 1280 0 discriminator 1
 6654 1e82 8823      		tst r24
 6655 1e84 01F0      		breq .+2
 6656 1e86 00C0      		rjmp .L348
1280:effect.c      **** 	while (tempChar != 0)
 6657               		.loc 1 1280 0 is_stmt 0
 6658 1e88 0CE1      		ldi r16,lo8(28)
 6659 1e8a 10E0      		ldi r17,hi8(28)
 6660               	.LVL522:
 6661               	.L349:
1309:effect.c      **** 	}
1310:effect.c      **** 
1311:effect.c      **** 	for (i = 0; i < 28; i++)
1312:effect.c      **** 	{
1313:effect.c      **** 		effect_pathmove(path, 28);
 6662               		.loc 1 1313 0 is_stmt 1 discriminator 2
 6663 1e8c CE01      		movw r24,r28
 6664 1e8e 0696      		adiw r24,6
 6665 1e90 6CE1      		ldi r22,lo8(28)
 6666 1e92 70E0      		ldi r23,hi8(28)
 6667 1e94 0E94 0000 		call effect_pathmove
1314:effect.c      **** 		delay_ms(delay);
 6668               		.loc 1 1314 0 discriminator 2
 6669 1e98 8D2D      		mov r24,r13
 6670 1e9a 9E2D      		mov r25,r14
 6671 1e9c 0E94 0000 		call delay_ms
 6672 1ea0 0150      		subi r16,lo8(-(-1))
 6673 1ea2 1040      		sbci r17,hi8(-(-1))
1311:effect.c      **** 	for (i = 0; i < 28; i++)
 6674               		.loc 1 1311 0 discriminator 2
 6675 1ea4 01F4      		brne .L349
 6676               	/* epilogue start */
1315:effect.c      **** 	}
1316:effect.c      **** }
 6677               		.loc 1 1316 0
 6678 1ea6 A196      		adiw r28,33
 6679 1ea8 0FB6      		in __tmp_reg__,__SREG__
 6680 1eaa F894      		cli
 6681 1eac DEBF      		out __SP_H__,r29
 6682 1eae 0FBE      		out __SREG__,__tmp_reg__
 6683 1eb0 CDBF      		out __SP_L__,r28
 6684 1eb2 DF91      		pop r29
 6685 1eb4 CF91      		pop r28
 6686 1eb6 1F91      		pop r17
 6687 1eb8 0F91      		pop r16
 6688 1eba FF90      		pop r15
 6689               	.LVL523:
 6690 1ebc EF90      		pop r14
 6691 1ebe DF90      		pop r13
 6692 1ec0 CF90      		pop r12
 6693               	.LVL524:
 6694 1ec2 BF90      		pop r11
 6695 1ec4 AF90      		pop r10
 6696 1ec6 9F90      		pop r9
 6697 1ec8 8F90      		pop r8
 6698 1eca 7F90      		pop r7
 6699 1ecc 6F90      		pop r6
 6700               	.LVL525:
 6701 1ece 5F90      		pop r5
 6702 1ed0 4F90      		pop r4
 6703 1ed2 3F90      		pop r3
 6704 1ed4 2F90      		pop r2
 6705 1ed6 0895      		ret
 6706               		.cfi_endproc
 6707               	.LFE30:
 6709               	.global	effect_path_bitmap
 6711               	effect_path_bitmap:
 6712               	.LFB31:
1317:effect.c      **** 
1318:effect.c      **** void effect_path_bitmap (int delay, char bitmap, int iterations)
1319:effect.c      **** {
 6713               		.loc 1 1319 0
 6714               		.cfi_startproc
 6715               	.LVL526:
 6716 1ed8 6F92      		push r6
 6717               	.LCFI366:
 6718               		.cfi_def_cfa_offset 3
 6719               		.cfi_offset 6, -2
 6720 1eda 7F92      		push r7
 6721               	.LCFI367:
 6722               		.cfi_def_cfa_offset 4
 6723               		.cfi_offset 7, -3
 6724 1edc 9F92      		push r9
 6725               	.LCFI368:
 6726               		.cfi_def_cfa_offset 5
 6727               		.cfi_offset 9, -4
 6728 1ede AF92      		push r10
 6729               	.LCFI369:
 6730               		.cfi_def_cfa_offset 6
 6731               		.cfi_offset 10, -5
 6732 1ee0 BF92      		push r11
 6733               	.LCFI370:
 6734               		.cfi_def_cfa_offset 7
 6735               		.cfi_offset 11, -6
 6736 1ee2 CF92      		push r12
 6737               	.LCFI371:
 6738               		.cfi_def_cfa_offset 8
 6739               		.cfi_offset 12, -7
 6740 1ee4 DF92      		push r13
 6741               	.LCFI372:
 6742               		.cfi_def_cfa_offset 9
 6743               		.cfi_offset 13, -8
 6744 1ee6 EF92      		push r14
 6745               	.LCFI373:
 6746               		.cfi_def_cfa_offset 10
 6747               		.cfi_offset 14, -9
 6748 1ee8 FF92      		push r15
 6749               	.LCFI374:
 6750               		.cfi_def_cfa_offset 11
 6751               		.cfi_offset 15, -10
 6752 1eea 0F93      		push r16
 6753               	.LCFI375:
 6754               		.cfi_def_cfa_offset 12
 6755               		.cfi_offset 16, -11
 6756 1eec 1F93      		push r17
 6757               	.LCFI376:
 6758               		.cfi_def_cfa_offset 13
 6759               		.cfi_offset 17, -12
 6760 1eee CF93      		push r28
 6761               	.LCFI377:
 6762               		.cfi_def_cfa_offset 14
 6763               		.cfi_offset 28, -13
 6764 1ef0 DF93      		push r29
 6765               	.LCFI378:
 6766               		.cfi_def_cfa_offset 15
 6767               		.cfi_offset 29, -14
 6768 1ef2 CDB7      		in r28,__SP_L__
 6769 1ef4 DEB7      		in r29,__SP_H__
 6770 1ef6 6C97      		sbiw r28,28
 6771               	.LCFI379:
 6772               		.cfi_def_cfa 28, 43
 6773 1ef8 0FB6      		in __tmp_reg__,__SREG__
 6774 1efa F894      		cli
 6775 1efc DEBF      		out __SP_H__,r29
 6776 1efe 0FBE      		out __SREG__,__tmp_reg__
 6777 1f00 CDBF      		out __SP_L__,r28
 6778               	/* prologue: function */
 6779               	/* frame size = 28 */
 6780               	/* stack size = 41 */
 6781               	.L__stack_usage = 41
 6782 1f02 6C01      		movw r12,r24
 6783 1f04 962E      		mov r9,r22
 6784 1f06 3A01      		movw r6,r20
 6785               	.LVL527:
1320:effect.c      **** 	int z, i, ii;
1321:effect.c      **** 	z = 4;
1322:effect.c      **** 	unsigned char path[28];
1323:effect.c      **** 	font_getpath(0,path,28);
 6786               		.loc 1 1323 0
 6787 1f08 80E0      		ldi r24,lo8(0)
 6788               	.LVL528:
 6789 1f0a BE01      		movw r22,r28
 6790               	.LVL529:
 6791 1f0c 6F5F      		subi r22,lo8(-(1))
 6792 1f0e 7F4F      		sbci r23,hi8(-(1))
 6793 1f10 4CE1      		ldi r20,lo8(28)
 6794 1f12 50E0      		ldi r21,hi8(28)
 6795               	.LVL530:
 6796 1f14 0E94 0000 		call font_getpath
 6797               	.LVL531:
1324:effect.c      **** 	
1325:effect.c      **** 	for (i=0; i < iterations; i++)
 6798               		.loc 1 1325 0
 6799 1f18 AA24      		clr r10
 6800 1f1a BB24      		clr r11
 6801 1f1c 00C0      		rjmp .L354
 6802               	.LVL532:
 6803               	.L357:
1326:effect.c      **** 	{	
1327:effect.c      **** 		for (ii = 0; ii < 8; ii++)
1328:effect.c      **** 		{		
1329:effect.c      **** 			for (z = 0; z < 8; z++)
1330:effect.c      **** 			{
1331:effect.c      **** 				if (font_getbitmappixel(bitmap, (7 - z), ii))
 6804               		.loc 1 1331 0
 6805 1f1e 892D      		mov r24,r9
 6806 1f20 612F      		mov r22,r17
 6807 1f22 402F      		mov r20,r16
 6808 1f24 0E94 0000 		call font_getbitmappixel
 6809 1f28 8823      		tst r24
 6810 1f2a 01F0      		breq .L355
1332:effect.c      **** 				{
1333:effect.c      **** 					setvoxel(0, 7, z);
 6811               		.loc 1 1333 0
 6812 1f2c 80E0      		ldi r24,lo8(0)
 6813 1f2e 90E0      		ldi r25,hi8(0)
 6814 1f30 67E0      		ldi r22,lo8(7)
 6815 1f32 70E0      		ldi r23,hi8(7)
 6816 1f34 A701      		movw r20,r14
 6817 1f36 0E94 0000 		call setvoxel
 6818 1f3a 00C0      		rjmp .L356
 6819               	.L355:
1334:effect.c      **** 				}
1335:effect.c      **** 				else
1336:effect.c      **** 				{
1337:effect.c      **** 					clrvoxel(0, 7, z);
 6820               		.loc 1 1337 0
 6821 1f3c 80E0      		ldi r24,lo8(0)
 6822 1f3e 90E0      		ldi r25,hi8(0)
 6823 1f40 67E0      		ldi r22,lo8(7)
 6824 1f42 70E0      		ldi r23,hi8(7)
 6825 1f44 A701      		movw r20,r14
 6826 1f46 0E94 0000 		call clrvoxel
 6827               	.L356:
1329:effect.c      **** 			for (z = 0; z < 8; z++)
 6828               		.loc 1 1329 0
 6829 1f4a 0894      		sec
 6830 1f4c E11C      		adc r14,__zero_reg__
 6831 1f4e F11C      		adc r15,__zero_reg__
 6832               	.LVL533:
 6833 1f50 1150      		subi r17,1
 6834 1f52 00F4      		brcc .L357
1338:effect.c      **** 				}
1339:effect.c      **** 				
1340:effect.c      **** 			}
1341:effect.c      **** 			delay_ms(delay);
 6835               		.loc 1 1341 0
 6836 1f54 C601      		movw r24,r12
 6837 1f56 0E94 0000 		call delay_ms
1342:effect.c      **** 			effect_pathmove(path, 28);
 6838               		.loc 1 1342 0
 6839 1f5a CE01      		movw r24,r28
 6840 1f5c 0196      		adiw r24,1
 6841 1f5e 6CE1      		ldi r22,lo8(28)
 6842 1f60 70E0      		ldi r23,hi8(28)
 6843 1f62 0E94 0000 		call effect_pathmove
 6844 1f66 0F5F      		subi r16,lo8(-(1))
1327:effect.c      **** 		for (ii = 0; ii < 8; ii++)
 6845               		.loc 1 1327 0
 6846 1f68 0830      		cpi r16,lo8(8)
 6847 1f6a 01F4      		brne .L360
 6848 1f6c 00C0      		rjmp .L366
 6849               	.LVL534:
 6850               	.L362:
1325:effect.c      **** 	for (i=0; i < iterations; i++)
 6851               		.loc 1 1325 0
 6852 1f6e 00E0      		ldi r16,lo8(0)
 6853               	.L360:
 6854               	.LVL535:
1319:effect.c      **** {
 6855               		.loc 1 1319 0 discriminator 1
 6856 1f70 17E0      		ldi r17,lo8(7)
 6857 1f72 EE24      		clr r14
 6858 1f74 FF24      		clr r15
 6859 1f76 00C0      		rjmp .L357
 6860               	.LVL536:
 6861               	.L366:
1327:effect.c      **** 		for (ii = 0; ii < 8; ii++)
 6862               		.loc 1 1327 0
 6863 1f78 04E1      		ldi r16,lo8(20)
 6864 1f7a 10E0      		ldi r17,hi8(20)
 6865               	.L359:
1343:effect.c      **** 		}
1344:effect.c      **** 	
1345:effect.c      **** 		for (ii = 0; ii < 20; ii++)
1346:effect.c      **** 		{
1347:effect.c      **** 			delay_ms(delay);
 6866               		.loc 1 1347 0 discriminator 2
 6867 1f7c C601      		movw r24,r12
 6868 1f7e 0E94 0000 		call delay_ms
1348:effect.c      **** 			effect_pathmove(path, 28);
 6869               		.loc 1 1348 0 discriminator 2
 6870 1f82 CE01      		movw r24,r28
 6871 1f84 0196      		adiw r24,1
 6872 1f86 6CE1      		ldi r22,lo8(28)
 6873 1f88 70E0      		ldi r23,hi8(28)
 6874 1f8a 0E94 0000 		call effect_pathmove
 6875 1f8e 0150      		subi r16,lo8(-(-1))
 6876 1f90 1040      		sbci r17,hi8(-(-1))
1345:effect.c      **** 		for (ii = 0; ii < 20; ii++)
 6877               		.loc 1 1345 0 discriminator 2
 6878 1f92 01F4      		brne .L359
1325:effect.c      **** 	for (i=0; i < iterations; i++)
 6879               		.loc 1 1325 0
 6880 1f94 0894      		sec
 6881 1f96 A11C      		adc r10,__zero_reg__
 6882 1f98 B11C      		adc r11,__zero_reg__
 6883               	.LVL537:
 6884               	.L354:
1325:effect.c      **** 	for (i=0; i < iterations; i++)
 6885               		.loc 1 1325 0 is_stmt 0 discriminator 1
 6886 1f9a A614      		cp r10,r6
 6887 1f9c B704      		cpc r11,r7
 6888 1f9e 04F0      		brlt .L362
1325:effect.c      **** 	for (i=0; i < iterations; i++)
 6889               		.loc 1 1325 0
 6890 1fa0 0AE0      		ldi r16,lo8(10)
 6891 1fa2 10E0      		ldi r17,hi8(10)
 6892               	.L361:
1349:effect.c      **** 		}
1350:effect.c      **** 	}
1351:effect.c      **** 	for (ii = 0; ii < 10; ii++)
1352:effect.c      **** 	{
1353:effect.c      **** 		delay_ms(delay);
 6893               		.loc 1 1353 0 is_stmt 1 discriminator 2
 6894 1fa4 C601      		movw r24,r12
 6895 1fa6 0E94 0000 		call delay_ms
1354:effect.c      **** 		effect_pathmove(path, 28);
 6896               		.loc 1 1354 0 discriminator 2
 6897 1faa CE01      		movw r24,r28
 6898 1fac 0196      		adiw r24,1
 6899 1fae 6CE1      		ldi r22,lo8(28)
 6900 1fb0 70E0      		ldi r23,hi8(28)
 6901 1fb2 0E94 0000 		call effect_pathmove
 6902 1fb6 0150      		subi r16,lo8(-(-1))
 6903 1fb8 1040      		sbci r17,hi8(-(-1))
1351:effect.c      **** 	for (ii = 0; ii < 10; ii++)
 6904               		.loc 1 1351 0 discriminator 2
 6905 1fba 01F4      		brne .L361
 6906               	/* epilogue start */
1355:effect.c      **** 	}
1356:effect.c      **** }...
 6907               		.loc 1 1356 0
 6908 1fbc 6C96      		adiw r28,28
 6909 1fbe 0FB6      		in __tmp_reg__,__SREG__
 6910 1fc0 F894      		cli
 6911 1fc2 DEBF      		out __SP_H__,r29
 6912 1fc4 0FBE      		out __SREG__,__tmp_reg__
 6913 1fc6 CDBF      		out __SP_L__,r28
 6914 1fc8 DF91      		pop r29
 6915 1fca CF91      		pop r28
 6916 1fcc 1F91      		pop r17
 6917 1fce 0F91      		pop r16
 6918 1fd0 FF90      		pop r15
 6919 1fd2 EF90      		pop r14
 6920 1fd4 DF90      		pop r13
 6921 1fd6 CF90      		pop r12
 6922               	.LVL538:
 6923 1fd8 BF90      		pop r11
 6924 1fda AF90      		pop r10
 6925               	.LVL539:
 6926 1fdc 9F90      		pop r9
 6927               	.LVL540:
 6928 1fde 7F90      		pop r7
 6929 1fe0 6F90      		pop r6
 6930               	.LVL541:
 6931 1fe2 0895      		ret
 6932               		.cfi_endproc
 6933               	.LFE31:
 6935               		.comm fb,64,1
 6936               		.comm cube,64,1
 6937               	.Letext0:
 6938               		.file 2 "/usr/local/CrossPack-AVR-20130212/lib/gcc/avr/4.6.2/../../../../avr/include/stdint.h"
 6939               		.file 3 "cube.h"
DEFINED SYMBOLS
                            *ABS*:00000000 effect.c
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:2      *ABS*:0000003f __SREG__
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:3      *ABS*:0000003e __SP_H__
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4      *ABS*:0000003d __SP_L__
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:5      *ABS*:00000034 __CCP__
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:7      *ABS*:00000001 __zero_reg__
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:15     .text:00000000 effect_test
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:157    .text:000000c0 effect_stringfly2
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:421    .text:000001f2 effect_planboing
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:497    .text:00000244 effect_blinky2
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:667    .text:0000031a effect_box_shrink_grow
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:925    .text:00000434 effect_box_woopwoop
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:1063   .text:000004b6 sendvoxel_z
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:1219   .text:00000556 sendplane_rand_z
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:1346   .text:000005e0 sendvoxels_rand_z
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:1584   .text:000006ea boingboing
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:2685   .text:00000ca4 effect_random_filler
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:2904   .text:00000d94 effect_rain
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:3074   .text:00000e42 draw_positions_axis
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:3274   .text:00000f0e effect_axis_updown_randsuspend
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:3568   .text:00001068 effect_z_updown_move
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:3644   .text:000010b4 effect_z_updown
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:3920   .text:00001212 effect_boxside_randsend_parallel
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4238   .text:0000137e effect_loadbar
                            *COM*:00000040 cube
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4390   .text:0000141c effect_random_sparkle_flash
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4558   .text:000014cc effect_random_sparkle
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4616   .text:00001502 effect_telcstairs_do
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4692   .text:0000154c effect_telcstairs
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:4771   .text:0000158e effect_wormsqueeze
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:5172   .text:0000174e effect_smileyspin
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:5912   .text:00001b4c effect_pathmove
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:6064   .text:00001bf8 effect_rand_patharound
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:6267   .text:00001cd0 effect_pathspiral
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:6425   .text:00001d7c effect_path_text
/var/folders/_t/3n28601j4f36k4h8t71c5mvr0000gn/T//ccjKdFpt.s:6711   .text:00001ed8 effect_path_bitmap
                            *COM*:00000040 fb

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__floatsisf
sin
__addsf3
__fixsfsi
cos
setvoxel
delay_ms
fill
GetChar
font_getchar
shift
setplane
__divmodhi4
box_wireframe
mirror_z
mirror_y
mirror_x
clrvoxel
setplane_z
rand
getvoxel
flpvoxel
altervoxel
debug_blink
font_getbitmappixel
font_getpath
